
trdb_d5m_demo.elf:     file format elf32-littlenios2
trdb_d5m_demo.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00016a18 memsz 0x00016a18 flags r-x
    LOAD off    0x00017a38 vaddr 0x04016a38 paddr 0x04018610 align 2**12
         filesz 0x00001bd8 memsz 0x00001bd8 flags rw-
    LOAD off    0x0001a1e8 vaddr 0x0401a1e8 paddr 0x0401a1e8 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016178  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000690  040163a8  040163a8  000173a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bd8  04016a38  04018610  00017a38  2**4
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  0401a1e8  0401a1e8  0001a1e8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  0401a348  0401a348  00019610  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00019610  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010a8  00000000  00000000  00019638  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002b1a0  00000000  00000000  0001a6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a6ad  00000000  00000000  00045880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d7c3  00000000  00000000  0004ff2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003bf4  00000000  00000000  0005d6f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000561d  00000000  00000000  000612e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017b69  00000000  00000000  00066901  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0007e46c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001940  00000000  00000000  0007e4b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00084c9e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00084ca1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00084cad  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00084cae  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00084caf  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00084cba  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00084cc5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  00084cd0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000004b  00000000  00000000  00084cd6  2**0
                  CONTENTS, READONLY
 26 .jdi          00005061  00000000  00000000  00084d21  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0009400d  00000000  00000000  00089d82  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
040163a8 l    d  .rodata	00000000 .rodata
04016a38 l    d  .rwdata	00000000 .rwdata
0401a1e8 l    d  .bss	00000000 .bss
0401a348 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../trdb_d5m_demo_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 cmos_sensor_acquisition.c
00000000 l    df *ABS*	00000000 cmos_sensor_input.c
0400060c l     F .text	00000054 log2_of_pow_2
040163a8 l     O .rodata	00000080 MultiplyDeBruijnBitPosition2.1702
04000660 l     F .text	00000040 mask_ofst
040006a0 l     F .text	00000044 ceil_div
040006e4 l     F .text	0000005c read_config_reg_irq_flag
04000740 l     F .text	0000005c read_config_reg_debayer_pattern_flag
0400079c l     F .text	000000b0 write_config_reg_irq_flag
0400084c l     F .text	00000120 write_config_reg_debayer_pattern_flag
0400096c l     F .text	00000038 write_command_reg_get_frame_info
040009a4 l     F .text	00000038 write_command_reg_snapshot
040009dc l     F .text	00000038 write_command_reg_irq_ack
04000a14 l     F .text	00000038 write_command_reg_stop_and_reset
04000a4c l     F .text	00000060 read_status_reg_state_flag
04000aac l     F .text	00000060 read_status_reg_fifo_ovfl_flag
04000b0c l     F .text	00000060 read_status_reg_fifo_fill_level_flag
04000b6c l     F .text	00000060 read_frame_info_reg_frame_width_flag
04000bcc l     F .text	00000060 read_frame_info_reg_frame_height_flag
00000000 l    df *ABS*	00000000 demo.c
04001270 l     F .text	00000154 TRDB_D5M_log2
040013c4 l     F .text	0000004c TRDB_D5M_shift_amount
04001410 l     F .text	00000060 TRDB_D5M_READ
04001470 l     F .text	0000007c TRDB_D5M_WRITE
00000000 l    df *ABS*	00000000 i2c.c
04001a94 l     F .text	00000034 i2c_usleep
04001ac8 l     F .text	00000044 wait_end_of_transfer
04001b0c l     F .text	00000070 set_data_control
04001b7c l     F .text	00000064 get_data_set_control
00000000 l    df *ABS*	00000000 msgdma.c
040022a0 l     F .text	00000098 write_standard_descriptor
04002dbc l     F .text	00000034 read_descriptor_buffer_full
04002338 l     F .text	00000130 write_extended_descriptor
04002468 l     F .text	000000cc irq
04002534 l     F .text	0000008c construct_standard_descriptor
040025c0 l     F .text	00000154 construct_extended_descriptor
04002714 l     F .text	00000224 descriptor_async_transfer
04002c70 l     F .text	0000002c read_csr_read_descriptor_buffer_fill_level
04002c9c l     F .text	00000030 read_csr_write_descriptor_buffer_fill_level
040032b8 l     F .text	00000034 msgdma_usleep
04002938 l     F .text	000002e4 descriptor_sync_transfer
04002c1c l     F .text	00000028 read_csr_status
04002c44 l     F .text	0000002c read_csr_control
04002ccc l     F .text	0000002c read_csr_response_buffer_fill_level
04002cf8 l     F .text	0000002c read_csr_read_sequence_number
04002d24 l     F .text	00000030 read_csr_write_sequence_number
04002d54 l     F .text	00000034 read_busy
04002d88 l     F .text	00000034 read_descriptor_buffer_empty
04002df0 l     F .text	00000034 read_response_buffer_empty
04002e24 l     F .text	00000034 read_response_buffer_full
04002e58 l     F .text	00000034 read_stopped
04002e8c l     F .text	00000034 read_resetting
04002ec0 l     F .text	00000034 read_stopped_on_error
04002ef4 l     F .text	00000034 read_stopped_on_early_termination
04002f28 l     F .text	00000034 read_irq
04002f5c l     F .text	00000030 clear_irq
04002f8c l     F .text	00000048 stop_dispatcher
04002fd4 l     F .text	00000050 start_dispatcher
04003024 l     F .text	00000034 reset_dispatcher
04003058 l     F .text	00000048 enable_stop_on_error
040030a0 l     F .text	00000050 disable_stop_on_error
040030f0 l     F .text	00000048 enable_stop_on_early_termination
04003138 l     F .text	00000050 disable_stop_on_early_termination
04003188 l     F .text	00000048 enable_global_interrupt_mask
040031d0 l     F .text	00000050 disable_global_interrupt_mask
04003220 l     F .text	00000048 stop_descriptors
04003268 l     F .text	00000050 start_descriptors
00000000 l    df *ABS*	00000000 trdb_d5m.c
04003a20 l     F .text	00000154 TRDB_D5M_log2
04003b74 l     F .text	0000004c TRDB_D5M_shift_amount
04003bc0 l     F .text	00000060 TRDB_D5M_READ
04003c20 l     F .text	0000007c TRDB_D5M_WRITE
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
04016a38 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0401653a l     O .rodata	00000010 zeroes.4404
040075d0 l     F .text	000000bc __sbprintf
0401654a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
040077e0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04009338 l     F .text	00000008 __fp_unlock
0400934c l     F .text	0000019c __sinit.part.1
040094e8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
04017284 l     O .rwdata	00000020 lc_ctype_charset
04017264 l     O .rwdata	00000020 lc_message_charset
040172a4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
04016578 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0400c054 l     F .text	000000fc __sprint_r.part.0
0401669c l     O .rodata	00000010 zeroes.4349
0400d690 l     F .text	000000bc __sbprintf
040166ac l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
04011420 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04011534 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04011560 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
04011654 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0401173c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04011828 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
04011a04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
040185b0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04011ca8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04011de4 l     F .text	00000034 alt_dev_reg
04017490 l     O .rwdata	00001060 jtag_uart_0
040184f0 l     O .rwdata	00000028 altera_hostfs
04018520 l     O .rwdata	00000060 trdb_d5m_0_cmos_sensor_acquisition_0_msgdma_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
040120f4 l     F .text	0000020c altera_avalon_jtag_uart_irq
04012300 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
040185b4 l     O .rwdata	00000009 hcinfo.2538
040185c0 l     O .rwdata	0000000a hcinfo.2551
040185cc l     O .rwdata	00000009 hcinfo.2560
040185d8 l     O .rwdata	0000000a hcinfo.2573
040185e4 l     O .rwdata	0000000a hcinfo.2586
040185f0 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 altera_msgdma.c
04012dbc l     F .text	0000003c alt_get_errno
04012df8 l     F .text	00000094 alt_msgdma_write_standard_descriptor
04012e8c l     F .text	0000012c alt_msgdma_write_extended_descriptor
04012fb8 l     F .text	00000184 alt_msgdma_irq
0401313c l     F .text	0000008c alt_msgdma_construct_standard_descriptor
040131c8 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
0401331c l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
040135ec l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
04013c34 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
04013cd8 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04015028 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04015598 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
040156f8 l     F .text	0000003c alt_get_errno
04015734 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0401a21c g     O .bss	00000004 alt_instruction_exception_handler
04000f2c g     F .text	00000034 cmos_sensor_input_command_irq_ack
04014c6c g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
04005100 g     F .text	00000018 putchar
0400b584 g     F .text	00000074 _mprec_log10
0400b670 g     F .text	0000008c __any_on
0400dcc0 g     F .text	00000054 _isatty_r
04016584 g     O .rodata	00000028 __mprec_tinytens
04011940 g     F .text	0000007c alt_main
04005118 g     F .text	000000c0 _puts_r
0401a248 g     O .bss	00000100 alt_irq
0400dd14 g     F .text	00000060 _lseek_r
04018610 g       *ABS*	00000000 __flash_rwdata_start
0400fdf8 g     F .text	00000088 .hidden __eqdf2
04013a14 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
0401a348 g       *ABS*	00000000 __alt_heap_start
040050bc g     F .text	0000003c printf
0400ddd4 g     F .text	0000009c _wcrtomb_r
04000f60 g     F .text	00000034 cmos_sensor_input_command_stop_and_reset
0400bf14 g     F .text	0000005c __sseek
04009698 g     F .text	00000010 __sinit
0400d74c g     F .text	00000140 __swbuf_r
0400a16c g     F .text	0000007c _setlocale_r
040094f0 g     F .text	00000078 __sfmoreglue
040119e0 g     F .text	00000024 __malloc_unlock
04012938 g     F .text	0000011c alt_hostfs_open
0400430c g     F .text	00000034 trdb_d5m_frame_height
0400a4e8 g     F .text	0000015c memmove
04000ef0 g     F .text	0000003c cmos_sensor_input_command_snapshot_async
04009680 g     F .text	00000018 _cleanup
0400a644 g     F .text	000000a8 _Balloc
040032ec g     F .text	00000120 msgdma_csr_descriptor_response_inst
04013964 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
0400fe80 g     F .text	000000dc .hidden __gtdf2
04015d88 g     F .text	00000024 altera_nios2_gen2_irq_init
04001cf0 g     F .text	0000012c i2c_write
04000000 g     F .entry	0000000c __reset
0400108c g     F .text	0000005c cmos_sensor_input_wait_until_idle
04000020 g       *ABS*	00000000 __flash_exceptions_start
0400dc64 g     F .text	0000005c _fstat_r
0401a1f4 g     O .bss	00000004 errno
0400be90 g     F .text	00000008 __seofread
040039a0 g     F .text	0000003c msgdma_extended_descriptor_sync_transfer
0400361c g     F .text	00000058 msgdma_construct_standard_mm_to_mm_descriptor
0401a208 g     O .bss	00000004 alt_argv
04020580 g       *ABS*	00000000 _gp
04011c78 g     F .text	00000030 usleep
040144f8 g     F .text	00000144 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
04017304 g     O .rwdata	00000180 alt_fd_list
04012b70 g     F .text	00000068 alt_hostfs_seek
04000d30 g     F .text	0000005c cmos_sensor_input_configure
040050f8 g     F .text	00000008 _putchar_r
040151c8 g     F .text	00000090 alt_find_dev
04004e1c g     F .text	00000148 memcpy
040037cc g     F .text	00000090 msgdma_construct_extended_mm_to_st_descriptor
040039dc g     F .text	00000044 msgdma_wait_until_idle
04009340 g     F .text	0000000c _cleanup_r
04011238 g     F .text	000000dc .hidden __floatsidf
04001f64 g     F .text	00000194 i2c_write_array
04015258 g     F .text	00000080 alt_fs_reg
0401567c g     F .text	0000007c alt_io_redirect
0400ff5c g     F .text	000000f4 .hidden __ltdf2
040163a8 g       *ABS*	00000000 __DTOR_END__
040149a8 g     F .text	000000ac alt_msgdma_start_prefetcher_with_extd_desc_list
04000540 g     F .text	000000cc cmos_sensor_acquisition_snapshot
04014ca8 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
04014c18 g     F .text	00000054 alt_msgdma_register_callback
040051d8 g     F .text	00000014 puts
04015f78 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0400bdc8 g     F .text	00000074 __fpclassifyd
0400b4e0 g     F .text	000000a4 __ratio
0400d674 g     F .text	0000001c __vfiprintf_internal
040124f8 g     F .text	0000021c altera_avalon_jtag_uart_read
04014164 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
0400508c g     F .text	00000030 _printf_r
04004438 g     F .text	00000064 .hidden __udivsi3
04011690 g     F .text	000000ac isatty
040165d4 g     O .rodata	000000c8 __mprec_tens
04000fc8 g     F .text	00000034 cmos_sensor_input_status_fifo_ovfl
0400a1e8 g     F .text	0000000c __locale_charset
0401a1f0 g     O .bss	00000004 __malloc_top_pad
04018590 g     O .rwdata	00000004 __mb_cur_max
0400a218 g     F .text	0000000c _localeconv_r
0400aa78 g     F .text	0000003c __i2b
04009b1c g     F .text	000004c8 __sfvwrite_r
040051ec g     F .text	00000054 _sbrk_r
04012a98 g     F .text	0000006c alt_hostfs_read
04000e30 g     F .text	00000044 cmos_sensor_input_command_get_frame_info_sync
0400dd74 g     F .text	00000060 _read_r
04014fe0 g     F .text	00000028 alt_dcache_flush
040185a8 g     O .rwdata	00000004 alt_max_fd
0400d958 g     F .text	000000f0 _fclose_r
04009308 g     F .text	00000030 fflush
0401a1ec g     O .bss	00000004 __malloc_max_sbrked_mem
0400eb7c g     F .text	000008ac .hidden __adddf3
0400b288 g     F .text	0000010c __b2d
04013ec4 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
0400e5b8 g     F .text	000005c4 .hidden __umoddi3
04011864 g     F .text	000000dc lseek
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
04018580 g     O .rwdata	00000004 _global_impure_ptr
0400b864 g     F .text	00000564 _realloc_r
0401a348 g       *ABS*	00000000 __bss_end
040154a8 g     F .text	000000f0 alt_iic_isr_register
04015c80 g     F .text	00000108 alt_tick
04014aac g     F .text	0000016c alt_msgdma_init
0400dfbc g     F .text	000005fc .hidden __udivdi3
0400dbc0 g     F .text	00000024 _fputwc_r
040165ac g     O .rodata	00000028 __mprec_bigtens
0400a85c g     F .text	00000104 __s2b
04011314 g     F .text	000000a8 .hidden __floatunsidf
0400afc8 g     F .text	00000060 __mcmp
04014d20 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
040096b8 g     F .text	00000018 __fp_lock_all
0401545c g     F .text	0000004c alt_ic_irq_enabled
04015be4 g     F .text	0000009c alt_alarm_stop
0401a210 g     O .bss	00000004 alt_irq_active
04012a54 g     F .text	00000044 alt_hostfs_close
040000fc g     F .exceptions	000000d4 alt_irq_handler
040172dc g     O .rwdata	00000028 alt_dev_null
04013afc g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
04003e18 g     F .text	000002c0 trdb_d5m_configure
040040d8 g     F .text	00000050 trdb_d5m_init
040148fc g     F .text	000000ac alt_msgdma_start_prefetcher_with_std_desc_list
04015008 g     F .text	00000020 alt_dcache_flush_all
0400a960 g     F .text	00000068 __hi0bits
040111b8 g     F .text	00000080 .hidden __fixdfsi
0400451c g     F .text	00000018 calloc
04018610 g       *ABS*	00000000 __ram_rwdata_end
040185a0 g     O .rwdata	00000008 alt_dev_list
04011ce4 g     F .text	00000100 write
0400b6fc g     F .text	000000a0 _putc_r
04003928 g     F .text	0000003c msgdma_standard_descriptor_sync_transfer
04016a38 g       *ABS*	00000000 __ram_rodata_end
0401159c g     F .text	000000b8 fstat
04001be0 g     F .text	0000002c i2c_inst
0400ff5c g     F .text	000000f4 .hidden __ledf2
0400ad40 g     F .text	00000140 __pow5mult
0400c168 g     F .text	0000150c ___vfiprintf_internal_r
0401a200 g     O .bss	00000004 __nlocale_changed
0400449c g     F .text	00000058 .hidden __umodsi3
04013f1c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
0401a348 g       *ABS*	00000000 end
04012034 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
040163a8 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
040113bc g     F .text	00000064 .hidden __clzsi2
04012714 g     F .text	00000224 altera_avalon_jtag_uart_write
0400105c g     F .text	00000030 cmos_sensor_input_frame_info_frame_height
040096a8 g     F .text	00000004 __sfp_lock_acquire
0400a404 g     F .text	000000e4 memchr
040052d8 g     F .text	000022dc ___vfprintf_internal_r
0400980c g     F .text	00000310 _free_r
0401597c g     F .text	0000022c alt_printf
0400a1f4 g     F .text	00000010 __locale_mb_cur_max
0400340c g     F .text	00000114 msgdma_csr_descriptor_inst
04003724 g     F .text	000000a8 msgdma_construct_extended_mm_to_mm_descriptor
040161f4 g     F .text	00000180 __call_exitprocs
040014ec g     F .text	000000bc max_pixel_value
0401a1fc g     O .bss	00000004 __mlocale_changed
04018588 g     O .rwdata	00000004 __malloc_sbrk_base
04000f94 g     F .text	00000034 cmos_sensor_input_status_idle
04000230 g     F .text	0000003c _start
0401a214 g     O .bss	00000004 _alt_tick_rate
040015a8 g     F .text	000002d8 write_ppm
0400ae80 g     F .text	00000148 __lshift
0401a218 g     O .bss	00000004 _alt_nticks
040139bc g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
04011a40 g     F .text	00000104 read
04011e50 g     F .text	00000080 alt_sys_init
04000cec g     F .text	00000044 cmos_sensor_input_init
04001c70 g     F .text	00000080 i2c_configure
040160dc g     F .text	00000118 __register_exitproc
0400aab4 g     F .text	0000028c __multiply
040123a0 g     F .text	00000068 altera_avalon_jtag_uart_close
040044f4 g     F .text	00000028 .hidden __mulsi3
04016a38 g       *ABS*	00000000 __ram_rwdata_start
040163a8 g       *ABS*	00000000 __ram_rodata_start
0401a220 g     O .bss	00000028 __malloc_current_mallinfo
0400b394 g     F .text	0000014c __d2b
04011ed0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04015eb4 g     F .text	000000c4 alt_get_fd
04014e88 g     F .text	00000158 alt_busy_sleep
0400d904 g     F .text	00000054 _close_r
04003c9c g     F .text	0000017c trdb_d5m_inst
04013e6c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
04016060 g     F .text	0000007c memcmp
04011f90 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0401a348 g       *ABS*	00000000 __alt_stack_base
04011fe0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04013f74 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
0400768c g     F .text	00000154 __swsetup_r
0400f428 g     F .text	000009d0 .hidden __divdf3
04009568 g     F .text	00000118 __sfp
0400b5f8 g     F .text	00000078 __copybits
040004d8 g     F .text	00000034 cmos_sensor_acquisition_frame_width
04016e5c g     O .rwdata	00000408 __malloc_av_
040096b4 g     F .text	00000004 __sinit_lock_release
04010050 g     F .text	0000086c .hidden __muldf3
0400be3c g     F .text	00000054 __sread
04015dac g     F .text	00000108 alt_find_file
04015064 g     F .text	000000a4 alt_dev_llist_insert
04004128 g     F .text	00000090 trdb_d5m_write
040119bc g     F .text	00000024 __malloc_lock
04011bc8 g     F .text	000000b0 sbrk
04003520 g     F .text	000000a8 msgdma_init
040092ac g     F .text	0000005c _fflush_r
04004534 g     F .text	000000dc _calloc_r
0401a1e8 g       *ABS*	00000000 __bss_start
04004f64 g     F .text	00000128 memset
04014a54 g     F .text	00000058 alt_msgdma_open
04001880 g     F .text	00000214 main
0401a20c g     O .bss	00000004 alt_envp
0401a1e8 g     O .bss	00000004 __malloc_max_total_mem
04014254 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
04011f30 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04001e1c g     F .text	00000148 i2c_read
0400d88c g     F .text	00000018 __swbuf
0400050c g     F .text	00000034 cmos_sensor_acquisition_frame_height
0400bf70 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0400da48 g     F .text	00000014 fclose
04007a08 g     F .text	00001688 _dtoa_r
0401463c g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
04004610 g     F .text	0000080c _malloc_r
0400df30 g     F .text	00000030 __ascii_wctomb
040185ac g     O .rwdata	00000004 alt_errno
04000458 g     F .text	0000004c cmos_sensor_acquisition_configure
040140ac g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
04009fe4 g     F .text	000000c4 _fwalk
040038ec g     F .text	0000003c msgdma_standard_descriptor_async_transfer
0400b79c g     F .text	000000c8 putc
04004340 g     F .text	00000084 .hidden __divsi3
040096e8 g     F .text	00000124 _malloc_trim_r
040163a8 g       *ABS*	00000000 __CTOR_END__
0400bf78 g     F .text	000000dc strcmp
040163a8 g       *ABS*	00000000 __flash_rodata_start
040163a8 g       *ABS*	00000000 __DTOR_LIST__
04000eb0 g     F .text	00000040 cmos_sensor_input_command_snapshot_sync
0400fdf8 g     F .text	00000088 .hidden __nedf2
04011e18 g     F .text	00000038 alt_irq_init
04011b44 g     F .text	00000084 alt_release_fd
04014ce4 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
040166bc g     O .rodata	00000100 .hidden __clz_tab
040036cc g     F .text	00000058 msgdma_construct_standard_st_to_mm_descriptor
0401a1f8 g     O .bss	00000004 _PathLocale
04016014 g     F .text	00000014 atexit
0400d8a4 g     F .text	00000060 _write_r
0400a224 g     F .text	00000018 setlocale
04014014 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
040042d8 g     F .text	00000034 trdb_d5m_frame_width
04018584 g     O .rwdata	00000004 _impure_ptr
0401a204 g     O .bss	00000004 alt_argc
04009090 g     F .text	0000021c __sflush_r
04015168 g     F .text	00000060 _do_dtors
0400a210 g     F .text	00000008 __locale_cjk_lang
04001c0c g     F .text	00000064 i2c_init
04000020 g       .exceptions	00000000 alt_irq_entry
0400026c g     F .text	000001a4 cmos_sensor_acquisition_inst
0400b224 g     F .text	00000064 __ulp
040096d0 g     F .text	00000018 __fp_unlock_all
04003674 g     F .text	00000058 msgdma_construct_standard_mm_to_st_descriptor
04018598 g     O .rwdata	00000008 alt_fs_list
040042a4 g     F .text	00000034 trdb_d5m_frame_size
04012b04 g     F .text	0000006c alt_hostfs_write
0400102c g     F .text	00000030 cmos_sensor_input_frame_info_frame_width
04000020 g       *ABS*	00000000 __ram_exceptions_start
0400a23c g     F .text	0000000c localeconv
04000410 g     F .text	00000048 cmos_sensor_acquisition_init
040152f8 g     F .text	00000050 alt_ic_isr_register
040004a4 g     F .text	00000034 cmos_sensor_acquisition_frame_size
04004260 g     F .text	00000044 trdb_d5m_snapshot
04018610 g       *ABS*	00000000 _edata
0401a348 g       *ABS*	00000000 _end
0400da5c g     F .text	00000164 __fputwc
04000e74 g     F .text	0000003c cmos_sensor_input_command_get_frame_info_async
04000230 g       *ABS*	00000000 __ram_exceptions_end
04012408 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
040041b8 g     F .text	000000a8 trdb_d5m_read
040153d0 g     F .text	0000008c alt_ic_irq_disable
04000dc0 g     F .text	00000070 cmos_sensor_input_config_debayer_pattern
0400be98 g     F .text	0000007c __swrite
0401858c g     O .rwdata	00000004 __malloc_trim_threshold
0400a204 g     F .text	0000000c __locale_msgcharset
04016028 g     F .text	00000038 exit
0400a0a8 g     F .text	000000c4 _fwalk_reent
040143ec g     F .text	0000010c alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
0400b028 g     F .text	000001fc __mdiff
040043c4 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
040096ac g     F .text	00000004 __sfp_lock_release
04013b8c g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
04000ffc g     F .text	00000030 cmos_sensor_input_status_fifo_fill_level
04013a6c g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
0400385c g     F .text	00000090 msgdma_construct_extended_st_to_mm_descriptor
04016374 g     F .text	00000034 _exit
04014d5c g     F .text	0000012c alt_alarm_start
0400a248 g     F .text	000001bc __smakebuf_r
040020f8 g     F .text	000001a8 i2c_read_array
040185fc g     O .rwdata	00000008 alt_msgdma_list
04005240 g     F .text	00000098 strlen
040010e8 g     F .text	00000188 cmos_sensor_input_frame_size
04015820 g     F .text	0000015c open
0400fe80 g     F .text	000000dc .hidden __gedf2
04015ba8 g     F .text	0000003c alt_putchar
04018594 g     O .rwdata	00000004 __wctomb
0400c150 g     F .text	00000018 __sprint_r
040152d8 g     F .text	00000020 alt_icache_flush_all
04018604 g     O .rwdata	00000004 alt_priority_mask
04015348 g     F .text	00000088 alt_ic_irq_enable
040075b4 g     F .text	0000001c __vfprintf_internal
0400df60 g     F .text	0000005c _wctomb_r
04003964 g     F .text	0000003c msgdma_extended_descriptor_async_transfer
040108bc g     F .text	000008fc .hidden __subdf3
040035c8 g     F .text	00000054 msgdma_register_callback
0400a9c8 g     F .text	000000b0 __lo0bits
04000d8c g     F .text	00000034 cmos_sensor_input_config_irq_enabled
04018608 g     O .rwdata	00000008 alt_alarm_list
04015108 g     F .text	00000060 _do_ctors
04000c2c g     F .text	000000c0 cmos_sensor_input_inst
0400de70 g     F .text	000000c0 wcrtomb
0401145c g     F .text	000000d8 close
040117a4 g     F .text	00000084 alt_load
0400dbe4 g     F .text	00000080 fputwc
040096b0 g     F .text	00000004 __sinit_lock_acquire
0400a714 g     F .text	00000148 __multadd
0400a6ec g     F .text	00000028 _Bfree
04012bd8 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100b4 	movhi	r2,1026
 4000140:	10a89204 	addi	r2,r2,-23992
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100b4 	movhi	r2,1026
 4000158:	10a89204 	addi	r2,r2,-23992
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0a72717 	ldw	r2,-25444(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0a72717 	ldw	r2,-25444(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	068100b4 	movhi	gp,1026
    ori gp, gp, %lo(_gp)
 400023c:	d6816014 	ori	gp,gp,1408
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000244:	10a87a14 	ori	r2,r2,41448

    movhi r3, %hi(__bss_end)
 4000248:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 400024c:	18e8d214 	ori	r3,r3,41800

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	40117a40 	call	40117a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	40119400 	call	4011940 <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_data_end+0xfc000268>

0400026c <cmos_sensor_acquisition_inst>:
                                                         uint32_t msgdma_csr_max_byte,
                                                         uint64_t msgdma_csr_max_stride,
                                                         uint8_t  msgdma_csr_programmable_burst_enable,
                                                         uint8_t  msgdma_csr_stride_enable,
                                                         uint8_t  msgdma_csr_enhanced_features,
                                                         uint8_t  msgdma_csr_response_port) {
 400026c:	deffb804 	addi	sp,sp,-288
 4000270:	dfc04715 	stw	ra,284(sp)
 4000274:	df004615 	stw	fp,280(sp)
 4000278:	df004604 	addi	fp,sp,280
 400027c:	e13ff415 	stw	r4,-48(fp)
 4000280:	e17ff515 	stw	r5,-44(fp)
 4000284:	3015883a 	mov	r10,r6
 4000288:	e1fff715 	stw	r7,-36(fp)
 400028c:	e2400517 	ldw	r9,20(fp)
 4000290:	e2000617 	ldw	r8,24(fp)
 4000294:	e1c00a17 	ldw	r7,40(fp)
 4000298:	e1800b17 	ldw	r6,44(fp)
 400029c:	e1401217 	ldw	r5,72(fp)
 40002a0:	e1001317 	ldw	r4,76(fp)
 40002a4:	e0c01417 	ldw	r3,80(fp)
 40002a8:	e0801517 	ldw	r2,84(fp)
 40002ac:	e2bff605 	stb	r10,-40(fp)
 40002b0:	e27ff805 	stb	r9,-32(fp)
 40002b4:	e23ff905 	stb	r8,-28(fp)
 40002b8:	e1fffa05 	stb	r7,-24(fp)
 40002bc:	e1bffb05 	stb	r6,-20(fp)
 40002c0:	e17ffc05 	stb	r5,-16(fp)
 40002c4:	e13ffd05 	stb	r4,-12(fp)
 40002c8:	e0fffe05 	stb	r3,-8(fp)
 40002cc:	e0bfff05 	stb	r2,-4(fp)

    cmos_sensor_input_dev cmos_sensor_input = cmos_sensor_input_inst(cmos_sensor_input_base,
 40002d0:	e13ff603 	ldbu	r4,-40(fp)
 40002d4:	e0bff803 	ldbu	r2,-32(fp)
 40002d8:	e0fff903 	ldbu	r3,-28(fp)
 40002dc:	d8c00415 	stw	r3,16(sp)
 40002e0:	d8800315 	stw	r2,12(sp)
 40002e4:	e0800417 	ldw	r2,16(fp)
 40002e8:	d8800215 	stw	r2,8(sp)
 40002ec:	e0800317 	ldw	r2,12(fp)
 40002f0:	d8800115 	stw	r2,4(sp)
 40002f4:	e0800217 	ldw	r2,8(fp)
 40002f8:	d8800015 	stw	r2,0(sp)
 40002fc:	e1fff717 	ldw	r7,-36(fp)
 4000300:	200d883a 	mov	r6,r4
 4000304:	e17ff517 	ldw	r5,-44(fp)
 4000308:	e13fc604 	addi	r4,fp,-232
 400030c:	4000c2c0 	call	4000c2c <cmos_sensor_input_inst>
                                                                     cmos_sensor_input_output_width,
                                                                     cmos_sensor_input_fifo_depth,
                                                                     cmos_sensor_input_debayer_enable,
                                                                     cmos_sensor_input_pack_enable);

    msgdma_dev msgdma = msgdma_csr_descriptor_inst(msgdma_csr_base,
 4000310:	e0bffa03 	ldbu	r2,-24(fp)
 4000314:	e0fffb03 	ldbu	r3,-20(fp)
 4000318:	e13ffc03 	ldbu	r4,-16(fp)
 400031c:	e17ffd03 	ldbu	r5,-12(fp)
 4000320:	e1bffe03 	ldbu	r6,-8(fp)
 4000324:	e1ffff03 	ldbu	r7,-4(fp)
 4000328:	e23fcd04 	addi	r8,fp,-204
 400032c:	d9c00b15 	stw	r7,44(sp)
 4000330:	d9800a15 	stw	r6,40(sp)
 4000334:	d9400915 	stw	r5,36(sp)
 4000338:	d9000815 	stw	r4,32(sp)
 400033c:	e1001017 	ldw	r4,64(fp)
 4000340:	d9000615 	stw	r4,24(sp)
 4000344:	e1001117 	ldw	r4,68(fp)
 4000348:	d9000715 	stw	r4,28(sp)
 400034c:	e1000f17 	ldw	r4,60(fp)
 4000350:	d9000515 	stw	r4,20(sp)
 4000354:	e1000e17 	ldw	r4,56(fp)
 4000358:	d9000415 	stw	r4,16(sp)
 400035c:	e1000d17 	ldw	r4,52(fp)
 4000360:	d9000315 	stw	r4,12(sp)
 4000364:	e1000c17 	ldw	r4,48(fp)
 4000368:	d9000215 	stw	r4,8(sp)
 400036c:	d8c00115 	stw	r3,4(sp)
 4000370:	d8800015 	stw	r2,0(sp)
 4000374:	e1c00917 	ldw	r7,36(fp)
 4000378:	e1800817 	ldw	r6,32(fp)
 400037c:	e1400717 	ldw	r5,28(fp)
 4000380:	4009883a 	mov	r4,r8
 4000384:	400340c0 	call	400340c <msgdma_csr_descriptor_inst>
                                                   msgdma_csr_stride_enable,
                                                   msgdma_csr_enhanced_features,
                                                   msgdma_csr_response_port);

    cmos_sensor_acquisition_dev dev;
    dev.cmos_sensor_input = cmos_sensor_input;
 4000388:	e0bfc617 	ldw	r2,-232(fp)
 400038c:	e0bfdd15 	stw	r2,-140(fp)
 4000390:	e0bfc717 	ldw	r2,-228(fp)
 4000394:	e0bfde15 	stw	r2,-136(fp)
 4000398:	e0bfc817 	ldw	r2,-224(fp)
 400039c:	e0bfdf15 	stw	r2,-132(fp)
 40003a0:	e0bfc917 	ldw	r2,-220(fp)
 40003a4:	e0bfe015 	stw	r2,-128(fp)
 40003a8:	e0bfca17 	ldw	r2,-216(fp)
 40003ac:	e0bfe115 	stw	r2,-124(fp)
 40003b0:	e0bfcb17 	ldw	r2,-212(fp)
 40003b4:	e0bfe215 	stw	r2,-120(fp)
 40003b8:	e0bfcc17 	ldw	r2,-208(fp)
 40003bc:	e0bfe315 	stw	r2,-116(fp)
    dev.msgdma = msgdma;
 40003c0:	e0bfe404 	addi	r2,fp,-112
 40003c4:	e0ffcd04 	addi	r3,fp,-204
 40003c8:	01001004 	movi	r4,64
 40003cc:	200d883a 	mov	r6,r4
 40003d0:	180b883a 	mov	r5,r3
 40003d4:	1009883a 	mov	r4,r2
 40003d8:	4004e1c0 	call	4004e1c <memcpy>

    return dev;
 40003dc:	e0bff417 	ldw	r2,-48(fp)
 40003e0:	1009883a 	mov	r4,r2
 40003e4:	e0bfdd04 	addi	r2,fp,-140
 40003e8:	00c01704 	movi	r3,92
 40003ec:	180d883a 	mov	r6,r3
 40003f0:	100b883a 	mov	r5,r2
 40003f4:	4004e1c0 	call	4004e1c <memcpy>
}
 40003f8:	e0bff417 	ldw	r2,-48(fp)
 40003fc:	e037883a 	mov	sp,fp
 4000400:	dfc00117 	ldw	ra,4(sp)
 4000404:	df000017 	ldw	fp,0(sp)
 4000408:	dec00204 	addi	sp,sp,8
 400040c:	f800283a 	ret

04000410 <cmos_sensor_acquisition_init>:
 * the debayering unit (if enabled) to RGGB mode.
 * The Modular Scatter-Gather DMA core is configured to disable interrupts and
 * descriptor processing.
 *
 */
void cmos_sensor_acquisition_init(cmos_sensor_acquisition_dev *dev) {
 4000410:	defffd04 	addi	sp,sp,-12
 4000414:	dfc00215 	stw	ra,8(sp)
 4000418:	df000115 	stw	fp,4(sp)
 400041c:	df000104 	addi	fp,sp,4
 4000420:	e13fff15 	stw	r4,-4(fp)
    cmos_sensor_input_init(&dev->cmos_sensor_input);
 4000424:	e0bfff17 	ldw	r2,-4(fp)
 4000428:	1009883a 	mov	r4,r2
 400042c:	4000cec0 	call	4000cec <cmos_sensor_input_init>
    msgdma_init(&dev->msgdma);
 4000430:	e0bfff17 	ldw	r2,-4(fp)
 4000434:	10800704 	addi	r2,r2,28
 4000438:	1009883a 	mov	r4,r2
 400043c:	40035200 	call	4003520 <msgdma_init>
}
 4000440:	0001883a 	nop
 4000444:	e037883a 	mov	sp,fp
 4000448:	dfc00117 	ldw	ra,4(sp)
 400044c:	df000017 	ldw	fp,0(sp)
 4000450:	dec00204 	addi	sp,sp,8
 4000454:	f800283a 	ret

04000458 <cmos_sensor_acquisition_configure>:
 * generation, and sets the device debayering mode (if applicable) to RGGB mode.
 *
 * A GET_FRAME_INFO command is sent to analyze a current frame in order to
 * extract its width and height.
 */
void cmos_sensor_acquisition_configure(cmos_sensor_acquisition_dev *dev) {
 4000458:	defffd04 	addi	sp,sp,-12
 400045c:	dfc00215 	stw	ra,8(sp)
 4000460:	df000115 	stw	fp,4(sp)
 4000464:	df000104 	addi	fp,sp,4
 4000468:	e13fff15 	stw	r4,-4(fp)
    cmos_sensor_input_configure(&dev->cmos_sensor_input, false, RGGB);
 400046c:	e0bfff17 	ldw	r2,-4(fp)
 4000470:	000d883a 	mov	r6,zero
 4000474:	000b883a 	mov	r5,zero
 4000478:	1009883a 	mov	r4,r2
 400047c:	4000d300 	call	4000d30 <cmos_sensor_input_configure>
    cmos_sensor_input_command_get_frame_info_sync(&dev->cmos_sensor_input);
 4000480:	e0bfff17 	ldw	r2,-4(fp)
 4000484:	1009883a 	mov	r4,r2
 4000488:	4000e300 	call	4000e30 <cmos_sensor_input_command_get_frame_info_sync>
}
 400048c:	0001883a 	nop
 4000490:	e037883a 	mov	sp,fp
 4000494:	dfc00117 	ldw	ra,4(sp)
 4000498:	df000017 	ldw	fp,0(sp)
 400049c:	dec00204 	addi	sp,sp,8
 40004a0:	f800283a 	ret

040004a4 <cmos_sensor_acquisition_frame_size>:
 * cmos_sensor_acquisition_frame_size
 *
 * Returns the total size of a frame in bytes outputted by the cmos_sensor_input
 * unit in its current configuration.
 */
size_t cmos_sensor_acquisition_frame_size(cmos_sensor_acquisition_dev *dev) {
 40004a4:	defffd04 	addi	sp,sp,-12
 40004a8:	dfc00215 	stw	ra,8(sp)
 40004ac:	df000115 	stw	fp,4(sp)
 40004b0:	df000104 	addi	fp,sp,4
 40004b4:	e13fff15 	stw	r4,-4(fp)
    return cmos_sensor_input_frame_size(&dev->cmos_sensor_input);
 40004b8:	e0bfff17 	ldw	r2,-4(fp)
 40004bc:	1009883a 	mov	r4,r2
 40004c0:	40010e80 	call	40010e8 <cmos_sensor_input_frame_size>
}
 40004c4:	e037883a 	mov	sp,fp
 40004c8:	dfc00117 	ldw	ra,4(sp)
 40004cc:	df000017 	ldw	fp,0(sp)
 40004d0:	dec00204 	addi	sp,sp,8
 40004d4:	f800283a 	ret

040004d8 <cmos_sensor_acquisition_frame_width>:
 * cmos_sensor_acquisition_frame_width
 *
 * Returns the width of a frame in pixels (determined by the cmos_sensor_input
 * unit).
 */
uint32_t cmos_sensor_acquisition_frame_width(cmos_sensor_acquisition_dev *dev) {
 40004d8:	defffd04 	addi	sp,sp,-12
 40004dc:	dfc00215 	stw	ra,8(sp)
 40004e0:	df000115 	stw	fp,4(sp)
 40004e4:	df000104 	addi	fp,sp,4
 40004e8:	e13fff15 	stw	r4,-4(fp)
    return cmos_sensor_input_frame_info_frame_width(&dev->cmos_sensor_input);
 40004ec:	e0bfff17 	ldw	r2,-4(fp)
 40004f0:	1009883a 	mov	r4,r2
 40004f4:	400102c0 	call	400102c <cmos_sensor_input_frame_info_frame_width>
}
 40004f8:	e037883a 	mov	sp,fp
 40004fc:	dfc00117 	ldw	ra,4(sp)
 4000500:	df000017 	ldw	fp,0(sp)
 4000504:	dec00204 	addi	sp,sp,8
 4000508:	f800283a 	ret

0400050c <cmos_sensor_acquisition_frame_height>:
 * cmos_sensor_acquisition_frame_height
 *
 * Returns the height of a frame in pixels (determined by the cmos_sensor_input
 * unit).
 */
uint32_t cmos_sensor_acquisition_frame_height(cmos_sensor_acquisition_dev *dev) {
 400050c:	defffd04 	addi	sp,sp,-12
 4000510:	dfc00215 	stw	ra,8(sp)
 4000514:	df000115 	stw	fp,4(sp)
 4000518:	df000104 	addi	fp,sp,4
 400051c:	e13fff15 	stw	r4,-4(fp)
    return cmos_sensor_input_frame_info_frame_height(&dev->cmos_sensor_input);
 4000520:	e0bfff17 	ldw	r2,-4(fp)
 4000524:	1009883a 	mov	r4,r2
 4000528:	400105c0 	call	400105c <cmos_sensor_input_frame_info_frame_height>
}
 400052c:	e037883a 	mov	sp,fp
 4000530:	dfc00117 	ldw	ra,4(sp)
 4000534:	df000017 	ldw	fp,0(sp)
 4000538:	dec00204 	addi	sp,sp,8
 400053c:	f800283a 	ret

04000540 <cmos_sensor_acquisition_snapshot>:
 *
 * A frame is considered successfully saved if and only if the msgdma can handle
 * the required frame size in a single descriptor and if the FIFO in the
 * cmos_sensor_input did not overflow.
 */
bool cmos_sensor_acquisition_snapshot(cmos_sensor_acquisition_dev *dev, void *frame, size_t frame_size) {
 4000540:	defff904 	addi	sp,sp,-28
 4000544:	dfc00615 	stw	ra,24(sp)
 4000548:	df000515 	stw	fp,20(sp)
 400054c:	dc000415 	stw	r16,16(sp)
 4000550:	df000504 	addi	fp,sp,20
 4000554:	e13ffc15 	stw	r4,-16(fp)
 4000558:	e17ffd15 	stw	r5,-12(fp)
 400055c:	e1bffe15 	stw	r6,-8(fp)
 4000560:	defff804 	addi	sp,sp,-32
 4000564:	d8800104 	addi	r2,sp,4
 4000568:	108003c4 	addi	r2,r2,15
 400056c:	1004d13a 	srli	r2,r2,4
 4000570:	1020913a 	slli	r16,r2,4
    msgdma_standard_descriptor desc;
    if (msgdma_construct_standard_st_to_mm_descriptor(&dev->msgdma, &desc, frame, frame_size, 0)) {
 4000574:	e0bffc17 	ldw	r2,-16(fp)
 4000578:	10800704 	addi	r2,r2,28
 400057c:	d8000015 	stw	zero,0(sp)
 4000580:	e1fffe17 	ldw	r7,-8(fp)
 4000584:	e1bffd17 	ldw	r6,-12(fp)
 4000588:	800b883a 	mov	r5,r16
 400058c:	1009883a 	mov	r4,r2
 4000590:	40036cc0 	call	40036cc <msgdma_construct_standard_st_to_mm_descriptor>
 4000594:	10000226 	beq	r2,zero,40005a0 <cmos_sensor_acquisition_snapshot+0x60>
        return false;
 4000598:	0005883a 	mov	r2,zero
 400059c:	00001506 	br	40005f4 <cmos_sensor_acquisition_snapshot+0xb4>
    }

    /* send async dma transfer command to have the dma unit ready for data in
     * the fifo */
    if (msgdma_standard_descriptor_async_transfer(&dev->msgdma, &desc)) {
 40005a0:	e0bffc17 	ldw	r2,-16(fp)
 40005a4:	10800704 	addi	r2,r2,28
 40005a8:	800b883a 	mov	r5,r16
 40005ac:	1009883a 	mov	r4,r2
 40005b0:	40038ec0 	call	40038ec <msgdma_standard_descriptor_async_transfer>
 40005b4:	10000226 	beq	r2,zero,40005c0 <cmos_sensor_acquisition_snapshot+0x80>
        return false;
 40005b8:	0005883a 	mov	r2,zero
 40005bc:	00000d06 	br	40005f4 <cmos_sensor_acquisition_snapshot+0xb4>
    }

    /* start cmos_sensor_input capture logic */
    if (!cmos_sensor_input_command_snapshot_sync(&dev->cmos_sensor_input)) {
 40005c0:	e0bffc17 	ldw	r2,-16(fp)
 40005c4:	1009883a 	mov	r4,r2
 40005c8:	4000eb00 	call	4000eb0 <cmos_sensor_input_command_snapshot_sync>
 40005cc:	1080005c 	xori	r2,r2,1
 40005d0:	10803fcc 	andi	r2,r2,255
 40005d4:	10000226 	beq	r2,zero,40005e0 <cmos_sensor_acquisition_snapshot+0xa0>
        return false;
 40005d8:	0005883a 	mov	r2,zero
 40005dc:	00000506 	br	40005f4 <cmos_sensor_acquisition_snapshot+0xb4>
    }

    msgdma_wait_until_idle(&dev->msgdma);
 40005e0:	e0bffc17 	ldw	r2,-16(fp)
 40005e4:	10800704 	addi	r2,r2,28
 40005e8:	1009883a 	mov	r4,r2
 40005ec:	40039dc0 	call	40039dc <msgdma_wait_until_idle>
    return true;
 40005f0:	00800044 	movi	r2,1
}
 40005f4:	e6ffff04 	addi	sp,fp,-4
 40005f8:	dfc00217 	ldw	ra,8(sp)
 40005fc:	df000117 	ldw	fp,4(sp)
 4000600:	dc000017 	ldw	r16,0(sp)
 4000604:	dec00304 	addi	sp,sp,12
 4000608:	f800283a 	ret

0400060c <log2_of_pow_2>:
 * that x is a power of 2 before calling this function.
 *
 * Full credit for this code comes from the link below:
 *   http://graphics.stanford.edu/~seander/bithacks.html#IntegerLogObvious
 */
static uint32_t log2_of_pow_2(uint32_t x) {
 400060c:	defffd04 	addi	sp,sp,-12
 4000610:	dfc00215 	stw	ra,8(sp)
 4000614:	df000115 	stw	fp,4(sp)
 4000618:	df000104 	addi	fp,sp,4
 400061c:	e13fff15 	stw	r4,-4(fp)
    static const int MultiplyDeBruijnBitPosition2[32] = {
        0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8,
        31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9
    };

    return MultiplyDeBruijnBitPosition2[(uint32_t) (x * 0x077CB531U) >> 27];
 4000620:	0141df74 	movhi	r5,1917
 4000624:	296d4c44 	addi	r5,r5,-19151
 4000628:	e13fff17 	ldw	r4,-4(fp)
 400062c:	40044f40 	call	40044f4 <__mulsi3>
 4000630:	1006d6fa 	srli	r3,r2,27
 4000634:	00810074 	movhi	r2,1025
 4000638:	1098ea04 	addi	r2,r2,25512
 400063c:	18c7883a 	add	r3,r3,r3
 4000640:	18c7883a 	add	r3,r3,r3
 4000644:	10c5883a 	add	r2,r2,r3
 4000648:	10800017 	ldw	r2,0(r2)
}
 400064c:	e037883a 	mov	sp,fp
 4000650:	dfc00117 	ldw	ra,4(sp)
 4000654:	df000017 	ldw	fp,0(sp)
 4000658:	dec00204 	addi	sp,sp,8
 400065c:	f800283a 	ret

04000660 <mask_ofst>:
 * Ex : 0x 00 0c 00 00 (good) = 0b 00000000 00001100 00000000 00000000
 *
 *                                               vxv
 * Ex : 0x 00 05 00 00 (bad)  = 0b 00000000 00000101 00000000 00000000
 */
static uint32_t mask_ofst(uint32_t mask) {
 4000660:	defffd04 	addi	sp,sp,-12
 4000664:	dfc00215 	stw	ra,8(sp)
 4000668:	df000115 	stw	fp,4(sp)
 400066c:	df000104 	addi	fp,sp,4
 4000670:	e13fff15 	stw	r4,-4(fp)
    /* (mask & -mask) clears all but the lowest bit of mask */
    return log2_of_pow_2(mask & (~mask + 1));
 4000674:	e0bfff17 	ldw	r2,-4(fp)
 4000678:	0087c83a 	sub	r3,zero,r2
 400067c:	e0bfff17 	ldw	r2,-4(fp)
 4000680:	1884703a 	and	r2,r3,r2
 4000684:	1009883a 	mov	r4,r2
 4000688:	400060c0 	call	400060c <log2_of_pow_2>
}
 400068c:	e037883a 	mov	sp,fp
 4000690:	dfc00117 	ldw	ra,4(sp)
 4000694:	df000017 	ldw	fp,0(sp)
 4000698:	dec00204 	addi	sp,sp,8
 400069c:	f800283a 	ret

040006a0 <ceil_div>:
 * that (x != 0) before calling this function.
 *
 * Full credit for this code comes from the link below:
 *   http://stackoverflow.com/questions/2745074/fast-ceiling-of-an-integer-division-in-c-c
 */
static uint32_t ceil_div(uint32_t x, uint32_t y) {
 40006a0:	defffc04 	addi	sp,sp,-16
 40006a4:	dfc00315 	stw	ra,12(sp)
 40006a8:	df000215 	stw	fp,8(sp)
 40006ac:	df000204 	addi	fp,sp,8
 40006b0:	e13ffe15 	stw	r4,-8(fp)
 40006b4:	e17fff15 	stw	r5,-4(fp)
    return 1 + ((x - 1) / y);
 40006b8:	e0bffe17 	ldw	r2,-8(fp)
 40006bc:	10bfffc4 	addi	r2,r2,-1
 40006c0:	e17fff17 	ldw	r5,-4(fp)
 40006c4:	1009883a 	mov	r4,r2
 40006c8:	40044380 	call	4004438 <__udivsi3>
 40006cc:	10800044 	addi	r2,r2,1
}
 40006d0:	e037883a 	mov	sp,fp
 40006d4:	dfc00117 	ldw	ra,4(sp)
 40006d8:	df000017 	ldw	fp,0(sp)
 40006dc:	dec00204 	addi	sp,sp,8
 40006e0:	f800283a 	ret

040006e4 <read_config_reg_irq_flag>:
 * read_config_reg_irq_flag
 *
 * Returns CMOS_SENSOR_INPUT_CONFIG_IRQ_DISABLE if irq generation is disabled.
 * Returns CMOS_SENSOR_INPUT_CONFIG_IRQ_ENABLE if irq generation is enabled.
 */
static uint32_t read_config_reg_irq_flag(cmos_sensor_input_dev *dev) {
 40006e4:	defffa04 	addi	sp,sp,-24
 40006e8:	dfc00515 	stw	ra,20(sp)
 40006ec:	df000415 	stw	fp,16(sp)
 40006f0:	dc000315 	stw	r16,12(sp)
 40006f4:	df000404 	addi	fp,sp,16
 40006f8:	e13ffe15 	stw	r4,-8(fp)
    uint32_t config_reg = CMOS_SENSOR_INPUT_RD_CONFIG(dev->base);
 40006fc:	e0bffe17 	ldw	r2,-8(fp)
 4000700:	10800017 	ldw	r2,0(r2)
 4000704:	10800037 	ldwio	r2,0(r2)
 4000708:	e0bffc15 	stw	r2,-16(fp)
    uint32_t irq_flag = (config_reg & CMOS_SENSOR_INPUT_CONFIG_IRQ_MASK) >> CMOS_SENSOR_INPUT_CONFIG_IRQ_OFST;
 400070c:	e0bffc17 	ldw	r2,-16(fp)
 4000710:	1400004c 	andi	r16,r2,1
 4000714:	01000044 	movi	r4,1
 4000718:	40006600 	call	4000660 <mask_ofst>
 400071c:	8084d83a 	srl	r2,r16,r2
 4000720:	e0bffd15 	stw	r2,-12(fp)
    return irq_flag;
 4000724:	e0bffd17 	ldw	r2,-12(fp)
}
 4000728:	e6ffff04 	addi	sp,fp,-4
 400072c:	dfc00217 	ldw	ra,8(sp)
 4000730:	df000117 	ldw	fp,4(sp)
 4000734:	dc000017 	ldw	r16,0(sp)
 4000738:	dec00304 	addi	sp,sp,12
 400073c:	f800283a 	ret

04000740 <read_config_reg_debayer_pattern_flag>:
 *  - CMOS_SENSOR_INPUT_CONFIG_DEBAYER_PATTERN_RGGB
 *  - CMOS_SENSOR_INPUT_CONFIG_DEBAYER_PATTERN_BGGR
 *  - CMOS_SENSOR_INPUT_CONFIG_DEBAYER_PATTERN_GRBG
 *  - CMOS_SENSOR_INPUT_CONFIG_DEBAYER_PATTERN_GBRG
 */
static uint32_t read_config_reg_debayer_pattern_flag(cmos_sensor_input_dev *dev) {
 4000740:	defffa04 	addi	sp,sp,-24
 4000744:	dfc00515 	stw	ra,20(sp)
 4000748:	df000415 	stw	fp,16(sp)
 400074c:	dc000315 	stw	r16,12(sp)
 4000750:	df000404 	addi	fp,sp,16
 4000754:	e13ffe15 	stw	r4,-8(fp)
    uint32_t config_reg = CMOS_SENSOR_INPUT_RD_CONFIG(dev->base);
 4000758:	e0bffe17 	ldw	r2,-8(fp)
 400075c:	10800017 	ldw	r2,0(r2)
 4000760:	10800037 	ldwio	r2,0(r2)
 4000764:	e0bffc15 	stw	r2,-16(fp)
    uint32_t debayer_pattern_flag = (config_reg & CMOS_SENSOR_INPUT_CONFIG_DEBAYER_PATTERN_MASK) >> CMOS_SENSOR_INPUT_CONFIG_DEBAYER_PATTERN_OFST;
 4000768:	e0bffc17 	ldw	r2,-16(fp)
 400076c:	1400018c 	andi	r16,r2,6
 4000770:	01000184 	movi	r4,6
 4000774:	40006600 	call	4000660 <mask_ofst>
 4000778:	8084d83a 	srl	r2,r16,r2
 400077c:	e0bffd15 	stw	r2,-12(fp)
    return debayer_pattern_flag;
 4000780:	e0bffd17 	ldw	r2,-12(fp)
}
 4000784:	e6ffff04 	addi	sp,fp,-4
 4000788:	dfc00217 	ldw	ra,8(sp)
 400078c:	df000117 	ldw	fp,4(sp)
 4000790:	dc000017 	ldw	r16,0(sp)
 4000794:	dec00304 	addi	sp,sp,12
 4000798:	f800283a 	ret

0400079c <write_config_reg_irq_flag>:
 * write_config_reg_irq_flag
 *
 * Enables interrupt generation if irq_enable is true.
 * Disables interrupt generation if irq_enable is false.
 */
static void write_config_reg_irq_flag(cmos_sensor_input_dev *dev, bool irq_enabled) {
 400079c:	defffb04 	addi	sp,sp,-20
 40007a0:	dfc00415 	stw	ra,16(sp)
 40007a4:	df000315 	stw	fp,12(sp)
 40007a8:	df000304 	addi	fp,sp,12
 40007ac:	e13ffe15 	stw	r4,-8(fp)
 40007b0:	2805883a 	mov	r2,r5
 40007b4:	e0bfff05 	stb	r2,-4(fp)
    uint32_t config_reg = CMOS_SENSOR_INPUT_RD_CONFIG(dev->base);
 40007b8:	e0bffe17 	ldw	r2,-8(fp)
 40007bc:	10800017 	ldw	r2,0(r2)
 40007c0:	10800037 	ldwio	r2,0(r2)
 40007c4:	e0bffd15 	stw	r2,-12(fp)
    config_reg &= ~CMOS_SENSOR_INPUT_CONFIG_IRQ_MASK;
 40007c8:	e0fffd17 	ldw	r3,-12(fp)
 40007cc:	00bfff84 	movi	r2,-2
 40007d0:	1884703a 	and	r2,r3,r2
 40007d4:	e0bffd15 	stw	r2,-12(fp)

    if (irq_enabled) {
 40007d8:	e0bfff03 	ldbu	r2,-4(fp)
 40007dc:	10000a26 	beq	r2,zero,4000808 <write_config_reg_irq_flag+0x6c>
        config_reg |= CMOS_SENSOR_INPUT_CONFIG_IRQ_ENABLE_MASK;
 40007e0:	01000044 	movi	r4,1
 40007e4:	40006600 	call	4000660 <mask_ofst>
 40007e8:	1007883a 	mov	r3,r2
 40007ec:	00800044 	movi	r2,1
 40007f0:	10c4983a 	sll	r2,r2,r3
 40007f4:	1007883a 	mov	r3,r2
 40007f8:	e0bffd17 	ldw	r2,-12(fp)
 40007fc:	10c4b03a 	or	r2,r2,r3
 4000800:	e0bffd15 	stw	r2,-12(fp)
 4000804:	00000706 	br	4000824 <write_config_reg_irq_flag+0x88>
    } else {
        config_reg |= CMOS_SENSOR_INPUT_CONFIG_IRQ_DISABLE_MASK;
 4000808:	01000044 	movi	r4,1
 400080c:	40006600 	call	4000660 <mask_ofst>
 4000810:	0005883a 	mov	r2,zero
 4000814:	1007883a 	mov	r3,r2
 4000818:	e0bffd17 	ldw	r2,-12(fp)
 400081c:	10c4b03a 	or	r2,r2,r3
 4000820:	e0bffd15 	stw	r2,-12(fp)
    }

    CMOS_SENSOR_INPUT_WR_CONFIG(dev->base, config_reg);
 4000824:	e0bffe17 	ldw	r2,-8(fp)
 4000828:	10800017 	ldw	r2,0(r2)
 400082c:	e0fffd17 	ldw	r3,-12(fp)
 4000830:	10c00035 	stwio	r3,0(r2)
}
 4000834:	0001883a 	nop
 4000838:	e037883a 	mov	sp,fp
 400083c:	dfc00117 	ldw	ra,4(sp)
 4000840:	df000017 	ldw	fp,0(sp)
 4000844:	dec00204 	addi	sp,sp,8
 4000848:	f800283a 	ret

0400084c <write_config_reg_debayer_pattern_flag>:
/*
 * write_config_reg_debayer_pattern_flag
 *
 * Sets the debayering pattern to be used.
 */
static void write_config_reg_debayer_pattern_flag(cmos_sensor_input_dev *dev, cmos_sensor_input_debayer_pattern pattern) {
 400084c:	defffb04 	addi	sp,sp,-20
 4000850:	dfc00415 	stw	ra,16(sp)
 4000854:	df000315 	stw	fp,12(sp)
 4000858:	df000304 	addi	fp,sp,12
 400085c:	e13ffe15 	stw	r4,-8(fp)
 4000860:	e17fff15 	stw	r5,-4(fp)
    uint32_t config_reg = CMOS_SENSOR_INPUT_RD_CONFIG(dev->base);
 4000864:	e0bffe17 	ldw	r2,-8(fp)
 4000868:	10800017 	ldw	r2,0(r2)
 400086c:	10800037 	ldwio	r2,0(r2)
 4000870:	e0bffd15 	stw	r2,-12(fp)
    config_reg &= ~CMOS_SENSOR_INPUT_CONFIG_DEBAYER_PATTERN_MASK;
 4000874:	e0fffd17 	ldw	r3,-12(fp)
 4000878:	00bffe44 	movi	r2,-7
 400087c:	1884703a 	and	r2,r3,r2
 4000880:	e0bffd15 	stw	r2,-12(fp)

    if (pattern == RGGB) {
 4000884:	e0bfff17 	ldw	r2,-4(fp)
 4000888:	1000081e 	bne	r2,zero,40008ac <write_config_reg_debayer_pattern_flag+0x60>
        config_reg |= CMOS_SENSOR_INPUT_CONFIG_DEBAYER_PATTERN_RGGB_MASK;
 400088c:	01000184 	movi	r4,6
 4000890:	40006600 	call	4000660 <mask_ofst>
 4000894:	0005883a 	mov	r2,zero
 4000898:	1007883a 	mov	r3,r2
 400089c:	e0bffd17 	ldw	r2,-12(fp)
 40008a0:	10c4b03a 	or	r2,r2,r3
 40008a4:	e0bffd15 	stw	r2,-12(fp)
 40008a8:	00002606 	br	4000944 <write_config_reg_debayer_pattern_flag+0xf8>
    } else if (pattern == BGGR) {
 40008ac:	e0bfff17 	ldw	r2,-4(fp)
 40008b0:	10800058 	cmpnei	r2,r2,1
 40008b4:	10000a1e 	bne	r2,zero,40008e0 <write_config_reg_debayer_pattern_flag+0x94>
        config_reg |= CMOS_SENSOR_INPUT_CONFIG_DEBAYER_PATTERN_BGGR_MASK;
 40008b8:	01000184 	movi	r4,6
 40008bc:	40006600 	call	4000660 <mask_ofst>
 40008c0:	1007883a 	mov	r3,r2
 40008c4:	00800044 	movi	r2,1
 40008c8:	10c4983a 	sll	r2,r2,r3
 40008cc:	1007883a 	mov	r3,r2
 40008d0:	e0bffd17 	ldw	r2,-12(fp)
 40008d4:	10c4b03a 	or	r2,r2,r3
 40008d8:	e0bffd15 	stw	r2,-12(fp)
 40008dc:	00001906 	br	4000944 <write_config_reg_debayer_pattern_flag+0xf8>
    } else if (pattern == GRBG) {
 40008e0:	e0bfff17 	ldw	r2,-4(fp)
 40008e4:	10800098 	cmpnei	r2,r2,2
 40008e8:	10000a1e 	bne	r2,zero,4000914 <write_config_reg_debayer_pattern_flag+0xc8>
        config_reg |= CMOS_SENSOR_INPUT_CONFIG_DEBAYER_PATTERN_GRBG_MASK;
 40008ec:	01000184 	movi	r4,6
 40008f0:	40006600 	call	4000660 <mask_ofst>
 40008f4:	1007883a 	mov	r3,r2
 40008f8:	00800084 	movi	r2,2
 40008fc:	10c4983a 	sll	r2,r2,r3
 4000900:	1007883a 	mov	r3,r2
 4000904:	e0bffd17 	ldw	r2,-12(fp)
 4000908:	10c4b03a 	or	r2,r2,r3
 400090c:	e0bffd15 	stw	r2,-12(fp)
 4000910:	00000c06 	br	4000944 <write_config_reg_debayer_pattern_flag+0xf8>
    } else if (pattern == GBRG) {
 4000914:	e0bfff17 	ldw	r2,-4(fp)
 4000918:	108000d8 	cmpnei	r2,r2,3
 400091c:	1000091e 	bne	r2,zero,4000944 <write_config_reg_debayer_pattern_flag+0xf8>
        config_reg |= CMOS_SENSOR_INPUT_CONFIG_DEBAYER_PATTERN_GBRG_MASK;
 4000920:	01000184 	movi	r4,6
 4000924:	40006600 	call	4000660 <mask_ofst>
 4000928:	1007883a 	mov	r3,r2
 400092c:	008000c4 	movi	r2,3
 4000930:	10c4983a 	sll	r2,r2,r3
 4000934:	1007883a 	mov	r3,r2
 4000938:	e0bffd17 	ldw	r2,-12(fp)
 400093c:	10c4b03a 	or	r2,r2,r3
 4000940:	e0bffd15 	stw	r2,-12(fp)
    }

    CMOS_SENSOR_INPUT_WR_CONFIG(dev->base, config_reg);
 4000944:	e0bffe17 	ldw	r2,-8(fp)
 4000948:	10800017 	ldw	r2,0(r2)
 400094c:	e0fffd17 	ldw	r3,-12(fp)
 4000950:	10c00035 	stwio	r3,0(r2)
}
 4000954:	0001883a 	nop
 4000958:	e037883a 	mov	sp,fp
 400095c:	dfc00117 	ldw	ra,4(sp)
 4000960:	df000017 	ldw	fp,0(sp)
 4000964:	dec00204 	addi	sp,sp,8
 4000968:	f800283a 	ret

0400096c <write_command_reg_get_frame_info>:
/*
 * write_command_reg_get_frame_info
 *
 * Sends a GET_FRAME_INFO command to the controller.
 */
static void write_command_reg_get_frame_info(cmos_sensor_input_dev *dev) {
 400096c:	defffe04 	addi	sp,sp,-8
 4000970:	df000115 	stw	fp,4(sp)
 4000974:	df000104 	addi	fp,sp,4
 4000978:	e13fff15 	stw	r4,-4(fp)
    CMOS_SENSOR_INPUT_WR_COMMAND(dev->base, CMOS_SENSOR_INPUT_COMMAND_GET_FRAME_INFO);
 400097c:	e0bfff17 	ldw	r2,-4(fp)
 4000980:	10800017 	ldw	r2,0(r2)
 4000984:	10800104 	addi	r2,r2,4
 4000988:	0007883a 	mov	r3,zero
 400098c:	10c00035 	stwio	r3,0(r2)
}
 4000990:	0001883a 	nop
 4000994:	e037883a 	mov	sp,fp
 4000998:	df000017 	ldw	fp,0(sp)
 400099c:	dec00104 	addi	sp,sp,4
 40009a0:	f800283a 	ret

040009a4 <write_command_reg_snapshot>:
/*
 * write_command_reg_snapshot
 *
 * Sends a SNAPSHOT command to the controller.
 */
static void write_command_reg_snapshot(cmos_sensor_input_dev *dev) {
 40009a4:	defffe04 	addi	sp,sp,-8
 40009a8:	df000115 	stw	fp,4(sp)
 40009ac:	df000104 	addi	fp,sp,4
 40009b0:	e13fff15 	stw	r4,-4(fp)
    CMOS_SENSOR_INPUT_WR_COMMAND(dev->base, CMOS_SENSOR_INPUT_COMMAND_SNAPSHOT);
 40009b4:	e0bfff17 	ldw	r2,-4(fp)
 40009b8:	10800017 	ldw	r2,0(r2)
 40009bc:	10800104 	addi	r2,r2,4
 40009c0:	00c00044 	movi	r3,1
 40009c4:	10c00035 	stwio	r3,0(r2)
}
 40009c8:	0001883a 	nop
 40009cc:	e037883a 	mov	sp,fp
 40009d0:	df000017 	ldw	fp,0(sp)
 40009d4:	dec00104 	addi	sp,sp,4
 40009d8:	f800283a 	ret

040009dc <write_command_reg_irq_ack>:
/*
 * write_command_reg_irq_ack
 *
 * Sends an IRQ_ACK command to the controller.
 */
static void write_command_reg_irq_ack(cmos_sensor_input_dev *dev) {
 40009dc:	defffe04 	addi	sp,sp,-8
 40009e0:	df000115 	stw	fp,4(sp)
 40009e4:	df000104 	addi	fp,sp,4
 40009e8:	e13fff15 	stw	r4,-4(fp)
    CMOS_SENSOR_INPUT_WR_COMMAND(dev->base, CMOS_SENSOR_INPUT_COMMAND_IRQ_ACK);
 40009ec:	e0bfff17 	ldw	r2,-4(fp)
 40009f0:	10800017 	ldw	r2,0(r2)
 40009f4:	10800104 	addi	r2,r2,4
 40009f8:	00c00084 	movi	r3,2
 40009fc:	10c00035 	stwio	r3,0(r2)
}
 4000a00:	0001883a 	nop
 4000a04:	e037883a 	mov	sp,fp
 4000a08:	df000017 	ldw	fp,0(sp)
 4000a0c:	dec00104 	addi	sp,sp,4
 4000a10:	f800283a 	ret

04000a14 <write_command_reg_stop_and_reset>:
/*
 * write_command_reg_stop_and_reset
 *
 * Sends a STOP_AND_RESET command to the controller.
 */
static void write_command_reg_stop_and_reset(cmos_sensor_input_dev *dev) {
 4000a14:	defffe04 	addi	sp,sp,-8
 4000a18:	df000115 	stw	fp,4(sp)
 4000a1c:	df000104 	addi	fp,sp,4
 4000a20:	e13fff15 	stw	r4,-4(fp)
    CMOS_SENSOR_INPUT_WR_COMMAND(dev->base, CMOS_SENSOR_INPUT_COMMAND_STOP_AND_RESET);
 4000a24:	e0bfff17 	ldw	r2,-4(fp)
 4000a28:	10800017 	ldw	r2,0(r2)
 4000a2c:	10800104 	addi	r2,r2,4
 4000a30:	00c000c4 	movi	r3,3
 4000a34:	10c00035 	stwio	r3,0(r2)
}
 4000a38:	0001883a 	nop
 4000a3c:	e037883a 	mov	sp,fp
 4000a40:	df000017 	ldw	fp,0(sp)
 4000a44:	dec00104 	addi	sp,sp,4
 4000a48:	f800283a 	ret

04000a4c <read_status_reg_state_flag>:
 * read_status_reg_state_flag
 *
 * Returns CMOS_SENSOR_INPUT_STATUS_STATE_IDLE if the controller is idle.
 * Returns CMOS_SENSOR_INPUT_STATUS_STATE_BUSY if the controller is busy.
 */
static uint32_t read_status_reg_state_flag(cmos_sensor_input_dev *dev) {
 4000a4c:	defffa04 	addi	sp,sp,-24
 4000a50:	dfc00515 	stw	ra,20(sp)
 4000a54:	df000415 	stw	fp,16(sp)
 4000a58:	dc000315 	stw	r16,12(sp)
 4000a5c:	df000404 	addi	fp,sp,16
 4000a60:	e13ffe15 	stw	r4,-8(fp)
    uint32_t status_reg = CMOS_SENSOR_INPUT_RD_STATUS(dev->base);
 4000a64:	e0bffe17 	ldw	r2,-8(fp)
 4000a68:	10800017 	ldw	r2,0(r2)
 4000a6c:	10800204 	addi	r2,r2,8
 4000a70:	10800037 	ldwio	r2,0(r2)
 4000a74:	e0bffc15 	stw	r2,-16(fp)
    uint32_t state_flag = (status_reg & CMOS_SENSOR_INPUT_STATUS_STATE_MASK) >> CMOS_SENSOR_INPUT_STATUS_STATE_OFST;
 4000a78:	e0bffc17 	ldw	r2,-16(fp)
 4000a7c:	1400004c 	andi	r16,r2,1
 4000a80:	01000044 	movi	r4,1
 4000a84:	40006600 	call	4000660 <mask_ofst>
 4000a88:	8084d83a 	srl	r2,r16,r2
 4000a8c:	e0bffd15 	stw	r2,-12(fp)
    return state_flag;
 4000a90:	e0bffd17 	ldw	r2,-12(fp)
}
 4000a94:	e6ffff04 	addi	sp,fp,-4
 4000a98:	dfc00217 	ldw	ra,8(sp)
 4000a9c:	df000117 	ldw	fp,4(sp)
 4000aa0:	dc000017 	ldw	r16,0(sp)
 4000aa4:	dec00304 	addi	sp,sp,12
 4000aa8:	f800283a 	ret

04000aac <read_status_reg_fifo_ovfl_flag>:
 * read_status_reg_fifo_ovfl_flag
 *
 * Returns CMOS_SENSOR_INPUT_STATUS_FIFO_OVFL_NO_OVERFLOW if the fifo has not overflowed.
 * Returns CMOS_SENSOR_INPUT_STATUS_FIFO_OVFL_OVERFLOW if the fifo has overflowed.
 */
static uint32_t read_status_reg_fifo_ovfl_flag(cmos_sensor_input_dev *dev) {
 4000aac:	defffa04 	addi	sp,sp,-24
 4000ab0:	dfc00515 	stw	ra,20(sp)
 4000ab4:	df000415 	stw	fp,16(sp)
 4000ab8:	dc000315 	stw	r16,12(sp)
 4000abc:	df000404 	addi	fp,sp,16
 4000ac0:	e13ffe15 	stw	r4,-8(fp)
    uint32_t status_reg = CMOS_SENSOR_INPUT_RD_STATUS(dev->base);
 4000ac4:	e0bffe17 	ldw	r2,-8(fp)
 4000ac8:	10800017 	ldw	r2,0(r2)
 4000acc:	10800204 	addi	r2,r2,8
 4000ad0:	10800037 	ldwio	r2,0(r2)
 4000ad4:	e0bffc15 	stw	r2,-16(fp)
    uint32_t ovfl_flag = (status_reg & CMOS_SENSOR_INPUT_STATUS_FIFO_OVFL_MASK) >> CMOS_SENSOR_INPUT_STATUS_FIFO_OVFL_OFST;
 4000ad8:	e0bffc17 	ldw	r2,-16(fp)
 4000adc:	1400008c 	andi	r16,r2,2
 4000ae0:	01000084 	movi	r4,2
 4000ae4:	40006600 	call	4000660 <mask_ofst>
 4000ae8:	8084d83a 	srl	r2,r16,r2
 4000aec:	e0bffd15 	stw	r2,-12(fp)
    return ovfl_flag;
 4000af0:	e0bffd17 	ldw	r2,-12(fp)
}
 4000af4:	e6ffff04 	addi	sp,fp,-4
 4000af8:	dfc00217 	ldw	ra,8(sp)
 4000afc:	df000117 	ldw	fp,4(sp)
 4000b00:	dc000017 	ldw	r16,0(sp)
 4000b04:	dec00304 	addi	sp,sp,12
 4000b08:	f800283a 	ret

04000b0c <read_status_reg_fifo_fill_level_flag>:
/*
 * read_status_reg_fifo_fill_level_flag
 *
 * Returns the current fill level of the fifo.
 */
static uint32_t read_status_reg_fifo_fill_level_flag(cmos_sensor_input_dev *dev) {
 4000b0c:	defffa04 	addi	sp,sp,-24
 4000b10:	dfc00515 	stw	ra,20(sp)
 4000b14:	df000415 	stw	fp,16(sp)
 4000b18:	dc000315 	stw	r16,12(sp)
 4000b1c:	df000404 	addi	fp,sp,16
 4000b20:	e13ffe15 	stw	r4,-8(fp)
    uint32_t status_reg = CMOS_SENSOR_INPUT_RD_STATUS(dev->base);
 4000b24:	e0bffe17 	ldw	r2,-8(fp)
 4000b28:	10800017 	ldw	r2,0(r2)
 4000b2c:	10800204 	addi	r2,r2,8
 4000b30:	10800037 	ldwio	r2,0(r2)
 4000b34:	e0bffc15 	stw	r2,-16(fp)
    uint32_t fill_level_flag = (status_reg & CMOS_SENSOR_INPUT_STATUS_FIFO_USEDW_MASK) >> CMOS_SENSOR_INPUT_STATUS_FIFO_USEDW_OFST;
 4000b38:	e0bffc17 	ldw	r2,-16(fp)
 4000b3c:	1407ff0c 	andi	r16,r2,8188
 4000b40:	0107ff04 	movi	r4,8188
 4000b44:	40006600 	call	4000660 <mask_ofst>
 4000b48:	8084d83a 	srl	r2,r16,r2
 4000b4c:	e0bffd15 	stw	r2,-12(fp)
    return fill_level_flag;
 4000b50:	e0bffd17 	ldw	r2,-12(fp)
}
 4000b54:	e6ffff04 	addi	sp,fp,-4
 4000b58:	dfc00217 	ldw	ra,8(sp)
 4000b5c:	df000117 	ldw	fp,4(sp)
 4000b60:	dc000017 	ldw	r16,0(sp)
 4000b64:	dec00304 	addi	sp,sp,12
 4000b68:	f800283a 	ret

04000b6c <read_frame_info_reg_frame_width_flag>:
/*
 * read_frame_info_reg_frame_width_flag
 *
 * Returns the frame_width discovered by the device.
 */
static uint32_t read_frame_info_reg_frame_width_flag(cmos_sensor_input_dev *dev) {
 4000b6c:	defffa04 	addi	sp,sp,-24
 4000b70:	dfc00515 	stw	ra,20(sp)
 4000b74:	df000415 	stw	fp,16(sp)
 4000b78:	dc000315 	stw	r16,12(sp)
 4000b7c:	df000404 	addi	fp,sp,16
 4000b80:	e13ffe15 	stw	r4,-8(fp)
    uint32_t frame_info_reg = CMOS_SENSOR_INPUT_RD_FRAME_INFO(dev->base);
 4000b84:	e0bffe17 	ldw	r2,-8(fp)
 4000b88:	10800017 	ldw	r2,0(r2)
 4000b8c:	10800304 	addi	r2,r2,12
 4000b90:	10800037 	ldwio	r2,0(r2)
 4000b94:	e0bffc15 	stw	r2,-16(fp)
    uint32_t frame_width_flag = (frame_info_reg & CMOS_SENSOR_INPUT_FRAME_INFO_FRAME_WIDTH_MASK) >> CMOS_SENSOR_INPUT_FRAME_INFO_FRAME_WIDTH_OFST;
 4000b98:	e0bffc17 	ldw	r2,-16(fp)
 4000b9c:	143fffcc 	andi	r16,r2,65535
 4000ba0:	013fffd4 	movui	r4,65535
 4000ba4:	40006600 	call	4000660 <mask_ofst>
 4000ba8:	8084d83a 	srl	r2,r16,r2
 4000bac:	e0bffd15 	stw	r2,-12(fp)
    return frame_width_flag;
 4000bb0:	e0bffd17 	ldw	r2,-12(fp)
}
 4000bb4:	e6ffff04 	addi	sp,fp,-4
 4000bb8:	dfc00217 	ldw	ra,8(sp)
 4000bbc:	df000117 	ldw	fp,4(sp)
 4000bc0:	dc000017 	ldw	r16,0(sp)
 4000bc4:	dec00304 	addi	sp,sp,12
 4000bc8:	f800283a 	ret

04000bcc <read_frame_info_reg_frame_height_flag>:
/*
 * read_frame_info_reg_frame_height_flag
 *
 * Returns the height discovered by the device.
 */
static uint32_t read_frame_info_reg_frame_height_flag(cmos_sensor_input_dev *dev) {
 4000bcc:	defffa04 	addi	sp,sp,-24
 4000bd0:	dfc00515 	stw	ra,20(sp)
 4000bd4:	df000415 	stw	fp,16(sp)
 4000bd8:	dc000315 	stw	r16,12(sp)
 4000bdc:	df000404 	addi	fp,sp,16
 4000be0:	e13ffe15 	stw	r4,-8(fp)
    uint32_t frame_info_reg = CMOS_SENSOR_INPUT_RD_FRAME_INFO(dev->base);
 4000be4:	e0bffe17 	ldw	r2,-8(fp)
 4000be8:	10800017 	ldw	r2,0(r2)
 4000bec:	10800304 	addi	r2,r2,12
 4000bf0:	10800037 	ldwio	r2,0(r2)
 4000bf4:	e0bffc15 	stw	r2,-16(fp)
    uint32_t frame_height_flag = (frame_info_reg & CMOS_SENSOR_INPUT_FRAME_INFO_FRAME_HEIGHT_MASK) >> CMOS_SENSOR_INPUT_FRAME_INFO_FRAME_HEIGHT_OFST;
 4000bf8:	e0bffc17 	ldw	r2,-16(fp)
 4000bfc:	143fffec 	andhi	r16,r2,65535
 4000c00:	013ffff4 	movhi	r4,65535
 4000c04:	40006600 	call	4000660 <mask_ofst>
 4000c08:	8084d83a 	srl	r2,r16,r2
 4000c0c:	e0bffd15 	stw	r2,-12(fp)
    return frame_height_flag;
 4000c10:	e0bffd17 	ldw	r2,-12(fp)
}
 4000c14:	e6ffff04 	addi	sp,fp,-4
 4000c18:	dfc00217 	ldw	ra,8(sp)
 4000c1c:	df000117 	ldw	fp,4(sp)
 4000c20:	dc000017 	ldw	r16,0(sp)
 4000c24:	dec00304 	addi	sp,sp,12
 4000c28:	f800283a 	ret

04000c2c <cmos_sensor_input_inst>:
/*
 * cmos_sensor_input_inst
 *
 * Constructs a device structure.
 */
cmos_sensor_input_dev cmos_sensor_input_inst(void *base, uint8_t pix_depth, uint32_t max_width, uint32_t max_height, uint32_t output_width, uint32_t fifo_depth, bool debayer_enable, bool packer_enable) {
 4000c2c:	defff204 	addi	sp,sp,-56
 4000c30:	df000d15 	stw	fp,52(sp)
 4000c34:	df000d04 	addi	fp,sp,52
 4000c38:	e13ffa15 	stw	r4,-24(fp)
 4000c3c:	e17ffb15 	stw	r5,-20(fp)
 4000c40:	3009883a 	mov	r4,r6
 4000c44:	e1fffd15 	stw	r7,-12(fp)
 4000c48:	e0c00417 	ldw	r3,16(fp)
 4000c4c:	e0800517 	ldw	r2,20(fp)
 4000c50:	e13ffc05 	stb	r4,-16(fp)
 4000c54:	e0fffe05 	stb	r3,-8(fp)
 4000c58:	e0bfff05 	stb	r2,-4(fp)
    cmos_sensor_input_dev dev;

    dev.base = base;
 4000c5c:	e0bffb17 	ldw	r2,-20(fp)
 4000c60:	e0bff315 	stw	r2,-52(fp)
    dev.pix_depth = pix_depth;
 4000c64:	e0bffc03 	ldbu	r2,-16(fp)
 4000c68:	e0bff405 	stb	r2,-48(fp)
    dev.max_width = max_width;
 4000c6c:	e0bffd17 	ldw	r2,-12(fp)
 4000c70:	e0bff515 	stw	r2,-44(fp)
    dev.max_height = max_height;
 4000c74:	e0800117 	ldw	r2,4(fp)
 4000c78:	e0bff615 	stw	r2,-40(fp)
    dev.output_width = output_width;
 4000c7c:	e0800217 	ldw	r2,8(fp)
 4000c80:	e0bff715 	stw	r2,-36(fp)
    dev.fifo_depth = fifo_depth;
 4000c84:	e0800317 	ldw	r2,12(fp)
 4000c88:	e0bff815 	stw	r2,-32(fp)
    dev.debayer_enable = debayer_enable;
 4000c8c:	e0bffe03 	ldbu	r2,-8(fp)
 4000c90:	e0bff905 	stb	r2,-28(fp)
    dev.packer_enable = packer_enable;
 4000c94:	e0bfff03 	ldbu	r2,-4(fp)
 4000c98:	e0bff945 	stb	r2,-27(fp)

    return dev;
 4000c9c:	e0bffa17 	ldw	r2,-24(fp)
 4000ca0:	e0fff317 	ldw	r3,-52(fp)
 4000ca4:	10c00015 	stw	r3,0(r2)
 4000ca8:	e0fff417 	ldw	r3,-48(fp)
 4000cac:	10c00115 	stw	r3,4(r2)
 4000cb0:	e0fff517 	ldw	r3,-44(fp)
 4000cb4:	10c00215 	stw	r3,8(r2)
 4000cb8:	e0fff617 	ldw	r3,-40(fp)
 4000cbc:	10c00315 	stw	r3,12(r2)
 4000cc0:	e0fff717 	ldw	r3,-36(fp)
 4000cc4:	10c00415 	stw	r3,16(r2)
 4000cc8:	e0fff817 	ldw	r3,-32(fp)
 4000ccc:	10c00515 	stw	r3,20(r2)
 4000cd0:	e0fff917 	ldw	r3,-28(fp)
 4000cd4:	10c00615 	stw	r3,24(r2)
}
 4000cd8:	e0bffa17 	ldw	r2,-24(fp)
 4000cdc:	e037883a 	mov	sp,fp
 4000ce0:	df000017 	ldw	fp,0(sp)
 4000ce4:	dec00104 	addi	sp,sp,4
 4000ce8:	f800283a 	ret

04000cec <cmos_sensor_input_init>:
 * Initializes the controller.
 *
 * This routine disables interrupts and sets the debayering unit (if enabled) to
 * RGGB mode.
 */
void cmos_sensor_input_init(cmos_sensor_input_dev *dev) {
 4000cec:	defffd04 	addi	sp,sp,-12
 4000cf0:	dfc00215 	stw	ra,8(sp)
 4000cf4:	df000115 	stw	fp,4(sp)
 4000cf8:	df000104 	addi	fp,sp,4
 4000cfc:	e13fff15 	stw	r4,-4(fp)
    cmos_sensor_input_command_stop_and_reset(dev);
 4000d00:	e13fff17 	ldw	r4,-4(fp)
 4000d04:	4000f600 	call	4000f60 <cmos_sensor_input_command_stop_and_reset>
    cmos_sensor_input_configure(dev, false, RGGB);
 4000d08:	000d883a 	mov	r6,zero
 4000d0c:	000b883a 	mov	r5,zero
 4000d10:	e13fff17 	ldw	r4,-4(fp)
 4000d14:	4000d300 	call	4000d30 <cmos_sensor_input_configure>
}
 4000d18:	0001883a 	nop
 4000d1c:	e037883a 	mov	sp,fp
 4000d20:	dfc00117 	ldw	ra,4(sp)
 4000d24:	df000017 	ldw	fp,0(sp)
 4000d28:	dec00204 	addi	sp,sp,8
 4000d2c:	f800283a 	ret

04000d30 <cmos_sensor_input_configure>:
 * a frame, and false disables interrupt generation.
 *
 * The pattern argument sets the debayering pattern to be used by the unit. This
 * argument is only used if debayering is enabled.
 */
void cmos_sensor_input_configure(cmos_sensor_input_dev *dev, bool irq, cmos_sensor_input_debayer_pattern pattern) {
 4000d30:	defffb04 	addi	sp,sp,-20
 4000d34:	dfc00415 	stw	ra,16(sp)
 4000d38:	df000315 	stw	fp,12(sp)
 4000d3c:	df000304 	addi	fp,sp,12
 4000d40:	e13ffd15 	stw	r4,-12(fp)
 4000d44:	2805883a 	mov	r2,r5
 4000d48:	e1bfff15 	stw	r6,-4(fp)
 4000d4c:	e0bffe05 	stb	r2,-8(fp)
    cmos_sensor_input_wait_until_idle(dev);
 4000d50:	e13ffd17 	ldw	r4,-12(fp)
 4000d54:	400108c0 	call	400108c <cmos_sensor_input_wait_until_idle>
    write_config_reg_irq_flag(dev, irq);
 4000d58:	e0bffe03 	ldbu	r2,-8(fp)
 4000d5c:	100b883a 	mov	r5,r2
 4000d60:	e13ffd17 	ldw	r4,-12(fp)
 4000d64:	400079c0 	call	400079c <write_config_reg_irq_flag>
    write_config_reg_debayer_pattern_flag(dev, pattern);
 4000d68:	e17fff17 	ldw	r5,-4(fp)
 4000d6c:	e13ffd17 	ldw	r4,-12(fp)
 4000d70:	400084c0 	call	400084c <write_config_reg_debayer_pattern_flag>
}
 4000d74:	0001883a 	nop
 4000d78:	e037883a 	mov	sp,fp
 4000d7c:	dfc00117 	ldw	ra,4(sp)
 4000d80:	df000017 	ldw	fp,0(sp)
 4000d84:	dec00204 	addi	sp,sp,8
 4000d88:	f800283a 	ret

04000d8c <cmos_sensor_input_config_irq_enabled>:
 * cmos_sensor_input_config_irq_enabled
 *
 * Returns true if interrupt generation is enabled.
 * Returns false if interrupt generation is disabled.
 */
bool cmos_sensor_input_config_irq_enabled(cmos_sensor_input_dev *dev) {
 4000d8c:	defffd04 	addi	sp,sp,-12
 4000d90:	dfc00215 	stw	ra,8(sp)
 4000d94:	df000115 	stw	fp,4(sp)
 4000d98:	df000104 	addi	fp,sp,4
 4000d9c:	e13fff15 	stw	r4,-4(fp)
    return read_config_reg_irq_flag(dev) == CMOS_SENSOR_INPUT_CONFIG_IRQ_ENABLE;
 4000da0:	e13fff17 	ldw	r4,-4(fp)
 4000da4:	40006e40 	call	40006e4 <read_config_reg_irq_flag>
 4000da8:	10800060 	cmpeqi	r2,r2,1
}
 4000dac:	e037883a 	mov	sp,fp
 4000db0:	dfc00117 	ldw	ra,4(sp)
 4000db4:	df000017 	ldw	fp,0(sp)
 4000db8:	dec00204 	addi	sp,sp,8
 4000dbc:	f800283a 	ret

04000dc0 <cmos_sensor_input_config_debayer_pattern>:
/*
 * cmos_sensor_input_config_debayer_pattern
 *
 * Returns the debayering pattern currently used by the unit (if applicable).
 */
cmos_sensor_input_debayer_pattern cmos_sensor_input_config_debayer_pattern(cmos_sensor_input_dev *dev) {
 4000dc0:	defffc04 	addi	sp,sp,-16
 4000dc4:	dfc00315 	stw	ra,12(sp)
 4000dc8:	df000215 	stw	fp,8(sp)
 4000dcc:	df000204 	addi	fp,sp,8
 4000dd0:	e13fff15 	stw	r4,-4(fp)
    uint32_t debayer_pattern = read_config_reg_debayer_pattern_flag(dev);
 4000dd4:	e13fff17 	ldw	r4,-4(fp)
 4000dd8:	40007400 	call	4000740 <read_config_reg_debayer_pattern_flag>
 4000ddc:	e0bffe15 	stw	r2,-8(fp)

    if (debayer_pattern == CMOS_SENSOR_INPUT_CONFIG_DEBAYER_PATTERN_RGGB) {
 4000de0:	e0bffe17 	ldw	r2,-8(fp)
 4000de4:	1000021e 	bne	r2,zero,4000df0 <cmos_sensor_input_config_debayer_pattern+0x30>
        return RGGB;
 4000de8:	0005883a 	mov	r2,zero
 4000dec:	00000b06 	br	4000e1c <cmos_sensor_input_config_debayer_pattern+0x5c>
    } else if (debayer_pattern == CMOS_SENSOR_INPUT_CONFIG_DEBAYER_PATTERN_BGGR) {
 4000df0:	e0bffe17 	ldw	r2,-8(fp)
 4000df4:	10800058 	cmpnei	r2,r2,1
 4000df8:	1000021e 	bne	r2,zero,4000e04 <cmos_sensor_input_config_debayer_pattern+0x44>
        return BGGR;
 4000dfc:	00800044 	movi	r2,1
 4000e00:	00000606 	br	4000e1c <cmos_sensor_input_config_debayer_pattern+0x5c>
    } else if (debayer_pattern == CMOS_SENSOR_INPUT_CONFIG_DEBAYER_PATTERN_GRBG) {
 4000e04:	e0bffe17 	ldw	r2,-8(fp)
 4000e08:	10800098 	cmpnei	r2,r2,2
 4000e0c:	1000021e 	bne	r2,zero,4000e18 <cmos_sensor_input_config_debayer_pattern+0x58>
        return GRBG;
 4000e10:	00800084 	movi	r2,2
 4000e14:	00000106 	br	4000e1c <cmos_sensor_input_config_debayer_pattern+0x5c>
    } else {
        /* debayer_pattern == CMOS_SENSOR_INPUT_CONFIG_DEBAYER_PATTERN_GBRG */
        return GBRG;
 4000e18:	008000c4 	movi	r2,3
    }
}
 4000e1c:	e037883a 	mov	sp,fp
 4000e20:	dfc00117 	ldw	ra,4(sp)
 4000e24:	df000017 	ldw	fp,0(sp)
 4000e28:	dec00204 	addi	sp,sp,8
 4000e2c:	f800283a 	ret

04000e30 <cmos_sensor_input_command_get_frame_info_sync>:
 * cmos_sensor_input_snapshot() to ensure correct functionality.
 *
 * This function waits until the GET_FRAME_INFO command finishes before
 * returning.
 */
void cmos_sensor_input_command_get_frame_info_sync(cmos_sensor_input_dev *dev) {
 4000e30:	defffd04 	addi	sp,sp,-12
 4000e34:	dfc00215 	stw	ra,8(sp)
 4000e38:	df000115 	stw	fp,4(sp)
 4000e3c:	df000104 	addi	fp,sp,4
 4000e40:	e13fff15 	stw	r4,-4(fp)
    cmos_sensor_input_wait_until_idle(dev);
 4000e44:	e13fff17 	ldw	r4,-4(fp)
 4000e48:	400108c0 	call	400108c <cmos_sensor_input_wait_until_idle>
    write_command_reg_get_frame_info(dev);
 4000e4c:	e13fff17 	ldw	r4,-4(fp)
 4000e50:	400096c0 	call	400096c <write_command_reg_get_frame_info>
    cmos_sensor_input_wait_until_idle(dev);
 4000e54:	e13fff17 	ldw	r4,-4(fp)
 4000e58:	400108c0 	call	400108c <cmos_sensor_input_wait_until_idle>
}
 4000e5c:	0001883a 	nop
 4000e60:	e037883a 	mov	sp,fp
 4000e64:	dfc00117 	ldw	ra,4(sp)
 4000e68:	df000017 	ldw	fp,0(sp)
 4000e6c:	dec00204 	addi	sp,sp,8
 4000e70:	f800283a 	ret

04000e74 <cmos_sensor_input_command_get_frame_info_async>:
 *
 * This function returns as soon as the command is sent to the controller. It is
 * the caller's responsability to check if the controller is idle before
 * submitting any further commands.
 */
void cmos_sensor_input_command_get_frame_info_async(cmos_sensor_input_dev *dev) {
 4000e74:	defffd04 	addi	sp,sp,-12
 4000e78:	dfc00215 	stw	ra,8(sp)
 4000e7c:	df000115 	stw	fp,4(sp)
 4000e80:	df000104 	addi	fp,sp,4
 4000e84:	e13fff15 	stw	r4,-4(fp)
    cmos_sensor_input_wait_until_idle(dev);
 4000e88:	e13fff17 	ldw	r4,-4(fp)
 4000e8c:	400108c0 	call	400108c <cmos_sensor_input_wait_until_idle>
    write_command_reg_get_frame_info(dev);
 4000e90:	e13fff17 	ldw	r4,-4(fp)
 4000e94:	400096c0 	call	400096c <write_command_reg_get_frame_info>
}
 4000e98:	0001883a 	nop
 4000e9c:	e037883a 	mov	sp,fp
 4000ea0:	dfc00117 	ldw	ra,4(sp)
 4000ea4:	df000017 	ldw	fp,0(sp)
 4000ea8:	dec00204 	addi	sp,sp,8
 4000eac:	f800283a 	ret

04000eb0 <cmos_sensor_input_command_snapshot_sync>:
 *
 * This function waits until the SNAPSHOT command finishes before returning.
 *
 * Returns true if the fifo did not overflow, and false otherwise.
 */
bool cmos_sensor_input_command_snapshot_sync(cmos_sensor_input_dev *dev) {
 4000eb0:	defffd04 	addi	sp,sp,-12
 4000eb4:	dfc00215 	stw	ra,8(sp)
 4000eb8:	df000115 	stw	fp,4(sp)
 4000ebc:	df000104 	addi	fp,sp,4
 4000ec0:	e13fff15 	stw	r4,-4(fp)
    cmos_sensor_input_wait_until_idle(dev);
 4000ec4:	e13fff17 	ldw	r4,-4(fp)
 4000ec8:	400108c0 	call	400108c <cmos_sensor_input_wait_until_idle>
    write_command_reg_snapshot(dev);
 4000ecc:	e13fff17 	ldw	r4,-4(fp)
 4000ed0:	40009a40 	call	40009a4 <write_command_reg_snapshot>
    return cmos_sensor_input_wait_until_idle(dev);
 4000ed4:	e13fff17 	ldw	r4,-4(fp)
 4000ed8:	400108c0 	call	400108c <cmos_sensor_input_wait_until_idle>
}
 4000edc:	e037883a 	mov	sp,fp
 4000ee0:	dfc00117 	ldw	ra,4(sp)
 4000ee4:	df000017 	ldw	fp,0(sp)
 4000ee8:	dec00204 	addi	sp,sp,8
 4000eec:	f800283a 	ret

04000ef0 <cmos_sensor_input_command_snapshot_async>:
 *
 * This function returns as soon as the command is sent to the controller. It is
 * the caller's responsability to check if the fifo overflowed before submitting
 * any further commands.
 */
void cmos_sensor_input_command_snapshot_async(cmos_sensor_input_dev *dev) {
 4000ef0:	defffd04 	addi	sp,sp,-12
 4000ef4:	dfc00215 	stw	ra,8(sp)
 4000ef8:	df000115 	stw	fp,4(sp)
 4000efc:	df000104 	addi	fp,sp,4
 4000f00:	e13fff15 	stw	r4,-4(fp)
    cmos_sensor_input_wait_until_idle(dev);
 4000f04:	e13fff17 	ldw	r4,-4(fp)
 4000f08:	400108c0 	call	400108c <cmos_sensor_input_wait_until_idle>
    write_command_reg_snapshot(dev);
 4000f0c:	e13fff17 	ldw	r4,-4(fp)
 4000f10:	40009a40 	call	40009a4 <write_command_reg_snapshot>
}
 4000f14:	0001883a 	nop
 4000f18:	e037883a 	mov	sp,fp
 4000f1c:	dfc00117 	ldw	ra,4(sp)
 4000f20:	df000017 	ldw	fp,0(sp)
 4000f24:	dec00204 	addi	sp,sp,8
 4000f28:	f800283a 	ret

04000f2c <cmos_sensor_input_command_irq_ack>:
/*
 * cmos_sensor_input_irq_ack
 *
 * Instructs the controller to acknowledge any pending interrupts.
 */
void cmos_sensor_input_command_irq_ack(cmos_sensor_input_dev *dev) {
 4000f2c:	defffd04 	addi	sp,sp,-12
 4000f30:	dfc00215 	stw	ra,8(sp)
 4000f34:	df000115 	stw	fp,4(sp)
 4000f38:	df000104 	addi	fp,sp,4
 4000f3c:	e13fff15 	stw	r4,-4(fp)
    write_command_reg_irq_ack(dev);
 4000f40:	e13fff17 	ldw	r4,-4(fp)
 4000f44:	40009dc0 	call	40009dc <write_command_reg_irq_ack>
}
 4000f48:	0001883a 	nop
 4000f4c:	e037883a 	mov	sp,fp
 4000f50:	dfc00117 	ldw	ra,4(sp)
 4000f54:	df000017 	ldw	fp,0(sp)
 4000f58:	dec00204 	addi	sp,sp,8
 4000f5c:	f800283a 	ret

04000f60 <cmos_sensor_input_command_stop_and_reset>:
 * cmos_sensor_input_stop_and_reset
 *
 * Instructs the controller to halt all operations and to reset all internal
 * units. This function is useful if an operation needs to be stopped midway.
 */
void cmos_sensor_input_command_stop_and_reset(cmos_sensor_input_dev *dev) {
 4000f60:	defffd04 	addi	sp,sp,-12
 4000f64:	dfc00215 	stw	ra,8(sp)
 4000f68:	df000115 	stw	fp,4(sp)
 4000f6c:	df000104 	addi	fp,sp,4
 4000f70:	e13fff15 	stw	r4,-4(fp)
    write_command_reg_stop_and_reset(dev);
 4000f74:	e13fff17 	ldw	r4,-4(fp)
 4000f78:	4000a140 	call	4000a14 <write_command_reg_stop_and_reset>
}
 4000f7c:	0001883a 	nop
 4000f80:	e037883a 	mov	sp,fp
 4000f84:	dfc00117 	ldw	ra,4(sp)
 4000f88:	df000017 	ldw	fp,0(sp)
 4000f8c:	dec00204 	addi	sp,sp,8
 4000f90:	f800283a 	ret

04000f94 <cmos_sensor_input_status_idle>:
 * cmos_sensor_input_status_idle
 *
 * Returns true if the controller is idle.
 * Returns false if the controller is busy.
 */
bool cmos_sensor_input_status_idle(cmos_sensor_input_dev *dev) {
 4000f94:	defffd04 	addi	sp,sp,-12
 4000f98:	dfc00215 	stw	ra,8(sp)
 4000f9c:	df000115 	stw	fp,4(sp)
 4000fa0:	df000104 	addi	fp,sp,4
 4000fa4:	e13fff15 	stw	r4,-4(fp)
    return read_status_reg_state_flag(dev) == CMOS_SENSOR_INPUT_STATUS_STATE_IDLE;
 4000fa8:	e13fff17 	ldw	r4,-4(fp)
 4000fac:	4000a4c0 	call	4000a4c <read_status_reg_state_flag>
 4000fb0:	1005003a 	cmpeq	r2,r2,zero
}
 4000fb4:	e037883a 	mov	sp,fp
 4000fb8:	dfc00117 	ldw	ra,4(sp)
 4000fbc:	df000017 	ldw	fp,0(sp)
 4000fc0:	dec00204 	addi	sp,sp,8
 4000fc4:	f800283a 	ret

04000fc8 <cmos_sensor_input_status_fifo_ovfl>:
 * cmos_sensor_input_status_fifo_ovfl
 *
 * Returns true if the fifo has overflowed.
 * Returns false if the fifo has not overflowed.
 */
bool cmos_sensor_input_status_fifo_ovfl(cmos_sensor_input_dev *dev) {
 4000fc8:	defffd04 	addi	sp,sp,-12
 4000fcc:	dfc00215 	stw	ra,8(sp)
 4000fd0:	df000115 	stw	fp,4(sp)
 4000fd4:	df000104 	addi	fp,sp,4
 4000fd8:	e13fff15 	stw	r4,-4(fp)
    return read_status_reg_fifo_ovfl_flag(dev) == CMOS_SENSOR_INPUT_STATUS_FIFO_OVFL_OVERFLOW;
 4000fdc:	e13fff17 	ldw	r4,-4(fp)
 4000fe0:	4000aac0 	call	4000aac <read_status_reg_fifo_ovfl_flag>
 4000fe4:	10800060 	cmpeqi	r2,r2,1
}
 4000fe8:	e037883a 	mov	sp,fp
 4000fec:	dfc00117 	ldw	ra,4(sp)
 4000ff0:	df000017 	ldw	fp,0(sp)
 4000ff4:	dec00204 	addi	sp,sp,8
 4000ff8:	f800283a 	ret

04000ffc <cmos_sensor_input_status_fifo_fill_level>:
/*
 * cmos_sensor_input_status_fifo_fill_level
 *
 * Returns the fill level of the fifo.
 */
uint32_t cmos_sensor_input_status_fifo_fill_level(cmos_sensor_input_dev *dev) {
 4000ffc:	defffd04 	addi	sp,sp,-12
 4001000:	dfc00215 	stw	ra,8(sp)
 4001004:	df000115 	stw	fp,4(sp)
 4001008:	df000104 	addi	fp,sp,4
 400100c:	e13fff15 	stw	r4,-4(fp)
    return read_status_reg_fifo_fill_level_flag(dev);
 4001010:	e13fff17 	ldw	r4,-4(fp)
 4001014:	4000b0c0 	call	4000b0c <read_status_reg_fifo_fill_level_flag>
}
 4001018:	e037883a 	mov	sp,fp
 400101c:	dfc00117 	ldw	ra,4(sp)
 4001020:	df000017 	ldw	fp,0(sp)
 4001024:	dec00204 	addi	sp,sp,8
 4001028:	f800283a 	ret

0400102c <cmos_sensor_input_frame_info_frame_width>:
/*
 * cmos_sensor_input_frame_info_frame_width
 *
 * Returns the frame width discovered when a GET_FRAME_INFO command was sent.
 */
uint32_t cmos_sensor_input_frame_info_frame_width(cmos_sensor_input_dev *dev) {
 400102c:	defffd04 	addi	sp,sp,-12
 4001030:	dfc00215 	stw	ra,8(sp)
 4001034:	df000115 	stw	fp,4(sp)
 4001038:	df000104 	addi	fp,sp,4
 400103c:	e13fff15 	stw	r4,-4(fp)
    return read_frame_info_reg_frame_width_flag(dev);
 4001040:	e13fff17 	ldw	r4,-4(fp)
 4001044:	4000b6c0 	call	4000b6c <read_frame_info_reg_frame_width_flag>
}
 4001048:	e037883a 	mov	sp,fp
 400104c:	dfc00117 	ldw	ra,4(sp)
 4001050:	df000017 	ldw	fp,0(sp)
 4001054:	dec00204 	addi	sp,sp,8
 4001058:	f800283a 	ret

0400105c <cmos_sensor_input_frame_info_frame_height>:
/*
 * cmos_sensor_input_frame_info_frame_height
 *
 * Returns the frame height discovered when a GET_FRAME_INFO command was sent.
 */
uint32_t cmos_sensor_input_frame_info_frame_height(cmos_sensor_input_dev *dev) {
 400105c:	defffd04 	addi	sp,sp,-12
 4001060:	dfc00215 	stw	ra,8(sp)
 4001064:	df000115 	stw	fp,4(sp)
 4001068:	df000104 	addi	fp,sp,4
 400106c:	e13fff15 	stw	r4,-4(fp)
    return read_frame_info_reg_frame_height_flag(dev);
 4001070:	e13fff17 	ldw	r4,-4(fp)
 4001074:	4000bcc0 	call	4000bcc <read_frame_info_reg_frame_height_flag>
}
 4001078:	e037883a 	mov	sp,fp
 400107c:	dfc00117 	ldw	ra,4(sp)
 4001080:	df000017 	ldw	fp,0(sp)
 4001084:	dec00204 	addi	sp,sp,8
 4001088:	f800283a 	ret

0400108c <cmos_sensor_input_wait_until_idle>:
 * Waits until the controller is idle.
 *
 * Returns true if the fifo did not overflow.
 * Returns false if the fifo did overflow.
 */
bool cmos_sensor_input_wait_until_idle(cmos_sensor_input_dev *dev) {
 400108c:	defffd04 	addi	sp,sp,-12
 4001090:	dfc00215 	stw	ra,8(sp)
 4001094:	df000115 	stw	fp,4(sp)
 4001098:	df000104 	addi	fp,sp,4
 400109c:	e13fff15 	stw	r4,-4(fp)
    while (!cmos_sensor_input_status_idle(dev)) {
 40010a0:	00000606 	br	40010bc <cmos_sensor_input_wait_until_idle+0x30>
        if (cmos_sensor_input_status_fifo_ovfl(dev)) {
 40010a4:	e13fff17 	ldw	r4,-4(fp)
 40010a8:	4000fc80 	call	4000fc8 <cmos_sensor_input_status_fifo_ovfl>
 40010ac:	10803fcc 	andi	r2,r2,255
 40010b0:	10000226 	beq	r2,zero,40010bc <cmos_sensor_input_wait_until_idle+0x30>
            return false;
 40010b4:	0005883a 	mov	r2,zero
 40010b8:	00000606 	br	40010d4 <cmos_sensor_input_wait_until_idle+0x48>
 *
 * Returns true if the fifo did not overflow.
 * Returns false if the fifo did overflow.
 */
bool cmos_sensor_input_wait_until_idle(cmos_sensor_input_dev *dev) {
    while (!cmos_sensor_input_status_idle(dev)) {
 40010bc:	e13fff17 	ldw	r4,-4(fp)
 40010c0:	4000f940 	call	4000f94 <cmos_sensor_input_status_idle>
 40010c4:	1080005c 	xori	r2,r2,1
 40010c8:	10803fcc 	andi	r2,r2,255
 40010cc:	103ff51e 	bne	r2,zero,40010a4 <__alt_data_end+0xfc0010a4>
        if (cmos_sensor_input_status_fifo_ovfl(dev)) {
            return false;
        }
    }

    return true;
 40010d0:	00800044 	movi	r2,1
}
 40010d4:	e037883a 	mov	sp,fp
 40010d8:	dfc00117 	ldw	ra,4(sp)
 40010dc:	df000017 	ldw	fp,0(sp)
 40010e0:	dec00204 	addi	sp,sp,8
 40010e4:	f800283a 	ret

040010e8 <cmos_sensor_input_frame_size>:
 * cmos_sensor_input_frame_size
 *
 * Returns the total size of a frame in bytes outputted by the cmos_sensor_input
 * unit in its current configuration.
 */
size_t cmos_sensor_input_frame_size(cmos_sensor_input_dev *dev) {
 40010e8:	defff704 	addi	sp,sp,-36
 40010ec:	dfc00815 	stw	ra,32(sp)
 40010f0:	df000715 	stw	fp,28(sp)
 40010f4:	df000704 	addi	fp,sp,28
 40010f8:	e13fff15 	stw	r4,-4(fp)
    cmos_sensor_input_wait_until_idle(dev);
 40010fc:	e13fff17 	ldw	r4,-4(fp)
 4001100:	400108c0 	call	400108c <cmos_sensor_input_wait_until_idle>

    uint32_t frame_width = cmos_sensor_input_frame_info_frame_width(dev);
 4001104:	e13fff17 	ldw	r4,-4(fp)
 4001108:	400102c0 	call	400102c <cmos_sensor_input_frame_info_frame_width>
 400110c:	e0bffa15 	stw	r2,-24(fp)
    uint32_t frame_height = cmos_sensor_input_frame_info_frame_height(dev);
 4001110:	e13fff17 	ldw	r4,-4(fp)
 4001114:	400105c0 	call	400105c <cmos_sensor_input_frame_info_frame_height>
 4001118:	e0bffb15 	stw	r2,-20(fp)
    uint32_t frame_total_pixels = frame_width * frame_height;
 400111c:	e17ffb17 	ldw	r5,-20(fp)
 4001120:	e13ffa17 	ldw	r4,-24(fp)
 4001124:	40044f40 	call	40044f4 <__mulsi3>
 4001128:	e0bffc15 	stw	r2,-16(fp)
    uint32_t num_pixels_in_output_width = 0;
 400112c:	e03ff915 	stw	zero,-28(fp)

    if (!dev->debayer_enable && !dev->packer_enable) {
 4001130:	e0bfff17 	ldw	r2,-4(fp)
 4001134:	10800603 	ldbu	r2,24(r2)
 4001138:	1080005c 	xori	r2,r2,1
 400113c:	10803fcc 	andi	r2,r2,255
 4001140:	10000826 	beq	r2,zero,4001164 <cmos_sensor_input_frame_size+0x7c>
 4001144:	e0bfff17 	ldw	r2,-4(fp)
 4001148:	10800643 	ldbu	r2,25(r2)
 400114c:	1080005c 	xori	r2,r2,1
 4001150:	10803fcc 	andi	r2,r2,255
 4001154:	10000326 	beq	r2,zero,4001164 <cmos_sensor_input_frame_size+0x7c>
        num_pixels_in_output_width = 1;
 4001158:	00800044 	movi	r2,1
 400115c:	e0bff915 	stw	r2,-28(fp)
 4001160:	00003206 	br	400122c <cmos_sensor_input_frame_size+0x144>
    } else if (!dev->debayer_enable && dev->packer_enable) {
 4001164:	e0bfff17 	ldw	r2,-4(fp)
 4001168:	10800603 	ldbu	r2,24(r2)
 400116c:	1080005c 	xori	r2,r2,1
 4001170:	10803fcc 	andi	r2,r2,255
 4001174:	10000e26 	beq	r2,zero,40011b0 <cmos_sensor_input_frame_size+0xc8>
 4001178:	e0bfff17 	ldw	r2,-4(fp)
 400117c:	10800643 	ldbu	r2,25(r2)
 4001180:	10803fcc 	andi	r2,r2,255
 4001184:	10000a26 	beq	r2,zero,40011b0 <cmos_sensor_input_frame_size+0xc8>
        num_pixels_in_output_width = dev->output_width / dev->pix_depth;
 4001188:	e0bfff17 	ldw	r2,-4(fp)
 400118c:	10c00417 	ldw	r3,16(r2)
 4001190:	e0bfff17 	ldw	r2,-4(fp)
 4001194:	10800103 	ldbu	r2,4(r2)
 4001198:	10803fcc 	andi	r2,r2,255
 400119c:	100b883a 	mov	r5,r2
 40011a0:	1809883a 	mov	r4,r3
 40011a4:	40044380 	call	4004438 <__udivsi3>
 40011a8:	e0bff915 	stw	r2,-28(fp)
 40011ac:	00001f06 	br	400122c <cmos_sensor_input_frame_size+0x144>
    } else if (dev->debayer_enable && !dev->packer_enable) {
 40011b0:	e0bfff17 	ldw	r2,-4(fp)
 40011b4:	10800603 	ldbu	r2,24(r2)
 40011b8:	10803fcc 	andi	r2,r2,255
 40011bc:	10000826 	beq	r2,zero,40011e0 <cmos_sensor_input_frame_size+0xf8>
 40011c0:	e0bfff17 	ldw	r2,-4(fp)
 40011c4:	10800643 	ldbu	r2,25(r2)
 40011c8:	1080005c 	xori	r2,r2,1
 40011cc:	10803fcc 	andi	r2,r2,255
 40011d0:	10000326 	beq	r2,zero,40011e0 <cmos_sensor_input_frame_size+0xf8>
        num_pixels_in_output_width = 1;
 40011d4:	00800044 	movi	r2,1
 40011d8:	e0bff915 	stw	r2,-28(fp)
 40011dc:	00001306 	br	400122c <cmos_sensor_input_frame_size+0x144>
    } else if (dev->debayer_enable && dev->packer_enable) {
 40011e0:	e0bfff17 	ldw	r2,-4(fp)
 40011e4:	10800603 	ldbu	r2,24(r2)
 40011e8:	10803fcc 	andi	r2,r2,255
 40011ec:	10000f26 	beq	r2,zero,400122c <cmos_sensor_input_frame_size+0x144>
 40011f0:	e0bfff17 	ldw	r2,-4(fp)
 40011f4:	10800643 	ldbu	r2,25(r2)
 40011f8:	10803fcc 	andi	r2,r2,255
 40011fc:	10000b26 	beq	r2,zero,400122c <cmos_sensor_input_frame_size+0x144>
        num_pixels_in_output_width = dev->output_width / (3 * dev->pix_depth);
 4001200:	e0bfff17 	ldw	r2,-4(fp)
 4001204:	11000417 	ldw	r4,16(r2)
 4001208:	e0bfff17 	ldw	r2,-4(fp)
 400120c:	10800103 	ldbu	r2,4(r2)
 4001210:	10c03fcc 	andi	r3,r2,255
 4001214:	1805883a 	mov	r2,r3
 4001218:	1085883a 	add	r2,r2,r2
 400121c:	10c5883a 	add	r2,r2,r3
 4001220:	100b883a 	mov	r5,r2
 4001224:	40044380 	call	4004438 <__udivsi3>
 4001228:	e0bff915 	stw	r2,-28(fp)
    }

    uint32_t num_output_width_packets = ceil_div(frame_total_pixels, num_pixels_in_output_width);
 400122c:	e17ff917 	ldw	r5,-28(fp)
 4001230:	e13ffc17 	ldw	r4,-16(fp)
 4001234:	40006a00 	call	40006a0 <ceil_div>
 4001238:	e0bffd15 	stw	r2,-12(fp)
    uint32_t frame_size_in_bytes = num_output_width_packets * (dev->output_width / 8);
 400123c:	e0bfff17 	ldw	r2,-4(fp)
 4001240:	10800417 	ldw	r2,16(r2)
 4001244:	1004d0fa 	srli	r2,r2,3
 4001248:	e17ffd17 	ldw	r5,-12(fp)
 400124c:	1009883a 	mov	r4,r2
 4001250:	40044f40 	call	40044f4 <__mulsi3>
 4001254:	e0bffe15 	stw	r2,-8(fp)

    return frame_size_in_bytes;
 4001258:	e0bffe17 	ldw	r2,-8(fp)
}
 400125c:	e037883a 	mov	sp,fp
 4001260:	dfc00117 	ldw	ra,4(sp)
 4001264:	df000017 	ldw	fp,0(sp)
 4001268:	dec00204 	addi	sp,sp,8
 400126c:	f800283a 	ret

04001270 <TRDB_D5M_log2>:
///////////////////////
// GENERAL FUNCTIONS //
///////////////////////

// Calculates log2 of a number. Attention: the number must be a power of 2
static uint16_t TRDB_D5M_log2(uint16_t power_of_2) {
 4001270:	defffe04 	addi	sp,sp,-8
 4001274:	df000115 	stw	fp,4(sp)
 4001278:	df000104 	addi	fp,sp,4
 400127c:	2005883a 	mov	r2,r4
 4001280:	e0bfff0d 	sth	r2,-4(fp)
    if      (power_of_2 == 0x0001) return 0;
 4001284:	e0bfff0b 	ldhu	r2,-4(fp)
 4001288:	10800058 	cmpnei	r2,r2,1
 400128c:	1000021e 	bne	r2,zero,4001298 <TRDB_D5M_log2+0x28>
 4001290:	0005883a 	mov	r2,zero
 4001294:	00004706 	br	40013b4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0002) return 1;
 4001298:	e0bfff0b 	ldhu	r2,-4(fp)
 400129c:	10800098 	cmpnei	r2,r2,2
 40012a0:	1000021e 	bne	r2,zero,40012ac <TRDB_D5M_log2+0x3c>
 40012a4:	00800044 	movi	r2,1
 40012a8:	00004206 	br	40013b4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0004) return 2;
 40012ac:	e0bfff0b 	ldhu	r2,-4(fp)
 40012b0:	10800118 	cmpnei	r2,r2,4
 40012b4:	1000021e 	bne	r2,zero,40012c0 <TRDB_D5M_log2+0x50>
 40012b8:	00800084 	movi	r2,2
 40012bc:	00003d06 	br	40013b4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0008) return 3;
 40012c0:	e0bfff0b 	ldhu	r2,-4(fp)
 40012c4:	10800218 	cmpnei	r2,r2,8
 40012c8:	1000021e 	bne	r2,zero,40012d4 <TRDB_D5M_log2+0x64>
 40012cc:	008000c4 	movi	r2,3
 40012d0:	00003806 	br	40013b4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0010) return 4;
 40012d4:	e0bfff0b 	ldhu	r2,-4(fp)
 40012d8:	10800418 	cmpnei	r2,r2,16
 40012dc:	1000021e 	bne	r2,zero,40012e8 <TRDB_D5M_log2+0x78>
 40012e0:	00800104 	movi	r2,4
 40012e4:	00003306 	br	40013b4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0020) return 5;
 40012e8:	e0bfff0b 	ldhu	r2,-4(fp)
 40012ec:	10800818 	cmpnei	r2,r2,32
 40012f0:	1000021e 	bne	r2,zero,40012fc <TRDB_D5M_log2+0x8c>
 40012f4:	00800144 	movi	r2,5
 40012f8:	00002e06 	br	40013b4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0040) return 6;
 40012fc:	e0bfff0b 	ldhu	r2,-4(fp)
 4001300:	10801018 	cmpnei	r2,r2,64
 4001304:	1000021e 	bne	r2,zero,4001310 <TRDB_D5M_log2+0xa0>
 4001308:	00800184 	movi	r2,6
 400130c:	00002906 	br	40013b4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0080) return 7;
 4001310:	e0bfff0b 	ldhu	r2,-4(fp)
 4001314:	10802018 	cmpnei	r2,r2,128
 4001318:	1000021e 	bne	r2,zero,4001324 <TRDB_D5M_log2+0xb4>
 400131c:	008001c4 	movi	r2,7
 4001320:	00002406 	br	40013b4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0100) return 8;
 4001324:	e0bfff0b 	ldhu	r2,-4(fp)
 4001328:	10804018 	cmpnei	r2,r2,256
 400132c:	1000021e 	bne	r2,zero,4001338 <TRDB_D5M_log2+0xc8>
 4001330:	00800204 	movi	r2,8
 4001334:	00001f06 	br	40013b4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0200) return 9;
 4001338:	e0bfff0b 	ldhu	r2,-4(fp)
 400133c:	10808018 	cmpnei	r2,r2,512
 4001340:	1000021e 	bne	r2,zero,400134c <TRDB_D5M_log2+0xdc>
 4001344:	00800244 	movi	r2,9
 4001348:	00001a06 	br	40013b4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0400) return 10;
 400134c:	e0bfff0b 	ldhu	r2,-4(fp)
 4001350:	10810018 	cmpnei	r2,r2,1024
 4001354:	1000021e 	bne	r2,zero,4001360 <TRDB_D5M_log2+0xf0>
 4001358:	00800284 	movi	r2,10
 400135c:	00001506 	br	40013b4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0800) return 11;
 4001360:	e0bfff0b 	ldhu	r2,-4(fp)
 4001364:	10820018 	cmpnei	r2,r2,2048
 4001368:	1000021e 	bne	r2,zero,4001374 <TRDB_D5M_log2+0x104>
 400136c:	008002c4 	movi	r2,11
 4001370:	00001006 	br	40013b4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x1000) return 12;
 4001374:	e0bfff0b 	ldhu	r2,-4(fp)
 4001378:	10840018 	cmpnei	r2,r2,4096
 400137c:	1000021e 	bne	r2,zero,4001388 <TRDB_D5M_log2+0x118>
 4001380:	00800304 	movi	r2,12
 4001384:	00000b06 	br	40013b4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x2000) return 13;
 4001388:	e0bfff0b 	ldhu	r2,-4(fp)
 400138c:	10880018 	cmpnei	r2,r2,8192
 4001390:	1000021e 	bne	r2,zero,400139c <TRDB_D5M_log2+0x12c>
 4001394:	00800344 	movi	r2,13
 4001398:	00000606 	br	40013b4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x4000) return 14;
 400139c:	e0bfff0b 	ldhu	r2,-4(fp)
 40013a0:	10900018 	cmpnei	r2,r2,16384
 40013a4:	1000021e 	bne	r2,zero,40013b0 <TRDB_D5M_log2+0x140>
 40013a8:	00800384 	movi	r2,14
 40013ac:	00000106 	br	40013b4 <TRDB_D5M_log2+0x144>
    else                           return 15;
 40013b0:	008003c4 	movi	r2,15
}
 40013b4:	e037883a 	mov	sp,fp
 40013b8:	df000017 	ldw	fp,0(sp)
 40013bc:	dec00104 	addi	sp,sp,4
 40013c0:	f800283a 	ret

040013c4 <TRDB_D5M_shift_amount>:

static uint16_t TRDB_D5M_shift_amount(uint16_t mask) {
 40013c4:	defffd04 	addi	sp,sp,-12
 40013c8:	dfc00215 	stw	ra,8(sp)
 40013cc:	df000115 	stw	fp,4(sp)
 40013d0:	df000104 	addi	fp,sp,4
 40013d4:	2005883a 	mov	r2,r4
 40013d8:	e0bfff0d 	sth	r2,-4(fp)
    // (mask & -mask) clears all but the lowest bit of x
    return TRDB_D5M_log2(mask & (~mask + 1));
 40013dc:	e0bfff0b 	ldhu	r2,-4(fp)
 40013e0:	0085c83a 	sub	r2,zero,r2
 40013e4:	1007883a 	mov	r3,r2
 40013e8:	e0bfff0b 	ldhu	r2,-4(fp)
 40013ec:	1884703a 	and	r2,r3,r2
 40013f0:	10bfffcc 	andi	r2,r2,65535
 40013f4:	1009883a 	mov	r4,r2
 40013f8:	40012700 	call	4001270 <TRDB_D5M_log2>
}
 40013fc:	e037883a 	mov	sp,fp
 4001400:	dfc00117 	ldw	ra,4(sp)
 4001404:	df000017 	ldw	fp,0(sp)
 4001408:	dec00204 	addi	sp,sp,8
 400140c:	f800283a 	ret

04001410 <TRDB_D5M_READ>:

static uint16_t TRDB_D5M_READ(uint16_t full_reg_value, uint16_t mask) {
 4001410:	defffb04 	addi	sp,sp,-20
 4001414:	dfc00415 	stw	ra,16(sp)
 4001418:	df000315 	stw	fp,12(sp)
 400141c:	dc000215 	stw	r16,8(sp)
 4001420:	df000304 	addi	fp,sp,12
 4001424:	2007883a 	mov	r3,r4
 4001428:	2805883a 	mov	r2,r5
 400142c:	e0fffd0d 	sth	r3,-12(fp)
 4001430:	e0bffe0d 	sth	r2,-8(fp)
    return (full_reg_value & mask) >> TRDB_D5M_shift_amount(mask);
 4001434:	e0fffd0b 	ldhu	r3,-12(fp)
 4001438:	e0bffe0b 	ldhu	r2,-8(fp)
 400143c:	1884703a 	and	r2,r3,r2
 4001440:	143fffcc 	andi	r16,r2,65535
 4001444:	e0bffe0b 	ldhu	r2,-8(fp)
 4001448:	1009883a 	mov	r4,r2
 400144c:	40013c40 	call	40013c4 <TRDB_D5M_shift_amount>
 4001450:	10bfffcc 	andi	r2,r2,65535
 4001454:	8085d83a 	sra	r2,r16,r2
}
 4001458:	e6ffff04 	addi	sp,fp,-4
 400145c:	dfc00217 	ldw	ra,8(sp)
 4001460:	df000117 	ldw	fp,4(sp)
 4001464:	dc000017 	ldw	r16,0(sp)
 4001468:	dec00304 	addi	sp,sp,12
 400146c:	f800283a 	ret

04001470 <TRDB_D5M_WRITE>:

static uint16_t TRDB_D5M_WRITE(uint16_t full_reg_value, uint16_t mask, uint16_t write_value) {
 4001470:	defffa04 	addi	sp,sp,-24
 4001474:	dfc00515 	stw	ra,20(sp)
 4001478:	df000415 	stw	fp,16(sp)
 400147c:	dc000315 	stw	r16,12(sp)
 4001480:	df000404 	addi	fp,sp,16
 4001484:	2807883a 	mov	r3,r5
 4001488:	3005883a 	mov	r2,r6
 400148c:	e13ffc0d 	sth	r4,-16(fp)
 4001490:	e0fffd0d 	sth	r3,-12(fp)
 4001494:	e0bffe0d 	sth	r2,-8(fp)
    return (full_reg_value & (~mask)) | ((write_value << TRDB_D5M_shift_amount(mask)) & mask);
 4001498:	e43ffe0b 	ldhu	r16,-8(fp)
 400149c:	e0bffd0b 	ldhu	r2,-12(fp)
 40014a0:	1009883a 	mov	r4,r2
 40014a4:	40013c40 	call	40013c4 <TRDB_D5M_shift_amount>
 40014a8:	10bfffcc 	andi	r2,r2,65535
 40014ac:	8084983a 	sll	r2,r16,r2
 40014b0:	1007883a 	mov	r3,r2
 40014b4:	e0bffc0b 	ldhu	r2,-16(fp)
 40014b8:	1884f03a 	xor	r2,r3,r2
 40014bc:	1007883a 	mov	r3,r2
 40014c0:	e0bffd0b 	ldhu	r2,-12(fp)
 40014c4:	1884703a 	and	r2,r3,r2
 40014c8:	1007883a 	mov	r3,r2
 40014cc:	e0bffc0b 	ldhu	r2,-16(fp)
 40014d0:	1884f03a 	xor	r2,r3,r2
}
 40014d4:	e6ffff04 	addi	sp,fp,-4
 40014d8:	dfc00217 	ldw	ra,8(sp)
 40014dc:	df000117 	ldw	fp,4(sp)
 40014e0:	dc000017 	ldw	r16,0(sp)
 40014e4:	dec00304 	addi	sp,sp,12
 40014e8:	f800283a 	ret

040014ec <max_pixel_value>:
#define TRDB_D5M_ROW_BIN_REG_DATA     (3)
#define TRDB_D5M_ROW_SKIP_REG_DATA    (3)
#define TRDB_D5M_COLUMN_BIN_REG_DATA  (3)
#define TRDB_D5M_COLUMN_SKIP_REG_DATA (3)

uint16_t max_pixel_value(uint16_t *frame, uint32_t width, uint32_t height) {
 40014ec:	defff704 	addi	sp,sp,-36
 40014f0:	dfc00815 	stw	ra,32(sp)
 40014f4:	df000715 	stw	fp,28(sp)
 40014f8:	df000704 	addi	fp,sp,28
 40014fc:	e13ffd15 	stw	r4,-12(fp)
 4001500:	e17ffe15 	stw	r5,-8(fp)
 4001504:	e1bfff15 	stw	r6,-4(fp)
    uint16_t max = 0;
 4001508:	e03ff90d 	sth	zero,-28(fp)

    for (uint32_t row = 0; row < height; row++) {
 400150c:	e03ffa15 	stw	zero,-24(fp)
 4001510:	00001c06 	br	4001584 <max_pixel_value+0x98>
        for (uint32_t col = 0; col < width; col++) {
 4001514:	e03ffb15 	stw	zero,-20(fp)
 4001518:	00001406 	br	400156c <max_pixel_value+0x80>
            uint16_t current = frame[row * width + col];
 400151c:	e17ffe17 	ldw	r5,-8(fp)
 4001520:	e13ffa17 	ldw	r4,-24(fp)
 4001524:	40044f40 	call	40044f4 <__mulsi3>
 4001528:	1007883a 	mov	r3,r2
 400152c:	e0bffb17 	ldw	r2,-20(fp)
 4001530:	1885883a 	add	r2,r3,r2
 4001534:	1085883a 	add	r2,r2,r2
 4001538:	1007883a 	mov	r3,r2
 400153c:	e0bffd17 	ldw	r2,-12(fp)
 4001540:	10c5883a 	add	r2,r2,r3
 4001544:	1080000b 	ldhu	r2,0(r2)
 4001548:	e0bffc0d 	sth	r2,-16(fp)
            if (current > max) {
 400154c:	e0bffc0b 	ldhu	r2,-16(fp)
 4001550:	e0fff90b 	ldhu	r3,-28(fp)
 4001554:	1880022e 	bgeu	r3,r2,4001560 <max_pixel_value+0x74>
                max = current;
 4001558:	e0bffc0b 	ldhu	r2,-16(fp)
 400155c:	e0bff90d 	sth	r2,-28(fp)

uint16_t max_pixel_value(uint16_t *frame, uint32_t width, uint32_t height) {
    uint16_t max = 0;

    for (uint32_t row = 0; row < height; row++) {
        for (uint32_t col = 0; col < width; col++) {
 4001560:	e0bffb17 	ldw	r2,-20(fp)
 4001564:	10800044 	addi	r2,r2,1
 4001568:	e0bffb15 	stw	r2,-20(fp)
 400156c:	e0fffb17 	ldw	r3,-20(fp)
 4001570:	e0bffe17 	ldw	r2,-8(fp)
 4001574:	18bfe936 	bltu	r3,r2,400151c <__alt_data_end+0xfc00151c>
#define TRDB_D5M_COLUMN_SKIP_REG_DATA (3)

uint16_t max_pixel_value(uint16_t *frame, uint32_t width, uint32_t height) {
    uint16_t max = 0;

    for (uint32_t row = 0; row < height; row++) {
 4001578:	e0bffa17 	ldw	r2,-24(fp)
 400157c:	10800044 	addi	r2,r2,1
 4001580:	e0bffa15 	stw	r2,-24(fp)
 4001584:	e0fffa17 	ldw	r3,-24(fp)
 4001588:	e0bfff17 	ldw	r2,-4(fp)
 400158c:	18bfe136 	bltu	r3,r2,4001514 <__alt_data_end+0xfc001514>
                max = current;
            }
        }
    }

    return max;
 4001590:	e0bff90b 	ldhu	r2,-28(fp)
}
 4001594:	e037883a 	mov	sp,fp
 4001598:	dfc00117 	ldw	ra,4(sp)
 400159c:	df000017 	ldw	fp,0(sp)
 40015a0:	dec00204 	addi	sp,sp,8
 40015a4:	f800283a 	ret

040015a8 <write_ppm>:

bool write_ppm(uint16_t *frame, uint32_t width, uint32_t height, const char *filename) {
 40015a8:	defff804 	addi	sp,sp,-32
 40015ac:	dfc00715 	stw	ra,28(sp)
 40015b0:	df000615 	stw	fp,24(sp)
 40015b4:	df000604 	addi	fp,sp,24
 40015b8:	e13ffc15 	stw	r4,-16(fp)
 40015bc:	e17ffd15 	stw	r5,-12(fp)
 40015c0:	e1bffe15 	stw	r6,-8(fp)
 40015c4:	e1ffff15 	stw	r7,-4(fp)
//    if (!foutput) {
//        printf("Error: could not open \"%s\" for writing\n", filename);
//        return false;
//    }

    printf("P3\n"); /* PPM magic number */
 40015c8:	01010074 	movhi	r4,1025
 40015cc:	21190a04 	addi	r4,r4,25640
 40015d0:	40051d80 	call	40051d8 <puts>
    printf("%" PRIu32 " %" PRIu32 "\n", width, height); /* frame dimensions */
 40015d4:	e1bffe17 	ldw	r6,-8(fp)
 40015d8:	e17ffd17 	ldw	r5,-12(fp)
 40015dc:	01010074 	movhi	r4,1025
 40015e0:	21190b04 	addi	r4,r4,25644
 40015e4:	40050bc0 	call	40050bc <printf>
    printf("%" PRIu16 "\n", max_pixel_value(frame, width, height)); /* max value */
 40015e8:	e1bffe17 	ldw	r6,-8(fp)
 40015ec:	e17ffd17 	ldw	r5,-12(fp)
 40015f0:	e13ffc17 	ldw	r4,-16(fp)
 40015f4:	40014ec0 	call	40014ec <max_pixel_value>
 40015f8:	10bfffcc 	andi	r2,r2,65535
 40015fc:	100b883a 	mov	r5,r2
 4001600:	01010074 	movhi	r4,1025
 4001604:	21190e04 	addi	r4,r4,25656
 4001608:	40050bc0 	call	40050bc <printf>

    for (uint32_t row = 0; row < height; row++) {
 400160c:	e03ffa15 	stw	zero,-24(fp)
 4001610:	00009206 	br	400185c <write_ppm+0x2b4>
        for (uint32_t col = 0; col < width; col++) {
 4001614:	e03ffb15 	stw	zero,-20(fp)
 4001618:	00008406 	br	400182c <write_ppm+0x284>

            if (row % 2 == 0 && col % 2 == 0) {
 400161c:	e0bffa17 	ldw	r2,-24(fp)
 4001620:	1080004c 	andi	r2,r2,1
 4001624:	10001c1e 	bne	r2,zero,4001698 <write_ppm+0xf0>
 4001628:	e0bffb17 	ldw	r2,-20(fp)
 400162c:	1080004c 	andi	r2,r2,1
 4001630:	1000191e 	bne	r2,zero,4001698 <write_ppm+0xf0>
                /* even row, even col = G1 */
                printf("%05" PRIu16 " ", 0);                        /* R */
 4001634:	000b883a 	mov	r5,zero
 4001638:	01010074 	movhi	r4,1025
 400163c:	21190f04 	addi	r4,r4,25660
 4001640:	40050bc0 	call	40050bc <printf>
                printf("%05" PRIu16 " ", frame[row * width + col]); /* G */
 4001644:	e17ffd17 	ldw	r5,-12(fp)
 4001648:	e13ffa17 	ldw	r4,-24(fp)
 400164c:	40044f40 	call	40044f4 <__mulsi3>
 4001650:	1007883a 	mov	r3,r2
 4001654:	e0bffb17 	ldw	r2,-20(fp)
 4001658:	1885883a 	add	r2,r3,r2
 400165c:	1085883a 	add	r2,r2,r2
 4001660:	1007883a 	mov	r3,r2
 4001664:	e0bffc17 	ldw	r2,-16(fp)
 4001668:	10c5883a 	add	r2,r2,r3
 400166c:	1080000b 	ldhu	r2,0(r2)
 4001670:	10bfffcc 	andi	r2,r2,65535
 4001674:	100b883a 	mov	r5,r2
 4001678:	01010074 	movhi	r4,1025
 400167c:	21190f04 	addi	r4,r4,25660
 4001680:	40050bc0 	call	40050bc <printf>
                printf("%05" PRIu16    , 0);                        /* B */
 4001684:	000b883a 	mov	r5,zero
 4001688:	01010074 	movhi	r4,1025
 400168c:	21191104 	addi	r4,r4,25668
 4001690:	40050bc0 	call	40050bc <printf>
 4001694:	00005c06 	br	4001808 <write_ppm+0x260>
            } else if (row % 2 == 0 && col % 2 == 1) {
 4001698:	e0bffa17 	ldw	r2,-24(fp)
 400169c:	1080004c 	andi	r2,r2,1
 40016a0:	10001c1e 	bne	r2,zero,4001714 <write_ppm+0x16c>
 40016a4:	e0bffb17 	ldw	r2,-20(fp)
 40016a8:	1080004c 	andi	r2,r2,1
 40016ac:	10001926 	beq	r2,zero,4001714 <write_ppm+0x16c>
                /* even row, odd col = R */
                printf("%05" PRIu16 " ", frame[row * width + col]); /* R */
 40016b0:	e17ffd17 	ldw	r5,-12(fp)
 40016b4:	e13ffa17 	ldw	r4,-24(fp)
 40016b8:	40044f40 	call	40044f4 <__mulsi3>
 40016bc:	1007883a 	mov	r3,r2
 40016c0:	e0bffb17 	ldw	r2,-20(fp)
 40016c4:	1885883a 	add	r2,r3,r2
 40016c8:	1085883a 	add	r2,r2,r2
 40016cc:	1007883a 	mov	r3,r2
 40016d0:	e0bffc17 	ldw	r2,-16(fp)
 40016d4:	10c5883a 	add	r2,r2,r3
 40016d8:	1080000b 	ldhu	r2,0(r2)
 40016dc:	10bfffcc 	andi	r2,r2,65535
 40016e0:	100b883a 	mov	r5,r2
 40016e4:	01010074 	movhi	r4,1025
 40016e8:	21190f04 	addi	r4,r4,25660
 40016ec:	40050bc0 	call	40050bc <printf>
                printf("%05" PRIu16 " ", 0);                        /* G */
 40016f0:	000b883a 	mov	r5,zero
 40016f4:	01010074 	movhi	r4,1025
 40016f8:	21190f04 	addi	r4,r4,25660
 40016fc:	40050bc0 	call	40050bc <printf>
                printf("%05" PRIu16    , 0);                        /* B */
 4001700:	000b883a 	mov	r5,zero
 4001704:	01010074 	movhi	r4,1025
 4001708:	21191104 	addi	r4,r4,25668
 400170c:	40050bc0 	call	40050bc <printf>
 4001710:	00003d06 	br	4001808 <write_ppm+0x260>
            } else if (row % 2 == 1 && col % 2 == 0) {
 4001714:	e0bffa17 	ldw	r2,-24(fp)
 4001718:	1080004c 	andi	r2,r2,1
 400171c:	10001c26 	beq	r2,zero,4001790 <write_ppm+0x1e8>
 4001720:	e0bffb17 	ldw	r2,-20(fp)
 4001724:	1080004c 	andi	r2,r2,1
 4001728:	1000191e 	bne	r2,zero,4001790 <write_ppm+0x1e8>
                /* odd row, even col = B */
                printf("%05" PRIu16 " ", 0);                        /* R */
 400172c:	000b883a 	mov	r5,zero
 4001730:	01010074 	movhi	r4,1025
 4001734:	21190f04 	addi	r4,r4,25660
 4001738:	40050bc0 	call	40050bc <printf>
                printf("%05" PRIu16 " ", 0);                        /* G */
 400173c:	000b883a 	mov	r5,zero
 4001740:	01010074 	movhi	r4,1025
 4001744:	21190f04 	addi	r4,r4,25660
 4001748:	40050bc0 	call	40050bc <printf>
                printf("%05" PRIu16    , frame[row * width + col]); /* B */
 400174c:	e17ffd17 	ldw	r5,-12(fp)
 4001750:	e13ffa17 	ldw	r4,-24(fp)
 4001754:	40044f40 	call	40044f4 <__mulsi3>
 4001758:	1007883a 	mov	r3,r2
 400175c:	e0bffb17 	ldw	r2,-20(fp)
 4001760:	1885883a 	add	r2,r3,r2
 4001764:	1085883a 	add	r2,r2,r2
 4001768:	1007883a 	mov	r3,r2
 400176c:	e0bffc17 	ldw	r2,-16(fp)
 4001770:	10c5883a 	add	r2,r2,r3
 4001774:	1080000b 	ldhu	r2,0(r2)
 4001778:	10bfffcc 	andi	r2,r2,65535
 400177c:	100b883a 	mov	r5,r2
 4001780:	01010074 	movhi	r4,1025
 4001784:	21191104 	addi	r4,r4,25668
 4001788:	40050bc0 	call	40050bc <printf>
 400178c:	00001e06 	br	4001808 <write_ppm+0x260>
            } else if (row % 2 == 1 && col % 2 == 1) {
 4001790:	e0bffa17 	ldw	r2,-24(fp)
 4001794:	1080004c 	andi	r2,r2,1
 4001798:	10001b26 	beq	r2,zero,4001808 <write_ppm+0x260>
 400179c:	e0bffb17 	ldw	r2,-20(fp)
 40017a0:	1080004c 	andi	r2,r2,1
 40017a4:	10001826 	beq	r2,zero,4001808 <write_ppm+0x260>
                /* odd row, odd col = G2 */
                printf("%05" PRIu16 " ", 0);                        /* R */
 40017a8:	000b883a 	mov	r5,zero
 40017ac:	01010074 	movhi	r4,1025
 40017b0:	21190f04 	addi	r4,r4,25660
 40017b4:	40050bc0 	call	40050bc <printf>
                printf("%05" PRIu16 " ", frame[row * width + col]); /* G */
 40017b8:	e17ffd17 	ldw	r5,-12(fp)
 40017bc:	e13ffa17 	ldw	r4,-24(fp)
 40017c0:	40044f40 	call	40044f4 <__mulsi3>
 40017c4:	1007883a 	mov	r3,r2
 40017c8:	e0bffb17 	ldw	r2,-20(fp)
 40017cc:	1885883a 	add	r2,r3,r2
 40017d0:	1085883a 	add	r2,r2,r2
 40017d4:	1007883a 	mov	r3,r2
 40017d8:	e0bffc17 	ldw	r2,-16(fp)
 40017dc:	10c5883a 	add	r2,r2,r3
 40017e0:	1080000b 	ldhu	r2,0(r2)
 40017e4:	10bfffcc 	andi	r2,r2,65535
 40017e8:	100b883a 	mov	r5,r2
 40017ec:	01010074 	movhi	r4,1025
 40017f0:	21190f04 	addi	r4,r4,25660
 40017f4:	40050bc0 	call	40050bc <printf>
                printf("%05" PRIu16    , 0);                        /* B */
 40017f8:	000b883a 	mov	r5,zero
 40017fc:	01010074 	movhi	r4,1025
 4001800:	21191104 	addi	r4,r4,25668
 4001804:	40050bc0 	call	40050bc <printf>
            }

            if (col != (width - 1)) {
 4001808:	e0bffd17 	ldw	r2,-12(fp)
 400180c:	10ffffc4 	addi	r3,r2,-1
 4001810:	e0bffb17 	ldw	r2,-20(fp)
 4001814:	18800226 	beq	r3,r2,4001820 <write_ppm+0x278>
                printf(" ");
 4001818:	01000804 	movi	r4,32
 400181c:	40051000 	call	4005100 <putchar>
    printf("P3\n"); /* PPM magic number */
    printf("%" PRIu32 " %" PRIu32 "\n", width, height); /* frame dimensions */
    printf("%" PRIu16 "\n", max_pixel_value(frame, width, height)); /* max value */

    for (uint32_t row = 0; row < height; row++) {
        for (uint32_t col = 0; col < width; col++) {
 4001820:	e0bffb17 	ldw	r2,-20(fp)
 4001824:	10800044 	addi	r2,r2,1
 4001828:	e0bffb15 	stw	r2,-20(fp)
 400182c:	e0fffb17 	ldw	r3,-20(fp)
 4001830:	e0bffd17 	ldw	r2,-12(fp)
 4001834:	18bf7936 	bltu	r3,r2,400161c <__alt_data_end+0xfc00161c>
            if (col != (width - 1)) {
                printf(" ");
            }
        }

        if (row != (height - 1)) {
 4001838:	e0bffe17 	ldw	r2,-8(fp)
 400183c:	10ffffc4 	addi	r3,r2,-1
 4001840:	e0bffa17 	ldw	r2,-24(fp)
 4001844:	18800226 	beq	r3,r2,4001850 <write_ppm+0x2a8>
            printf("\n");
 4001848:	01000284 	movi	r4,10
 400184c:	40051000 	call	4005100 <putchar>

    printf("P3\n"); /* PPM magic number */
    printf("%" PRIu32 " %" PRIu32 "\n", width, height); /* frame dimensions */
    printf("%" PRIu16 "\n", max_pixel_value(frame, width, height)); /* max value */

    for (uint32_t row = 0; row < height; row++) {
 4001850:	e0bffa17 	ldw	r2,-24(fp)
 4001854:	10800044 	addi	r2,r2,1
 4001858:	e0bffa15 	stw	r2,-24(fp)
 400185c:	e0fffa17 	ldw	r3,-24(fp)
 4001860:	e0bffe17 	ldw	r2,-8(fp)
 4001864:	18bf6b36 	bltu	r3,r2,4001614 <__alt_data_end+0xfc001614>
//    if (fclose(foutput)) {
//        printf("Error: could not close \"%s\"\n", filename);
//        return false;
//    }

    return true;
 4001868:	00800044 	movi	r2,1
}
 400186c:	e037883a 	mov	sp,fp
 4001870:	dfc00117 	ldw	ra,4(sp)
 4001874:	df000017 	ldw	fp,0(sp)
 4001878:	dec00204 	addi	sp,sp,8
 400187c:	f800283a 	ret

04001880 <main>:

int main(void) {
 4001880:	deffce04 	addi	sp,sp,-200
 4001884:	dfc03115 	stw	ra,196(sp)
 4001888:	df003015 	stw	fp,192(sp)
 400188c:	dc002f15 	stw	r16,188(sp)
 4001890:	df003004 	addi	fp,sp,192

    /*
     * instantiate camera control structure
     */
    trdb_d5m_dev trdb_d5m = TRDB_D5M_INST(TRDB_D5M_0_CMOS_SENSOR_ACQUISITION_0_CMOS_SENSOR_INPUT_0,
 4001894:	e0ffe704 	addi	r3,fp,-100
 4001898:	00820034 	movhi	r2,2048
 400189c:	10841004 	addi	r2,r2,4160
 40018a0:	d8801415 	stw	r2,80(sp)
 40018a4:	00800084 	movi	r2,2
 40018a8:	d8801315 	stw	r2,76(sp)
 40018ac:	d8001215 	stw	zero,72(sp)
 40018b0:	d8001115 	stw	zero,68(sp)
 40018b4:	d8001015 	stw	zero,64(sp)
 40018b8:	00800044 	movi	r2,1
 40018bc:	d8800e15 	stw	r2,56(sp)
 40018c0:	d8000f15 	stw	zero,60(sp)
 40018c4:	00802034 	movhi	r2,128
 40018c8:	d8800d15 	stw	r2,52(sp)
 40018cc:	00800404 	movi	r2,16
 40018d0:	d8800c15 	stw	r2,48(sp)
 40018d4:	00800804 	movi	r2,32
 40018d8:	d8800b15 	stw	r2,44(sp)
 40018dc:	00801004 	movi	r2,64
 40018e0:	d8800a15 	stw	r2,40(sp)
 40018e4:	d8000915 	stw	zero,36(sp)
 40018e8:	00800044 	movi	r2,1
 40018ec:	d8800815 	stw	r2,32(sp)
 40018f0:	00800204 	movi	r2,8
 40018f4:	d8800715 	stw	r2,28(sp)
 40018f8:	00820034 	movhi	r2,2048
 40018fc:	10840804 	addi	r2,r2,4128
 4001900:	d8800615 	stw	r2,24(sp)
 4001904:	00820034 	movhi	r2,2048
 4001908:	10840004 	addi	r2,r2,4096
 400190c:	d8800515 	stw	r2,20(sp)
 4001910:	d8000415 	stw	zero,16(sp)
 4001914:	d8000315 	stw	zero,12(sp)
 4001918:	00800804 	movi	r2,32
 400191c:	d8800215 	stw	r2,8(sp)
 4001920:	00800404 	movi	r2,16
 4001924:	d8800115 	stw	r2,4(sp)
 4001928:	0081e604 	movi	r2,1944
 400192c:	d8800015 	stw	r2,0(sp)
 4001930:	01c28804 	movi	r7,2592
 4001934:	01800304 	movi	r6,12
 4001938:	01420034 	movhi	r5,2048
 400193c:	29440c04 	addi	r5,r5,4144
 4001940:	1809883a 	mov	r4,r3
 4001944:	4003c9c0 	call	4003c9c <trdb_d5m_inst>
                                          TRDB_D5M_0_I2C_0);

    /*
     * initialize camera
     */
    trdb_d5m_init(&trdb_d5m, I2C_FREQ);
 4001948:	e0bfe704 	addi	r2,fp,-100
 400194c:	0140bef4 	movhi	r5,763
 4001950:	297c2004 	addi	r5,r5,-3968
 4001954:	1009883a 	mov	r4,r2
 4001958:	40040d80 	call	40040d8 <trdb_d5m_init>

    /*
     * configure camera
     */
    if (!trdb_d5m_configure(&trdb_d5m,
 400195c:	e0ffe704 	addi	r3,fp,-100
 4001960:	00800044 	movi	r2,1
 4001964:	d8800315 	stw	r2,12(sp)
 4001968:	008000c4 	movi	r2,3
 400196c:	d8800215 	stw	r2,8(sp)
 4001970:	008000c4 	movi	r2,3
 4001974:	d8800115 	stw	r2,4(sp)
 4001978:	008000c4 	movi	r2,3
 400197c:	d8800015 	stw	r2,0(sp)
 4001980:	01c000c4 	movi	r7,3
 4001984:	0181dfc4 	movi	r6,1919
 4001988:	01427fc4 	movi	r5,2559
 400198c:	1809883a 	mov	r4,r3
 4001990:	4003e180 	call	4003e18 <trdb_d5m_configure>
 4001994:	1080005c 	xori	r2,r2,1
 4001998:	10803fcc 	andi	r2,r2,255
 400199c:	10000526 	beq	r2,zero,40019b4 <main+0x134>
                            TRDB_D5M_COLUMN_SIZE_REG_DATA, TRDB_D5M_ROW_SIZE_REG_DATA,
                            TRDB_D5M_ROW_BIN_REG_DATA, TRDB_D5M_ROW_SKIP_REG_DATA,
                            TRDB_D5M_COLUMN_BIN_REG_DATA, TRDB_D5M_COLUMN_SKIP_REG_DATA,
                            true)) {
        printf("Error: could not configure trdb_d5m\n");
 40019a0:	01010074 	movhi	r4,1025
 40019a4:	21191304 	addi	r4,r4,25676
 40019a8:	40051d80 	call	40051d8 <puts>
        return EXIT_FAILURE;
 40019ac:	00800044 	movi	r2,1
 40019b0:	00003206 	br	4001a7c <main+0x1fc>
    }

    /*
     * allocate frame memory
     */
    size_t frame_size = trdb_d5m_frame_size(&trdb_d5m);
 40019b4:	e0bfe704 	addi	r2,fp,-100
 40019b8:	1009883a 	mov	r4,r2
 40019bc:	40042a40 	call	40042a4 <trdb_d5m_frame_size>
 40019c0:	e0bfe515 	stw	r2,-108(fp)
    void *frame = calloc(frame_size, 1);
 40019c4:	01400044 	movi	r5,1
 40019c8:	e13fe517 	ldw	r4,-108(fp)
 40019cc:	400451c0 	call	400451c <calloc>
 40019d0:	e0bfe615 	stw	r2,-104(fp)
    if (!frame) {
 40019d4:	e0bfe617 	ldw	r2,-104(fp)
 40019d8:	1000051e 	bne	r2,zero,40019f0 <main+0x170>
        printf("Error: could not allocate memory for frame\n");
 40019dc:	01010074 	movhi	r4,1025
 40019e0:	21191c04 	addi	r4,r4,25712
 40019e4:	40051d80 	call	40051d8 <puts>
        return EXIT_FAILURE;
 40019e8:	00800044 	movi	r2,1
 40019ec:	00002306 	br	4001a7c <main+0x1fc>
    }

    /*
     * take snapshot
     */
    if (!trdb_d5m_snapshot(&trdb_d5m, frame, frame_size)) {
 40019f0:	e0bfe704 	addi	r2,fp,-100
 40019f4:	e1bfe517 	ldw	r6,-108(fp)
 40019f8:	e17fe617 	ldw	r5,-104(fp)
 40019fc:	1009883a 	mov	r4,r2
 4001a00:	40042600 	call	4004260 <trdb_d5m_snapshot>
 4001a04:	1080005c 	xori	r2,r2,1
 4001a08:	10803fcc 	andi	r2,r2,255
 4001a0c:	10000526 	beq	r2,zero,4001a24 <main+0x1a4>
        printf("Error: could not take snapshot\n");
 4001a10:	01010074 	movhi	r4,1025
 4001a14:	21192704 	addi	r4,r4,25756
 4001a18:	40051d80 	call	40051d8 <puts>
        return EXIT_FAILURE;
 4001a1c:	00800044 	movi	r2,1
 4001a20:	00001606 	br	4001a7c <main+0x1fc>
    }

    /*
     * write image to host
     */
    if (!write_ppm((uint16_t *) frame,
 4001a24:	e0bfe704 	addi	r2,fp,-100
 4001a28:	1009883a 	mov	r4,r2
 4001a2c:	40042d80 	call	40042d8 <trdb_d5m_frame_width>
 4001a30:	1021883a 	mov	r16,r2
 4001a34:	e0bfe704 	addi	r2,fp,-100
 4001a38:	1009883a 	mov	r4,r2
 4001a3c:	400430c0 	call	400430c <trdb_d5m_frame_height>
 4001a40:	01c10074 	movhi	r7,1025
 4001a44:	39d92f04 	addi	r7,r7,25788
 4001a48:	100d883a 	mov	r6,r2
 4001a4c:	800b883a 	mov	r5,r16
 4001a50:	e13fe617 	ldw	r4,-104(fp)
 4001a54:	40015a80 	call	40015a8 <write_ppm>
 4001a58:	1080005c 	xori	r2,r2,1
 4001a5c:	10803fcc 	andi	r2,r2,255
 4001a60:	10000526 	beq	r2,zero,4001a78 <main+0x1f8>
                   trdb_d5m_frame_width(&trdb_d5m), trdb_d5m_frame_height(&trdb_d5m),
                   "/dev/stdout")) {
        printf("Error: could not write image to file\n");
 4001a64:	01010074 	movhi	r4,1025
 4001a68:	21193204 	addi	r4,r4,25800
 4001a6c:	40051d80 	call	40051d8 <puts>
        return EXIT_FAILURE;
 4001a70:	00800044 	movi	r2,1
 4001a74:	00000106 	br	4001a7c <main+0x1fc>
    }

    return EXIT_SUCCESS;
 4001a78:	0005883a 	mov	r2,zero
}
 4001a7c:	e6ffff04 	addi	sp,fp,-4
 4001a80:	dfc00217 	ldw	ra,8(sp)
 4001a84:	df000117 	ldw	fp,4(sp)
 4001a88:	dc000017 	ldw	r16,0(sp)
 4001a8c:	dec00304 	addi	sp,sp,12
 4001a90:	f800283a 	ret

04001a94 <i2c_usleep>:
static void wait_end_of_transfer(i2c_dev *dev);
static void set_data_control(i2c_dev *dev, uint8_t data, uint8_t control);
static uint8_t get_data_set_control(i2c_dev *dev, uint8_t control);

/* Function to put the host processor to sleep for microseconds */
static void i2c_usleep(unsigned int useconds) {
 4001a94:	defffd04 	addi	sp,sp,-12
 4001a98:	dfc00215 	stw	ra,8(sp)
 4001a9c:	df000115 	stw	fp,4(sp)
 4001aa0:	df000104 	addi	fp,sp,4
 4001aa4:	e13fff15 	stw	r4,-4(fp)
#if defined(__KERNEL__) || defined(MODULE)
    udelay(useconds);
#else
    usleep(useconds);
 4001aa8:	e13fff17 	ldw	r4,-4(fp)
 4001aac:	4011c780 	call	4011c78 <usleep>
#endif
}
 4001ab0:	0001883a 	nop
 4001ab4:	e037883a 	mov	sp,fp
 4001ab8:	dfc00117 	ldw	ra,4(sp)
 4001abc:	df000017 	ldw	fp,0(sp)
 4001ac0:	dec00204 	addi	sp,sp,8
 4001ac4:	f800283a 	ret

04001ac8 <wait_end_of_transfer>:
/*
 * wait_end_of_transfer
 *
 * Waits until the current i2c transfer is finished.
 */
static void wait_end_of_transfer(i2c_dev *dev) {
 4001ac8:	defffe04 	addi	sp,sp,-8
 4001acc:	df000115 	stw	fp,4(sp)
 4001ad0:	df000104 	addi	fp,sp,4
 4001ad4:	e13fff15 	stw	r4,-4(fp)
    while (I2C_RD_STATUS(dev->base) & I2C_STATUS_TRANSFER_IN_PROGRESS_MSK);
 4001ad8:	0001883a 	nop
 4001adc:	e0bfff17 	ldw	r2,-4(fp)
 4001ae0:	10800017 	ldw	r2,0(r2)
 4001ae4:	10800084 	addi	r2,r2,2
 4001ae8:	10800023 	ldbuio	r2,0(r2)
 4001aec:	10803fcc 	andi	r2,r2,255
 4001af0:	1080020c 	andi	r2,r2,8
 4001af4:	103ff91e 	bne	r2,zero,4001adc <__alt_data_end+0xfc001adc>
}
 4001af8:	0001883a 	nop
 4001afc:	e037883a 	mov	sp,fp
 4001b00:	df000017 	ldw	fp,0(sp)
 4001b04:	dec00104 	addi	sp,sp,4
 4001b08:	f800283a 	ret

04001b0c <set_data_control>:
 * set_data_control
 *
 * Writes the supplied "data" argument to SDA while using the control sequences
 * provided in argument "control".
 */
static void set_data_control(i2c_dev *dev, uint8_t data, uint8_t control) {
 4001b0c:	defffb04 	addi	sp,sp,-20
 4001b10:	dfc00415 	stw	ra,16(sp)
 4001b14:	df000315 	stw	fp,12(sp)
 4001b18:	df000304 	addi	fp,sp,12
 4001b1c:	e13ffd15 	stw	r4,-12(fp)
 4001b20:	2807883a 	mov	r3,r5
 4001b24:	3005883a 	mov	r2,r6
 4001b28:	e0fffe05 	stb	r3,-8(fp)
 4001b2c:	e0bfff05 	stb	r2,-4(fp)
    wait_end_of_transfer(dev);
 4001b30:	e13ffd17 	ldw	r4,-12(fp)
 4001b34:	4001ac80 	call	4001ac8 <wait_end_of_transfer>
    I2C_WR_DATA(dev->base, data);
 4001b38:	e0bffd17 	ldw	r2,-12(fp)
 4001b3c:	10800017 	ldw	r2,0(r2)
 4001b40:	e0fffe03 	ldbu	r3,-8(fp)
 4001b44:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, control);
 4001b48:	e0bffd17 	ldw	r2,-12(fp)
 4001b4c:	10800017 	ldw	r2,0(r2)
 4001b50:	10800044 	addi	r2,r2,1
 4001b54:	e0ffff03 	ldbu	r3,-4(fp)
 4001b58:	10c00025 	stbio	r3,0(r2)
    wait_end_of_transfer(dev);
 4001b5c:	e13ffd17 	ldw	r4,-12(fp)
 4001b60:	4001ac80 	call	4001ac8 <wait_end_of_transfer>
}
 4001b64:	0001883a 	nop
 4001b68:	e037883a 	mov	sp,fp
 4001b6c:	dfc00117 	ldw	ra,4(sp)
 4001b70:	df000017 	ldw	fp,0(sp)
 4001b74:	dec00204 	addi	sp,sp,8
 4001b78:	f800283a 	ret

04001b7c <get_data_set_control>:
 * get_data_set_control
 *
 * Reads data from SDA while using the control sequences provided in argument
 * "control".
 */
static uint8_t get_data_set_control(i2c_dev *dev, uint8_t control) {
 4001b7c:	defffc04 	addi	sp,sp,-16
 4001b80:	dfc00315 	stw	ra,12(sp)
 4001b84:	df000215 	stw	fp,8(sp)
 4001b88:	df000204 	addi	fp,sp,8
 4001b8c:	e13ffe15 	stw	r4,-8(fp)
 4001b90:	2805883a 	mov	r2,r5
 4001b94:	e0bfff05 	stb	r2,-4(fp)
    wait_end_of_transfer(dev);
 4001b98:	e13ffe17 	ldw	r4,-8(fp)
 4001b9c:	4001ac80 	call	4001ac8 <wait_end_of_transfer>
    I2C_WR_CONTROL(dev->base, control);
 4001ba0:	e0bffe17 	ldw	r2,-8(fp)
 4001ba4:	10800017 	ldw	r2,0(r2)
 4001ba8:	10800044 	addi	r2,r2,1
 4001bac:	e0ffff03 	ldbu	r3,-4(fp)
 4001bb0:	10c00025 	stbio	r3,0(r2)
    wait_end_of_transfer(dev);
 4001bb4:	e13ffe17 	ldw	r4,-8(fp)
 4001bb8:	4001ac80 	call	4001ac8 <wait_end_of_transfer>
    return I2C_RD_DATA(dev->base);
 4001bbc:	e0bffe17 	ldw	r2,-8(fp)
 4001bc0:	10800017 	ldw	r2,0(r2)
 4001bc4:	10800023 	ldbuio	r2,0(r2)
 4001bc8:	10803fcc 	andi	r2,r2,255
}
 4001bcc:	e037883a 	mov	sp,fp
 4001bd0:	dfc00117 	ldw	ra,4(sp)
 4001bd4:	df000017 	ldw	fp,0(sp)
 4001bd8:	dec00204 	addi	sp,sp,8
 4001bdc:	f800283a 	ret

04001be0 <i2c_inst>:
/*
 * i2c_inst
 *
 * Constructs a device structure.
 */
i2c_dev i2c_inst(void *base) {
 4001be0:	defffd04 	addi	sp,sp,-12
 4001be4:	df000215 	stw	fp,8(sp)
 4001be8:	df000204 	addi	fp,sp,8
 4001bec:	e13fff15 	stw	r4,-4(fp)
    i2c_dev dev;

    dev.base = base;
 4001bf0:	e0bfff17 	ldw	r2,-4(fp)
 4001bf4:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 4001bf8:	e0bffe17 	ldw	r2,-8(fp)
}
 4001bfc:	e037883a 	mov	sp,fp
 4001c00:	df000017 	ldw	fp,0(sp)
 4001c04:	dec00104 	addi	sp,sp,4
 4001c08:	f800283a 	ret

04001c0c <i2c_init>:
 * standard data rate for an I2C transfer is 100 kbits/s. However, in order to
 * meet the timing constraints of the protocol, the I2C controller needs to
 * operate 4 times faster. Therefore, one must set the clock divisor register to
 * i2c_frequency / (4 * 100 KHz).
 */
void i2c_init(i2c_dev *dev, uint32_t i2c_frequency) {
 4001c0c:	defffb04 	addi	sp,sp,-20
 4001c10:	dfc00415 	stw	ra,16(sp)
 4001c14:	df000315 	stw	fp,12(sp)
 4001c18:	dc000215 	stw	r16,8(sp)
 4001c1c:	df000304 	addi	fp,sp,12
 4001c20:	e13ffd15 	stw	r4,-12(fp)
 4001c24:	e17ffe15 	stw	r5,-8(fp)
    I2C_WR_CLOCK_DIVISOR(dev->base, i2c_frequency / (4 * 100000));
 4001c28:	e0bffd17 	ldw	r2,-12(fp)
 4001c2c:	10800017 	ldw	r2,0(r2)
 4001c30:	140000c4 	addi	r16,r2,3
 4001c34:	e0bffe17 	ldw	r2,-8(fp)
 4001c38:	014001b4 	movhi	r5,6
 4001c3c:	2946a004 	addi	r5,r5,6784
 4001c40:	1009883a 	mov	r4,r2
 4001c44:	40044380 	call	4004438 <__udivsi3>
 4001c48:	80800025 	stbio	r2,0(r16)
    i2c_usleep(I2C_SLEEP_US);
 4001c4c:	0104e204 	movi	r4,5000
 4001c50:	4001a940 	call	4001a94 <i2c_usleep>
}
 4001c54:	0001883a 	nop
 4001c58:	e6ffff04 	addi	sp,fp,-4
 4001c5c:	dfc00217 	ldw	ra,8(sp)
 4001c60:	df000117 	ldw	fp,4(sp)
 4001c64:	dc000017 	ldw	r16,0(sp)
 4001c68:	dec00304 	addi	sp,sp,12
 4001c6c:	f800283a 	ret

04001c70 <i2c_configure>:
 * Configure the controller.
 *
 * Setting the irq paramater to true enables interrupt generation at the end of
 * a read/write transfer, and false disables interrupt generation.
 */
void i2c_configure(i2c_dev *dev, bool irq) {
 4001c70:	defffc04 	addi	sp,sp,-16
 4001c74:	df000315 	stw	fp,12(sp)
 4001c78:	df000304 	addi	fp,sp,12
 4001c7c:	e13ffe15 	stw	r4,-8(fp)
 4001c80:	2805883a 	mov	r2,r5
 4001c84:	e0bfff05 	stb	r2,-4(fp)
    uint32_t config = 0;
 4001c88:	e03ffd15 	stw	zero,-12(fp)

    if (irq) {
 4001c8c:	e0bfff03 	ldbu	r2,-4(fp)
 4001c90:	10000426 	beq	r2,zero,4001ca4 <i2c_configure+0x34>
        config |= I2C_CONTROL_INTERRUPT_ENABLE_MSK;
 4001c94:	e0bffd17 	ldw	r2,-12(fp)
 4001c98:	10800814 	ori	r2,r2,32
 4001c9c:	e0bffd15 	stw	r2,-12(fp)
 4001ca0:	00000406 	br	4001cb4 <i2c_configure+0x44>
    } else {
        config &= ~I2C_CONTROL_INTERRUPT_ENABLE_MSK;
 4001ca4:	e0fffd17 	ldw	r3,-12(fp)
 4001ca8:	00bff7c4 	movi	r2,-33
 4001cac:	1884703a 	and	r2,r3,r2
 4001cb0:	e0bffd15 	stw	r2,-12(fp)
    }

    I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
 4001cb4:	e0bffe17 	ldw	r2,-8(fp)
 4001cb8:	10800017 	ldw	r2,0(r2)
 4001cbc:	10800044 	addi	r2,r2,1
 4001cc0:	00c00084 	movi	r3,2
 4001cc4:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, config);
 4001cc8:	e0bffe17 	ldw	r2,-8(fp)
 4001ccc:	10800017 	ldw	r2,0(r2)
 4001cd0:	10800044 	addi	r2,r2,1
 4001cd4:	e0fffd17 	ldw	r3,-12(fp)
 4001cd8:	10c00025 	stbio	r3,0(r2)
}
 4001cdc:	0001883a 	nop
 4001ce0:	e037883a 	mov	sp,fp
 4001ce4:	df000017 	ldw	fp,0(sp)
 4001ce8:	dec00104 	addi	sp,sp,4
 4001cec:	f800283a 	ret

04001cf0 <i2c_write>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t value) {
 4001cf0:	defffa04 	addi	sp,sp,-24
 4001cf4:	dfc00515 	stw	ra,20(sp)
 4001cf8:	df000415 	stw	fp,16(sp)
 4001cfc:	df000404 	addi	fp,sp,16
 4001d00:	e13ffc15 	stw	r4,-16(fp)
 4001d04:	2809883a 	mov	r4,r5
 4001d08:	3007883a 	mov	r3,r6
 4001d0c:	3805883a 	mov	r2,r7
 4001d10:	e13ffd05 	stb	r4,-12(fp)
 4001d14:	e0fffe05 	stb	r3,-8(fp)
 4001d18:	e0bfff05 	stb	r2,-4(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
 4001d1c:	e0bffd03 	ldbu	r2,-12(fp)
 4001d20:	10803f8c 	andi	r2,r2,254
 4001d24:	01800504 	movi	r6,20
 4001d28:	100b883a 	mov	r5,r2
 4001d2c:	e13ffc17 	ldw	r4,-16(fp)
 4001d30:	4001b0c0 	call	4001b0c <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
 4001d34:	e0bffc17 	ldw	r2,-16(fp)
 4001d38:	10800017 	ldw	r2,0(r2)
 4001d3c:	10800084 	addi	r2,r2,2
 4001d40:	10800023 	ldbuio	r2,0(r2)
 4001d44:	10803fcc 	andi	r2,r2,255
 4001d48:	1080004c 	andi	r2,r2,1
 4001d4c:	10000726 	beq	r2,zero,4001d6c <i2c_write+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
 4001d50:	e0bffc17 	ldw	r2,-16(fp)
 4001d54:	10800017 	ldw	r2,0(r2)
 4001d58:	10800044 	addi	r2,r2,1
 4001d5c:	00c00084 	movi	r3,2
 4001d60:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
 4001d64:	00800044 	movi	r2,1
 4001d68:	00002706 	br	4001e08 <i2c_write+0x118>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
 4001d6c:	e0bffe03 	ldbu	r2,-8(fp)
 4001d70:	01800404 	movi	r6,16
 4001d74:	100b883a 	mov	r5,r2
 4001d78:	e13ffc17 	ldw	r4,-16(fp)
 4001d7c:	4001b0c0 	call	4001b0c <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
 4001d80:	e0bffc17 	ldw	r2,-16(fp)
 4001d84:	10800017 	ldw	r2,0(r2)
 4001d88:	10800084 	addi	r2,r2,2
 4001d8c:	10800023 	ldbuio	r2,0(r2)
 4001d90:	10803fcc 	andi	r2,r2,255
 4001d94:	1080004c 	andi	r2,r2,1
 4001d98:	10000726 	beq	r2,zero,4001db8 <i2c_write+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
 4001d9c:	e0bffc17 	ldw	r2,-16(fp)
 4001da0:	10800017 	ldw	r2,0(r2)
 4001da4:	10800044 	addi	r2,r2,1
 4001da8:	00c00084 	movi	r3,2
 4001dac:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
 4001db0:	00800084 	movi	r2,2
 4001db4:	00001406 	br	4001e08 <i2c_write+0x118>
    }

    /* write register data to device */
    set_data_control(dev, value, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
 4001db8:	e0bfff03 	ldbu	r2,-4(fp)
 4001dbc:	01800484 	movi	r6,18
 4001dc0:	100b883a 	mov	r5,r2
 4001dc4:	e13ffc17 	ldw	r4,-16(fp)
 4001dc8:	4001b0c0 	call	4001b0c <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
 4001dcc:	e0bffc17 	ldw	r2,-16(fp)
 4001dd0:	10800017 	ldw	r2,0(r2)
 4001dd4:	10800084 	addi	r2,r2,2
 4001dd8:	10800023 	ldbuio	r2,0(r2)
 4001ddc:	10803fcc 	andi	r2,r2,255
 4001de0:	1080004c 	andi	r2,r2,1
 4001de4:	10000726 	beq	r2,zero,4001e04 <i2c_write+0x114>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
 4001de8:	e0bffc17 	ldw	r2,-16(fp)
 4001dec:	10800017 	ldw	r2,0(r2)
 4001df0:	10800044 	addi	r2,r2,1
 4001df4:	00c00084 	movi	r3,2
 4001df8:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
 4001dfc:	00800084 	movi	r2,2
 4001e00:	00000106 	br	4001e08 <i2c_write+0x118>
    }

    return I2C_SUCCESS;
 4001e04:	0005883a 	mov	r2,zero
}
 4001e08:	e037883a 	mov	sp,fp
 4001e0c:	dfc00117 	ldw	ra,4(sp)
 4001e10:	df000017 	ldw	fp,0(sp)
 4001e14:	dec00204 	addi	sp,sp,8
 4001e18:	f800283a 	ret

04001e1c <i2c_read>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value) {
 4001e1c:	defffa04 	addi	sp,sp,-24
 4001e20:	dfc00515 	stw	ra,20(sp)
 4001e24:	df000415 	stw	fp,16(sp)
 4001e28:	df000404 	addi	fp,sp,16
 4001e2c:	e13ffc15 	stw	r4,-16(fp)
 4001e30:	2807883a 	mov	r3,r5
 4001e34:	3005883a 	mov	r2,r6
 4001e38:	e1ffff15 	stw	r7,-4(fp)
 4001e3c:	e0fffd05 	stb	r3,-12(fp)
 4001e40:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
 4001e44:	e0bffd03 	ldbu	r2,-12(fp)
 4001e48:	10803f8c 	andi	r2,r2,254
 4001e4c:	01800504 	movi	r6,20
 4001e50:	100b883a 	mov	r5,r2
 4001e54:	e13ffc17 	ldw	r4,-16(fp)
 4001e58:	4001b0c0 	call	4001b0c <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
 4001e5c:	e0bffc17 	ldw	r2,-16(fp)
 4001e60:	10800017 	ldw	r2,0(r2)
 4001e64:	10800084 	addi	r2,r2,2
 4001e68:	10800023 	ldbuio	r2,0(r2)
 4001e6c:	10803fcc 	andi	r2,r2,255
 4001e70:	1080004c 	andi	r2,r2,1
 4001e74:	10000726 	beq	r2,zero,4001e94 <i2c_read+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
 4001e78:	e0bffc17 	ldw	r2,-16(fp)
 4001e7c:	10800017 	ldw	r2,0(r2)
 4001e80:	10800044 	addi	r2,r2,1
 4001e84:	00c00084 	movi	r3,2
 4001e88:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
 4001e8c:	00800044 	movi	r2,1
 4001e90:	00002f06 	br	4001f50 <i2c_read+0x134>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
 4001e94:	e0bffe03 	ldbu	r2,-8(fp)
 4001e98:	01800404 	movi	r6,16
 4001e9c:	100b883a 	mov	r5,r2
 4001ea0:	e13ffc17 	ldw	r4,-16(fp)
 4001ea4:	4001b0c0 	call	4001b0c <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
 4001ea8:	e0bffc17 	ldw	r2,-16(fp)
 4001eac:	10800017 	ldw	r2,0(r2)
 4001eb0:	10800084 	addi	r2,r2,2
 4001eb4:	10800023 	ldbuio	r2,0(r2)
 4001eb8:	10803fcc 	andi	r2,r2,255
 4001ebc:	1080004c 	andi	r2,r2,1
 4001ec0:	10000726 	beq	r2,zero,4001ee0 <i2c_read+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
 4001ec4:	e0bffc17 	ldw	r2,-16(fp)
 4001ec8:	10800017 	ldw	r2,0(r2)
 4001ecc:	10800044 	addi	r2,r2,1
 4001ed0:	00c00084 	movi	r3,2
 4001ed4:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
 4001ed8:	00800084 	movi	r2,2
 4001edc:	00001c06 	br	4001f50 <i2c_read+0x134>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
 4001ee0:	e0bffd03 	ldbu	r2,-12(fp)
 4001ee4:	10800054 	ori	r2,r2,1
 4001ee8:	10803fcc 	andi	r2,r2,255
 4001eec:	01800504 	movi	r6,20
 4001ef0:	100b883a 	mov	r5,r2
 4001ef4:	e13ffc17 	ldw	r4,-16(fp)
 4001ef8:	4001b0c0 	call	4001b0c <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
 4001efc:	e0bffc17 	ldw	r2,-16(fp)
 4001f00:	10800017 	ldw	r2,0(r2)
 4001f04:	10800084 	addi	r2,r2,2
 4001f08:	10800023 	ldbuio	r2,0(r2)
 4001f0c:	10803fcc 	andi	r2,r2,255
 4001f10:	1080004c 	andi	r2,r2,1
 4001f14:	10000726 	beq	r2,zero,4001f34 <i2c_read+0x118>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
 4001f18:	e0bffc17 	ldw	r2,-16(fp)
 4001f1c:	10800017 	ldw	r2,0(r2)
 4001f20:	10800044 	addi	r2,r2,1
 4001f24:	00c00084 	movi	r3,2
 4001f28:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
 4001f2c:	00800044 	movi	r2,1
 4001f30:	00000706 	br	4001f50 <i2c_read+0x134>
    }

    /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
    *value = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
 4001f34:	014002c4 	movi	r5,11
 4001f38:	e13ffc17 	ldw	r4,-16(fp)
 4001f3c:	4001b7c0 	call	4001b7c <get_data_set_control>
 4001f40:	1007883a 	mov	r3,r2
 4001f44:	e0bfff17 	ldw	r2,-4(fp)
 4001f48:	10c00005 	stb	r3,0(r2)

    return I2C_SUCCESS;
 4001f4c:	0005883a 	mov	r2,zero
}
 4001f50:	e037883a 	mov	sp,fp
 4001f54:	dfc00117 	ldw	ra,4(sp)
 4001f58:	df000017 	ldw	fp,0(sp)
 4001f5c:	dec00204 	addi	sp,sp,8
 4001f60:	f800283a 	ret

04001f64 <i2c_write_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
 4001f64:	defff904 	addi	sp,sp,-28
 4001f68:	dfc00615 	stw	ra,24(sp)
 4001f6c:	df000515 	stw	fp,20(sp)
 4001f70:	df000504 	addi	fp,sp,20
 4001f74:	e13ffc15 	stw	r4,-16(fp)
 4001f78:	2807883a 	mov	r3,r5
 4001f7c:	3005883a 	mov	r2,r6
 4001f80:	e1ffff15 	stw	r7,-4(fp)
 4001f84:	e0fffd05 	stb	r3,-12(fp)
 4001f88:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
 4001f8c:	e0bffd03 	ldbu	r2,-12(fp)
 4001f90:	10803f8c 	andi	r2,r2,254
 4001f94:	01800504 	movi	r6,20
 4001f98:	100b883a 	mov	r5,r2
 4001f9c:	e13ffc17 	ldw	r4,-16(fp)
 4001fa0:	4001b0c0 	call	4001b0c <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
 4001fa4:	e0bffc17 	ldw	r2,-16(fp)
 4001fa8:	10800017 	ldw	r2,0(r2)
 4001fac:	10800084 	addi	r2,r2,2
 4001fb0:	10800023 	ldbuio	r2,0(r2)
 4001fb4:	10803fcc 	andi	r2,r2,255
 4001fb8:	1080004c 	andi	r2,r2,1
 4001fbc:	10000726 	beq	r2,zero,4001fdc <i2c_write_array+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
 4001fc0:	e0bffc17 	ldw	r2,-16(fp)
 4001fc4:	10800017 	ldw	r2,0(r2)
 4001fc8:	10800044 	addi	r2,r2,1
 4001fcc:	00c00084 	movi	r3,2
 4001fd0:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
 4001fd4:	00800044 	movi	r2,1
 4001fd8:	00004206 	br	40020e4 <i2c_write_array+0x180>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
 4001fdc:	e0bffe03 	ldbu	r2,-8(fp)
 4001fe0:	01800404 	movi	r6,16
 4001fe4:	100b883a 	mov	r5,r2
 4001fe8:	e13ffc17 	ldw	r4,-16(fp)
 4001fec:	4001b0c0 	call	4001b0c <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
 4001ff0:	e0bffc17 	ldw	r2,-16(fp)
 4001ff4:	10800017 	ldw	r2,0(r2)
 4001ff8:	10800084 	addi	r2,r2,2
 4001ffc:	10800023 	ldbuio	r2,0(r2)
 4002000:	10803fcc 	andi	r2,r2,255
 4002004:	1080004c 	andi	r2,r2,1
 4002008:	10000726 	beq	r2,zero,4002028 <i2c_write_array+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
 400200c:	e0bffc17 	ldw	r2,-16(fp)
 4002010:	10800017 	ldw	r2,0(r2)
 4002014:	10800044 	addi	r2,r2,1
 4002018:	00c00084 	movi	r3,2
 400201c:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
 4002020:	00800084 	movi	r2,2
 4002024:	00002f06 	br	40020e4 <i2c_write_array+0x180>
    }

    unsigned int i = 0;
 4002028:	e03ffb15 	stw	zero,-20(fp)
    for (i = 0; i < size; i++) {
 400202c:	e03ffb15 	stw	zero,-20(fp)
 4002030:	00002806 	br	40020d4 <i2c_write_array+0x170>
        /* write register data to device */
        if (i < size - 1) {
 4002034:	e0800217 	ldw	r2,8(fp)
 4002038:	10bfffc4 	addi	r2,r2,-1
 400203c:	e0fffb17 	ldw	r3,-20(fp)
 4002040:	18800a2e 	bgeu	r3,r2,400206c <i2c_write_array+0x108>
            set_data_control(dev, value[i], I2C_CONTROL_WRITE_COMMAND_MSK);
 4002044:	e0ffff17 	ldw	r3,-4(fp)
 4002048:	e0bffb17 	ldw	r2,-20(fp)
 400204c:	1885883a 	add	r2,r3,r2
 4002050:	10800003 	ldbu	r2,0(r2)
 4002054:	10803fcc 	andi	r2,r2,255
 4002058:	01800404 	movi	r6,16
 400205c:	100b883a 	mov	r5,r2
 4002060:	e13ffc17 	ldw	r4,-16(fp)
 4002064:	4001b0c0 	call	4001b0c <set_data_control>
 4002068:	00000906 	br	4002090 <i2c_write_array+0x12c>
        } else {
            set_data_control(dev, value[i], I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
 400206c:	e0ffff17 	ldw	r3,-4(fp)
 4002070:	e0bffb17 	ldw	r2,-20(fp)
 4002074:	1885883a 	add	r2,r3,r2
 4002078:	10800003 	ldbu	r2,0(r2)
 400207c:	10803fcc 	andi	r2,r2,255
 4002080:	01800484 	movi	r6,18
 4002084:	100b883a 	mov	r5,r2
 4002088:	e13ffc17 	ldw	r4,-16(fp)
 400208c:	4001b0c0 	call	4001b0c <set_data_control>

        }

        /* error: bad acknowledge */
        if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
 4002090:	e0bffc17 	ldw	r2,-16(fp)
 4002094:	10800017 	ldw	r2,0(r2)
 4002098:	10800084 	addi	r2,r2,2
 400209c:	10800023 	ldbuio	r2,0(r2)
 40020a0:	10803fcc 	andi	r2,r2,255
 40020a4:	1080004c 	andi	r2,r2,1
 40020a8:	10000726 	beq	r2,zero,40020c8 <i2c_write_array+0x164>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
 40020ac:	e0bffc17 	ldw	r2,-16(fp)
 40020b0:	10800017 	ldw	r2,0(r2)
 40020b4:	10800044 	addi	r2,r2,1
 40020b8:	00c00084 	movi	r3,2
 40020bc:	10c00025 	stbio	r3,0(r2)
            return I2C_EBADACK;
 40020c0:	00800084 	movi	r2,2
 40020c4:	00000706 	br	40020e4 <i2c_write_array+0x180>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_EBADACK;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
 40020c8:	e0bffb17 	ldw	r2,-20(fp)
 40020cc:	10800044 	addi	r2,r2,1
 40020d0:	e0bffb15 	stw	r2,-20(fp)
 40020d4:	e0fffb17 	ldw	r3,-20(fp)
 40020d8:	e0800217 	ldw	r2,8(fp)
 40020dc:	18bfd536 	bltu	r3,r2,4002034 <__alt_data_end+0xfc002034>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
            return I2C_EBADACK;
        }
    }

    return I2C_SUCCESS;
 40020e0:	0005883a 	mov	r2,zero
}
 40020e4:	e037883a 	mov	sp,fp
 40020e8:	dfc00117 	ldw	ra,4(sp)
 40020ec:	df000017 	ldw	fp,0(sp)
 40020f0:	dec00204 	addi	sp,sp,8
 40020f4:	f800283a 	ret

040020f8 <i2c_read_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
 40020f8:	defff804 	addi	sp,sp,-32
 40020fc:	dfc00715 	stw	ra,28(sp)
 4002100:	df000615 	stw	fp,24(sp)
 4002104:	dc000515 	stw	r16,20(sp)
 4002108:	df000604 	addi	fp,sp,24
 400210c:	e13ffb15 	stw	r4,-20(fp)
 4002110:	2807883a 	mov	r3,r5
 4002114:	3005883a 	mov	r2,r6
 4002118:	e1fffe15 	stw	r7,-8(fp)
 400211c:	e0fffc05 	stb	r3,-16(fp)
 4002120:	e0bffd05 	stb	r2,-12(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
 4002124:	e0bffc03 	ldbu	r2,-16(fp)
 4002128:	10803f8c 	andi	r2,r2,254
 400212c:	01800504 	movi	r6,20
 4002130:	100b883a 	mov	r5,r2
 4002134:	e13ffb17 	ldw	r4,-20(fp)
 4002138:	4001b0c0 	call	4001b0c <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
 400213c:	e0bffb17 	ldw	r2,-20(fp)
 4002140:	10800017 	ldw	r2,0(r2)
 4002144:	10800084 	addi	r2,r2,2
 4002148:	10800023 	ldbuio	r2,0(r2)
 400214c:	10803fcc 	andi	r2,r2,255
 4002150:	1080004c 	andi	r2,r2,1
 4002154:	10000726 	beq	r2,zero,4002174 <i2c_read_array+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
 4002158:	e0bffb17 	ldw	r2,-20(fp)
 400215c:	10800017 	ldw	r2,0(r2)
 4002160:	10800044 	addi	r2,r2,1
 4002164:	00c00084 	movi	r3,2
 4002168:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
 400216c:	00800044 	movi	r2,1
 4002170:	00004506 	br	4002288 <i2c_read_array+0x190>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
 4002174:	e0bffd03 	ldbu	r2,-12(fp)
 4002178:	01800404 	movi	r6,16
 400217c:	100b883a 	mov	r5,r2
 4002180:	e13ffb17 	ldw	r4,-20(fp)
 4002184:	4001b0c0 	call	4001b0c <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
 4002188:	e0bffb17 	ldw	r2,-20(fp)
 400218c:	10800017 	ldw	r2,0(r2)
 4002190:	10800084 	addi	r2,r2,2
 4002194:	10800023 	ldbuio	r2,0(r2)
 4002198:	10803fcc 	andi	r2,r2,255
 400219c:	1080004c 	andi	r2,r2,1
 40021a0:	10000726 	beq	r2,zero,40021c0 <i2c_read_array+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
 40021a4:	e0bffb17 	ldw	r2,-20(fp)
 40021a8:	10800017 	ldw	r2,0(r2)
 40021ac:	10800044 	addi	r2,r2,1
 40021b0:	00c00084 	movi	r3,2
 40021b4:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
 40021b8:	00800084 	movi	r2,2
 40021bc:	00003206 	br	4002288 <i2c_read_array+0x190>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
 40021c0:	e0bffc03 	ldbu	r2,-16(fp)
 40021c4:	10800054 	ori	r2,r2,1
 40021c8:	10803fcc 	andi	r2,r2,255
 40021cc:	01800504 	movi	r6,20
 40021d0:	100b883a 	mov	r5,r2
 40021d4:	e13ffb17 	ldw	r4,-20(fp)
 40021d8:	4001b0c0 	call	4001b0c <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
 40021dc:	e0bffb17 	ldw	r2,-20(fp)
 40021e0:	10800017 	ldw	r2,0(r2)
 40021e4:	10800084 	addi	r2,r2,2
 40021e8:	10800023 	ldbuio	r2,0(r2)
 40021ec:	10803fcc 	andi	r2,r2,255
 40021f0:	1080004c 	andi	r2,r2,1
 40021f4:	10000726 	beq	r2,zero,4002214 <i2c_read_array+0x11c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
 40021f8:	e0bffb17 	ldw	r2,-20(fp)
 40021fc:	10800017 	ldw	r2,0(r2)
 4002200:	10800044 	addi	r2,r2,1
 4002204:	00c00084 	movi	r3,2
 4002208:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
 400220c:	00800044 	movi	r2,1
 4002210:	00001d06 	br	4002288 <i2c_read_array+0x190>
    }

    unsigned int i = 0;
 4002214:	e03ffa15 	stw	zero,-24(fp)
    for (i = 0; i < size; i++) {
 4002218:	e03ffa15 	stw	zero,-24(fp)
 400221c:	00001606 	br	4002278 <i2c_read_array+0x180>
        if (i < size - 1) {
 4002220:	e0800217 	ldw	r2,8(fp)
 4002224:	10bfffc4 	addi	r2,r2,-1
 4002228:	e0fffa17 	ldw	r3,-24(fp)
 400222c:	1880082e 	bgeu	r3,r2,4002250 <i2c_read_array+0x158>
            value[i] = get_data_set_control(dev, I2C_CONTROL_READ_COMMAND_MSK);
 4002230:	e0fffe17 	ldw	r3,-8(fp)
 4002234:	e0bffa17 	ldw	r2,-24(fp)
 4002238:	18a1883a 	add	r16,r3,r2
 400223c:	01400204 	movi	r5,8
 4002240:	e13ffb17 	ldw	r4,-20(fp)
 4002244:	4001b7c0 	call	4001b7c <get_data_set_control>
 4002248:	80800005 	stb	r2,0(r16)
 400224c:	00000706 	br	400226c <i2c_read_array+0x174>
        } else {
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
 4002250:	e0fffe17 	ldw	r3,-8(fp)
 4002254:	e0bffa17 	ldw	r2,-24(fp)
 4002258:	18a1883a 	add	r16,r3,r2
 400225c:	014002c4 	movi	r5,11
 4002260:	e13ffb17 	ldw	r4,-20(fp)
 4002264:	4001b7c0 	call	4001b7c <get_data_set_control>
 4002268:	80800005 	stb	r2,0(r16)
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_ENODEV;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
 400226c:	e0bffa17 	ldw	r2,-24(fp)
 4002270:	10800044 	addi	r2,r2,1
 4002274:	e0bffa15 	stw	r2,-24(fp)
 4002278:	e0fffa17 	ldw	r3,-24(fp)
 400227c:	e0800217 	ldw	r2,8(fp)
 4002280:	18bfe736 	bltu	r3,r2,4002220 <__alt_data_end+0xfc002220>
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
        }
    }

    return I2C_SUCCESS;
 4002284:	0005883a 	mov	r2,zero
}
 4002288:	e6ffff04 	addi	sp,fp,-4
 400228c:	dfc00217 	ldw	ra,8(sp)
 4002290:	df000117 	ldw	fp,4(sp)
 4002294:	dc000017 	ldw	r16,0(sp)
 4002298:	dec00304 	addi	sp,sp,12
 400229c:	f800283a 	ret

040022a0 <write_standard_descriptor>:
 * buffered by the dispatcher block.
 *
 * This function is non-blocking and will return an error code if there is no
 * room to write another descriptor to the dispatcher.
 */
static int write_standard_descriptor(uint32_t *csr_base, uint32_t *descriptor_base, msgdma_standard_descriptor *descriptor) {
 40022a0:	defffb04 	addi	sp,sp,-20
 40022a4:	dfc00415 	stw	ra,16(sp)
 40022a8:	df000315 	stw	fp,12(sp)
 40022ac:	df000304 	addi	fp,sp,12
 40022b0:	e13ffd15 	stw	r4,-12(fp)
 40022b4:	e17ffe15 	stw	r5,-8(fp)
 40022b8:	e1bfff15 	stw	r6,-4(fp)
    if (read_descriptor_buffer_full(csr_base)) {
 40022bc:	e13ffd17 	ldw	r4,-12(fp)
 40022c0:	4002dbc0 	call	4002dbc <read_descriptor_buffer_full>
 40022c4:	10000226 	beq	r2,zero,40022d0 <write_standard_descriptor+0x30>
      /* descriptor buffer is full, returning so that this function is
       * non-blocking */
        return -ENOSPC;
 40022c8:	00bff904 	movi	r2,-28
 40022cc:	00001506 	br	4002324 <write_standard_descriptor+0x84>
    }

    MSGDMA_WR_DESCRIPTOR_READ_ADDRESS(descriptor_base, (uint32_t) descriptor->read_address);
 40022d0:	e0bfff17 	ldw	r2,-4(fp)
 40022d4:	10800017 	ldw	r2,0(r2)
 40022d8:	1007883a 	mov	r3,r2
 40022dc:	e0bffe17 	ldw	r2,-8(fp)
 40022e0:	10c00035 	stwio	r3,0(r2)
    MSGDMA_WR_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, (uint32_t) descriptor->write_address);
 40022e4:	e0bffe17 	ldw	r2,-8(fp)
 40022e8:	10800104 	addi	r2,r2,4
 40022ec:	e0ffff17 	ldw	r3,-4(fp)
 40022f0:	18c00117 	ldw	r3,4(r3)
 40022f4:	10c00035 	stwio	r3,0(r2)
    MSGDMA_WR_DESCRIPTOR_LENGTH(descriptor_base, descriptor->transfer_length);
 40022f8:	e0bffe17 	ldw	r2,-8(fp)
 40022fc:	10800204 	addi	r2,r2,8
 4002300:	e0ffff17 	ldw	r3,-4(fp)
 4002304:	18c00217 	ldw	r3,8(r3)
 4002308:	10c00035 	stwio	r3,0(r2)
    MSGDMA_WR_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, descriptor->control);
 400230c:	e0bffe17 	ldw	r2,-8(fp)
 4002310:	10800304 	addi	r2,r2,12
 4002314:	e0ffff17 	ldw	r3,-4(fp)
 4002318:	18c00317 	ldw	r3,12(r3)
 400231c:	10c00035 	stwio	r3,0(r2)
    return 0;
 4002320:	0005883a 	mov	r2,zero
}
 4002324:	e037883a 	mov	sp,fp
 4002328:	dfc00117 	ldw	ra,4(sp)
 400232c:	df000017 	ldw	fp,0(sp)
 4002330:	dec00204 	addi	sp,sp,8
 4002334:	f800283a 	ret

04002338 <write_extended_descriptor>:

static int write_extended_descriptor(uint32_t *csr_base, uint32_t *descriptor_base, msgdma_extended_descriptor *descriptor) {
 4002338:	defffb04 	addi	sp,sp,-20
 400233c:	dfc00415 	stw	ra,16(sp)
 4002340:	df000315 	stw	fp,12(sp)
 4002344:	df000304 	addi	fp,sp,12
 4002348:	e13ffd15 	stw	r4,-12(fp)
 400234c:	e17ffe15 	stw	r5,-8(fp)
 4002350:	e1bfff15 	stw	r6,-4(fp)
    if (read_descriptor_buffer_full(csr_base)) {
 4002354:	e13ffd17 	ldw	r4,-12(fp)
 4002358:	4002dbc0 	call	4002dbc <read_descriptor_buffer_full>
 400235c:	10000226 	beq	r2,zero,4002368 <write_extended_descriptor+0x30>
      /* descriptor buffer is full, returning so that this function is
       * non-blocking */
        return -ENOSPC;
 4002360:	00bff904 	movi	r2,-28
 4002364:	00003b06 	br	4002454 <write_extended_descriptor+0x11c>
    }

    MSGDMA_WR_DESCRIPTOR_READ_ADDRESS(descriptor_base, (uint32_t) descriptor->read_address_low);
 4002368:	e0bfff17 	ldw	r2,-4(fp)
 400236c:	10800017 	ldw	r2,0(r2)
 4002370:	1007883a 	mov	r3,r2
 4002374:	e0bffe17 	ldw	r2,-8(fp)
 4002378:	10c00035 	stwio	r3,0(r2)
    MSGDMA_WR_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, (uint32_t) descriptor->write_address_low);
 400237c:	e0bffe17 	ldw	r2,-8(fp)
 4002380:	10800104 	addi	r2,r2,4
 4002384:	e0ffff17 	ldw	r3,-4(fp)
 4002388:	18c00117 	ldw	r3,4(r3)
 400238c:	10c00035 	stwio	r3,0(r2)
    MSGDMA_WR_DESCRIPTOR_LENGTH(descriptor_base, descriptor->transfer_length);
 4002390:	e0bffe17 	ldw	r2,-8(fp)
 4002394:	10800204 	addi	r2,r2,8
 4002398:	e0ffff17 	ldw	r3,-4(fp)
 400239c:	18c00217 	ldw	r3,8(r3)
 40023a0:	10c00035 	stwio	r3,0(r2)
    MSGDMA_WR_DESCRIPTOR_SEQUENCE_NUMBER(descriptor_base, descriptor->sequence_number);
 40023a4:	e0bffe17 	ldw	r2,-8(fp)
 40023a8:	10800304 	addi	r2,r2,12
 40023ac:	e0ffff17 	ldw	r3,-4(fp)
 40023b0:	18c0030b 	ldhu	r3,12(r3)
 40023b4:	18ffffcc 	andi	r3,r3,65535
 40023b8:	10c0002d 	sthio	r3,0(r2)
    MSGDMA_WR_DESCRIPTOR_READ_BURST(descriptor_base, descriptor->read_burst_count);
 40023bc:	e0bffe17 	ldw	r2,-8(fp)
 40023c0:	10800384 	addi	r2,r2,14
 40023c4:	e0ffff17 	ldw	r3,-4(fp)
 40023c8:	18c00383 	ldbu	r3,14(r3)
 40023cc:	18c03fcc 	andi	r3,r3,255
 40023d0:	10c00025 	stbio	r3,0(r2)
    MSGDMA_WR_DESCRIPTOR_WRITE_BURST(descriptor_base, descriptor->write_burst_count);
 40023d4:	e0bffe17 	ldw	r2,-8(fp)
 40023d8:	108003c4 	addi	r2,r2,15
 40023dc:	e0ffff17 	ldw	r3,-4(fp)
 40023e0:	18c003c3 	ldbu	r3,15(r3)
 40023e4:	18c03fcc 	andi	r3,r3,255
 40023e8:	10c00025 	stbio	r3,0(r2)
    MSGDMA_WR_DESCRIPTOR_READ_STRIDE(descriptor_base, descriptor->read_stride);
 40023ec:	e0bffe17 	ldw	r2,-8(fp)
 40023f0:	10800404 	addi	r2,r2,16
 40023f4:	e0ffff17 	ldw	r3,-4(fp)
 40023f8:	18c0040b 	ldhu	r3,16(r3)
 40023fc:	18ffffcc 	andi	r3,r3,65535
 4002400:	10c0002d 	sthio	r3,0(r2)
    MSGDMA_WR_DESCRIPTOR_WRITE_STRIDE(descriptor_base, descriptor->write_stride);
 4002404:	e0bffe17 	ldw	r2,-8(fp)
 4002408:	10800484 	addi	r2,r2,18
 400240c:	e0ffff17 	ldw	r3,-4(fp)
 4002410:	18c0048b 	ldhu	r3,18(r3)
 4002414:	18ffffcc 	andi	r3,r3,65535
 4002418:	10c0002d 	sthio	r3,0(r2)
    MSGDMA_WR_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
 400241c:	e0bffe17 	ldw	r2,-8(fp)
 4002420:	10800504 	addi	r2,r2,20
 4002424:	0007883a 	mov	r3,zero
 4002428:	10c00035 	stwio	r3,0(r2)
    MSGDMA_WR_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
 400242c:	e0bffe17 	ldw	r2,-8(fp)
 4002430:	10800604 	addi	r2,r2,24
 4002434:	0007883a 	mov	r3,zero
 4002438:	10c00035 	stwio	r3,0(r2)
    MSGDMA_WR_DESCRIPTOR_CONTROL_ENHANCED(descriptor_base, descriptor->control);
 400243c:	e0bffe17 	ldw	r2,-8(fp)
 4002440:	10800704 	addi	r2,r2,28
 4002444:	e0ffff17 	ldw	r3,-4(fp)
 4002448:	18c00717 	ldw	r3,28(r3)
 400244c:	10c00035 	stwio	r3,0(r2)
    return 0;
 4002450:	0005883a 	mov	r2,zero
}
 4002454:	e037883a 	mov	sp,fp
 4002458:	dfc00117 	ldw	ra,4(sp)
 400245c:	df000017 	ldw	fp,0(sp)
 4002460:	dec00204 	addi	sp,sp,8
 4002464:	f800283a 	ret

04002468 <irq>:
/*
 * irq
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void irq(void *context) {
 4002468:	defffb04 	addi	sp,sp,-20
 400246c:	dfc00415 	stw	ra,16(sp)
 4002470:	df000315 	stw	fp,12(sp)
 4002474:	df000304 	addi	fp,sp,12
 4002478:	e13fff15 	stw	r4,-4(fp)
    msgdma_dev *dev = (msgdma_dev *) context;
 400247c:	e0bfff17 	ldw	r2,-4(fp)
 4002480:	e0bffd15 	stw	r2,-12(fp)
    uint32_t temporary_control = 0;
 4002484:	e03ffe15 	stw	zero,-8(fp)

    /* disable global interrupt */
    temporary_control = MSGDMA_RD_CSR_CONTROL(dev->csr_base) & (~MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
 4002488:	e0bffd17 	ldw	r2,-12(fp)
 400248c:	10800017 	ldw	r2,0(r2)
 4002490:	10800104 	addi	r2,r2,4
 4002494:	10800037 	ldwio	r2,0(r2)
 4002498:	1007883a 	mov	r3,r2
 400249c:	00bffbc4 	movi	r2,-17
 40024a0:	1884703a 	and	r2,r3,r2
 40024a4:	e0bffe15 	stw	r2,-8(fp)
    MSGDMA_WR_CSR_CONTROL(dev->csr_base, temporary_control);
 40024a8:	e0bffd17 	ldw	r2,-12(fp)
 40024ac:	10800017 	ldw	r2,0(r2)
 40024b0:	10800104 	addi	r2,r2,4
 40024b4:	e0fffe17 	ldw	r3,-8(fp)
 40024b8:	10c00035 	stwio	r3,0(r2)
    /* clear the IRQ status */
    MSGDMA_WR_CSR_STATUS(dev->csr_base, MSGDMA_CSR_IRQ_SET_MASK);
 40024bc:	e0bffd17 	ldw	r2,-12(fp)
 40024c0:	10800017 	ldw	r2,0(r2)
 40024c4:	00c08004 	movi	r3,512
 40024c8:	10c00035 	stwio	r3,0(r2)

    if (dev->callback) {
 40024cc:	e0bffd17 	ldw	r2,-12(fp)
 40024d0:	10800517 	ldw	r2,20(r2)
 40024d4:	10000626 	beq	r2,zero,40024f0 <irq+0x88>
        dev->callback(dev->callback_context);
 40024d8:	e0bffd17 	ldw	r2,-12(fp)
 40024dc:	10800517 	ldw	r2,20(r2)
 40024e0:	e0fffd17 	ldw	r3,-12(fp)
 40024e4:	18c00617 	ldw	r3,24(r3)
 40024e8:	1809883a 	mov	r4,r3
 40024ec:	103ee83a 	callr	r2
    }

    /* enable global interrupt */
    temporary_control = MSGDMA_RD_CSR_CONTROL(dev->csr_base) | (MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
 40024f0:	e0bffd17 	ldw	r2,-12(fp)
 40024f4:	10800017 	ldw	r2,0(r2)
 40024f8:	10800104 	addi	r2,r2,4
 40024fc:	10800037 	ldwio	r2,0(r2)
 4002500:	10800414 	ori	r2,r2,16
 4002504:	e0bffe15 	stw	r2,-8(fp)
    MSGDMA_WR_CSR_CONTROL(dev->csr_base, temporary_control);
 4002508:	e0bffd17 	ldw	r2,-12(fp)
 400250c:	10800017 	ldw	r2,0(r2)
 4002510:	10800104 	addi	r2,r2,4
 4002514:	e0fffe17 	ldw	r3,-8(fp)
 4002518:	10c00035 	stwio	r3,0(r2)
}
 400251c:	0001883a 	nop
 4002520:	e037883a 	mov	sp,fp
 4002524:	dfc00117 	ldw	ra,4(sp)
 4002528:	df000017 	ldw	fp,0(sp)
 400252c:	dec00204 	addi	sp,sp,8
 4002530:	f800283a 	ret

04002534 <construct_standard_descriptor>:
 *
 * Returns: 0       -> success
 *          -EINVAL -> invalid argument, could be due to an argument which
 *                     has a larger value than hardware's max value
 */
static int construct_standard_descriptor(msgdma_dev *dev, msgdma_standard_descriptor *descriptor, uint32_t *read_address, uint32_t *write_address, uint32_t length, uint32_t control) {
 4002534:	defffb04 	addi	sp,sp,-20
 4002538:	df000415 	stw	fp,16(sp)
 400253c:	df000404 	addi	fp,sp,16
 4002540:	e13ffc15 	stw	r4,-16(fp)
 4002544:	e17ffd15 	stw	r5,-12(fp)
 4002548:	e1bffe15 	stw	r6,-8(fp)
 400254c:	e1ffff15 	stw	r7,-4(fp)
    if (dev->max_byte < length || dev->enhanced_features != 0) {
 4002550:	e0bffc17 	ldw	r2,-16(fp)
 4002554:	10c00c17 	ldw	r3,48(r2)
 4002558:	e0800117 	ldw	r2,4(fp)
 400255c:	18800436 	bltu	r3,r2,4002570 <construct_standard_descriptor+0x3c>
 4002560:	e0bffc17 	ldw	r2,-16(fp)
 4002564:	10800f83 	ldbu	r2,62(r2)
 4002568:	10803fcc 	andi	r2,r2,255
 400256c:	10000226 	beq	r2,zero,4002578 <construct_standard_descriptor+0x44>
        return -EINVAL;
 4002570:	00bffa84 	movi	r2,-22
 4002574:	00000e06 	br	40025b0 <construct_standard_descriptor+0x7c>
    }

    descriptor->read_address = read_address;
 4002578:	e0bffd17 	ldw	r2,-12(fp)
 400257c:	e0fffe17 	ldw	r3,-8(fp)
 4002580:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
 4002584:	e0bffd17 	ldw	r2,-12(fp)
 4002588:	e0ffff17 	ldw	r3,-4(fp)
 400258c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
 4002590:	e0bffd17 	ldw	r2,-12(fp)
 4002594:	e0c00117 	ldw	r3,4(fp)
 4002598:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
 400259c:	e0800217 	ldw	r2,8(fp)
 40025a0:	10e00034 	orhi	r3,r2,32768
 40025a4:	e0bffd17 	ldw	r2,-12(fp)
 40025a8:	10c00315 	stw	r3,12(r2)

    return 0;
 40025ac:	0005883a 	mov	r2,zero
}
 40025b0:	e037883a 	mov	sp,fp
 40025b4:	df000017 	ldw	fp,0(sp)
 40025b8:	dec00104 	addi	sp,sp,4
 40025bc:	f800283a 	ret

040025c0 <construct_extended_descriptor>:
 *
 * Returns: 0       -> success
 *          -EINVAL -> invalid argument, could be due to an argument which
 *                     has a larger value than hardware's max value
 */
static int construct_extended_descriptor(msgdma_dev *dev, msgdma_extended_descriptor *descriptor, uint32_t *read_address, uint32_t *write_address, uint32_t length, uint32_t control, uint16_t sequence_number, uint8_t read_burst_count, uint8_t write_burst_count, uint16_t read_stride, uint16_t write_stride) {
 40025c0:	defff604 	addi	sp,sp,-40
 40025c4:	df000915 	stw	fp,36(sp)
 40025c8:	df000904 	addi	fp,sp,36
 40025cc:	e13ff715 	stw	r4,-36(fp)
 40025d0:	e17ff815 	stw	r5,-32(fp)
 40025d4:	e1bff915 	stw	r6,-28(fp)
 40025d8:	e1fffa15 	stw	r7,-24(fp)
 40025dc:	e1800317 	ldw	r6,12(fp)
 40025e0:	e1400417 	ldw	r5,16(fp)
 40025e4:	e1000517 	ldw	r4,20(fp)
 40025e8:	e0c00617 	ldw	r3,24(fp)
 40025ec:	e0800717 	ldw	r2,28(fp)
 40025f0:	e1bffb0d 	sth	r6,-20(fp)
 40025f4:	e17ffc05 	stb	r5,-16(fp)
 40025f8:	e13ffd05 	stb	r4,-12(fp)
 40025fc:	e0fffe0d 	sth	r3,-8(fp)
 4002600:	e0bfff0d 	sth	r2,-4(fp)
    if (dev->max_byte < length || dev->max_stride < read_stride || dev->max_stride < write_stride || dev->enhanced_features != 1) {
 4002604:	e0bff717 	ldw	r2,-36(fp)
 4002608:	10c00c17 	ldw	r3,48(r2)
 400260c:	e0800117 	ldw	r2,4(fp)
 4002610:	18801936 	bltu	r3,r2,4002678 <construct_extended_descriptor+0xb8>
 4002614:	e13ff717 	ldw	r4,-36(fp)
 4002618:	20800d17 	ldw	r2,52(r4)
 400261c:	20c00e17 	ldw	r3,56(r4)
 4002620:	e13ffe0b 	ldhu	r4,-8(fp)
 4002624:	213fffcc 	andi	r4,r4,65535
 4002628:	2015883a 	mov	r10,r4
 400262c:	0017883a 	mov	r11,zero
 4002630:	1ac01136 	bltu	r3,r11,4002678 <construct_extended_descriptor+0xb8>
 4002634:	58c0011e 	bne	r11,r3,400263c <construct_extended_descriptor+0x7c>
 4002638:	12800f36 	bltu	r2,r10,4002678 <construct_extended_descriptor+0xb8>
 400263c:	e13ff717 	ldw	r4,-36(fp)
 4002640:	20800d17 	ldw	r2,52(r4)
 4002644:	20c00e17 	ldw	r3,56(r4)
 4002648:	e13fff0b 	ldhu	r4,-4(fp)
 400264c:	213fffcc 	andi	r4,r4,65535
 4002650:	2011883a 	mov	r8,r4
 4002654:	0013883a 	mov	r9,zero
 4002658:	1a400736 	bltu	r3,r9,4002678 <construct_extended_descriptor+0xb8>
 400265c:	48c0011e 	bne	r9,r3,4002664 <construct_extended_descriptor+0xa4>
 4002660:	12000536 	bltu	r2,r8,4002678 <construct_extended_descriptor+0xb8>
 4002664:	e0bff717 	ldw	r2,-36(fp)
 4002668:	10800f83 	ldbu	r2,62(r2)
 400266c:	10803fcc 	andi	r2,r2,255
 4002670:	10800060 	cmpeqi	r2,r2,1
 4002674:	1000021e 	bne	r2,zero,4002680 <construct_extended_descriptor+0xc0>
        return -EINVAL;
 4002678:	00bffa84 	movi	r2,-22
 400267c:	00002106 	br	4002704 <construct_extended_descriptor+0x144>
    }

    descriptor->read_address_low = read_address;
 4002680:	e0bff817 	ldw	r2,-32(fp)
 4002684:	e0fff917 	ldw	r3,-28(fp)
 4002688:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
 400268c:	e0bff817 	ldw	r2,-32(fp)
 4002690:	e0fffa17 	ldw	r3,-24(fp)
 4002694:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
 4002698:	e0bff817 	ldw	r2,-32(fp)
 400269c:	e0c00117 	ldw	r3,4(fp)
 40026a0:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
 40026a4:	e0bff817 	ldw	r2,-32(fp)
 40026a8:	e0fffb0b 	ldhu	r3,-20(fp)
 40026ac:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
 40026b0:	e0bff817 	ldw	r2,-32(fp)
 40026b4:	e0fffc03 	ldbu	r3,-16(fp)
 40026b8:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
 40026bc:	e0bff817 	ldw	r2,-32(fp)
 40026c0:	e0fffd03 	ldbu	r3,-12(fp)
 40026c4:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
 40026c8:	e0bff817 	ldw	r2,-32(fp)
 40026cc:	e0fffe0b 	ldhu	r3,-8(fp)
 40026d0:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
 40026d4:	e0bff817 	ldw	r2,-32(fp)
 40026d8:	e0ffff0b 	ldhu	r3,-4(fp)
 40026dc:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
 40026e0:	e0bff817 	ldw	r2,-32(fp)
 40026e4:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
 40026e8:	e0bff817 	ldw	r2,-32(fp)
 40026ec:	10000615 	stw	zero,24(r2)
    descriptor->control = control | MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
 40026f0:	e0800217 	ldw	r2,8(fp)
 40026f4:	10e00034 	orhi	r3,r2,32768
 40026f8:	e0bff817 	ldw	r2,-32(fp)
 40026fc:	10c00715 	stw	r3,28(r2)

    return 0 ;
 4002700:	0005883a 	mov	r2,zero
}
 4002704:	e037883a 	mov	sp,fp
 4002708:	df000017 	ldw	fp,0(sp)
 400270c:	dec00104 	addi	sp,sp,4
 4002710:	f800283a 	ret

04002714 <descriptor_async_transfer>:
 * Returns: 0       -> success
 *          -ENOSPC -> FIFO descriptor buffer is full
 *          -EPERM  -> operation not permitted due to descriptor type conflict
 *          -ETIME  -> Time out and skipping the looping after 5 msec
 */
static int descriptor_async_transfer(msgdma_dev *dev, msgdma_standard_descriptor *standard_desc, msgdma_extended_descriptor *extended_desc) {
 4002714:	defff704 	addi	sp,sp,-36
 4002718:	dfc00815 	stw	ra,32(sp)
 400271c:	df000715 	stw	fp,28(sp)
 4002720:	df000704 	addi	fp,sp,28
 4002724:	e13ffd15 	stw	r4,-12(fp)
 4002728:	e17ffe15 	stw	r5,-8(fp)
 400272c:	e1bfff15 	stw	r6,-4(fp)
    uint32_t control = 0;
 4002730:	e03ffa15 	stw	zero,-24(fp)
    uint16_t counter = 0;
 4002734:	e03ff90d 	sth	zero,-28(fp)
    uint32_t fifo_read_fill_level = read_csr_read_descriptor_buffer_fill_level(dev->csr_base);
 4002738:	e0bffd17 	ldw	r2,-12(fp)
 400273c:	10800017 	ldw	r2,0(r2)
 4002740:	1009883a 	mov	r4,r2
 4002744:	4002c700 	call	4002c70 <read_csr_read_descriptor_buffer_fill_level>
 4002748:	10bfffcc 	andi	r2,r2,65535
 400274c:	e0bffb15 	stw	r2,-20(fp)
    uint32_t fifo_write_fill_level = read_csr_write_descriptor_buffer_fill_level(dev->csr_base);
 4002750:	e0bffd17 	ldw	r2,-12(fp)
 4002754:	10800017 	ldw	r2,0(r2)
 4002758:	1009883a 	mov	r4,r2
 400275c:	4002c9c0 	call	4002c9c <read_csr_write_descriptor_buffer_fill_level>
 4002760:	10bfffcc 	andi	r2,r2,65535
 4002764:	e0bffc15 	stw	r2,-16(fp)

    /* Return with error immediately if one of read/write buffer is full */
    if ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
 4002768:	e0bffd17 	ldw	r2,-12(fp)
 400276c:	10800317 	ldw	r2,12(r2)
 4002770:	e0fffc17 	ldw	r3,-16(fp)
 4002774:	1880042e 	bgeu	r3,r2,4002788 <descriptor_async_transfer+0x74>
 4002778:	e0bffd17 	ldw	r2,-12(fp)
 400277c:	10800317 	ldw	r2,12(r2)
 4002780:	e0fffb17 	ldw	r3,-20(fp)
 4002784:	18800236 	bltu	r3,r2,4002790 <descriptor_async_transfer+0x7c>
        /* at least one write or read FIFO descriptor buffer is full,
        returning so that this function is non-blocking */
        return -ENOSPC;
 4002788:	00bff904 	movi	r2,-28
 400278c:	00006506 	br	4002924 <descriptor_async_transfer+0x210>

    /* Stop the msgdma dispatcher from issuing more descriptors to the read or
     * write masters */

    /* Stop issuing more descriptors */
    control = MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
 4002790:	00800804 	movi	r2,32
 4002794:	e0bffa15 	stw	r2,-24(fp)
    MSGDMA_WR_CSR_CONTROL(dev->csr_base, control);
 4002798:	e0bffd17 	ldw	r2,-12(fp)
 400279c:	10800017 	ldw	r2,0(r2)
 40027a0:	10800104 	addi	r2,r2,4
 40027a4:	e0fffa17 	ldw	r3,-24(fp)
 40027a8:	10c00035 	stwio	r3,0(r2)

    /*
     * Clear any (previous) status register information
     * that might occlude our error checking later.
     */
    MSGDMA_WR_CSR_STATUS(dev->csr_base, MSGDMA_RD_CSR_STATUS(dev->csr_base));
 40027ac:	e0bffd17 	ldw	r2,-12(fp)
 40027b0:	10800017 	ldw	r2,0(r2)
 40027b4:	e0fffd17 	ldw	r3,-12(fp)
 40027b8:	18c00017 	ldw	r3,0(r3)
 40027bc:	18c00037 	ldwio	r3,0(r3)
 40027c0:	10c00035 	stwio	r3,0(r2)

    if (NULL != standard_desc && NULL == extended_desc) {
 40027c4:	e0bffe17 	ldw	r2,-8(fp)
 40027c8:	10001726 	beq	r2,zero,4002828 <descriptor_async_transfer+0x114>
 40027cc:	e0bfff17 	ldw	r2,-4(fp)
 40027d0:	1000151e 	bne	r2,zero,4002828 <descriptor_async_transfer+0x114>
        /* writing descriptor structure to the dispatcher, wait until descriptor
           write is succeed */
        while (0 != write_standard_descriptor(dev->csr_base, dev->descriptor_base, standard_desc)) {
 40027d4:	00000a06 	br	4002800 <descriptor_async_transfer+0xec>
            msgdma_usleep(1); /* delay 1us */
 40027d8:	01000044 	movi	r4,1
 40027dc:	40032b80 	call	40032b8 <msgdma_usleep>
            if(MSGMDA_TIMEOUT_US <= counter) { /* time_out if waiting longer than 5 msec */
 40027e0:	e0bff90b 	ldhu	r2,-28(fp)
 40027e4:	1084e230 	cmpltui	r2,r2,5000
 40027e8:	1000021e 	bne	r2,zero,40027f4 <descriptor_async_transfer+0xe0>
                return -ETIME;
 40027ec:	00bff084 	movi	r2,-62
 40027f0:	00004c06 	br	4002924 <descriptor_async_transfer+0x210>
            }
            counter++;
 40027f4:	e0bff90b 	ldhu	r2,-28(fp)
 40027f8:	10800044 	addi	r2,r2,1
 40027fc:	e0bff90d 	sth	r2,-28(fp)
    MSGDMA_WR_CSR_STATUS(dev->csr_base, MSGDMA_RD_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc) {
        /* writing descriptor structure to the dispatcher, wait until descriptor
           write is succeed */
        while (0 != write_standard_descriptor(dev->csr_base, dev->descriptor_base, standard_desc)) {
 4002800:	e0bffd17 	ldw	r2,-12(fp)
 4002804:	10c00017 	ldw	r3,0(r2)
 4002808:	e0bffd17 	ldw	r2,-12(fp)
 400280c:	10800117 	ldw	r2,4(r2)
 4002810:	e1bffe17 	ldw	r6,-8(fp)
 4002814:	100b883a 	mov	r5,r2
 4002818:	1809883a 	mov	r4,r3
 400281c:	40022a00 	call	40022a0 <write_standard_descriptor>
 4002820:	103fed1e 	bne	r2,zero,40027d8 <__alt_data_end+0xfc0027d8>
     * Clear any (previous) status register information
     * that might occlude our error checking later.
     */
    MSGDMA_WR_CSR_STATUS(dev->csr_base, MSGDMA_RD_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc) {
 4002824:	00001c06 	br	4002898 <descriptor_async_transfer+0x184>
            if(MSGMDA_TIMEOUT_US <= counter) { /* time_out if waiting longer than 5 msec */
                return -ETIME;
            }
            counter++;
        }
    } else if (NULL == standard_desc && NULL != extended_desc) {
 4002828:	e0bffe17 	ldw	r2,-8(fp)
 400282c:	1000181e 	bne	r2,zero,4002890 <descriptor_async_transfer+0x17c>
 4002830:	e0bfff17 	ldw	r2,-4(fp)
 4002834:	10001626 	beq	r2,zero,4002890 <descriptor_async_transfer+0x17c>
        counter = 0; /* reset counter */
 4002838:	e03ff90d 	sth	zero,-28(fp)
        /* writing descriptor structure to the dispatcher, wait until descriptor
           write is succeed */
        while (0 != write_extended_descriptor(dev->csr_base, dev->descriptor_base, extended_desc)) {
 400283c:	00000a06 	br	4002868 <descriptor_async_transfer+0x154>
            msgdma_usleep(1); /* delay 1us */
 4002840:	01000044 	movi	r4,1
 4002844:	40032b80 	call	40032b8 <msgdma_usleep>
            if(MSGMDA_TIMEOUT_US <= counter) { /* time_out if waiting longer than 5 msec */
 4002848:	e0bff90b 	ldhu	r2,-28(fp)
 400284c:	1084e230 	cmpltui	r2,r2,5000
 4002850:	1000021e 	bne	r2,zero,400285c <descriptor_async_transfer+0x148>
                return -ETIME;
 4002854:	00bff084 	movi	r2,-62
 4002858:	00003206 	br	4002924 <descriptor_async_transfer+0x210>
            }
            counter++;
 400285c:	e0bff90b 	ldhu	r2,-28(fp)
 4002860:	10800044 	addi	r2,r2,1
 4002864:	e0bff90d 	sth	r2,-28(fp)
        }
    } else if (NULL == standard_desc && NULL != extended_desc) {
        counter = 0; /* reset counter */
        /* writing descriptor structure to the dispatcher, wait until descriptor
           write is succeed */
        while (0 != write_extended_descriptor(dev->csr_base, dev->descriptor_base, extended_desc)) {
 4002868:	e0bffd17 	ldw	r2,-12(fp)
 400286c:	10c00017 	ldw	r3,0(r2)
 4002870:	e0bffd17 	ldw	r2,-12(fp)
 4002874:	10800117 	ldw	r2,4(r2)
 4002878:	e1bfff17 	ldw	r6,-4(fp)
 400287c:	100b883a 	mov	r5,r2
 4002880:	1809883a 	mov	r4,r3
 4002884:	40023380 	call	4002338 <write_extended_descriptor>
 4002888:	103fed1e 	bne	r2,zero,4002840 <__alt_data_end+0xfc002840>
            if(MSGMDA_TIMEOUT_US <= counter) { /* time_out if waiting longer than 5 msec */
                return -ETIME;
            }
            counter++;
        }
    } else if (NULL == standard_desc && NULL != extended_desc) {
 400288c:	00000206 	br	4002898 <descriptor_async_transfer+0x184>
            }
            counter++;
        }
    } else {
        /* operation not permitted due to descriptor type conflict */
        return -EPERM;
 4002890:	00bfffc4 	movi	r2,-1
 4002894:	00002306 	br	4002924 <descriptor_async_transfer+0x210>
     * If a callback routine has been previously registered, then it will be
     * called from the msgdma ISR. Set up controller to:
     *  - Run
     *  - Stop on an error with any particular descriptor
     */
    if (dev->callback) {
 4002898:	e0bffd17 	ldw	r2,-12(fp)
 400289c:	10800517 	ldw	r2,20(r2)
 40028a0:	10001026 	beq	r2,zero,40028e4 <descriptor_async_transfer+0x1d0>
        control |= (dev->control | MSGDMA_CSR_STOP_ON_ERROR_MASK | MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
 40028a4:	e0bffd17 	ldw	r2,-12(fp)
 40028a8:	10c00717 	ldw	r3,28(r2)
 40028ac:	e0bffa17 	ldw	r2,-24(fp)
 40028b0:	1884b03a 	or	r2,r3,r2
 40028b4:	10800514 	ori	r2,r2,20
 40028b8:	e0bffa15 	stw	r2,-24(fp)
        control &=  (~MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
 40028bc:	e0fffa17 	ldw	r3,-24(fp)
 40028c0:	00bff7c4 	movi	r2,-33
 40028c4:	1884703a 	and	r2,r3,r2
 40028c8:	e0bffa15 	stw	r2,-24(fp)
        MSGDMA_WR_CSR_CONTROL(dev->csr_base, control);
 40028cc:	e0bffd17 	ldw	r2,-12(fp)
 40028d0:	10800017 	ldw	r2,0(r2)
 40028d4:	10800104 	addi	r2,r2,4
 40028d8:	e0fffa17 	ldw	r3,-24(fp)
 40028dc:	10c00035 	stwio	r3,0(r2)
 40028e0:	00000f06 	br	4002920 <descriptor_async_transfer+0x20c>
         * No callback has been registered. Set up controller to:
         *   - Run
         *   - Stop on an error with any particular descriptor
         *   - Disable interrupt generation
         */
        control |= (dev->control | MSGDMA_CSR_STOP_ON_ERROR_MASK);
 40028e4:	e0bffd17 	ldw	r2,-12(fp)
 40028e8:	10c00717 	ldw	r3,28(r2)
 40028ec:	e0bffa17 	ldw	r2,-24(fp)
 40028f0:	1884b03a 	or	r2,r3,r2
 40028f4:	10800114 	ori	r2,r2,4
 40028f8:	e0bffa15 	stw	r2,-24(fp)
        control &= (~MSGDMA_CSR_STOP_DESCRIPTORS_MASK) & (~MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
 40028fc:	e0fffa17 	ldw	r3,-24(fp)
 4002900:	00bff3c4 	movi	r2,-49
 4002904:	1884703a 	and	r2,r3,r2
 4002908:	e0bffa15 	stw	r2,-24(fp)
        MSGDMA_WR_CSR_CONTROL(dev->csr_base, control);
 400290c:	e0bffd17 	ldw	r2,-12(fp)
 4002910:	10800017 	ldw	r2,0(r2)
 4002914:	10800104 	addi	r2,r2,4
 4002918:	e0fffa17 	ldw	r3,-24(fp)
 400291c:	10c00035 	stwio	r3,0(r2)
    }

    return 0;
 4002920:	0005883a 	mov	r2,zero
}
 4002924:	e037883a 	mov	sp,fp
 4002928:	dfc00117 	ldw	ra,4(sp)
 400292c:	df000017 	ldw	fp,0(sp)
 4002930:	dec00204 	addi	sp,sp,8
 4002934:	f800283a 	ret

04002938 <descriptor_sync_transfer>:
 *
 * Returns: 0      -> success
 *          -EPERM -> operation not permitted due to descriptor type conflict
 *          -ETIME -> Time out and skipping the looping after 5 msec
 */
static int descriptor_sync_transfer(msgdma_dev *dev, msgdma_standard_descriptor *standard_desc, msgdma_extended_descriptor *extended_desc) {
 4002938:	defff504 	addi	sp,sp,-44
 400293c:	dfc00a15 	stw	ra,40(sp)
 4002940:	df000915 	stw	fp,36(sp)
 4002944:	df000904 	addi	fp,sp,36
 4002948:	e13ffd15 	stw	r4,-12(fp)
 400294c:	e17ffe15 	stw	r5,-8(fp)
 4002950:	e1bfff15 	stw	r6,-4(fp)
    uint32_t control = 0;
 4002954:	e03ffb15 	stw	zero,-20(fp)
    uint32_t csr_status = 0;
 4002958:	e03ff715 	stw	zero,-36(fp)
    uint16_t counter = 0;
 400295c:	e03ff80d 	sth	zero,-32(fp)
    uint32_t fifo_read_fill_level = read_csr_read_descriptor_buffer_fill_level(dev->csr_base);
 4002960:	e0bffd17 	ldw	r2,-12(fp)
 4002964:	10800017 	ldw	r2,0(r2)
 4002968:	1009883a 	mov	r4,r2
 400296c:	4002c700 	call	4002c70 <read_csr_read_descriptor_buffer_fill_level>
 4002970:	10bfffcc 	andi	r2,r2,65535
 4002974:	e0bff915 	stw	r2,-28(fp)
    uint32_t fifo_write_fill_level = read_csr_write_descriptor_buffer_fill_level(dev->csr_base);
 4002978:	e0bffd17 	ldw	r2,-12(fp)
 400297c:	10800017 	ldw	r2,0(r2)
 4002980:	1009883a 	mov	r4,r2
 4002984:	4002c9c0 	call	4002c9c <read_csr_write_descriptor_buffer_fill_level>
 4002988:	10bfffcc 	andi	r2,r2,65535
 400298c:	e0bffa15 	stw	r2,-24(fp)
    uint32_t error = MSGDMA_CSR_STOPPED_ON_ERROR_MASK | MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK | MSGDMA_CSR_STOP_STATE_MASK | MSGDMA_CSR_RESET_STATE_MASK;
 4002990:	00807804 	movi	r2,480
 4002994:	e0bffc15 	stw	r2,-16(fp)

    /* Wait for available FIFO buffer to store new descriptor */
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
 4002998:	00001606 	br	40029f4 <descriptor_sync_transfer+0xbc>
        msgdma_usleep(1); /* delay 1us */
 400299c:	01000044 	movi	r4,1
 40029a0:	40032b80 	call	40032b8 <msgdma_usleep>
        if (MSGMDA_TIMEOUT_US <= counter) { /* time_out if waiting longer than 5 msec */
 40029a4:	e0bff80b 	ldhu	r2,-32(fp)
 40029a8:	1084e230 	cmpltui	r2,r2,5000
 40029ac:	1000021e 	bne	r2,zero,40029b8 <descriptor_sync_transfer+0x80>
            return -ETIME;
 40029b0:	00bff084 	movi	r2,-62
 40029b4:	00009406 	br	4002c08 <descriptor_sync_transfer+0x2d0>
        }
        counter++;
 40029b8:	e0bff80b 	ldhu	r2,-32(fp)
 40029bc:	10800044 	addi	r2,r2,1
 40029c0:	e0bff80d 	sth	r2,-32(fp)
        fifo_read_fill_level = read_csr_read_descriptor_buffer_fill_level(dev->csr_base);
 40029c4:	e0bffd17 	ldw	r2,-12(fp)
 40029c8:	10800017 	ldw	r2,0(r2)
 40029cc:	1009883a 	mov	r4,r2
 40029d0:	4002c700 	call	4002c70 <read_csr_read_descriptor_buffer_fill_level>
 40029d4:	10bfffcc 	andi	r2,r2,65535
 40029d8:	e0bff915 	stw	r2,-28(fp)
        fifo_write_fill_level = read_csr_write_descriptor_buffer_fill_level(dev->csr_base);
 40029dc:	e0bffd17 	ldw	r2,-12(fp)
 40029e0:	10800017 	ldw	r2,0(r2)
 40029e4:	1009883a 	mov	r4,r2
 40029e8:	4002c9c0 	call	4002c9c <read_csr_write_descriptor_buffer_fill_level>
 40029ec:	10bfffcc 	andi	r2,r2,65535
 40029f0:	e0bffa15 	stw	r2,-24(fp)
    uint32_t fifo_read_fill_level = read_csr_read_descriptor_buffer_fill_level(dev->csr_base);
    uint32_t fifo_write_fill_level = read_csr_write_descriptor_buffer_fill_level(dev->csr_base);
    uint32_t error = MSGDMA_CSR_STOPPED_ON_ERROR_MASK | MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK | MSGDMA_CSR_STOP_STATE_MASK | MSGDMA_CSR_RESET_STATE_MASK;

    /* Wait for available FIFO buffer to store new descriptor */
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
 40029f4:	e0bffd17 	ldw	r2,-12(fp)
 40029f8:	10800317 	ldw	r2,12(r2)
 40029fc:	e0fffa17 	ldw	r3,-24(fp)
 4002a00:	18bfe62e 	bgeu	r3,r2,400299c <__alt_data_end+0xfc00299c>
 4002a04:	e0bffd17 	ldw	r2,-12(fp)
 4002a08:	10800317 	ldw	r2,12(r2)
 4002a0c:	e0fff917 	ldw	r3,-28(fp)
 4002a10:	18bfe22e 	bgeu	r3,r2,400299c <__alt_data_end+0xfc00299c>
        fifo_write_fill_level = read_csr_write_descriptor_buffer_fill_level(dev->csr_base);
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the read or
     * write masters */
    MSGDMA_WR_CSR_CONTROL(dev->csr_base, MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
 4002a14:	e0bffd17 	ldw	r2,-12(fp)
 4002a18:	10800017 	ldw	r2,0(r2)
 4002a1c:	10800104 	addi	r2,r2,4
 4002a20:	00c00804 	movi	r3,32
 4002a24:	10c00035 	stwio	r3,0(r2)
    /*
     * Clear any (previous) status register information that might occlude our
     * error checking later.
     */
    MSGDMA_WR_CSR_STATUS(dev->csr_base, MSGDMA_RD_CSR_STATUS(dev->csr_base));
 4002a28:	e0bffd17 	ldw	r2,-12(fp)
 4002a2c:	10800017 	ldw	r2,0(r2)
 4002a30:	e0fffd17 	ldw	r3,-12(fp)
 4002a34:	18c00017 	ldw	r3,0(r3)
 4002a38:	18c00037 	ldwio	r3,0(r3)
 4002a3c:	10c00035 	stwio	r3,0(r2)

    if (NULL != standard_desc && NULL == extended_desc) {
 4002a40:	e0bffe17 	ldw	r2,-8(fp)
 4002a44:	10001826 	beq	r2,zero,4002aa8 <descriptor_sync_transfer+0x170>
 4002a48:	e0bfff17 	ldw	r2,-4(fp)
 4002a4c:	1000161e 	bne	r2,zero,4002aa8 <descriptor_sync_transfer+0x170>
        counter = 0; /* reset counter */
 4002a50:	e03ff80d 	sth	zero,-32(fp)
        /* writing descriptor structure to the dispatcher, wait until descriptor
           write is succeed */
        while (0 != write_standard_descriptor(dev->csr_base, dev->descriptor_base, standard_desc)) {
 4002a54:	00000a06 	br	4002a80 <descriptor_sync_transfer+0x148>
            msgdma_usleep(1); /* delay 1us */
 4002a58:	01000044 	movi	r4,1
 4002a5c:	40032b80 	call	40032b8 <msgdma_usleep>
            if (MSGMDA_TIMEOUT_US <= counter) { /* time_out if waiting longer than 5 msec */
 4002a60:	e0bff80b 	ldhu	r2,-32(fp)
 4002a64:	1084e230 	cmpltui	r2,r2,5000
 4002a68:	1000021e 	bne	r2,zero,4002a74 <descriptor_sync_transfer+0x13c>
                return -ETIME;
 4002a6c:	00bff084 	movi	r2,-62
 4002a70:	00006506 	br	4002c08 <descriptor_sync_transfer+0x2d0>
            }
            counter++;
 4002a74:	e0bff80b 	ldhu	r2,-32(fp)
 4002a78:	10800044 	addi	r2,r2,1
 4002a7c:	e0bff80d 	sth	r2,-32(fp)

    if (NULL != standard_desc && NULL == extended_desc) {
        counter = 0; /* reset counter */
        /* writing descriptor structure to the dispatcher, wait until descriptor
           write is succeed */
        while (0 != write_standard_descriptor(dev->csr_base, dev->descriptor_base, standard_desc)) {
 4002a80:	e0bffd17 	ldw	r2,-12(fp)
 4002a84:	10c00017 	ldw	r3,0(r2)
 4002a88:	e0bffd17 	ldw	r2,-12(fp)
 4002a8c:	10800117 	ldw	r2,4(r2)
 4002a90:	e1bffe17 	ldw	r6,-8(fp)
 4002a94:	100b883a 	mov	r5,r2
 4002a98:	1809883a 	mov	r4,r3
 4002a9c:	40022a00 	call	40022a0 <write_standard_descriptor>
 4002aa0:	103fed1e 	bne	r2,zero,4002a58 <__alt_data_end+0xfc002a58>
     * Clear any (previous) status register information that might occlude our
     * error checking later.
     */
    MSGDMA_WR_CSR_STATUS(dev->csr_base, MSGDMA_RD_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc) {
 4002aa4:	00001c06 	br	4002b18 <descriptor_sync_transfer+0x1e0>
            if (MSGMDA_TIMEOUT_US <= counter) { /* time_out if waiting longer than 5 msec */
                return -ETIME;
            }
            counter++;
        }
    } else if (NULL == standard_desc && NULL != extended_desc) {
 4002aa8:	e0bffe17 	ldw	r2,-8(fp)
 4002aac:	1000181e 	bne	r2,zero,4002b10 <descriptor_sync_transfer+0x1d8>
 4002ab0:	e0bfff17 	ldw	r2,-4(fp)
 4002ab4:	10001626 	beq	r2,zero,4002b10 <descriptor_sync_transfer+0x1d8>
        counter = 0; /* reset counter */
 4002ab8:	e03ff80d 	sth	zero,-32(fp)
        /* writing descriptor structure to the dispatcher, wait until descriptor
           write is succeed */
        while (0 != write_extended_descriptor(dev->csr_base, dev->descriptor_base, extended_desc)) {
 4002abc:	00000a06 	br	4002ae8 <descriptor_sync_transfer+0x1b0>
            msgdma_usleep(1); /* delay 1us */
 4002ac0:	01000044 	movi	r4,1
 4002ac4:	40032b80 	call	40032b8 <msgdma_usleep>
            if (MSGMDA_TIMEOUT_US <= counter) { /* time_out if waiting longer than 5 msec */
 4002ac8:	e0bff80b 	ldhu	r2,-32(fp)
 4002acc:	1084e230 	cmpltui	r2,r2,5000
 4002ad0:	1000021e 	bne	r2,zero,4002adc <descriptor_sync_transfer+0x1a4>
                return -ETIME;
 4002ad4:	00bff084 	movi	r2,-62
 4002ad8:	00004b06 	br	4002c08 <descriptor_sync_transfer+0x2d0>
            }
            counter++;
 4002adc:	e0bff80b 	ldhu	r2,-32(fp)
 4002ae0:	10800044 	addi	r2,r2,1
 4002ae4:	e0bff80d 	sth	r2,-32(fp)
        }
    } else if (NULL == standard_desc && NULL != extended_desc) {
        counter = 0; /* reset counter */
        /* writing descriptor structure to the dispatcher, wait until descriptor
           write is succeed */
        while (0 != write_extended_descriptor(dev->csr_base, dev->descriptor_base, extended_desc)) {
 4002ae8:	e0bffd17 	ldw	r2,-12(fp)
 4002aec:	10c00017 	ldw	r3,0(r2)
 4002af0:	e0bffd17 	ldw	r2,-12(fp)
 4002af4:	10800117 	ldw	r2,4(r2)
 4002af8:	e1bfff17 	ldw	r6,-4(fp)
 4002afc:	100b883a 	mov	r5,r2
 4002b00:	1809883a 	mov	r4,r3
 4002b04:	40023380 	call	4002338 <write_extended_descriptor>
 4002b08:	103fed1e 	bne	r2,zero,4002ac0 <__alt_data_end+0xfc002ac0>
            if (MSGMDA_TIMEOUT_US <= counter) { /* time_out if waiting longer than 5 msec */
                return -ETIME;
            }
            counter++;
        }
    } else if (NULL == standard_desc && NULL != extended_desc) {
 4002b0c:	00000206 	br	4002b18 <descriptor_sync_transfer+0x1e0>
            }
            counter++;
        }
    } else {
        /* operation not permitted due to descriptor type conflict */
        return -EPERM;
 4002b10:	00bfffc4 	movi	r2,-1
 4002b14:	00003c06 	br	4002c08 <descriptor_sync_transfer+0x2d0>
     * Set up msgdma controller to:
     * - Disable interrupt generation
     * - Run once a valid descriptor is written to controller
     * - Stop on an error with any particular descriptor
     */
    MSGDMA_WR_CSR_CONTROL(dev->csr_base, (dev->control | MSGDMA_CSR_STOP_ON_ERROR_MASK ) & (~MSGDMA_CSR_STOP_DESCRIPTORS_MASK) & (~MSGDMA_CSR_GLOBAL_INTERRUPT_MASK));
 4002b18:	e0bffd17 	ldw	r2,-12(fp)
 4002b1c:	10800017 	ldw	r2,0(r2)
 4002b20:	10800104 	addi	r2,r2,4
 4002b24:	e0fffd17 	ldw	r3,-12(fp)
 4002b28:	19000717 	ldw	r4,28(r3)
 4002b2c:	00fff2c4 	movi	r3,-53
 4002b30:	20c6703a 	and	r3,r4,r3
 4002b34:	18c00114 	ori	r3,r3,4
 4002b38:	10c00035 	stwio	r3,0(r2)

    counter = 0; /* reset counter */
 4002b3c:	e03ff80d 	sth	zero,-32(fp)

    csr_status = MSGDMA_RD_CSR_STATUS(dev->csr_base);
 4002b40:	e0bffd17 	ldw	r2,-12(fp)
 4002b44:	10800017 	ldw	r2,0(r2)
 4002b48:	10800037 	ldwio	r2,0(r2)
 4002b4c:	e0bff715 	stw	r2,-36(fp)

    /* Wait for any pending transfers to complete or checking any errors or
       conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & MSGDMA_CSR_BUSY_MASK)) {
 4002b50:	00000e06 	br	4002b8c <descriptor_sync_transfer+0x254>
        msgdma_usleep(1); /* delay 1us */
 4002b54:	01000044 	movi	r4,1
 4002b58:	40032b80 	call	40032b8 <msgdma_usleep>
        if (MSGMDA_TIMEOUT_US <= counter) { /* time_out if waiting longer than 5 msec */
 4002b5c:	e0bff80b 	ldhu	r2,-32(fp)
 4002b60:	1084e230 	cmpltui	r2,r2,5000
 4002b64:	1000021e 	bne	r2,zero,4002b70 <descriptor_sync_transfer+0x238>
            return -ETIME;
 4002b68:	00bff084 	movi	r2,-62
 4002b6c:	00002606 	br	4002c08 <descriptor_sync_transfer+0x2d0>
        }
        counter++;
 4002b70:	e0bff80b 	ldhu	r2,-32(fp)
 4002b74:	10800044 	addi	r2,r2,1
 4002b78:	e0bff80d 	sth	r2,-32(fp)
        csr_status = MSGDMA_RD_CSR_STATUS(dev->csr_base);
 4002b7c:	e0bffd17 	ldw	r2,-12(fp)
 4002b80:	10800017 	ldw	r2,0(r2)
 4002b84:	10800037 	ldwio	r2,0(r2)
 4002b88:	e0bff715 	stw	r2,-36(fp)

    csr_status = MSGDMA_RD_CSR_STATUS(dev->csr_base);

    /* Wait for any pending transfers to complete or checking any errors or
       conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & MSGDMA_CSR_BUSY_MASK)) {
 4002b8c:	e0fff717 	ldw	r3,-36(fp)
 4002b90:	e0bffc17 	ldw	r2,-16(fp)
 4002b94:	1884703a 	and	r2,r3,r2
 4002b98:	1000031e 	bne	r2,zero,4002ba8 <descriptor_sync_transfer+0x270>
 4002b9c:	e0bff717 	ldw	r2,-36(fp)
 4002ba0:	1080004c 	andi	r2,r2,1
 4002ba4:	103feb1e 	bne	r2,zero,4002b54 <__alt_data_end+0xfc002b54>
    }


    /* Errors or conditions causing the dispatcher stopping issuing read/write
       commands to masters*/
    if (0 != (csr_status & error)) {
 4002ba8:	e0fff717 	ldw	r3,-36(fp)
 4002bac:	e0bffc17 	ldw	r2,-16(fp)
 4002bb0:	1884703a 	and	r2,r3,r2
 4002bb4:	10000226 	beq	r2,zero,4002bc0 <descriptor_sync_transfer+0x288>
        return error;
 4002bb8:	e0bffc17 	ldw	r2,-16(fp)
 4002bbc:	00001206 	br	4002c08 <descriptor_sync_transfer+0x2d0>

    /* Stop the msgdma dispatcher from issuing more descriptors to the
       read or write masters  */

    /* stop issuing more descriptors */
    control = MSGDMA_RD_CSR_CONTROL(dev->csr_base) | MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
 4002bc0:	e0bffd17 	ldw	r2,-12(fp)
 4002bc4:	10800017 	ldw	r2,0(r2)
 4002bc8:	10800104 	addi	r2,r2,4
 4002bcc:	10800037 	ldwio	r2,0(r2)
 4002bd0:	10800814 	ori	r2,r2,32
 4002bd4:	e0bffb15 	stw	r2,-20(fp)
    MSGDMA_WR_CSR_CONTROL(dev->csr_base, control);
 4002bd8:	e0bffd17 	ldw	r2,-12(fp)
 4002bdc:	10800017 	ldw	r2,0(r2)
 4002be0:	10800104 	addi	r2,r2,4
 4002be4:	e0fffb17 	ldw	r3,-20(fp)
 4002be8:	10c00035 	stwio	r3,0(r2)

    /*
     * Clear any (previous) status register information that might occlude our
     * error checking later.
     */
    MSGDMA_WR_CSR_STATUS(dev->csr_base, MSGDMA_RD_CSR_STATUS(dev->csr_base));
 4002bec:	e0bffd17 	ldw	r2,-12(fp)
 4002bf0:	10800017 	ldw	r2,0(r2)
 4002bf4:	e0fffd17 	ldw	r3,-12(fp)
 4002bf8:	18c00017 	ldw	r3,0(r3)
 4002bfc:	18c00037 	ldwio	r3,0(r3)
 4002c00:	10c00035 	stwio	r3,0(r2)

    return 0;
 4002c04:	0005883a 	mov	r2,zero
}
 4002c08:	e037883a 	mov	sp,fp
 4002c0c:	dfc00117 	ldw	ra,4(sp)
 4002c10:	df000017 	ldw	fp,0(sp)
 4002c14:	dec00204 	addi	sp,sp,8
 4002c18:	f800283a 	ret

04002c1c <read_csr_status>:

/* Functions for accessing the control and status port */
static uint32_t read_csr_status(uint32_t *csr_base) {
 4002c1c:	defffe04 	addi	sp,sp,-8
 4002c20:	df000115 	stw	fp,4(sp)
 4002c24:	df000104 	addi	fp,sp,4
 4002c28:	e13fff15 	stw	r4,-4(fp)
    return MSGDMA_RD_CSR_STATUS(csr_base);
 4002c2c:	e0bfff17 	ldw	r2,-4(fp)
 4002c30:	10800037 	ldwio	r2,0(r2)
}
 4002c34:	e037883a 	mov	sp,fp
 4002c38:	df000017 	ldw	fp,0(sp)
 4002c3c:	dec00104 	addi	sp,sp,4
 4002c40:	f800283a 	ret

04002c44 <read_csr_control>:

static uint32_t read_csr_control(uint32_t *csr_base) {
 4002c44:	defffe04 	addi	sp,sp,-8
 4002c48:	df000115 	stw	fp,4(sp)
 4002c4c:	df000104 	addi	fp,sp,4
 4002c50:	e13fff15 	stw	r4,-4(fp)
    return MSGDMA_RD_CSR_CONTROL(csr_base);
 4002c54:	e0bfff17 	ldw	r2,-4(fp)
 4002c58:	10800104 	addi	r2,r2,4
 4002c5c:	10800037 	ldwio	r2,0(r2)
}
 4002c60:	e037883a 	mov	sp,fp
 4002c64:	df000017 	ldw	fp,0(sp)
 4002c68:	dec00104 	addi	sp,sp,4
 4002c6c:	f800283a 	ret

04002c70 <read_csr_read_descriptor_buffer_fill_level>:

static uint16_t read_csr_read_descriptor_buffer_fill_level(uint32_t *csr_base) {
 4002c70:	defffe04 	addi	sp,sp,-8
 4002c74:	df000115 	stw	fp,4(sp)
 4002c78:	df000104 	addi	fp,sp,4
 4002c7c:	e13fff15 	stw	r4,-4(fp)
    return (MSGDMA_RD_CSR_DESCRIPTOR_FILL_LEVEL(csr_base) & MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
 4002c80:	e0bfff17 	ldw	r2,-4(fp)
 4002c84:	10800204 	addi	r2,r2,8
 4002c88:	10800037 	ldwio	r2,0(r2)
}
 4002c8c:	e037883a 	mov	sp,fp
 4002c90:	df000017 	ldw	fp,0(sp)
 4002c94:	dec00104 	addi	sp,sp,4
 4002c98:	f800283a 	ret

04002c9c <read_csr_write_descriptor_buffer_fill_level>:

static uint16_t read_csr_write_descriptor_buffer_fill_level(uint32_t *csr_base) {
 4002c9c:	defffe04 	addi	sp,sp,-8
 4002ca0:	df000115 	stw	fp,4(sp)
 4002ca4:	df000104 	addi	fp,sp,4
 4002ca8:	e13fff15 	stw	r4,-4(fp)
    return (MSGDMA_RD_CSR_DESCRIPTOR_FILL_LEVEL(csr_base) & MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
 4002cac:	e0bfff17 	ldw	r2,-4(fp)
 4002cb0:	10800204 	addi	r2,r2,8
 4002cb4:	10800037 	ldwio	r2,0(r2)
 4002cb8:	1004d43a 	srli	r2,r2,16
}
 4002cbc:	e037883a 	mov	sp,fp
 4002cc0:	df000017 	ldw	fp,0(sp)
 4002cc4:	dec00104 	addi	sp,sp,4
 4002cc8:	f800283a 	ret

04002ccc <read_csr_response_buffer_fill_level>:

static uint16_t read_csr_response_buffer_fill_level(uint32_t *csr_base) {
 4002ccc:	defffe04 	addi	sp,sp,-8
 4002cd0:	df000115 	stw	fp,4(sp)
 4002cd4:	df000104 	addi	fp,sp,4
 4002cd8:	e13fff15 	stw	r4,-4(fp)
    return (MSGDMA_RD_CSR_RESPONSE_FILL_LEVEL(csr_base) & MSGDMA_CSR_RESPONSE_FILL_LEVEL_MASK) >> MSGDMA_CSR_RESPONSE_FILL_LEVEL_OFFSET;
 4002cdc:	e0bfff17 	ldw	r2,-4(fp)
 4002ce0:	10800304 	addi	r2,r2,12
 4002ce4:	10800037 	ldwio	r2,0(r2)
}
 4002ce8:	e037883a 	mov	sp,fp
 4002cec:	df000017 	ldw	fp,0(sp)
 4002cf0:	dec00104 	addi	sp,sp,4
 4002cf4:	f800283a 	ret

04002cf8 <read_csr_read_sequence_number>:

static uint16_t read_csr_read_sequence_number(uint32_t *csr_base) {
 4002cf8:	defffe04 	addi	sp,sp,-8
 4002cfc:	df000115 	stw	fp,4(sp)
 4002d00:	df000104 	addi	fp,sp,4
 4002d04:	e13fff15 	stw	r4,-4(fp)
    return (MSGDMA_RD_CSR_SEQUENCE_NUMBER(csr_base) & MSGDMA_CSR_READ_SEQUENCE_NUMBER_MASK) >> MSGDMA_CSR_READ_SEQUENCE_NUMBER_OFFSET;
 4002d08:	e0bfff17 	ldw	r2,-4(fp)
 4002d0c:	10800404 	addi	r2,r2,16
 4002d10:	10800037 	ldwio	r2,0(r2)
}
 4002d14:	e037883a 	mov	sp,fp
 4002d18:	df000017 	ldw	fp,0(sp)
 4002d1c:	dec00104 	addi	sp,sp,4
 4002d20:	f800283a 	ret

04002d24 <read_csr_write_sequence_number>:

static uint16_t read_csr_write_sequence_number(uint32_t *csr_base) {
 4002d24:	defffe04 	addi	sp,sp,-8
 4002d28:	df000115 	stw	fp,4(sp)
 4002d2c:	df000104 	addi	fp,sp,4
 4002d30:	e13fff15 	stw	r4,-4(fp)
    return (MSGDMA_RD_CSR_SEQUENCE_NUMBER(csr_base) & MSGDMA_CSR_WRITE_SEQUENCE_NUMBER_MASK) >> MSGDMA_CSR_WRITE_SEQUENCE_NUMBER_OFFSET;
 4002d34:	e0bfff17 	ldw	r2,-4(fp)
 4002d38:	10800404 	addi	r2,r2,16
 4002d3c:	10800037 	ldwio	r2,0(r2)
 4002d40:	1004d43a 	srli	r2,r2,16
}
 4002d44:	e037883a 	mov	sp,fp
 4002d48:	df000017 	ldw	fp,0(sp)
 4002d4c:	dec00104 	addi	sp,sp,4
 4002d50:	f800283a 	ret

04002d54 <read_busy>:

/* Functions for reading/clearing individual status registers */
/* returns '1' when the dispatcher is busy */
static uint32_t read_busy(uint32_t *csr_base) {
 4002d54:	defffe04 	addi	sp,sp,-8
 4002d58:	df000115 	stw	fp,4(sp)
 4002d5c:	df000104 	addi	fp,sp,4
 4002d60:	e13fff15 	stw	r4,-4(fp)
    return (MSGDMA_RD_CSR_STATUS(csr_base) & MSGDMA_CSR_BUSY_MASK) != 0;
 4002d64:	e0bfff17 	ldw	r2,-4(fp)
 4002d68:	10800037 	ldwio	r2,0(r2)
 4002d6c:	1080004c 	andi	r2,r2,1
 4002d70:	1004c03a 	cmpne	r2,r2,zero
 4002d74:	10803fcc 	andi	r2,r2,255
}
 4002d78:	e037883a 	mov	sp,fp
 4002d7c:	df000017 	ldw	fp,0(sp)
 4002d80:	dec00104 	addi	sp,sp,4
 4002d84:	f800283a 	ret

04002d88 <read_descriptor_buffer_empty>:

/* returns '1' when both descriptor buffers are empty */
static uint32_t read_descriptor_buffer_empty(uint32_t *csr_base) {
 4002d88:	defffe04 	addi	sp,sp,-8
 4002d8c:	df000115 	stw	fp,4(sp)
 4002d90:	df000104 	addi	fp,sp,4
 4002d94:	e13fff15 	stw	r4,-4(fp)
    return (MSGDMA_RD_CSR_STATUS(csr_base) & MSGDMA_CSR_DESCRIPTOR_BUFFER_EMPTY_MASK) != 0;
 4002d98:	e0bfff17 	ldw	r2,-4(fp)
 4002d9c:	10800037 	ldwio	r2,0(r2)
 4002da0:	1080008c 	andi	r2,r2,2
 4002da4:	1004c03a 	cmpne	r2,r2,zero
 4002da8:	10803fcc 	andi	r2,r2,255
}
 4002dac:	e037883a 	mov	sp,fp
 4002db0:	df000017 	ldw	fp,0(sp)
 4002db4:	dec00104 	addi	sp,sp,4
 4002db8:	f800283a 	ret

04002dbc <read_descriptor_buffer_full>:

/* returns '1' when either descriptor buffer is full */
static uint32_t read_descriptor_buffer_full(uint32_t *csr_base) {
 4002dbc:	defffe04 	addi	sp,sp,-8
 4002dc0:	df000115 	stw	fp,4(sp)
 4002dc4:	df000104 	addi	fp,sp,4
 4002dc8:	e13fff15 	stw	r4,-4(fp)
    return (MSGDMA_RD_CSR_STATUS(csr_base) & MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK) != 0;
 4002dcc:	e0bfff17 	ldw	r2,-4(fp)
 4002dd0:	10800037 	ldwio	r2,0(r2)
 4002dd4:	1080010c 	andi	r2,r2,4
 4002dd8:	1004c03a 	cmpne	r2,r2,zero
 4002ddc:	10803fcc 	andi	r2,r2,255
}
 4002de0:	e037883a 	mov	sp,fp
 4002de4:	df000017 	ldw	fp,0(sp)
 4002de8:	dec00104 	addi	sp,sp,4
 4002dec:	f800283a 	ret

04002df0 <read_response_buffer_empty>:

/* returns '1' when the response buffer is empty */
static uint32_t read_response_buffer_empty(uint32_t *csr_base) {
 4002df0:	defffe04 	addi	sp,sp,-8
 4002df4:	df000115 	stw	fp,4(sp)
 4002df8:	df000104 	addi	fp,sp,4
 4002dfc:	e13fff15 	stw	r4,-4(fp)
    return (MSGDMA_RD_CSR_STATUS(csr_base) & MSGDMA_CSR_RESPONSE_BUFFER_EMPTY_MASK) != 0;
 4002e00:	e0bfff17 	ldw	r2,-4(fp)
 4002e04:	10800037 	ldwio	r2,0(r2)
 4002e08:	1080020c 	andi	r2,r2,8
 4002e0c:	1004c03a 	cmpne	r2,r2,zero
 4002e10:	10803fcc 	andi	r2,r2,255
}
 4002e14:	e037883a 	mov	sp,fp
 4002e18:	df000017 	ldw	fp,0(sp)
 4002e1c:	dec00104 	addi	sp,sp,4
 4002e20:	f800283a 	ret

04002e24 <read_response_buffer_full>:

/* returns '1' when the response buffer is full */
static uint32_t read_response_buffer_full(uint32_t *csr_base) {
 4002e24:	defffe04 	addi	sp,sp,-8
 4002e28:	df000115 	stw	fp,4(sp)
 4002e2c:	df000104 	addi	fp,sp,4
 4002e30:	e13fff15 	stw	r4,-4(fp)
    return (MSGDMA_RD_CSR_STATUS(csr_base) & MSGDMA_CSR_RESPONSE_BUFFER_FULL_MASK) != 0;
 4002e34:	e0bfff17 	ldw	r2,-4(fp)
 4002e38:	10800037 	ldwio	r2,0(r2)
 4002e3c:	1080040c 	andi	r2,r2,16
 4002e40:	1004c03a 	cmpne	r2,r2,zero
 4002e44:	10803fcc 	andi	r2,r2,255
}
 4002e48:	e037883a 	mov	sp,fp
 4002e4c:	df000017 	ldw	fp,0(sp)
 4002e50:	dec00104 	addi	sp,sp,4
 4002e54:	f800283a 	ret

04002e58 <read_stopped>:

/* returns '1' when the MSGDMA is stopped (either due to application writing to the stop bit or an error condition that stopped the MSGDMA) */
static uint32_t read_stopped(uint32_t *csr_base) {
 4002e58:	defffe04 	addi	sp,sp,-8
 4002e5c:	df000115 	stw	fp,4(sp)
 4002e60:	df000104 	addi	fp,sp,4
 4002e64:	e13fff15 	stw	r4,-4(fp)
    return (MSGDMA_RD_CSR_STATUS(csr_base) & MSGDMA_CSR_STOP_STATE_MASK) != 0;
 4002e68:	e0bfff17 	ldw	r2,-4(fp)
 4002e6c:	10800037 	ldwio	r2,0(r2)
 4002e70:	1080080c 	andi	r2,r2,32
 4002e74:	1004c03a 	cmpne	r2,r2,zero
 4002e78:	10803fcc 	andi	r2,r2,255
}
 4002e7c:	e037883a 	mov	sp,fp
 4002e80:	df000017 	ldw	fp,0(sp)
 4002e84:	dec00104 	addi	sp,sp,4
 4002e88:	f800283a 	ret

04002e8c <read_resetting>:

/* returns '1' when the MSGDMA is in the middle of a reset (read/write masters are still resetting) */
static uint32_t read_resetting(uint32_t *csr_base) {
 4002e8c:	defffe04 	addi	sp,sp,-8
 4002e90:	df000115 	stw	fp,4(sp)
 4002e94:	df000104 	addi	fp,sp,4
 4002e98:	e13fff15 	stw	r4,-4(fp)
    return (MSGDMA_RD_CSR_STATUS(csr_base) & MSGDMA_CSR_RESET_STATE_MASK) != 0;
 4002e9c:	e0bfff17 	ldw	r2,-4(fp)
 4002ea0:	10800037 	ldwio	r2,0(r2)
 4002ea4:	1080100c 	andi	r2,r2,64
 4002ea8:	1004c03a 	cmpne	r2,r2,zero
 4002eac:	10803fcc 	andi	r2,r2,255
}
 4002eb0:	e037883a 	mov	sp,fp
 4002eb4:	df000017 	ldw	fp,0(sp)
 4002eb8:	dec00104 	addi	sp,sp,4
 4002ebc:	f800283a 	ret

04002ec0 <read_stopped_on_error>:

/* returns '1' when the MSGDMA ia stopped due to an error entering the write master component (one of the conditions that will cause 'dispatcher_stopped' to return a '1') */
static uint32_t read_stopped_on_error(uint32_t *csr_base) {
 4002ec0:	defffe04 	addi	sp,sp,-8
 4002ec4:	df000115 	stw	fp,4(sp)
 4002ec8:	df000104 	addi	fp,sp,4
 4002ecc:	e13fff15 	stw	r4,-4(fp)
    return (MSGDMA_RD_CSR_STATUS(csr_base) & MSGDMA_CSR_STOPPED_ON_ERROR_MASK) != 0;
 4002ed0:	e0bfff17 	ldw	r2,-4(fp)
 4002ed4:	10800037 	ldwio	r2,0(r2)
 4002ed8:	1080200c 	andi	r2,r2,128
 4002edc:	1004c03a 	cmpne	r2,r2,zero
 4002ee0:	10803fcc 	andi	r2,r2,255
}
 4002ee4:	e037883a 	mov	sp,fp
 4002ee8:	df000017 	ldw	fp,0(sp)
 4002eec:	dec00104 	addi	sp,sp,4
 4002ef0:	f800283a 	ret

04002ef4 <read_stopped_on_early_termination>:

/* returns '1' when the MSGDMA is stopped due to the eop not arriving at the write master streaming port before the length counter reaches 0 (one of the conditions that will cause 'dispatcher_stopped' to return a '1') */
static uint32_t read_stopped_on_early_termination(uint32_t *csr_base) {
 4002ef4:	defffe04 	addi	sp,sp,-8
 4002ef8:	df000115 	stw	fp,4(sp)
 4002efc:	df000104 	addi	fp,sp,4
 4002f00:	e13fff15 	stw	r4,-4(fp)
    return (MSGDMA_RD_CSR_STATUS(csr_base) & MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK) != 0;
 4002f04:	e0bfff17 	ldw	r2,-4(fp)
 4002f08:	10800037 	ldwio	r2,0(r2)
 4002f0c:	1080400c 	andi	r2,r2,256
 4002f10:	1004c03a 	cmpne	r2,r2,zero
 4002f14:	10803fcc 	andi	r2,r2,255
}
 4002f18:	e037883a 	mov	sp,fp
 4002f1c:	df000017 	ldw	fp,0(sp)
 4002f20:	dec00104 	addi	sp,sp,4
 4002f24:	f800283a 	ret

04002f28 <read_irq>:

/* returns '1' when the MSGDMA is asserting the interrupt signal (no pre-fetching descriptor master) */
static uint32_t read_irq(uint32_t *csr_base) {
 4002f28:	defffe04 	addi	sp,sp,-8
 4002f2c:	df000115 	stw	fp,4(sp)
 4002f30:	df000104 	addi	fp,sp,4
 4002f34:	e13fff15 	stw	r4,-4(fp)
    return (MSGDMA_RD_CSR_STATUS(csr_base) & MSGDMA_CSR_IRQ_SET_MASK) != 0;
 4002f38:	e0bfff17 	ldw	r2,-4(fp)
 4002f3c:	10800037 	ldwio	r2,0(r2)
 4002f40:	1080800c 	andi	r2,r2,512
 4002f44:	1004c03a 	cmpne	r2,r2,zero
 4002f48:	10803fcc 	andi	r2,r2,255
}
 4002f4c:	e037883a 	mov	sp,fp
 4002f50:	df000017 	ldw	fp,0(sp)
 4002f54:	dec00104 	addi	sp,sp,4
 4002f58:	f800283a 	ret

04002f5c <clear_irq>:

/* the status register is read/clear-only so a read-modify-write is not necessary */
static void clear_irq(uint32_t *csr_base) {
 4002f5c:	defffe04 	addi	sp,sp,-8
 4002f60:	df000115 	stw	fp,4(sp)
 4002f64:	df000104 	addi	fp,sp,4
 4002f68:	e13fff15 	stw	r4,-4(fp)
    MSGDMA_WR_CSR_STATUS(csr_base, MSGDMA_CSR_IRQ_SET_MASK);
 4002f6c:	00c08004 	movi	r3,512
 4002f70:	e0bfff17 	ldw	r2,-4(fp)
 4002f74:	10c00035 	stwio	r3,0(r2)
}
 4002f78:	0001883a 	nop
 4002f7c:	e037883a 	mov	sp,fp
 4002f80:	df000017 	ldw	fp,0(sp)
 4002f84:	dec00104 	addi	sp,sp,4
 4002f88:	f800283a 	ret

04002f8c <stop_dispatcher>:

/* Functions for writting the individual control registers */
static void stop_dispatcher(uint32_t *csr_base) {
 4002f8c:	defffd04 	addi	sp,sp,-12
 4002f90:	df000215 	stw	fp,8(sp)
 4002f94:	df000204 	addi	fp,sp,8
 4002f98:	e13fff15 	stw	r4,-4(fp)
    /* setting the stop mask bit */
    uint32_t temporary_control = MSGDMA_RD_CSR_CONTROL(csr_base) | MSGDMA_CSR_STOP_MASK;
 4002f9c:	e0bfff17 	ldw	r2,-4(fp)
 4002fa0:	10800104 	addi	r2,r2,4
 4002fa4:	10800037 	ldwio	r2,0(r2)
 4002fa8:	10800054 	ori	r2,r2,1
 4002fac:	e0bffe15 	stw	r2,-8(fp)
    MSGDMA_WR_CSR_CONTROL(csr_base, temporary_control);
 4002fb0:	e0bfff17 	ldw	r2,-4(fp)
 4002fb4:	10800104 	addi	r2,r2,4
 4002fb8:	e0fffe17 	ldw	r3,-8(fp)
 4002fbc:	10c00035 	stwio	r3,0(r2)
}
 4002fc0:	0001883a 	nop
 4002fc4:	e037883a 	mov	sp,fp
 4002fc8:	df000017 	ldw	fp,0(sp)
 4002fcc:	dec00104 	addi	sp,sp,4
 4002fd0:	f800283a 	ret

04002fd4 <start_dispatcher>:

static void start_dispatcher(uint32_t *csr_base) {
 4002fd4:	defffd04 	addi	sp,sp,-12
 4002fd8:	df000215 	stw	fp,8(sp)
 4002fdc:	df000204 	addi	fp,sp,8
 4002fe0:	e13fff15 	stw	r4,-4(fp)
    /* resetting the stop mask bit */
    uint32_t temporary_control = MSGDMA_RD_CSR_CONTROL(csr_base) & (MSGDMA_CSR_STOP_MASK ^ 0xffffffff);
 4002fe4:	e0bfff17 	ldw	r2,-4(fp)
 4002fe8:	10800104 	addi	r2,r2,4
 4002fec:	10800037 	ldwio	r2,0(r2)
 4002ff0:	1007883a 	mov	r3,r2
 4002ff4:	00bfff84 	movi	r2,-2
 4002ff8:	1884703a 	and	r2,r3,r2
 4002ffc:	e0bffe15 	stw	r2,-8(fp)
    MSGDMA_WR_CSR_CONTROL(csr_base, temporary_control);
 4003000:	e0bfff17 	ldw	r2,-4(fp)
 4003004:	10800104 	addi	r2,r2,4
 4003008:	e0fffe17 	ldw	r3,-8(fp)
 400300c:	10c00035 	stwio	r3,0(r2)
}
 4003010:	0001883a 	nop
 4003014:	e037883a 	mov	sp,fp
 4003018:	df000017 	ldw	fp,0(sp)
 400301c:	dec00104 	addi	sp,sp,4
 4003020:	f800283a 	ret

04003024 <reset_dispatcher>:

static void reset_dispatcher(uint32_t *csr_base) {
 4003024:	defffe04 	addi	sp,sp,-8
 4003028:	df000115 	stw	fp,4(sp)
 400302c:	df000104 	addi	fp,sp,4
 4003030:	e13fff15 	stw	r4,-4(fp)
    /* setting the reset bit, no need to read the control register first since
     * this write is going to clear it out */
    MSGDMA_WR_CSR_CONTROL(csr_base, MSGDMA_CSR_RESET_MASK);
 4003034:	e0bfff17 	ldw	r2,-4(fp)
 4003038:	10800104 	addi	r2,r2,4
 400303c:	00c00084 	movi	r3,2
 4003040:	10c00035 	stwio	r3,0(r2)
}
 4003044:	0001883a 	nop
 4003048:	e037883a 	mov	sp,fp
 400304c:	df000017 	ldw	fp,0(sp)
 4003050:	dec00104 	addi	sp,sp,4
 4003054:	f800283a 	ret

04003058 <enable_stop_on_error>:

static void enable_stop_on_error(uint32_t *csr_base) {
 4003058:	defffd04 	addi	sp,sp,-12
 400305c:	df000215 	stw	fp,8(sp)
 4003060:	df000204 	addi	fp,sp,8
 4003064:	e13fff15 	stw	r4,-4(fp)
    /* setting the stop on error mask bit */
    uint32_t temporary_control = MSGDMA_RD_CSR_CONTROL(csr_base) | MSGDMA_CSR_STOP_ON_ERROR_MASK;
 4003068:	e0bfff17 	ldw	r2,-4(fp)
 400306c:	10800104 	addi	r2,r2,4
 4003070:	10800037 	ldwio	r2,0(r2)
 4003074:	10800114 	ori	r2,r2,4
 4003078:	e0bffe15 	stw	r2,-8(fp)
    MSGDMA_WR_CSR_CONTROL(csr_base, temporary_control);
 400307c:	e0bfff17 	ldw	r2,-4(fp)
 4003080:	10800104 	addi	r2,r2,4
 4003084:	e0fffe17 	ldw	r3,-8(fp)
 4003088:	10c00035 	stwio	r3,0(r2)
}
 400308c:	0001883a 	nop
 4003090:	e037883a 	mov	sp,fp
 4003094:	df000017 	ldw	fp,0(sp)
 4003098:	dec00104 	addi	sp,sp,4
 400309c:	f800283a 	ret

040030a0 <disable_stop_on_error>:

static void disable_stop_on_error(uint32_t *csr_base) {
 40030a0:	defffd04 	addi	sp,sp,-12
 40030a4:	df000215 	stw	fp,8(sp)
 40030a8:	df000204 	addi	fp,sp,8
 40030ac:	e13fff15 	stw	r4,-4(fp)
    /* reseting the stop on error mask bit */
    uint32_t temporary_control = MSGDMA_RD_CSR_CONTROL(csr_base) & (MSGDMA_CSR_STOP_ON_ERROR_MASK ^ 0xffffffff);
 40030b0:	e0bfff17 	ldw	r2,-4(fp)
 40030b4:	10800104 	addi	r2,r2,4
 40030b8:	10800037 	ldwio	r2,0(r2)
 40030bc:	1007883a 	mov	r3,r2
 40030c0:	00bffec4 	movi	r2,-5
 40030c4:	1884703a 	and	r2,r3,r2
 40030c8:	e0bffe15 	stw	r2,-8(fp)
    MSGDMA_WR_CSR_CONTROL(csr_base, temporary_control);
 40030cc:	e0bfff17 	ldw	r2,-4(fp)
 40030d0:	10800104 	addi	r2,r2,4
 40030d4:	e0fffe17 	ldw	r3,-8(fp)
 40030d8:	10c00035 	stwio	r3,0(r2)
}
 40030dc:	0001883a 	nop
 40030e0:	e037883a 	mov	sp,fp
 40030e4:	df000017 	ldw	fp,0(sp)
 40030e8:	dec00104 	addi	sp,sp,4
 40030ec:	f800283a 	ret

040030f0 <enable_stop_on_early_termination>:

static void enable_stop_on_early_termination(uint32_t *csr_base) {
 40030f0:	defffd04 	addi	sp,sp,-12
 40030f4:	df000215 	stw	fp,8(sp)
 40030f8:	df000204 	addi	fp,sp,8
 40030fc:	e13fff15 	stw	r4,-4(fp)
    /* setting the stop on early termination mask bit */
    uint32_t temporary_control = MSGDMA_RD_CSR_CONTROL(csr_base) | MSGDMA_CSR_STOP_ON_EARLY_TERMINATION_MASK;
 4003100:	e0bfff17 	ldw	r2,-4(fp)
 4003104:	10800104 	addi	r2,r2,4
 4003108:	10800037 	ldwio	r2,0(r2)
 400310c:	10800214 	ori	r2,r2,8
 4003110:	e0bffe15 	stw	r2,-8(fp)
    MSGDMA_WR_CSR_CONTROL(csr_base, temporary_control);
 4003114:	e0bfff17 	ldw	r2,-4(fp)
 4003118:	10800104 	addi	r2,r2,4
 400311c:	e0fffe17 	ldw	r3,-8(fp)
 4003120:	10c00035 	stwio	r3,0(r2)
}
 4003124:	0001883a 	nop
 4003128:	e037883a 	mov	sp,fp
 400312c:	df000017 	ldw	fp,0(sp)
 4003130:	dec00104 	addi	sp,sp,4
 4003134:	f800283a 	ret

04003138 <disable_stop_on_early_termination>:

static void disable_stop_on_early_termination(uint32_t *csr_base) {
 4003138:	defffd04 	addi	sp,sp,-12
 400313c:	df000215 	stw	fp,8(sp)
 4003140:	df000204 	addi	fp,sp,8
 4003144:	e13fff15 	stw	r4,-4(fp)
    /* resetting the stop on early termination mask bit */
    uint32_t temporary_control = MSGDMA_RD_CSR_CONTROL(csr_base) & (MSGDMA_CSR_STOP_ON_EARLY_TERMINATION_MASK ^ 0xffffffff);
 4003148:	e0bfff17 	ldw	r2,-4(fp)
 400314c:	10800104 	addi	r2,r2,4
 4003150:	10800037 	ldwio	r2,0(r2)
 4003154:	1007883a 	mov	r3,r2
 4003158:	00bffdc4 	movi	r2,-9
 400315c:	1884703a 	and	r2,r3,r2
 4003160:	e0bffe15 	stw	r2,-8(fp)
    MSGDMA_WR_CSR_CONTROL(csr_base, temporary_control);
 4003164:	e0bfff17 	ldw	r2,-4(fp)
 4003168:	10800104 	addi	r2,r2,4
 400316c:	e0fffe17 	ldw	r3,-8(fp)
 4003170:	10c00035 	stwio	r3,0(r2)
}
 4003174:	0001883a 	nop
 4003178:	e037883a 	mov	sp,fp
 400317c:	df000017 	ldw	fp,0(sp)
 4003180:	dec00104 	addi	sp,sp,4
 4003184:	f800283a 	ret

04003188 <enable_global_interrupt_mask>:

static void enable_global_interrupt_mask(uint32_t *csr_base) {
 4003188:	defffd04 	addi	sp,sp,-12
 400318c:	df000215 	stw	fp,8(sp)
 4003190:	df000204 	addi	fp,sp,8
 4003194:	e13fff15 	stw	r4,-4(fp)
    /* setting the global interrupt mask bit */
    uint32_t temporary_control = MSGDMA_RD_CSR_CONTROL(csr_base) | MSGDMA_CSR_GLOBAL_INTERRUPT_MASK;
 4003198:	e0bfff17 	ldw	r2,-4(fp)
 400319c:	10800104 	addi	r2,r2,4
 40031a0:	10800037 	ldwio	r2,0(r2)
 40031a4:	10800414 	ori	r2,r2,16
 40031a8:	e0bffe15 	stw	r2,-8(fp)
    MSGDMA_WR_CSR_CONTROL(csr_base, temporary_control);
 40031ac:	e0bfff17 	ldw	r2,-4(fp)
 40031b0:	10800104 	addi	r2,r2,4
 40031b4:	e0fffe17 	ldw	r3,-8(fp)
 40031b8:	10c00035 	stwio	r3,0(r2)
}
 40031bc:	0001883a 	nop
 40031c0:	e037883a 	mov	sp,fp
 40031c4:	df000017 	ldw	fp,0(sp)
 40031c8:	dec00104 	addi	sp,sp,4
 40031cc:	f800283a 	ret

040031d0 <disable_global_interrupt_mask>:

static void disable_global_interrupt_mask(uint32_t *csr_base) {
 40031d0:	defffd04 	addi	sp,sp,-12
 40031d4:	df000215 	stw	fp,8(sp)
 40031d8:	df000204 	addi	fp,sp,8
 40031dc:	e13fff15 	stw	r4,-4(fp)
    /* resetting the global interrupt mask bit */
    uint32_t temporary_control = MSGDMA_RD_CSR_CONTROL(csr_base) & (MSGDMA_CSR_GLOBAL_INTERRUPT_MASK ^ 0xffffffff);
 40031e0:	e0bfff17 	ldw	r2,-4(fp)
 40031e4:	10800104 	addi	r2,r2,4
 40031e8:	10800037 	ldwio	r2,0(r2)
 40031ec:	1007883a 	mov	r3,r2
 40031f0:	00bffbc4 	movi	r2,-17
 40031f4:	1884703a 	and	r2,r3,r2
 40031f8:	e0bffe15 	stw	r2,-8(fp)
    MSGDMA_WR_CSR_CONTROL(csr_base, temporary_control);
 40031fc:	e0bfff17 	ldw	r2,-4(fp)
 4003200:	10800104 	addi	r2,r2,4
 4003204:	e0fffe17 	ldw	r3,-8(fp)
 4003208:	10c00035 	stwio	r3,0(r2)
}
 400320c:	0001883a 	nop
 4003210:	e037883a 	mov	sp,fp
 4003214:	df000017 	ldw	fp,0(sp)
 4003218:	dec00104 	addi	sp,sp,4
 400321c:	f800283a 	ret

04003220 <stop_descriptors>:

static void stop_descriptors(uint32_t *csr_base) {
 4003220:	defffd04 	addi	sp,sp,-12
 4003224:	df000215 	stw	fp,8(sp)
 4003228:	df000204 	addi	fp,sp,8
 400322c:	e13fff15 	stw	r4,-4(fp)
    /* setting the stop descriptors bit */
    uint32_t temporary_control = MSGDMA_RD_CSR_CONTROL(csr_base) | MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
 4003230:	e0bfff17 	ldw	r2,-4(fp)
 4003234:	10800104 	addi	r2,r2,4
 4003238:	10800037 	ldwio	r2,0(r2)
 400323c:	10800814 	ori	r2,r2,32
 4003240:	e0bffe15 	stw	r2,-8(fp)
    MSGDMA_WR_CSR_CONTROL(csr_base, temporary_control);
 4003244:	e0bfff17 	ldw	r2,-4(fp)
 4003248:	10800104 	addi	r2,r2,4
 400324c:	e0fffe17 	ldw	r3,-8(fp)
 4003250:	10c00035 	stwio	r3,0(r2)
}
 4003254:	0001883a 	nop
 4003258:	e037883a 	mov	sp,fp
 400325c:	df000017 	ldw	fp,0(sp)
 4003260:	dec00104 	addi	sp,sp,4
 4003264:	f800283a 	ret

04003268 <start_descriptors>:

static void start_descriptors(uint32_t *csr_base) {
 4003268:	defffd04 	addi	sp,sp,-12
 400326c:	df000215 	stw	fp,8(sp)
 4003270:	df000204 	addi	fp,sp,8
 4003274:	e13fff15 	stw	r4,-4(fp)
    /* resetting the stop descriptors bit */
    uint32_t temporary_control = MSGDMA_RD_CSR_CONTROL(csr_base) & (MSGDMA_CSR_STOP_DESCRIPTORS_MASK ^ 0xffffffff);
 4003278:	e0bfff17 	ldw	r2,-4(fp)
 400327c:	10800104 	addi	r2,r2,4
 4003280:	10800037 	ldwio	r2,0(r2)
 4003284:	1007883a 	mov	r3,r2
 4003288:	00bff7c4 	movi	r2,-33
 400328c:	1884703a 	and	r2,r3,r2
 4003290:	e0bffe15 	stw	r2,-8(fp)
    MSGDMA_WR_CSR_CONTROL(csr_base, temporary_control);
 4003294:	e0bfff17 	ldw	r2,-4(fp)
 4003298:	10800104 	addi	r2,r2,4
 400329c:	e0fffe17 	ldw	r3,-8(fp)
 40032a0:	10c00035 	stwio	r3,0(r2)
}
 40032a4:	0001883a 	nop
 40032a8:	e037883a 	mov	sp,fp
 40032ac:	df000017 	ldw	fp,0(sp)
 40032b0:	dec00104 	addi	sp,sp,4
 40032b4:	f800283a 	ret

040032b8 <msgdma_usleep>:

/* Function to put the host processor to sleep for microseconds */
static void msgdma_usleep(unsigned int useconds) {
 40032b8:	defffd04 	addi	sp,sp,-12
 40032bc:	dfc00215 	stw	ra,8(sp)
 40032c0:	df000115 	stw	fp,4(sp)
 40032c4:	df000104 	addi	fp,sp,4
 40032c8:	e13fff15 	stw	r4,-4(fp)
#if defined(__KERNEL__) || defined(MODULE)
    udelay(useconds);
#else
    usleep(useconds);
 40032cc:	e13fff17 	ldw	r4,-4(fp)
 40032d0:	4011c780 	call	4011c78 <usleep>
#endif
}
 40032d4:	0001883a 	nop
 40032d8:	e037883a 	mov	sp,fp
 40032dc:	dfc00117 	ldw	ra,4(sp)
 40032e0:	df000017 	ldw	fp,0(sp)
 40032e4:	dec00204 	addi	sp,sp,8
 40032e8:	f800283a 	ret

040032ec <msgdma_csr_descriptor_response_inst>:
 ******************************************************************************/
/*
 * Functions for constructing device structures. Unnecessary elements are set to
 * 0 for completeness and will be ignored by the hardware.
 */
msgdma_dev msgdma_csr_descriptor_response_inst(void *csr_base, void *descriptor_base, void *response_base, uint32_t descriptor_fifo_depth, uint32_t response_fifo_depth, uint8_t csr_burst_enable, uint8_t csr_burst_wrapping_support, uint32_t csr_data_fifo_depth, uint32_t csr_data_width, uint32_t csr_max_burst_count, uint32_t csr_max_byte, uint64_t csr_max_stride, uint8_t csr_programmable_burst_enable, uint8_t csr_stride_enable, uint8_t csr_enhanced_features, uint8_t csr_response_port) {
 40032ec:	deffe404 	addi	sp,sp,-112
 40032f0:	dfc01b15 	stw	ra,108(sp)
 40032f4:	df001a15 	stw	fp,104(sp)
 40032f8:	df001a04 	addi	fp,sp,104
 40032fc:	e13ff615 	stw	r4,-40(fp)
 4003300:	e17ff715 	stw	r5,-36(fp)
 4003304:	e1bff815 	stw	r6,-32(fp)
 4003308:	e1fff915 	stw	r7,-28(fp)
 400330c:	e1c00417 	ldw	r7,16(fp)
 4003310:	e1800517 	ldw	r6,20(fp)
 4003314:	e1400c17 	ldw	r5,48(fp)
 4003318:	e1000d17 	ldw	r4,52(fp)
 400331c:	e0c00e17 	ldw	r3,56(fp)
 4003320:	e0800f17 	ldw	r2,60(fp)
 4003324:	e1fffa05 	stb	r7,-24(fp)
 4003328:	e1bffb05 	stb	r6,-20(fp)
 400332c:	e17ffc05 	stb	r5,-16(fp)
 4003330:	e13ffd05 	stb	r4,-12(fp)
 4003334:	e0fffe05 	stb	r3,-8(fp)
 4003338:	e0bfff05 	stb	r2,-4(fp)
    msgdma_dev dev;

    dev.csr_base                  = csr_base;
 400333c:	e0bff717 	ldw	r2,-36(fp)
 4003340:	e0bfe615 	stw	r2,-104(fp)
    dev.descriptor_base           = descriptor_base;
 4003344:	e0bff817 	ldw	r2,-32(fp)
 4003348:	e0bfe715 	stw	r2,-100(fp)
    dev.response_base             = response_base;
 400334c:	e0bff917 	ldw	r2,-28(fp)
 4003350:	e0bfe815 	stw	r2,-96(fp)
    dev.descriptor_fifo_depth     = descriptor_fifo_depth;
 4003354:	e0800217 	ldw	r2,8(fp)
 4003358:	e0bfe915 	stw	r2,-92(fp)
    dev.response_fifo_depth       = response_fifo_depth * 2;
 400335c:	e0800317 	ldw	r2,12(fp)
 4003360:	1085883a 	add	r2,r2,r2
 4003364:	e0bfea15 	stw	r2,-88(fp)
    dev.callback                  = (void *) 0x0;
 4003368:	e03feb15 	stw	zero,-84(fp)
    dev.callback_context          = (void *) 0x0;
 400336c:	e03fec15 	stw	zero,-80(fp)
    dev.control                   = 0;
 4003370:	e03fed15 	stw	zero,-76(fp)
    dev.burst_enable              = csr_burst_enable;
 4003374:	e0bffa03 	ldbu	r2,-24(fp)
 4003378:	e0bfee05 	stb	r2,-72(fp)
    dev.burst_wrapping_support    = csr_burst_wrapping_support;
 400337c:	e0bffb03 	ldbu	r2,-20(fp)
 4003380:	e0bfee45 	stb	r2,-71(fp)
    dev.data_fifo_depth           = csr_data_fifo_depth;
 4003384:	e0800617 	ldw	r2,24(fp)
 4003388:	e0bfef15 	stw	r2,-68(fp)
    dev.data_width                = csr_data_width;
 400338c:	e0800717 	ldw	r2,28(fp)
 4003390:	e0bff015 	stw	r2,-64(fp)
    dev.max_burst_count           = csr_max_burst_count;
 4003394:	e0800817 	ldw	r2,32(fp)
 4003398:	e0bff115 	stw	r2,-60(fp)
    dev.max_byte                  = csr_max_byte;
 400339c:	e0800917 	ldw	r2,36(fp)
 40033a0:	e0bff215 	stw	r2,-56(fp)
    dev.max_stride                = csr_max_stride;
 40033a4:	e0800a17 	ldw	r2,40(fp)
 40033a8:	e0bff315 	stw	r2,-52(fp)
 40033ac:	e0800b17 	ldw	r2,44(fp)
 40033b0:	e0bff415 	stw	r2,-48(fp)
    dev.programmable_burst_enable = csr_programmable_burst_enable;
 40033b4:	e0bffc03 	ldbu	r2,-16(fp)
 40033b8:	e0bff505 	stb	r2,-44(fp)
    dev.stride_enable             = csr_stride_enable;
 40033bc:	e0bffd03 	ldbu	r2,-12(fp)
 40033c0:	e0bff545 	stb	r2,-43(fp)
    dev.enhanced_features         = csr_enhanced_features;
 40033c4:	e0bffe03 	ldbu	r2,-8(fp)
 40033c8:	e0bff585 	stb	r2,-42(fp)
    dev.response_port             = csr_response_port;
 40033cc:	e0bfff03 	ldbu	r2,-4(fp)
 40033d0:	e0bff5c5 	stb	r2,-41(fp)

    return dev;
 40033d4:	e0bff617 	ldw	r2,-40(fp)
 40033d8:	1007883a 	mov	r3,r2
 40033dc:	e13fe604 	addi	r4,fp,-104
 40033e0:	00801004 	movi	r2,64
 40033e4:	100d883a 	mov	r6,r2
 40033e8:	200b883a 	mov	r5,r4
 40033ec:	1809883a 	mov	r4,r3
 40033f0:	4004e1c0 	call	4004e1c <memcpy>
}
 40033f4:	e0bff617 	ldw	r2,-40(fp)
 40033f8:	e037883a 	mov	sp,fp
 40033fc:	dfc00117 	ldw	ra,4(sp)
 4003400:	df000017 	ldw	fp,0(sp)
 4003404:	dec00204 	addi	sp,sp,8
 4003408:	f800283a 	ret

0400340c <msgdma_csr_descriptor_inst>:

msgdma_dev msgdma_csr_descriptor_inst(void *csr_base, void *descriptor_base, uint32_t descriptor_fifo_depth, uint8_t csr_burst_enable, uint8_t csr_burst_wrapping_support, uint32_t csr_data_fifo_depth, uint32_t csr_data_width, uint32_t csr_max_burst_count, uint32_t csr_max_byte, uint64_t csr_max_stride, uint8_t csr_programmable_burst_enable, uint8_t csr_stride_enable, uint8_t csr_enhanced_features, uint8_t csr_response_port) {
 400340c:	deffe404 	addi	sp,sp,-112
 4003410:	dfc01b15 	stw	ra,108(sp)
 4003414:	df001a15 	stw	fp,104(sp)
 4003418:	df001a04 	addi	fp,sp,104
 400341c:	e13ff615 	stw	r4,-40(fp)
 4003420:	e17ff715 	stw	r5,-36(fp)
 4003424:	e1bff815 	stw	r6,-32(fp)
 4003428:	e1fff915 	stw	r7,-28(fp)
 400342c:	e1c00217 	ldw	r7,8(fp)
 4003430:	e1800317 	ldw	r6,12(fp)
 4003434:	e1400a17 	ldw	r5,40(fp)
 4003438:	e1000b17 	ldw	r4,44(fp)
 400343c:	e0c00c17 	ldw	r3,48(fp)
 4003440:	e0800d17 	ldw	r2,52(fp)
 4003444:	e1fffa05 	stb	r7,-24(fp)
 4003448:	e1bffb05 	stb	r6,-20(fp)
 400344c:	e17ffc05 	stb	r5,-16(fp)
 4003450:	e13ffd05 	stb	r4,-12(fp)
 4003454:	e0fffe05 	stb	r3,-8(fp)
 4003458:	e0bfff05 	stb	r2,-4(fp)
    msgdma_dev dev;

    dev.csr_base                  = csr_base;
 400345c:	e0bff717 	ldw	r2,-36(fp)
 4003460:	e0bfe615 	stw	r2,-104(fp)
    dev.descriptor_base           = descriptor_base;
 4003464:	e0bff817 	ldw	r2,-32(fp)
 4003468:	e0bfe715 	stw	r2,-100(fp)
    dev.response_base             = (uint32_t *) 0;
 400346c:	e03fe815 	stw	zero,-96(fp)
    dev.descriptor_fifo_depth     = descriptor_fifo_depth;
 4003470:	e0bff917 	ldw	r2,-28(fp)
 4003474:	e0bfe915 	stw	r2,-92(fp)
    dev.response_fifo_depth       = 0;
 4003478:	e03fea15 	stw	zero,-88(fp)
    dev.callback                  = (void *) 0x0;
 400347c:	e03feb15 	stw	zero,-84(fp)
    dev.callback_context          = (void *) 0x0;
 4003480:	e03fec15 	stw	zero,-80(fp)
    dev.control                   = 0;
 4003484:	e03fed15 	stw	zero,-76(fp)
    dev.burst_enable              = csr_burst_enable;
 4003488:	e0bffa03 	ldbu	r2,-24(fp)
 400348c:	e0bfee05 	stb	r2,-72(fp)
    dev.burst_wrapping_support    = csr_burst_wrapping_support;
 4003490:	e0bffb03 	ldbu	r2,-20(fp)
 4003494:	e0bfee45 	stb	r2,-71(fp)
    dev.data_fifo_depth           = csr_data_fifo_depth;
 4003498:	e0800417 	ldw	r2,16(fp)
 400349c:	e0bfef15 	stw	r2,-68(fp)
    dev.data_width                = csr_data_width;
 40034a0:	e0800517 	ldw	r2,20(fp)
 40034a4:	e0bff015 	stw	r2,-64(fp)
    dev.max_burst_count           = csr_max_burst_count;
 40034a8:	e0800617 	ldw	r2,24(fp)
 40034ac:	e0bff115 	stw	r2,-60(fp)
    dev.max_byte                  = csr_max_byte;
 40034b0:	e0800717 	ldw	r2,28(fp)
 40034b4:	e0bff215 	stw	r2,-56(fp)
    dev.max_stride                = csr_max_stride;
 40034b8:	e0800817 	ldw	r2,32(fp)
 40034bc:	e0bff315 	stw	r2,-52(fp)
 40034c0:	e0800917 	ldw	r2,36(fp)
 40034c4:	e0bff415 	stw	r2,-48(fp)
    dev.programmable_burst_enable = csr_programmable_burst_enable;
 40034c8:	e0bffc03 	ldbu	r2,-16(fp)
 40034cc:	e0bff505 	stb	r2,-44(fp)
    dev.stride_enable             = csr_stride_enable;
 40034d0:	e0bffd03 	ldbu	r2,-12(fp)
 40034d4:	e0bff545 	stb	r2,-43(fp)
    dev.enhanced_features         = csr_enhanced_features;
 40034d8:	e0bffe03 	ldbu	r2,-8(fp)
 40034dc:	e0bff585 	stb	r2,-42(fp)
    dev.response_port             = csr_response_port;
 40034e0:	e0bfff03 	ldbu	r2,-4(fp)
 40034e4:	e0bff5c5 	stb	r2,-41(fp)

    return dev;
 40034e8:	e0bff617 	ldw	r2,-40(fp)
 40034ec:	1007883a 	mov	r3,r2
 40034f0:	e13fe604 	addi	r4,fp,-104
 40034f4:	00801004 	movi	r2,64
 40034f8:	100d883a 	mov	r6,r2
 40034fc:	200b883a 	mov	r5,r4
 4003500:	1809883a 	mov	r4,r3
 4003504:	4004e1c0 	call	4004e1c <memcpy>
}
 4003508:	e0bff617 	ldw	r2,-40(fp)
 400350c:	e037883a 	mov	sp,fp
 4003510:	dfc00117 	ldw	ra,4(sp)
 4003514:	df000017 	ldw	fp,0(sp)
 4003518:	dec00204 	addi	sp,sp,8
 400351c:	f800283a 	ret

04003520 <msgdma_init>:
 *
 * Initializes the Modular Scatter-Gather DMA controller.
 *
 * This routine disables interrupts and descriptor processing.
 */
void msgdma_init(msgdma_dev *dev) {
 4003520:	defffd04 	addi	sp,sp,-12
 4003524:	df000215 	stw	fp,8(sp)
 4003528:	df000204 	addi	fp,sp,8
 400352c:	e13fff15 	stw	r4,-4(fp)

    /* Reset the registers and FIFOs of the dispatcher and master modules */

    /* set the reset bit, no need to read the control register first since
    this write is going to clear it out */
    MSGDMA_WR_CSR_CONTROL(dev->csr_base, MSGDMA_CSR_RESET_MASK);
 4003530:	e0bfff17 	ldw	r2,-4(fp)
 4003534:	10800017 	ldw	r2,0(r2)
 4003538:	10800104 	addi	r2,r2,4
 400353c:	00c00084 	movi	r3,2
 4003540:	10c00035 	stwio	r3,0(r2)
    while (0 != (MSGDMA_RD_CSR_STATUS(dev->csr_base) & MSGDMA_CSR_RESET_STATE_MASK));
 4003544:	0001883a 	nop
 4003548:	e0bfff17 	ldw	r2,-4(fp)
 400354c:	10800017 	ldw	r2,0(r2)
 4003550:	10800037 	ldwio	r2,0(r2)
 4003554:	1080100c 	andi	r2,r2,64
 4003558:	103ffb1e 	bne	r2,zero,4003548 <__alt_data_end+0xfc003548>
     * Disable interrupts, halt descriptor processing,
     * and clear status register content
     */

    /* disable global interrupt */
    temporary_control = MSGDMA_RD_CSR_CONTROL(dev->csr_base) & (~MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
 400355c:	e0bfff17 	ldw	r2,-4(fp)
 4003560:	10800017 	ldw	r2,0(r2)
 4003564:	10800104 	addi	r2,r2,4
 4003568:	10800037 	ldwio	r2,0(r2)
 400356c:	1007883a 	mov	r3,r2
 4003570:	00bffbc4 	movi	r2,-17
 4003574:	1884703a 	and	r2,r3,r2
 4003578:	e0bffe15 	stw	r2,-8(fp)
    /* stopping descriptor */
    temporary_control |= MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
 400357c:	e0bffe17 	ldw	r2,-8(fp)
 4003580:	10800814 	ori	r2,r2,32
 4003584:	e0bffe15 	stw	r2,-8(fp)
    MSGDMA_WR_CSR_CONTROL(dev->csr_base, temporary_control);
 4003588:	e0bfff17 	ldw	r2,-4(fp)
 400358c:	10800017 	ldw	r2,0(r2)
 4003590:	10800104 	addi	r2,r2,4
 4003594:	e0fffe17 	ldw	r3,-8(fp)
 4003598:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    MSGDMA_WR_CSR_STATUS(dev->csr_base, MSGDMA_RD_CSR_STATUS(dev->csr_base));
 400359c:	e0bfff17 	ldw	r2,-4(fp)
 40035a0:	10800017 	ldw	r2,0(r2)
 40035a4:	e0ffff17 	ldw	r3,-4(fp)
 40035a8:	18c00017 	ldw	r3,0(r3)
 40035ac:	18c00037 	ldwio	r3,0(r3)
 40035b0:	10c00035 	stwio	r3,0(r2)
}
 40035b4:	0001883a 	nop
 40035b8:	e037883a 	mov	sp,fp
 40035bc:	df000017 	ldw	fp,0(sp)
 40035c0:	dec00104 	addi	sp,sp,4
 40035c4:	f800283a 	ret

040035c8 <msgdma_register_callback>:
 * - *dev: Pointer to msgdma device (instance) structure.
 * - callback: Pointer to callback routine to execute at interrupt level
 * - control: For masking the source interruption and setting configuration in
 *            control register
 */
void msgdma_register_callback(msgdma_dev *dev, msgdma_callback callback, uint32_t control, void *context) {
 40035c8:	defffb04 	addi	sp,sp,-20
 40035cc:	df000415 	stw	fp,16(sp)
 40035d0:	df000404 	addi	fp,sp,16
 40035d4:	e13ffc15 	stw	r4,-16(fp)
 40035d8:	e17ffd15 	stw	r5,-12(fp)
 40035dc:	e1bffe15 	stw	r6,-8(fp)
 40035e0:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 40035e4:	e0bffc17 	ldw	r2,-16(fp)
 40035e8:	e0fffd17 	ldw	r3,-12(fp)
 40035ec:	10c00515 	stw	r3,20(r2)
    dev->callback_context = context;
 40035f0:	e0bffc17 	ldw	r2,-16(fp)
 40035f4:	e0ffff17 	ldw	r3,-4(fp)
 40035f8:	10c00615 	stw	r3,24(r2)
    dev->control          = control;
 40035fc:	e0bffc17 	ldw	r2,-16(fp)
 4003600:	e0fffe17 	ldw	r3,-8(fp)
 4003604:	10c00715 	stw	r3,28(r2)
}
 4003608:	0001883a 	nop
 400360c:	e037883a 	mov	sp,fp
 4003610:	df000017 	ldw	fp,0(sp)
 4003614:	dec00104 	addi	sp,sp,4
 4003618:	f800283a 	ret

0400361c <msgdma_construct_standard_mm_to_mm_descriptor>:
 *
 * Returns: 0       -> success
 *          -EINVAL -> invalid argument, could be due to argument which
 *                     has larger value than hardware setting value
 */
int msgdma_construct_standard_mm_to_mm_descriptor(msgdma_dev *dev, msgdma_standard_descriptor *descriptor, void *read_address, void *write_address, uint32_t length, uint32_t control) {
 400361c:	defff804 	addi	sp,sp,-32
 4003620:	dfc00715 	stw	ra,28(sp)
 4003624:	df000615 	stw	fp,24(sp)
 4003628:	df000604 	addi	fp,sp,24
 400362c:	e13ffc15 	stw	r4,-16(fp)
 4003630:	e17ffd15 	stw	r5,-12(fp)
 4003634:	e1bffe15 	stw	r6,-8(fp)
 4003638:	e1ffff15 	stw	r7,-4(fp)
    return construct_standard_descriptor(dev, descriptor, read_address, write_address, length, control);
 400363c:	e0800317 	ldw	r2,12(fp)
 4003640:	d8800115 	stw	r2,4(sp)
 4003644:	e0800217 	ldw	r2,8(fp)
 4003648:	d8800015 	stw	r2,0(sp)
 400364c:	e1ffff17 	ldw	r7,-4(fp)
 4003650:	e1bffe17 	ldw	r6,-8(fp)
 4003654:	e17ffd17 	ldw	r5,-12(fp)
 4003658:	e13ffc17 	ldw	r4,-16(fp)
 400365c:	40025340 	call	4002534 <construct_standard_descriptor>
}
 4003660:	e037883a 	mov	sp,fp
 4003664:	dfc00117 	ldw	ra,4(sp)
 4003668:	df000017 	ldw	fp,0(sp)
 400366c:	dec00204 	addi	sp,sp,8
 4003670:	f800283a 	ret

04003674 <msgdma_construct_standard_mm_to_st_descriptor>:

int msgdma_construct_standard_mm_to_st_descriptor(msgdma_dev *dev, msgdma_standard_descriptor *descriptor, void *read_address, uint32_t length, uint32_t control) {
 4003674:	defff804 	addi	sp,sp,-32
 4003678:	dfc00715 	stw	ra,28(sp)
 400367c:	df000615 	stw	fp,24(sp)
 4003680:	df000604 	addi	fp,sp,24
 4003684:	e13ffc15 	stw	r4,-16(fp)
 4003688:	e17ffd15 	stw	r5,-12(fp)
 400368c:	e1bffe15 	stw	r6,-8(fp)
 4003690:	e1ffff15 	stw	r7,-4(fp)
    return construct_standard_descriptor(dev, descriptor, read_address, NULL, length, control);
 4003694:	e0800217 	ldw	r2,8(fp)
 4003698:	d8800115 	stw	r2,4(sp)
 400369c:	e0bfff17 	ldw	r2,-4(fp)
 40036a0:	d8800015 	stw	r2,0(sp)
 40036a4:	000f883a 	mov	r7,zero
 40036a8:	e1bffe17 	ldw	r6,-8(fp)
 40036ac:	e17ffd17 	ldw	r5,-12(fp)
 40036b0:	e13ffc17 	ldw	r4,-16(fp)
 40036b4:	40025340 	call	4002534 <construct_standard_descriptor>
}
 40036b8:	e037883a 	mov	sp,fp
 40036bc:	dfc00117 	ldw	ra,4(sp)
 40036c0:	df000017 	ldw	fp,0(sp)
 40036c4:	dec00204 	addi	sp,sp,8
 40036c8:	f800283a 	ret

040036cc <msgdma_construct_standard_st_to_mm_descriptor>:

int msgdma_construct_standard_st_to_mm_descriptor(msgdma_dev *dev, msgdma_standard_descriptor *descriptor, void *write_address, uint32_t length, uint32_t control) {
 40036cc:	defff804 	addi	sp,sp,-32
 40036d0:	dfc00715 	stw	ra,28(sp)
 40036d4:	df000615 	stw	fp,24(sp)
 40036d8:	df000604 	addi	fp,sp,24
 40036dc:	e13ffc15 	stw	r4,-16(fp)
 40036e0:	e17ffd15 	stw	r5,-12(fp)
 40036e4:	e1bffe15 	stw	r6,-8(fp)
 40036e8:	e1ffff15 	stw	r7,-4(fp)
    return construct_standard_descriptor(dev, descriptor, NULL, write_address, length, control);
 40036ec:	e0800217 	ldw	r2,8(fp)
 40036f0:	d8800115 	stw	r2,4(sp)
 40036f4:	e0bfff17 	ldw	r2,-4(fp)
 40036f8:	d8800015 	stw	r2,0(sp)
 40036fc:	e1fffe17 	ldw	r7,-8(fp)
 4003700:	000d883a 	mov	r6,zero
 4003704:	e17ffd17 	ldw	r5,-12(fp)
 4003708:	e13ffc17 	ldw	r4,-16(fp)
 400370c:	40025340 	call	4002534 <construct_standard_descriptor>
}
 4003710:	e037883a 	mov	sp,fp
 4003714:	dfc00117 	ldw	ra,4(sp)
 4003718:	df000017 	ldw	fp,0(sp)
 400371c:	dec00204 	addi	sp,sp,8
 4003720:	f800283a 	ret

04003724 <msgdma_construct_extended_mm_to_mm_descriptor>:
 *
 * Returns: 0       -> success
 *          -EINVAL -> invalid argument, could be due to argument which
 *                     has larger value than hardware setting value
 */
int msgdma_construct_extended_mm_to_mm_descriptor(msgdma_dev *dev, msgdma_extended_descriptor *descriptor, void *read_address, void *write_address, uint32_t length, uint32_t control, uint16_t sequence_number, uint8_t read_burst_count, uint8_t write_burst_count, uint16_t read_stride, uint16_t write_stride) {
 4003724:	deffee04 	addi	sp,sp,-72
 4003728:	dfc01115 	stw	ra,68(sp)
 400372c:	df001015 	stw	fp,64(sp)
 4003730:	df001004 	addi	fp,sp,64
 4003734:	e13ff715 	stw	r4,-36(fp)
 4003738:	e17ff815 	stw	r5,-32(fp)
 400373c:	e1bff915 	stw	r6,-28(fp)
 4003740:	e1fffa15 	stw	r7,-24(fp)
 4003744:	e1800417 	ldw	r6,16(fp)
 4003748:	e1400517 	ldw	r5,20(fp)
 400374c:	e1000617 	ldw	r4,24(fp)
 4003750:	e0c00717 	ldw	r3,28(fp)
 4003754:	e0800817 	ldw	r2,32(fp)
 4003758:	e1bffb0d 	sth	r6,-20(fp)
 400375c:	e17ffc05 	stb	r5,-16(fp)
 4003760:	e13ffd05 	stb	r4,-12(fp)
 4003764:	e0fffe0d 	sth	r3,-8(fp)
 4003768:	e0bfff0d 	sth	r2,-4(fp)
    return construct_extended_descriptor(dev, descriptor, read_address, write_address, length, control, sequence_number, read_burst_count, write_burst_count, read_stride, write_stride);
 400376c:	e0bffb0b 	ldhu	r2,-20(fp)
 4003770:	e0fffc03 	ldbu	r3,-16(fp)
 4003774:	e13ffd03 	ldbu	r4,-12(fp)
 4003778:	e17ffe0b 	ldhu	r5,-8(fp)
 400377c:	e1bfff0b 	ldhu	r6,-4(fp)
 4003780:	d9800615 	stw	r6,24(sp)
 4003784:	d9400515 	stw	r5,20(sp)
 4003788:	d9000415 	stw	r4,16(sp)
 400378c:	d8c00315 	stw	r3,12(sp)
 4003790:	d8800215 	stw	r2,8(sp)
 4003794:	e0800317 	ldw	r2,12(fp)
 4003798:	d8800115 	stw	r2,4(sp)
 400379c:	e0800217 	ldw	r2,8(fp)
 40037a0:	d8800015 	stw	r2,0(sp)
 40037a4:	e1fffa17 	ldw	r7,-24(fp)
 40037a8:	e1bff917 	ldw	r6,-28(fp)
 40037ac:	e17ff817 	ldw	r5,-32(fp)
 40037b0:	e13ff717 	ldw	r4,-36(fp)
 40037b4:	40025c00 	call	40025c0 <construct_extended_descriptor>
}
 40037b8:	e037883a 	mov	sp,fp
 40037bc:	dfc00117 	ldw	ra,4(sp)
 40037c0:	df000017 	ldw	fp,0(sp)
 40037c4:	dec00204 	addi	sp,sp,8
 40037c8:	f800283a 	ret

040037cc <msgdma_construct_extended_mm_to_st_descriptor>:

int msgdma_construct_extended_mm_to_st_descriptor(msgdma_dev *dev, msgdma_extended_descriptor *descriptor, void *read_address, uint32_t length, uint32_t control, uint16_t sequence_number, uint8_t read_burst_count, uint16_t read_stride) {
 40037cc:	defff004 	addi	sp,sp,-64
 40037d0:	dfc00f15 	stw	ra,60(sp)
 40037d4:	df000e15 	stw	fp,56(sp)
 40037d8:	df000e04 	addi	fp,sp,56
 40037dc:	e13ff915 	stw	r4,-28(fp)
 40037e0:	e17ffa15 	stw	r5,-24(fp)
 40037e4:	e1bffb15 	stw	r6,-20(fp)
 40037e8:	e1fffc15 	stw	r7,-16(fp)
 40037ec:	e1000317 	ldw	r4,12(fp)
 40037f0:	e0c00417 	ldw	r3,16(fp)
 40037f4:	e0800517 	ldw	r2,20(fp)
 40037f8:	e13ffd0d 	sth	r4,-12(fp)
 40037fc:	e0fffe05 	stb	r3,-8(fp)
 4003800:	e0bfff0d 	sth	r2,-4(fp)
    return construct_extended_descriptor(dev, descriptor, read_address, NULL, length, control, sequence_number, read_burst_count, 0, read_stride, 0);
 4003804:	e0bffd0b 	ldhu	r2,-12(fp)
 4003808:	e0fffe03 	ldbu	r3,-8(fp)
 400380c:	e13fff0b 	ldhu	r4,-4(fp)
 4003810:	d8000615 	stw	zero,24(sp)
 4003814:	d9000515 	stw	r4,20(sp)
 4003818:	d8000415 	stw	zero,16(sp)
 400381c:	d8c00315 	stw	r3,12(sp)
 4003820:	d8800215 	stw	r2,8(sp)
 4003824:	e0800217 	ldw	r2,8(fp)
 4003828:	d8800115 	stw	r2,4(sp)
 400382c:	e0bffc17 	ldw	r2,-16(fp)
 4003830:	d8800015 	stw	r2,0(sp)
 4003834:	000f883a 	mov	r7,zero
 4003838:	e1bffb17 	ldw	r6,-20(fp)
 400383c:	e17ffa17 	ldw	r5,-24(fp)
 4003840:	e13ff917 	ldw	r4,-28(fp)
 4003844:	40025c00 	call	40025c0 <construct_extended_descriptor>
}
 4003848:	e037883a 	mov	sp,fp
 400384c:	dfc00117 	ldw	ra,4(sp)
 4003850:	df000017 	ldw	fp,0(sp)
 4003854:	dec00204 	addi	sp,sp,8
 4003858:	f800283a 	ret

0400385c <msgdma_construct_extended_st_to_mm_descriptor>:

int msgdma_construct_extended_st_to_mm_descriptor(msgdma_dev *dev, msgdma_extended_descriptor *descriptor, void *write_address, uint32_t length, uint32_t control, uint16_t sequence_number, uint8_t write_burst_count, uint16_t write_stride) {
 400385c:	defff004 	addi	sp,sp,-64
 4003860:	dfc00f15 	stw	ra,60(sp)
 4003864:	df000e15 	stw	fp,56(sp)
 4003868:	df000e04 	addi	fp,sp,56
 400386c:	e13ff915 	stw	r4,-28(fp)
 4003870:	e17ffa15 	stw	r5,-24(fp)
 4003874:	e1bffb15 	stw	r6,-20(fp)
 4003878:	e1fffc15 	stw	r7,-16(fp)
 400387c:	e1000317 	ldw	r4,12(fp)
 4003880:	e0c00417 	ldw	r3,16(fp)
 4003884:	e0800517 	ldw	r2,20(fp)
 4003888:	e13ffd0d 	sth	r4,-12(fp)
 400388c:	e0fffe05 	stb	r3,-8(fp)
 4003890:	e0bfff0d 	sth	r2,-4(fp)
    return construct_extended_descriptor(dev, descriptor, NULL, write_address, length, control, sequence_number, 0, write_burst_count, 0, write_stride);
 4003894:	e0bffd0b 	ldhu	r2,-12(fp)
 4003898:	e0fffe03 	ldbu	r3,-8(fp)
 400389c:	e13fff0b 	ldhu	r4,-4(fp)
 40038a0:	d9000615 	stw	r4,24(sp)
 40038a4:	d8000515 	stw	zero,20(sp)
 40038a8:	d8c00415 	stw	r3,16(sp)
 40038ac:	d8000315 	stw	zero,12(sp)
 40038b0:	d8800215 	stw	r2,8(sp)
 40038b4:	e0800217 	ldw	r2,8(fp)
 40038b8:	d8800115 	stw	r2,4(sp)
 40038bc:	e0bffc17 	ldw	r2,-16(fp)
 40038c0:	d8800015 	stw	r2,0(sp)
 40038c4:	e1fffb17 	ldw	r7,-20(fp)
 40038c8:	000d883a 	mov	r6,zero
 40038cc:	e17ffa17 	ldw	r5,-24(fp)
 40038d0:	e13ff917 	ldw	r4,-28(fp)
 40038d4:	40025c00 	call	40025c0 <construct_extended_descriptor>
}
 40038d8:	e037883a 	mov	sp,fp
 40038dc:	dfc00117 	ldw	ra,4(sp)
 40038e0:	df000017 	ldw	fp,0(sp)
 40038e4:	dec00204 	addi	sp,sp,8
 40038e8:	f800283a 	ret

040038ec <msgdma_standard_descriptor_async_transfer>:
 * Returns: 0       -> success
 *          -ENOSPC -> FIFO descriptor buffer is full
 *          -EPERM  -> operation not permitted due to descriptor type conflict
 *          -ETIME  -> Time out and skipping the looping after 5 msec
 */
int msgdma_standard_descriptor_async_transfer(msgdma_dev *dev, msgdma_standard_descriptor *desc) {
 40038ec:	defffc04 	addi	sp,sp,-16
 40038f0:	dfc00315 	stw	ra,12(sp)
 40038f4:	df000215 	stw	fp,8(sp)
 40038f8:	df000204 	addi	fp,sp,8
 40038fc:	e13ffe15 	stw	r4,-8(fp)
 4003900:	e17fff15 	stw	r5,-4(fp)
    return descriptor_async_transfer(dev, desc, NULL);
 4003904:	000d883a 	mov	r6,zero
 4003908:	e17fff17 	ldw	r5,-4(fp)
 400390c:	e13ffe17 	ldw	r4,-8(fp)
 4003910:	40027140 	call	4002714 <descriptor_async_transfer>
}
 4003914:	e037883a 	mov	sp,fp
 4003918:	dfc00117 	ldw	ra,4(sp)
 400391c:	df000017 	ldw	fp,0(sp)
 4003920:	dec00204 	addi	sp,sp,8
 4003924:	f800283a 	ret

04003928 <msgdma_standard_descriptor_sync_transfer>:
 *
 * Returns: 0      -> success
 *          -EPERM -> operation not permitted due to descriptor type conflict
 *          -ETIME -> Time out and skipping the looping after 5 msec
 */
int msgdma_standard_descriptor_sync_transfer(msgdma_dev *dev, msgdma_standard_descriptor *desc) {
 4003928:	defffc04 	addi	sp,sp,-16
 400392c:	dfc00315 	stw	ra,12(sp)
 4003930:	df000215 	stw	fp,8(sp)
 4003934:	df000204 	addi	fp,sp,8
 4003938:	e13ffe15 	stw	r4,-8(fp)
 400393c:	e17fff15 	stw	r5,-4(fp)
    return descriptor_sync_transfer(dev, desc, NULL);
 4003940:	000d883a 	mov	r6,zero
 4003944:	e17fff17 	ldw	r5,-4(fp)
 4003948:	e13ffe17 	ldw	r4,-8(fp)
 400394c:	40029380 	call	4002938 <descriptor_sync_transfer>
}
 4003950:	e037883a 	mov	sp,fp
 4003954:	dfc00117 	ldw	ra,4(sp)
 4003958:	df000017 	ldw	fp,0(sp)
 400395c:	dec00204 	addi	sp,sp,8
 4003960:	f800283a 	ret

04003964 <msgdma_extended_descriptor_async_transfer>:
 * Returns: 0       -> success
 *          -ENOSPC -> FIFO descriptor buffer is full
 *          -EPERM  -> operation not permitted due to descriptor type conflict
 *          -ETIME  -> Time out and skipping the looping after 5 msec
 */
int msgdma_extended_descriptor_async_transfer(msgdma_dev *dev, msgdma_extended_descriptor *desc) {
 4003964:	defffc04 	addi	sp,sp,-16
 4003968:	dfc00315 	stw	ra,12(sp)
 400396c:	df000215 	stw	fp,8(sp)
 4003970:	df000204 	addi	fp,sp,8
 4003974:	e13ffe15 	stw	r4,-8(fp)
 4003978:	e17fff15 	stw	r5,-4(fp)
    return descriptor_async_transfer(dev, NULL, desc);
 400397c:	e1bfff17 	ldw	r6,-4(fp)
 4003980:	000b883a 	mov	r5,zero
 4003984:	e13ffe17 	ldw	r4,-8(fp)
 4003988:	40027140 	call	4002714 <descriptor_async_transfer>
}
 400398c:	e037883a 	mov	sp,fp
 4003990:	dfc00117 	ldw	ra,4(sp)
 4003994:	df000017 	ldw	fp,0(sp)
 4003998:	dec00204 	addi	sp,sp,8
 400399c:	f800283a 	ret

040039a0 <msgdma_extended_descriptor_sync_transfer>:
 * Returns: 0      -> success
 *          -EPERM -> operation not permitted due to descriptor type
 *                    conflict
 *          -ETIME -> Time out and skipping the looping after 5 msec
 */
int msgdma_extended_descriptor_sync_transfer(msgdma_dev *dev, msgdma_extended_descriptor *desc) {
 40039a0:	defffc04 	addi	sp,sp,-16
 40039a4:	dfc00315 	stw	ra,12(sp)
 40039a8:	df000215 	stw	fp,8(sp)
 40039ac:	df000204 	addi	fp,sp,8
 40039b0:	e13ffe15 	stw	r4,-8(fp)
 40039b4:	e17fff15 	stw	r5,-4(fp)
    return descriptor_sync_transfer(dev, NULL, desc);
 40039b8:	e1bfff17 	ldw	r6,-4(fp)
 40039bc:	000b883a 	mov	r5,zero
 40039c0:	e13ffe17 	ldw	r4,-8(fp)
 40039c4:	40029380 	call	4002938 <descriptor_sync_transfer>
}
 40039c8:	e037883a 	mov	sp,fp
 40039cc:	dfc00117 	ldw	ra,4(sp)
 40039d0:	df000017 	ldw	fp,0(sp)
 40039d4:	dec00204 	addi	sp,sp,8
 40039d8:	f800283a 	ret

040039dc <msgdma_wait_until_idle>:

/* Helper functions */
void msgdma_wait_until_idle(msgdma_dev *dev) {
 40039dc:	defffd04 	addi	sp,sp,-12
 40039e0:	dfc00215 	stw	ra,8(sp)
 40039e4:	df000115 	stw	fp,4(sp)
 40039e8:	df000104 	addi	fp,sp,4
 40039ec:	e13fff15 	stw	r4,-4(fp)
    while (read_busy(dev->csr_base) != 0);
 40039f0:	0001883a 	nop
 40039f4:	e0bfff17 	ldw	r2,-4(fp)
 40039f8:	10800017 	ldw	r2,0(r2)
 40039fc:	1009883a 	mov	r4,r2
 4003a00:	4002d540 	call	4002d54 <read_busy>
 4003a04:	103ffb1e 	bne	r2,zero,40039f4 <__alt_data_end+0xfc0039f4>
}
 4003a08:	0001883a 	nop
 4003a0c:	e037883a 	mov	sp,fp
 4003a10:	dfc00117 	ldw	ra,4(sp)
 4003a14:	df000017 	ldw	fp,0(sp)
 4003a18:	dec00204 	addi	sp,sp,8
 4003a1c:	f800283a 	ret

04003a20 <TRDB_D5M_log2>:
///////////////////////
// GENERAL FUNCTIONS //
///////////////////////

// Calculates log2 of a number. Attention: the number must be a power of 2
static uint16_t TRDB_D5M_log2(uint16_t power_of_2) {
 4003a20:	defffe04 	addi	sp,sp,-8
 4003a24:	df000115 	stw	fp,4(sp)
 4003a28:	df000104 	addi	fp,sp,4
 4003a2c:	2005883a 	mov	r2,r4
 4003a30:	e0bfff0d 	sth	r2,-4(fp)
    if      (power_of_2 == 0x0001) return 0;
 4003a34:	e0bfff0b 	ldhu	r2,-4(fp)
 4003a38:	10800058 	cmpnei	r2,r2,1
 4003a3c:	1000021e 	bne	r2,zero,4003a48 <TRDB_D5M_log2+0x28>
 4003a40:	0005883a 	mov	r2,zero
 4003a44:	00004706 	br	4003b64 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0002) return 1;
 4003a48:	e0bfff0b 	ldhu	r2,-4(fp)
 4003a4c:	10800098 	cmpnei	r2,r2,2
 4003a50:	1000021e 	bne	r2,zero,4003a5c <TRDB_D5M_log2+0x3c>
 4003a54:	00800044 	movi	r2,1
 4003a58:	00004206 	br	4003b64 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0004) return 2;
 4003a5c:	e0bfff0b 	ldhu	r2,-4(fp)
 4003a60:	10800118 	cmpnei	r2,r2,4
 4003a64:	1000021e 	bne	r2,zero,4003a70 <TRDB_D5M_log2+0x50>
 4003a68:	00800084 	movi	r2,2
 4003a6c:	00003d06 	br	4003b64 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0008) return 3;
 4003a70:	e0bfff0b 	ldhu	r2,-4(fp)
 4003a74:	10800218 	cmpnei	r2,r2,8
 4003a78:	1000021e 	bne	r2,zero,4003a84 <TRDB_D5M_log2+0x64>
 4003a7c:	008000c4 	movi	r2,3
 4003a80:	00003806 	br	4003b64 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0010) return 4;
 4003a84:	e0bfff0b 	ldhu	r2,-4(fp)
 4003a88:	10800418 	cmpnei	r2,r2,16
 4003a8c:	1000021e 	bne	r2,zero,4003a98 <TRDB_D5M_log2+0x78>
 4003a90:	00800104 	movi	r2,4
 4003a94:	00003306 	br	4003b64 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0020) return 5;
 4003a98:	e0bfff0b 	ldhu	r2,-4(fp)
 4003a9c:	10800818 	cmpnei	r2,r2,32
 4003aa0:	1000021e 	bne	r2,zero,4003aac <TRDB_D5M_log2+0x8c>
 4003aa4:	00800144 	movi	r2,5
 4003aa8:	00002e06 	br	4003b64 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0040) return 6;
 4003aac:	e0bfff0b 	ldhu	r2,-4(fp)
 4003ab0:	10801018 	cmpnei	r2,r2,64
 4003ab4:	1000021e 	bne	r2,zero,4003ac0 <TRDB_D5M_log2+0xa0>
 4003ab8:	00800184 	movi	r2,6
 4003abc:	00002906 	br	4003b64 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0080) return 7;
 4003ac0:	e0bfff0b 	ldhu	r2,-4(fp)
 4003ac4:	10802018 	cmpnei	r2,r2,128
 4003ac8:	1000021e 	bne	r2,zero,4003ad4 <TRDB_D5M_log2+0xb4>
 4003acc:	008001c4 	movi	r2,7
 4003ad0:	00002406 	br	4003b64 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0100) return 8;
 4003ad4:	e0bfff0b 	ldhu	r2,-4(fp)
 4003ad8:	10804018 	cmpnei	r2,r2,256
 4003adc:	1000021e 	bne	r2,zero,4003ae8 <TRDB_D5M_log2+0xc8>
 4003ae0:	00800204 	movi	r2,8
 4003ae4:	00001f06 	br	4003b64 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0200) return 9;
 4003ae8:	e0bfff0b 	ldhu	r2,-4(fp)
 4003aec:	10808018 	cmpnei	r2,r2,512
 4003af0:	1000021e 	bne	r2,zero,4003afc <TRDB_D5M_log2+0xdc>
 4003af4:	00800244 	movi	r2,9
 4003af8:	00001a06 	br	4003b64 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0400) return 10;
 4003afc:	e0bfff0b 	ldhu	r2,-4(fp)
 4003b00:	10810018 	cmpnei	r2,r2,1024
 4003b04:	1000021e 	bne	r2,zero,4003b10 <TRDB_D5M_log2+0xf0>
 4003b08:	00800284 	movi	r2,10
 4003b0c:	00001506 	br	4003b64 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0800) return 11;
 4003b10:	e0bfff0b 	ldhu	r2,-4(fp)
 4003b14:	10820018 	cmpnei	r2,r2,2048
 4003b18:	1000021e 	bne	r2,zero,4003b24 <TRDB_D5M_log2+0x104>
 4003b1c:	008002c4 	movi	r2,11
 4003b20:	00001006 	br	4003b64 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x1000) return 12;
 4003b24:	e0bfff0b 	ldhu	r2,-4(fp)
 4003b28:	10840018 	cmpnei	r2,r2,4096
 4003b2c:	1000021e 	bne	r2,zero,4003b38 <TRDB_D5M_log2+0x118>
 4003b30:	00800304 	movi	r2,12
 4003b34:	00000b06 	br	4003b64 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x2000) return 13;
 4003b38:	e0bfff0b 	ldhu	r2,-4(fp)
 4003b3c:	10880018 	cmpnei	r2,r2,8192
 4003b40:	1000021e 	bne	r2,zero,4003b4c <TRDB_D5M_log2+0x12c>
 4003b44:	00800344 	movi	r2,13
 4003b48:	00000606 	br	4003b64 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x4000) return 14;
 4003b4c:	e0bfff0b 	ldhu	r2,-4(fp)
 4003b50:	10900018 	cmpnei	r2,r2,16384
 4003b54:	1000021e 	bne	r2,zero,4003b60 <TRDB_D5M_log2+0x140>
 4003b58:	00800384 	movi	r2,14
 4003b5c:	00000106 	br	4003b64 <TRDB_D5M_log2+0x144>
    else                           return 15;
 4003b60:	008003c4 	movi	r2,15
}
 4003b64:	e037883a 	mov	sp,fp
 4003b68:	df000017 	ldw	fp,0(sp)
 4003b6c:	dec00104 	addi	sp,sp,4
 4003b70:	f800283a 	ret

04003b74 <TRDB_D5M_shift_amount>:

static uint16_t TRDB_D5M_shift_amount(uint16_t mask) {
 4003b74:	defffd04 	addi	sp,sp,-12
 4003b78:	dfc00215 	stw	ra,8(sp)
 4003b7c:	df000115 	stw	fp,4(sp)
 4003b80:	df000104 	addi	fp,sp,4
 4003b84:	2005883a 	mov	r2,r4
 4003b88:	e0bfff0d 	sth	r2,-4(fp)
    // (mask & -mask) clears all but the lowest bit of x
    return TRDB_D5M_log2(mask & (~mask + 1));
 4003b8c:	e0bfff0b 	ldhu	r2,-4(fp)
 4003b90:	0085c83a 	sub	r2,zero,r2
 4003b94:	1007883a 	mov	r3,r2
 4003b98:	e0bfff0b 	ldhu	r2,-4(fp)
 4003b9c:	1884703a 	and	r2,r3,r2
 4003ba0:	10bfffcc 	andi	r2,r2,65535
 4003ba4:	1009883a 	mov	r4,r2
 4003ba8:	4003a200 	call	4003a20 <TRDB_D5M_log2>
}
 4003bac:	e037883a 	mov	sp,fp
 4003bb0:	dfc00117 	ldw	ra,4(sp)
 4003bb4:	df000017 	ldw	fp,0(sp)
 4003bb8:	dec00204 	addi	sp,sp,8
 4003bbc:	f800283a 	ret

04003bc0 <TRDB_D5M_READ>:

static uint16_t TRDB_D5M_READ(uint16_t full_reg_value, uint16_t mask) {
 4003bc0:	defffb04 	addi	sp,sp,-20
 4003bc4:	dfc00415 	stw	ra,16(sp)
 4003bc8:	df000315 	stw	fp,12(sp)
 4003bcc:	dc000215 	stw	r16,8(sp)
 4003bd0:	df000304 	addi	fp,sp,12
 4003bd4:	2007883a 	mov	r3,r4
 4003bd8:	2805883a 	mov	r2,r5
 4003bdc:	e0fffd0d 	sth	r3,-12(fp)
 4003be0:	e0bffe0d 	sth	r2,-8(fp)
    return (full_reg_value & mask) >> TRDB_D5M_shift_amount(mask);
 4003be4:	e0fffd0b 	ldhu	r3,-12(fp)
 4003be8:	e0bffe0b 	ldhu	r2,-8(fp)
 4003bec:	1884703a 	and	r2,r3,r2
 4003bf0:	143fffcc 	andi	r16,r2,65535
 4003bf4:	e0bffe0b 	ldhu	r2,-8(fp)
 4003bf8:	1009883a 	mov	r4,r2
 4003bfc:	4003b740 	call	4003b74 <TRDB_D5M_shift_amount>
 4003c00:	10bfffcc 	andi	r2,r2,65535
 4003c04:	8085d83a 	sra	r2,r16,r2
}
 4003c08:	e6ffff04 	addi	sp,fp,-4
 4003c0c:	dfc00217 	ldw	ra,8(sp)
 4003c10:	df000117 	ldw	fp,4(sp)
 4003c14:	dc000017 	ldw	r16,0(sp)
 4003c18:	dec00304 	addi	sp,sp,12
 4003c1c:	f800283a 	ret

04003c20 <TRDB_D5M_WRITE>:

static uint16_t TRDB_D5M_WRITE(uint16_t full_reg_value, uint16_t mask, uint16_t write_value) {
 4003c20:	defffa04 	addi	sp,sp,-24
 4003c24:	dfc00515 	stw	ra,20(sp)
 4003c28:	df000415 	stw	fp,16(sp)
 4003c2c:	dc000315 	stw	r16,12(sp)
 4003c30:	df000404 	addi	fp,sp,16
 4003c34:	2807883a 	mov	r3,r5
 4003c38:	3005883a 	mov	r2,r6
 4003c3c:	e13ffc0d 	sth	r4,-16(fp)
 4003c40:	e0fffd0d 	sth	r3,-12(fp)
 4003c44:	e0bffe0d 	sth	r2,-8(fp)
    return (full_reg_value & (~mask)) | ((write_value << TRDB_D5M_shift_amount(mask)) & mask);
 4003c48:	e43ffe0b 	ldhu	r16,-8(fp)
 4003c4c:	e0bffd0b 	ldhu	r2,-12(fp)
 4003c50:	1009883a 	mov	r4,r2
 4003c54:	4003b740 	call	4003b74 <TRDB_D5M_shift_amount>
 4003c58:	10bfffcc 	andi	r2,r2,65535
 4003c5c:	8084983a 	sll	r2,r16,r2
 4003c60:	1007883a 	mov	r3,r2
 4003c64:	e0bffc0b 	ldhu	r2,-16(fp)
 4003c68:	1884f03a 	xor	r2,r3,r2
 4003c6c:	1007883a 	mov	r3,r2
 4003c70:	e0bffd0b 	ldhu	r2,-12(fp)
 4003c74:	1884703a 	and	r2,r3,r2
 4003c78:	1007883a 	mov	r3,r2
 4003c7c:	e0bffc0b 	ldhu	r2,-16(fp)
 4003c80:	1884f03a 	xor	r2,r3,r2
}
 4003c84:	e6ffff04 	addi	sp,fp,-4
 4003c88:	dfc00217 	ldw	ra,8(sp)
 4003c8c:	df000117 	ldw	fp,4(sp)
 4003c90:	dc000017 	ldw	r16,0(sp)
 4003c94:	dec00304 	addi	sp,sp,12
 4003c98:	f800283a 	ret

04003c9c <trdb_d5m_inst>:
                           uint64_t cmos_sensor_acquisition_msgdma_csr_max_stride,
                           uint8_t  cmos_sensor_acquisition_msgdma_csr_programmable_burst_enable,
                           uint8_t  cmos_sensor_acquisition_msgdma_csr_stride_enable,
                           uint8_t  cmos_sensor_acquisition_msgdma_csr_enhanced_features,
                           uint8_t  cmos_sensor_acquisition_msgdma_csr_response_port,
                           void     *i2c_base) {
 4003c9c:	deffaf04 	addi	sp,sp,-324
 4003ca0:	dfc05015 	stw	ra,320(sp)
 4003ca4:	df004f15 	stw	fp,316(sp)
 4003ca8:	df004f04 	addi	fp,sp,316
 4003cac:	e13fdd15 	stw	r4,-140(fp)
 4003cb0:	e17fde15 	stw	r5,-136(fp)
 4003cb4:	3015883a 	mov	r10,r6
 4003cb8:	e1ffe015 	stw	r7,-128(fp)
 4003cbc:	e2400517 	ldw	r9,20(fp)
 4003cc0:	e2000617 	ldw	r8,24(fp)
 4003cc4:	e1c00a17 	ldw	r7,40(fp)
 4003cc8:	e1800b17 	ldw	r6,44(fp)
 4003ccc:	e1401217 	ldw	r5,72(fp)
 4003cd0:	e1001317 	ldw	r4,76(fp)
 4003cd4:	e0c01417 	ldw	r3,80(fp)
 4003cd8:	e0801517 	ldw	r2,84(fp)
 4003cdc:	e2bfdf05 	stb	r10,-132(fp)
 4003ce0:	e27fe105 	stb	r9,-124(fp)
 4003ce4:	e23fe205 	stb	r8,-120(fp)
 4003ce8:	e1ffe305 	stb	r7,-116(fp)
 4003cec:	e1bfe405 	stb	r6,-112(fp)
 4003cf0:	e17fe505 	stb	r5,-108(fp)
 4003cf4:	e13fe605 	stb	r4,-104(fp)
 4003cf8:	e0ffe705 	stb	r3,-100(fp)
 4003cfc:	e0bfe805 	stb	r2,-96(fp)

    trdb_d5m_dev dev;

    dev.cmos_sensor_acquisition = cmos_sensor_acquisition_inst(cmos_sensor_acquisition_cmos_sensor_input_base,
 4003d00:	e2ffdf03 	ldbu	r11,-132(fp)
 4003d04:	e0bfe103 	ldbu	r2,-124(fp)
 4003d08:	e0ffe203 	ldbu	r3,-120(fp)
 4003d0c:	e13fe303 	ldbu	r4,-116(fp)
 4003d10:	e17fe403 	ldbu	r5,-112(fp)
 4003d14:	e1bfe503 	ldbu	r6,-108(fp)
 4003d18:	e1ffe603 	ldbu	r7,-104(fp)
 4003d1c:	e23fe703 	ldbu	r8,-100(fp)
 4003d20:	e27fe803 	ldbu	r9,-96(fp)
 4003d24:	e2bfe904 	addi	r10,fp,-92
 4003d28:	da401315 	stw	r9,76(sp)
 4003d2c:	da001215 	stw	r8,72(sp)
 4003d30:	d9c01115 	stw	r7,68(sp)
 4003d34:	d9801015 	stw	r6,64(sp)
 4003d38:	e1801017 	ldw	r6,64(fp)
 4003d3c:	d9800e15 	stw	r6,56(sp)
 4003d40:	e1801117 	ldw	r6,68(fp)
 4003d44:	d9800f15 	stw	r6,60(sp)
 4003d48:	e1800f17 	ldw	r6,60(fp)
 4003d4c:	d9800d15 	stw	r6,52(sp)
 4003d50:	e1800e17 	ldw	r6,56(fp)
 4003d54:	d9800c15 	stw	r6,48(sp)
 4003d58:	e1800d17 	ldw	r6,52(fp)
 4003d5c:	d9800b15 	stw	r6,44(sp)
 4003d60:	e1800c17 	ldw	r6,48(fp)
 4003d64:	d9800a15 	stw	r6,40(sp)
 4003d68:	d9400915 	stw	r5,36(sp)
 4003d6c:	d9000815 	stw	r4,32(sp)
 4003d70:	e1000917 	ldw	r4,36(fp)
 4003d74:	d9000715 	stw	r4,28(sp)
 4003d78:	e1000817 	ldw	r4,32(fp)
 4003d7c:	d9000615 	stw	r4,24(sp)
 4003d80:	e1000717 	ldw	r4,28(fp)
 4003d84:	d9000515 	stw	r4,20(sp)
 4003d88:	d8c00415 	stw	r3,16(sp)
 4003d8c:	d8800315 	stw	r2,12(sp)
 4003d90:	e0800417 	ldw	r2,16(fp)
 4003d94:	d8800215 	stw	r2,8(sp)
 4003d98:	e0800317 	ldw	r2,12(fp)
 4003d9c:	d8800115 	stw	r2,4(sp)
 4003da0:	e0800217 	ldw	r2,8(fp)
 4003da4:	d8800015 	stw	r2,0(sp)
 4003da8:	e1ffe017 	ldw	r7,-128(fp)
 4003dac:	580d883a 	mov	r6,r11
 4003db0:	e17fde17 	ldw	r5,-136(fp)
 4003db4:	5009883a 	mov	r4,r10
 4003db8:	400026c0 	call	400026c <cmos_sensor_acquisition_inst>
 4003dbc:	e13fc504 	addi	r4,fp,-236
 4003dc0:	e0bfe904 	addi	r2,fp,-92
 4003dc4:	00c01704 	movi	r3,92
 4003dc8:	180d883a 	mov	r6,r3
 4003dcc:	100b883a 	mov	r5,r2
 4003dd0:	4004e1c0 	call	4004e1c <memcpy>
                                                               cmos_sensor_acquisition_msgdma_csr_max_stride,
                                                               cmos_sensor_acquisition_msgdma_csr_programmable_burst_enable,
                                                               cmos_sensor_acquisition_msgdma_csr_stride_enable,
                                                               cmos_sensor_acquisition_msgdma_csr_enhanced_features,
                                                               cmos_sensor_acquisition_msgdma_csr_response_port);
    dev.i2c = i2c_inst(i2c_base);
 4003dd4:	e1001617 	ldw	r4,88(fp)
 4003dd8:	4001be00 	call	4001be0 <i2c_inst>
 4003ddc:	e0bfdc15 	stw	r2,-144(fp)

    return dev;
 4003de0:	e0bfdd17 	ldw	r2,-140(fp)
 4003de4:	1007883a 	mov	r3,r2
 4003de8:	e13fc504 	addi	r4,fp,-236
 4003dec:	00801804 	movi	r2,96
 4003df0:	100d883a 	mov	r6,r2
 4003df4:	200b883a 	mov	r5,r4
 4003df8:	1809883a 	mov	r4,r3
 4003dfc:	4004e1c0 	call	4004e1c <memcpy>
}
 4003e00:	e0bfdd17 	ldw	r2,-140(fp)
 4003e04:	e037883a 	mov	sp,fp
 4003e08:	dfc00117 	ldw	ra,4(sp)
 4003e0c:	df000017 	ldw	fp,0(sp)
 4003e10:	dec00204 	addi	sp,sp,8
 4003e14:	f800283a 	ret

04003e18 <trdb_d5m_configure>:

bool trdb_d5m_configure(trdb_d5m_dev *dev,
                        uint16_t column_size, uint16_t row_size,
                        uint16_t row_bin, uint16_t row_skip,
                        uint16_t column_bin, uint16_t column_skip,
                        bool     continuous) {
 4003e18:	defff304 	addi	sp,sp,-52
 4003e1c:	dfc00c15 	stw	ra,48(sp)
 4003e20:	df000b15 	stw	fp,44(sp)
 4003e24:	dc000a15 	stw	r16,40(sp)
 4003e28:	df000b04 	addi	fp,sp,44
 4003e2c:	e13ff715 	stw	r4,-36(fp)
 4003e30:	2813883a 	mov	r9,r5
 4003e34:	3011883a 	mov	r8,r6
 4003e38:	380d883a 	mov	r6,r7
 4003e3c:	e1400217 	ldw	r5,8(fp)
 4003e40:	e1000317 	ldw	r4,12(fp)
 4003e44:	e0c00417 	ldw	r3,16(fp)
 4003e48:	e0800517 	ldw	r2,20(fp)
 4003e4c:	e27ff80d 	sth	r9,-32(fp)
 4003e50:	e23ff90d 	sth	r8,-28(fp)
 4003e54:	e1bffa0d 	sth	r6,-24(fp)
 4003e58:	e17ffb0d 	sth	r5,-20(fp)
 4003e5c:	e13ffc0d 	sth	r4,-16(fp)
 4003e60:	e0fffd0d 	sth	r3,-12(fp)
 4003e64:	e0bffe05 	stb	r2,-8(fp)
    uint16_t buffer = 0;
 4003e68:	e03ff60d 	sth	zero,-40(fp)
    uint16_t write_data = 0;
 4003e6c:	e03ff50d 	sth	zero,-44(fp)
    bool success = true;
 4003e70:	00800044 	movi	r2,1
 4003e74:	e0bff585 	stb	r2,-42(fp)

    /* TRDB_D5M_COLUMN_SIZE_REG */
    write_data = TRDB_D5M_COLUMN_SIZE_REG_WRITE(buffer, column_size);
 4003e78:	e0bff60b 	ldhu	r2,-40(fp)
 4003e7c:	10bfffcc 	andi	r2,r2,65535
 4003e80:	e0fff80b 	ldhu	r3,-32(fp)
 4003e84:	180d883a 	mov	r6,r3
 4003e88:	017fffd4 	movui	r5,65535
 4003e8c:	1009883a 	mov	r4,r2
 4003e90:	4003c200 	call	4003c20 <TRDB_D5M_WRITE>
 4003e94:	e0bff50d 	sth	r2,-44(fp)
    success &= trdb_d5m_write(dev, TRDB_D5M_COLUMN_SIZE_REG, write_data);
 4003e98:	e0bff50b 	ldhu	r2,-44(fp)
 4003e9c:	100d883a 	mov	r6,r2
 4003ea0:	01400104 	movi	r5,4
 4003ea4:	e13ff717 	ldw	r4,-36(fp)
 4003ea8:	40041280 	call	4004128 <trdb_d5m_write>
 4003eac:	e0fff583 	ldbu	r3,-42(fp)
 4003eb0:	10803fcc 	andi	r2,r2,255
 4003eb4:	1884703a 	and	r2,r3,r2
 4003eb8:	1004c03a 	cmpne	r2,r2,zero
 4003ebc:	e0bff585 	stb	r2,-42(fp)

    /* TRDB_D5M_ROW_SIZE_REG */
    write_data = TRDB_D5M_ROW_SIZE_REG_WRITE(buffer, row_size);
 4003ec0:	e0bff60b 	ldhu	r2,-40(fp)
 4003ec4:	10bfffcc 	andi	r2,r2,65535
 4003ec8:	e0fff90b 	ldhu	r3,-28(fp)
 4003ecc:	180d883a 	mov	r6,r3
 4003ed0:	017fffd4 	movui	r5,65535
 4003ed4:	1009883a 	mov	r4,r2
 4003ed8:	4003c200 	call	4003c20 <TRDB_D5M_WRITE>
 4003edc:	e0bff50d 	sth	r2,-44(fp)
    success &= trdb_d5m_write(dev, TRDB_D5M_ROW_SIZE_REG, write_data);
 4003ee0:	e0bff50b 	ldhu	r2,-44(fp)
 4003ee4:	100d883a 	mov	r6,r2
 4003ee8:	014000c4 	movi	r5,3
 4003eec:	e13ff717 	ldw	r4,-36(fp)
 4003ef0:	40041280 	call	4004128 <trdb_d5m_write>
 4003ef4:	e0fff583 	ldbu	r3,-42(fp)
 4003ef8:	10803fcc 	andi	r2,r2,255
 4003efc:	1884703a 	and	r2,r3,r2
 4003f00:	1004c03a 	cmpne	r2,r2,zero
 4003f04:	e0bff585 	stb	r2,-42(fp)

    /* TRDB_D5M_ROW_ADDRESS_MODE_REG */
    success &= trdb_d5m_read(dev, TRDB_D5M_ROW_ADDRESS_MODE_REG, &buffer);
 4003f08:	e0bff604 	addi	r2,fp,-40
 4003f0c:	100d883a 	mov	r6,r2
 4003f10:	01400884 	movi	r5,34
 4003f14:	e13ff717 	ldw	r4,-36(fp)
 4003f18:	40041b80 	call	40041b8 <trdb_d5m_read>
 4003f1c:	e0fff583 	ldbu	r3,-42(fp)
 4003f20:	10803fcc 	andi	r2,r2,255
 4003f24:	1884703a 	and	r2,r3,r2
 4003f28:	1004c03a 	cmpne	r2,r2,zero
 4003f2c:	e0bff585 	stb	r2,-42(fp)
    write_data = TRDB_D5M_ROW_ADDRESS_MODE_REG_ROW_BIN_WRITE(buffer, row_bin) | TRDB_D5M_ROW_ADDRESS_MODE_REG_ROW_SKIP_WRITE(buffer, row_skip);
 4003f30:	e0bff60b 	ldhu	r2,-40(fp)
 4003f34:	10bfffcc 	andi	r2,r2,65535
 4003f38:	e0fffa0b 	ldhu	r3,-24(fp)
 4003f3c:	180d883a 	mov	r6,r3
 4003f40:	01400c04 	movi	r5,48
 4003f44:	1009883a 	mov	r4,r2
 4003f48:	4003c200 	call	4003c20 <TRDB_D5M_WRITE>
 4003f4c:	1021883a 	mov	r16,r2
 4003f50:	e0bff60b 	ldhu	r2,-40(fp)
 4003f54:	10bfffcc 	andi	r2,r2,65535
 4003f58:	e0fffb0b 	ldhu	r3,-20(fp)
 4003f5c:	180d883a 	mov	r6,r3
 4003f60:	014001c4 	movi	r5,7
 4003f64:	1009883a 	mov	r4,r2
 4003f68:	4003c200 	call	4003c20 <TRDB_D5M_WRITE>
 4003f6c:	8084b03a 	or	r2,r16,r2
 4003f70:	e0bff50d 	sth	r2,-44(fp)
    success &= trdb_d5m_write(dev, TRDB_D5M_ROW_ADDRESS_MODE_REG, write_data);
 4003f74:	e0bff50b 	ldhu	r2,-44(fp)
 4003f78:	100d883a 	mov	r6,r2
 4003f7c:	01400884 	movi	r5,34
 4003f80:	e13ff717 	ldw	r4,-36(fp)
 4003f84:	40041280 	call	4004128 <trdb_d5m_write>
 4003f88:	e0fff583 	ldbu	r3,-42(fp)
 4003f8c:	10803fcc 	andi	r2,r2,255
 4003f90:	1884703a 	and	r2,r3,r2
 4003f94:	1004c03a 	cmpne	r2,r2,zero
 4003f98:	e0bff585 	stb	r2,-42(fp)

    /* TRDB_D5M_COLUMN_ADDRESS_MODE_REG */
    success &= trdb_d5m_read(dev, TRDB_D5M_COLUMN_ADDRESS_MODE_REG, &buffer);
 4003f9c:	e0bff604 	addi	r2,fp,-40
 4003fa0:	100d883a 	mov	r6,r2
 4003fa4:	014008c4 	movi	r5,35
 4003fa8:	e13ff717 	ldw	r4,-36(fp)
 4003fac:	40041b80 	call	40041b8 <trdb_d5m_read>
 4003fb0:	e0fff583 	ldbu	r3,-42(fp)
 4003fb4:	10803fcc 	andi	r2,r2,255
 4003fb8:	1884703a 	and	r2,r3,r2
 4003fbc:	1004c03a 	cmpne	r2,r2,zero
 4003fc0:	e0bff585 	stb	r2,-42(fp)
    write_data = TRDB_D5M_COLUMN_ADDRESS_MODE_REG_COLUMN_BIN_WRITE(buffer, column_bin) | TRDB_D5M_COLUMN_ADDRESS_MODE_REG_COLUMN_SKIP_WRITE(buffer, column_skip);
 4003fc4:	e0bff60b 	ldhu	r2,-40(fp)
 4003fc8:	10bfffcc 	andi	r2,r2,65535
 4003fcc:	e0fffc0b 	ldhu	r3,-16(fp)
 4003fd0:	180d883a 	mov	r6,r3
 4003fd4:	01400c04 	movi	r5,48
 4003fd8:	1009883a 	mov	r4,r2
 4003fdc:	4003c200 	call	4003c20 <TRDB_D5M_WRITE>
 4003fe0:	1021883a 	mov	r16,r2
 4003fe4:	e0bff60b 	ldhu	r2,-40(fp)
 4003fe8:	10bfffcc 	andi	r2,r2,65535
 4003fec:	e0fffd0b 	ldhu	r3,-12(fp)
 4003ff0:	180d883a 	mov	r6,r3
 4003ff4:	014001c4 	movi	r5,7
 4003ff8:	1009883a 	mov	r4,r2
 4003ffc:	4003c200 	call	4003c20 <TRDB_D5M_WRITE>
 4004000:	8084b03a 	or	r2,r16,r2
 4004004:	e0bff50d 	sth	r2,-44(fp)
    success &= trdb_d5m_write(dev, TRDB_D5M_COLUMN_ADDRESS_MODE_REG, write_data);
 4004008:	e0bff50b 	ldhu	r2,-44(fp)
 400400c:	100d883a 	mov	r6,r2
 4004010:	014008c4 	movi	r5,35
 4004014:	e13ff717 	ldw	r4,-36(fp)
 4004018:	40041280 	call	4004128 <trdb_d5m_write>
 400401c:	e0fff583 	ldbu	r3,-42(fp)
 4004020:	10803fcc 	andi	r2,r2,255
 4004024:	1884703a 	and	r2,r3,r2
 4004028:	1004c03a 	cmpne	r2,r2,zero
 400402c:	e0bff585 	stb	r2,-42(fp)

    /* TRDB_D5M_READ_MODE_1_REG */
    success &= trdb_d5m_read(dev, TRDB_D5M_READ_MODE_1_REG, &buffer);
 4004030:	e0bff604 	addi	r2,fp,-40
 4004034:	100d883a 	mov	r6,r2
 4004038:	01400784 	movi	r5,30
 400403c:	e13ff717 	ldw	r4,-36(fp)
 4004040:	40041b80 	call	40041b8 <trdb_d5m_read>
 4004044:	e0fff583 	ldbu	r3,-42(fp)
 4004048:	10803fcc 	andi	r2,r2,255
 400404c:	1884703a 	and	r2,r3,r2
 4004050:	1004c03a 	cmpne	r2,r2,zero
 4004054:	e0bff585 	stb	r2,-42(fp)
    write_data = TRDB_D5M_READ_MODE_1_REG_SNAPSHOT_WRITE(buffer, continuous ? 0 : 1);
 4004058:	e0bff60b 	ldhu	r2,-40(fp)
 400405c:	10ffffcc 	andi	r3,r2,65535
 4004060:	e0bffe03 	ldbu	r2,-8(fp)
 4004064:	10000226 	beq	r2,zero,4004070 <trdb_d5m_configure+0x258>
 4004068:	0005883a 	mov	r2,zero
 400406c:	00000106 	br	4004074 <trdb_d5m_configure+0x25c>
 4004070:	00800044 	movi	r2,1
 4004074:	100d883a 	mov	r6,r2
 4004078:	01404004 	movi	r5,256
 400407c:	1809883a 	mov	r4,r3
 4004080:	4003c200 	call	4003c20 <TRDB_D5M_WRITE>
 4004084:	e0bff50d 	sth	r2,-44(fp)
    success &= trdb_d5m_write(dev, TRDB_D5M_READ_MODE_1_REG, write_data);
 4004088:	e0bff50b 	ldhu	r2,-44(fp)
 400408c:	100d883a 	mov	r6,r2
 4004090:	01400784 	movi	r5,30
 4004094:	e13ff717 	ldw	r4,-36(fp)
 4004098:	40041280 	call	4004128 <trdb_d5m_write>
 400409c:	e0fff583 	ldbu	r3,-42(fp)
 40040a0:	10803fcc 	andi	r2,r2,255
 40040a4:	1884703a 	and	r2,r3,r2
 40040a8:	1004c03a 	cmpne	r2,r2,zero
 40040ac:	e0bff585 	stb	r2,-42(fp)

    cmos_sensor_acquisition_configure(&dev->cmos_sensor_acquisition);
 40040b0:	e0bff717 	ldw	r2,-36(fp)
 40040b4:	1009883a 	mov	r4,r2
 40040b8:	40004580 	call	4000458 <cmos_sensor_acquisition_configure>

    return success;
 40040bc:	e0bff583 	ldbu	r2,-42(fp)
}
 40040c0:	e6ffff04 	addi	sp,fp,-4
 40040c4:	dfc00217 	ldw	ra,8(sp)
 40040c8:	df000117 	ldw	fp,4(sp)
 40040cc:	dc000017 	ldw	r16,0(sp)
 40040d0:	dec00304 	addi	sp,sp,12
 40040d4:	f800283a 	ret

040040d8 <trdb_d5m_init>:

void trdb_d5m_init(trdb_d5m_dev *dev, uint32_t i2c_freq) {
 40040d8:	defffc04 	addi	sp,sp,-16
 40040dc:	dfc00315 	stw	ra,12(sp)
 40040e0:	df000215 	stw	fp,8(sp)
 40040e4:	df000204 	addi	fp,sp,8
 40040e8:	e13ffe15 	stw	r4,-8(fp)
 40040ec:	e17fff15 	stw	r5,-4(fp)
    cmos_sensor_acquisition_init(&dev->cmos_sensor_acquisition);
 40040f0:	e0bffe17 	ldw	r2,-8(fp)
 40040f4:	1009883a 	mov	r4,r2
 40040f8:	40004100 	call	4000410 <cmos_sensor_acquisition_init>
    i2c_init(&dev->i2c, i2c_freq);
 40040fc:	e0bffe17 	ldw	r2,-8(fp)
 4004100:	10801704 	addi	r2,r2,92
 4004104:	e17fff17 	ldw	r5,-4(fp)
 4004108:	1009883a 	mov	r4,r2
 400410c:	4001c0c0 	call	4001c0c <i2c_init>
}
 4004110:	0001883a 	nop
 4004114:	e037883a 	mov	sp,fp
 4004118:	dfc00117 	ldw	ra,4(sp)
 400411c:	df000017 	ldw	fp,0(sp)
 4004120:	dec00204 	addi	sp,sp,8
 4004124:	f800283a 	ret

04004128 <trdb_d5m_write>:

bool trdb_d5m_write(trdb_d5m_dev *dev, uint8_t register_offset, uint16_t data) {
 4004128:	defff804 	addi	sp,sp,-32
 400412c:	dfc00715 	stw	ra,28(sp)
 4004130:	df000615 	stw	fp,24(sp)
 4004134:	df000604 	addi	fp,sp,24
 4004138:	e13ffd15 	stw	r4,-12(fp)
 400413c:	2807883a 	mov	r3,r5
 4004140:	3005883a 	mov	r2,r6
 4004144:	e0fffe05 	stb	r3,-8(fp)
 4004148:	e0bfff0d 	sth	r2,-4(fp)
    uint8_t byte_data[2] = {(data >> 8) & 0xff, data & 0xff};
 400414c:	e0bfff0b 	ldhu	r2,-4(fp)
 4004150:	1004d23a 	srli	r2,r2,8
 4004154:	e0bffc05 	stb	r2,-16(fp)
 4004158:	e0bfff0b 	ldhu	r2,-4(fp)
 400415c:	e0bffc45 	stb	r2,-15(fp)

    int success = i2c_write_array(&dev->i2c, TRDB_D5M_I2C_WRITE_ADDRESS, register_offset, byte_data, sizeof(byte_data));
 4004160:	e0bffd17 	ldw	r2,-12(fp)
 4004164:	10c01704 	addi	r3,r2,92
 4004168:	e13ffe03 	ldbu	r4,-8(fp)
 400416c:	e17ffc04 	addi	r5,fp,-16
 4004170:	00800084 	movi	r2,2
 4004174:	d8800015 	stw	r2,0(sp)
 4004178:	280f883a 	mov	r7,r5
 400417c:	200d883a 	mov	r6,r4
 4004180:	01402e84 	movi	r5,186
 4004184:	1809883a 	mov	r4,r3
 4004188:	4001f640 	call	4001f64 <i2c_write_array>
 400418c:	e0bffb15 	stw	r2,-20(fp)

    if (success != I2C_SUCCESS) {
 4004190:	e0bffb17 	ldw	r2,-20(fp)
 4004194:	10000226 	beq	r2,zero,40041a0 <trdb_d5m_write+0x78>
        return false;
 4004198:	0005883a 	mov	r2,zero
 400419c:	00000106 	br	40041a4 <trdb_d5m_write+0x7c>
    } else {
        return true;
 40041a0:	00800044 	movi	r2,1
    }
}
 40041a4:	e037883a 	mov	sp,fp
 40041a8:	dfc00117 	ldw	ra,4(sp)
 40041ac:	df000017 	ldw	fp,0(sp)
 40041b0:	dec00204 	addi	sp,sp,8
 40041b4:	f800283a 	ret

040041b8 <trdb_d5m_read>:

bool trdb_d5m_read(trdb_d5m_dev *dev, uint8_t register_offset, uint16_t *data) {
 40041b8:	defff804 	addi	sp,sp,-32
 40041bc:	dfc00715 	stw	ra,28(sp)
 40041c0:	df000615 	stw	fp,24(sp)
 40041c4:	df000604 	addi	fp,sp,24
 40041c8:	e13ffd15 	stw	r4,-12(fp)
 40041cc:	2805883a 	mov	r2,r5
 40041d0:	e1bfff15 	stw	r6,-4(fp)
 40041d4:	e0bffe05 	stb	r2,-8(fp)
    uint8_t byte_data[2] = {0, 0};
 40041d8:	e03ffc05 	stb	zero,-16(fp)
 40041dc:	e03ffc45 	stb	zero,-15(fp)

    int success = i2c_read_array(&dev->i2c, TRDB_D5M_I2C_READ_ADDRESS, register_offset, byte_data, sizeof(byte_data));
 40041e0:	e0bffd17 	ldw	r2,-12(fp)
 40041e4:	10c01704 	addi	r3,r2,92
 40041e8:	e13ffe03 	ldbu	r4,-8(fp)
 40041ec:	e17ffc04 	addi	r5,fp,-16
 40041f0:	00800084 	movi	r2,2
 40041f4:	d8800015 	stw	r2,0(sp)
 40041f8:	280f883a 	mov	r7,r5
 40041fc:	200d883a 	mov	r6,r4
 4004200:	01402ec4 	movi	r5,187
 4004204:	1809883a 	mov	r4,r3
 4004208:	40020f80 	call	40020f8 <i2c_read_array>
 400420c:	e0bffb15 	stw	r2,-20(fp)

    if (success != I2C_SUCCESS) {
 4004210:	e0bffb17 	ldw	r2,-20(fp)
 4004214:	10000226 	beq	r2,zero,4004220 <trdb_d5m_read+0x68>
        return false;
 4004218:	0005883a 	mov	r2,zero
 400421c:	00000b06 	br	400424c <trdb_d5m_read+0x94>
    } else {
        *data = ((uint16_t) byte_data[0] << 8) + byte_data[1];
 4004220:	e0bffc03 	ldbu	r2,-16(fp)
 4004224:	10803fcc 	andi	r2,r2,255
 4004228:	1004923a 	slli	r2,r2,8
 400422c:	1007883a 	mov	r3,r2
 4004230:	e0bffc43 	ldbu	r2,-15(fp)
 4004234:	10803fcc 	andi	r2,r2,255
 4004238:	1885883a 	add	r2,r3,r2
 400423c:	1007883a 	mov	r3,r2
 4004240:	e0bfff17 	ldw	r2,-4(fp)
 4004244:	10c0000d 	sth	r3,0(r2)
        return true;
 4004248:	00800044 	movi	r2,1
    }
}
 400424c:	e037883a 	mov	sp,fp
 4004250:	dfc00117 	ldw	ra,4(sp)
 4004254:	df000017 	ldw	fp,0(sp)
 4004258:	dec00204 	addi	sp,sp,8
 400425c:	f800283a 	ret

04004260 <trdb_d5m_snapshot>:
 *
 * Performs a blocking snapshot operation.
 *
 * Returns true if the frame was successfully saved, and false otherwise.
 */
bool trdb_d5m_snapshot(trdb_d5m_dev *dev, void *frame, size_t frame_size) {
 4004260:	defffb04 	addi	sp,sp,-20
 4004264:	dfc00415 	stw	ra,16(sp)
 4004268:	df000315 	stw	fp,12(sp)
 400426c:	df000304 	addi	fp,sp,12
 4004270:	e13ffd15 	stw	r4,-12(fp)
 4004274:	e17ffe15 	stw	r5,-8(fp)
 4004278:	e1bfff15 	stw	r6,-4(fp)
    return cmos_sensor_acquisition_snapshot(&dev->cmos_sensor_acquisition, frame, frame_size);
 400427c:	e0bffd17 	ldw	r2,-12(fp)
 4004280:	e1bfff17 	ldw	r6,-4(fp)
 4004284:	e17ffe17 	ldw	r5,-8(fp)
 4004288:	1009883a 	mov	r4,r2
 400428c:	40005400 	call	4000540 <cmos_sensor_acquisition_snapshot>
}
 4004290:	e037883a 	mov	sp,fp
 4004294:	dfc00117 	ldw	ra,4(sp)
 4004298:	df000017 	ldw	fp,0(sp)
 400429c:	dec00204 	addi	sp,sp,8
 40042a0:	f800283a 	ret

040042a4 <trdb_d5m_frame_size>:
 * trdb_d5m_frame_size
 *
 * Returns the total size of a frame in bytes outputted by the camera unit in
 * its current configuration.
 */
size_t trdb_d5m_frame_size(trdb_d5m_dev *dev) {
 40042a4:	defffd04 	addi	sp,sp,-12
 40042a8:	dfc00215 	stw	ra,8(sp)
 40042ac:	df000115 	stw	fp,4(sp)
 40042b0:	df000104 	addi	fp,sp,4
 40042b4:	e13fff15 	stw	r4,-4(fp)
    return cmos_sensor_acquisition_frame_size(&dev->cmos_sensor_acquisition);
 40042b8:	e0bfff17 	ldw	r2,-4(fp)
 40042bc:	1009883a 	mov	r4,r2
 40042c0:	40004a40 	call	40004a4 <cmos_sensor_acquisition_frame_size>
}
 40042c4:	e037883a 	mov	sp,fp
 40042c8:	dfc00117 	ldw	ra,4(sp)
 40042cc:	df000017 	ldw	fp,0(sp)
 40042d0:	dec00204 	addi	sp,sp,8
 40042d4:	f800283a 	ret

040042d8 <trdb_d5m_frame_width>:
/*
 * trdb_d5m_frame_width
 *
 * Returns the width of a frame in pixels.
 */
uint32_t trdb_d5m_frame_width(trdb_d5m_dev *dev) {
 40042d8:	defffd04 	addi	sp,sp,-12
 40042dc:	dfc00215 	stw	ra,8(sp)
 40042e0:	df000115 	stw	fp,4(sp)
 40042e4:	df000104 	addi	fp,sp,4
 40042e8:	e13fff15 	stw	r4,-4(fp)
    return cmos_sensor_acquisition_frame_width(&dev->cmos_sensor_acquisition);
 40042ec:	e0bfff17 	ldw	r2,-4(fp)
 40042f0:	1009883a 	mov	r4,r2
 40042f4:	40004d80 	call	40004d8 <cmos_sensor_acquisition_frame_width>
}
 40042f8:	e037883a 	mov	sp,fp
 40042fc:	dfc00117 	ldw	ra,4(sp)
 4004300:	df000017 	ldw	fp,0(sp)
 4004304:	dec00204 	addi	sp,sp,8
 4004308:	f800283a 	ret

0400430c <trdb_d5m_frame_height>:
/*
 * trdb_d5m_frame_height
 *
 * Returns the height of a frame in pixels.
 */
uint32_t trdb_d5m_frame_height(trdb_d5m_dev *dev) {
 400430c:	defffd04 	addi	sp,sp,-12
 4004310:	dfc00215 	stw	ra,8(sp)
 4004314:	df000115 	stw	fp,4(sp)
 4004318:	df000104 	addi	fp,sp,4
 400431c:	e13fff15 	stw	r4,-4(fp)
    return cmos_sensor_acquisition_frame_height(&dev->cmos_sensor_acquisition);
 4004320:	e0bfff17 	ldw	r2,-4(fp)
 4004324:	1009883a 	mov	r4,r2
 4004328:	400050c0 	call	400050c <cmos_sensor_acquisition_frame_height>
}
 400432c:	e037883a 	mov	sp,fp
 4004330:	dfc00117 	ldw	ra,4(sp)
 4004334:	df000017 	ldw	fp,0(sp)
 4004338:	dec00204 	addi	sp,sp,8
 400433c:	f800283a 	ret

04004340 <__divsi3>:
 4004340:	20001b16 	blt	r4,zero,40043b0 <__divsi3+0x70>
 4004344:	000f883a 	mov	r7,zero
 4004348:	28001616 	blt	r5,zero,40043a4 <__divsi3+0x64>
 400434c:	200d883a 	mov	r6,r4
 4004350:	29001a2e 	bgeu	r5,r4,40043bc <__divsi3+0x7c>
 4004354:	00800804 	movi	r2,32
 4004358:	00c00044 	movi	r3,1
 400435c:	00000106 	br	4004364 <__divsi3+0x24>
 4004360:	10000d26 	beq	r2,zero,4004398 <__divsi3+0x58>
 4004364:	294b883a 	add	r5,r5,r5
 4004368:	10bfffc4 	addi	r2,r2,-1
 400436c:	18c7883a 	add	r3,r3,r3
 4004370:	293ffb36 	bltu	r5,r4,4004360 <__alt_data_end+0xfc004360>
 4004374:	0005883a 	mov	r2,zero
 4004378:	18000726 	beq	r3,zero,4004398 <__divsi3+0x58>
 400437c:	0005883a 	mov	r2,zero
 4004380:	31400236 	bltu	r6,r5,400438c <__divsi3+0x4c>
 4004384:	314dc83a 	sub	r6,r6,r5
 4004388:	10c4b03a 	or	r2,r2,r3
 400438c:	1806d07a 	srli	r3,r3,1
 4004390:	280ad07a 	srli	r5,r5,1
 4004394:	183ffa1e 	bne	r3,zero,4004380 <__alt_data_end+0xfc004380>
 4004398:	38000126 	beq	r7,zero,40043a0 <__divsi3+0x60>
 400439c:	0085c83a 	sub	r2,zero,r2
 40043a0:	f800283a 	ret
 40043a4:	014bc83a 	sub	r5,zero,r5
 40043a8:	39c0005c 	xori	r7,r7,1
 40043ac:	003fe706 	br	400434c <__alt_data_end+0xfc00434c>
 40043b0:	0109c83a 	sub	r4,zero,r4
 40043b4:	01c00044 	movi	r7,1
 40043b8:	003fe306 	br	4004348 <__alt_data_end+0xfc004348>
 40043bc:	00c00044 	movi	r3,1
 40043c0:	003fee06 	br	400437c <__alt_data_end+0xfc00437c>

040043c4 <__modsi3>:
 40043c4:	20001716 	blt	r4,zero,4004424 <__modsi3+0x60>
 40043c8:	000f883a 	mov	r7,zero
 40043cc:	2005883a 	mov	r2,r4
 40043d0:	28001216 	blt	r5,zero,400441c <__modsi3+0x58>
 40043d4:	2900162e 	bgeu	r5,r4,4004430 <__modsi3+0x6c>
 40043d8:	01800804 	movi	r6,32
 40043dc:	00c00044 	movi	r3,1
 40043e0:	00000106 	br	40043e8 <__modsi3+0x24>
 40043e4:	30000a26 	beq	r6,zero,4004410 <__modsi3+0x4c>
 40043e8:	294b883a 	add	r5,r5,r5
 40043ec:	31bfffc4 	addi	r6,r6,-1
 40043f0:	18c7883a 	add	r3,r3,r3
 40043f4:	293ffb36 	bltu	r5,r4,40043e4 <__alt_data_end+0xfc0043e4>
 40043f8:	18000526 	beq	r3,zero,4004410 <__modsi3+0x4c>
 40043fc:	1806d07a 	srli	r3,r3,1
 4004400:	11400136 	bltu	r2,r5,4004408 <__modsi3+0x44>
 4004404:	1145c83a 	sub	r2,r2,r5
 4004408:	280ad07a 	srli	r5,r5,1
 400440c:	183ffb1e 	bne	r3,zero,40043fc <__alt_data_end+0xfc0043fc>
 4004410:	38000126 	beq	r7,zero,4004418 <__modsi3+0x54>
 4004414:	0085c83a 	sub	r2,zero,r2
 4004418:	f800283a 	ret
 400441c:	014bc83a 	sub	r5,zero,r5
 4004420:	003fec06 	br	40043d4 <__alt_data_end+0xfc0043d4>
 4004424:	0109c83a 	sub	r4,zero,r4
 4004428:	01c00044 	movi	r7,1
 400442c:	003fe706 	br	40043cc <__alt_data_end+0xfc0043cc>
 4004430:	00c00044 	movi	r3,1
 4004434:	003ff106 	br	40043fc <__alt_data_end+0xfc0043fc>

04004438 <__udivsi3>:
 4004438:	200d883a 	mov	r6,r4
 400443c:	2900152e 	bgeu	r5,r4,4004494 <__udivsi3+0x5c>
 4004440:	28001416 	blt	r5,zero,4004494 <__udivsi3+0x5c>
 4004444:	00800804 	movi	r2,32
 4004448:	00c00044 	movi	r3,1
 400444c:	00000206 	br	4004458 <__udivsi3+0x20>
 4004450:	10000e26 	beq	r2,zero,400448c <__udivsi3+0x54>
 4004454:	28000516 	blt	r5,zero,400446c <__udivsi3+0x34>
 4004458:	294b883a 	add	r5,r5,r5
 400445c:	10bfffc4 	addi	r2,r2,-1
 4004460:	18c7883a 	add	r3,r3,r3
 4004464:	293ffa36 	bltu	r5,r4,4004450 <__alt_data_end+0xfc004450>
 4004468:	18000826 	beq	r3,zero,400448c <__udivsi3+0x54>
 400446c:	0005883a 	mov	r2,zero
 4004470:	31400236 	bltu	r6,r5,400447c <__udivsi3+0x44>
 4004474:	314dc83a 	sub	r6,r6,r5
 4004478:	10c4b03a 	or	r2,r2,r3
 400447c:	1806d07a 	srli	r3,r3,1
 4004480:	280ad07a 	srli	r5,r5,1
 4004484:	183ffa1e 	bne	r3,zero,4004470 <__alt_data_end+0xfc004470>
 4004488:	f800283a 	ret
 400448c:	0005883a 	mov	r2,zero
 4004490:	f800283a 	ret
 4004494:	00c00044 	movi	r3,1
 4004498:	003ff406 	br	400446c <__alt_data_end+0xfc00446c>

0400449c <__umodsi3>:
 400449c:	2005883a 	mov	r2,r4
 40044a0:	2900122e 	bgeu	r5,r4,40044ec <__umodsi3+0x50>
 40044a4:	28001116 	blt	r5,zero,40044ec <__umodsi3+0x50>
 40044a8:	01800804 	movi	r6,32
 40044ac:	00c00044 	movi	r3,1
 40044b0:	00000206 	br	40044bc <__umodsi3+0x20>
 40044b4:	30000c26 	beq	r6,zero,40044e8 <__umodsi3+0x4c>
 40044b8:	28000516 	blt	r5,zero,40044d0 <__umodsi3+0x34>
 40044bc:	294b883a 	add	r5,r5,r5
 40044c0:	31bfffc4 	addi	r6,r6,-1
 40044c4:	18c7883a 	add	r3,r3,r3
 40044c8:	293ffa36 	bltu	r5,r4,40044b4 <__alt_data_end+0xfc0044b4>
 40044cc:	18000626 	beq	r3,zero,40044e8 <__umodsi3+0x4c>
 40044d0:	1806d07a 	srli	r3,r3,1
 40044d4:	11400136 	bltu	r2,r5,40044dc <__umodsi3+0x40>
 40044d8:	1145c83a 	sub	r2,r2,r5
 40044dc:	280ad07a 	srli	r5,r5,1
 40044e0:	183ffb1e 	bne	r3,zero,40044d0 <__alt_data_end+0xfc0044d0>
 40044e4:	f800283a 	ret
 40044e8:	f800283a 	ret
 40044ec:	00c00044 	movi	r3,1
 40044f0:	003ff706 	br	40044d0 <__alt_data_end+0xfc0044d0>

040044f4 <__mulsi3>:
 40044f4:	0005883a 	mov	r2,zero
 40044f8:	20000726 	beq	r4,zero,4004518 <__mulsi3+0x24>
 40044fc:	20c0004c 	andi	r3,r4,1
 4004500:	2008d07a 	srli	r4,r4,1
 4004504:	18000126 	beq	r3,zero,400450c <__mulsi3+0x18>
 4004508:	1145883a 	add	r2,r2,r5
 400450c:	294b883a 	add	r5,r5,r5
 4004510:	203ffa1e 	bne	r4,zero,40044fc <__alt_data_end+0xfc0044fc>
 4004514:	f800283a 	ret
 4004518:	f800283a 	ret

0400451c <calloc>:
 400451c:	008100b4 	movhi	r2,1026
 4004520:	10a16104 	addi	r2,r2,-31356
 4004524:	280d883a 	mov	r6,r5
 4004528:	200b883a 	mov	r5,r4
 400452c:	11000017 	ldw	r4,0(r2)
 4004530:	40045341 	jmpi	4004534 <_calloc_r>

04004534 <_calloc_r>:
 4004534:	defffe04 	addi	sp,sp,-8
 4004538:	2805883a 	mov	r2,r5
 400453c:	dc000015 	stw	r16,0(sp)
 4004540:	300b883a 	mov	r5,r6
 4004544:	2021883a 	mov	r16,r4
 4004548:	1009883a 	mov	r4,r2
 400454c:	dfc00115 	stw	ra,4(sp)
 4004550:	40044f40 	call	40044f4 <__mulsi3>
 4004554:	100b883a 	mov	r5,r2
 4004558:	8009883a 	mov	r4,r16
 400455c:	40046100 	call	4004610 <_malloc_r>
 4004560:	10002926 	beq	r2,zero,4004608 <_calloc_r+0xd4>
 4004564:	11bfff17 	ldw	r6,-4(r2)
 4004568:	1021883a 	mov	r16,r2
 400456c:	00bfff04 	movi	r2,-4
 4004570:	308c703a 	and	r6,r6,r2
 4004574:	00c00904 	movi	r3,36
 4004578:	308d883a 	add	r6,r6,r2
 400457c:	19801636 	bltu	r3,r6,40045d8 <_calloc_r+0xa4>
 4004580:	008004c4 	movi	r2,19
 4004584:	11800b2e 	bgeu	r2,r6,40045b4 <_calloc_r+0x80>
 4004588:	80000015 	stw	zero,0(r16)
 400458c:	80000115 	stw	zero,4(r16)
 4004590:	008006c4 	movi	r2,27
 4004594:	11801a2e 	bgeu	r2,r6,4004600 <_calloc_r+0xcc>
 4004598:	80000215 	stw	zero,8(r16)
 400459c:	80000315 	stw	zero,12(r16)
 40045a0:	30c0151e 	bne	r6,r3,40045f8 <_calloc_r+0xc4>
 40045a4:	80000415 	stw	zero,16(r16)
 40045a8:	80800604 	addi	r2,r16,24
 40045ac:	80000515 	stw	zero,20(r16)
 40045b0:	00000106 	br	40045b8 <_calloc_r+0x84>
 40045b4:	8005883a 	mov	r2,r16
 40045b8:	10000015 	stw	zero,0(r2)
 40045bc:	10000115 	stw	zero,4(r2)
 40045c0:	10000215 	stw	zero,8(r2)
 40045c4:	8005883a 	mov	r2,r16
 40045c8:	dfc00117 	ldw	ra,4(sp)
 40045cc:	dc000017 	ldw	r16,0(sp)
 40045d0:	dec00204 	addi	sp,sp,8
 40045d4:	f800283a 	ret
 40045d8:	000b883a 	mov	r5,zero
 40045dc:	8009883a 	mov	r4,r16
 40045e0:	4004f640 	call	4004f64 <memset>
 40045e4:	8005883a 	mov	r2,r16
 40045e8:	dfc00117 	ldw	ra,4(sp)
 40045ec:	dc000017 	ldw	r16,0(sp)
 40045f0:	dec00204 	addi	sp,sp,8
 40045f4:	f800283a 	ret
 40045f8:	80800404 	addi	r2,r16,16
 40045fc:	003fee06 	br	40045b8 <__alt_data_end+0xfc0045b8>
 4004600:	80800204 	addi	r2,r16,8
 4004604:	003fec06 	br	40045b8 <__alt_data_end+0xfc0045b8>
 4004608:	0005883a 	mov	r2,zero
 400460c:	003fee06 	br	40045c8 <__alt_data_end+0xfc0045c8>

04004610 <_malloc_r>:
 4004610:	defff504 	addi	sp,sp,-44
 4004614:	dc800315 	stw	r18,12(sp)
 4004618:	dfc00a15 	stw	ra,40(sp)
 400461c:	df000915 	stw	fp,36(sp)
 4004620:	ddc00815 	stw	r23,32(sp)
 4004624:	dd800715 	stw	r22,28(sp)
 4004628:	dd400615 	stw	r21,24(sp)
 400462c:	dd000515 	stw	r20,20(sp)
 4004630:	dcc00415 	stw	r19,16(sp)
 4004634:	dc400215 	stw	r17,8(sp)
 4004638:	dc000115 	stw	r16,4(sp)
 400463c:	288002c4 	addi	r2,r5,11
 4004640:	00c00584 	movi	r3,22
 4004644:	2025883a 	mov	r18,r4
 4004648:	18807f2e 	bgeu	r3,r2,4004848 <_malloc_r+0x238>
 400464c:	047ffe04 	movi	r17,-8
 4004650:	1462703a 	and	r17,r2,r17
 4004654:	8800a316 	blt	r17,zero,40048e4 <_malloc_r+0x2d4>
 4004658:	8940a236 	bltu	r17,r5,40048e4 <_malloc_r+0x2d4>
 400465c:	40119bc0 	call	40119bc <__malloc_lock>
 4004660:	00807dc4 	movi	r2,503
 4004664:	1441e92e 	bgeu	r2,r17,4004e0c <_malloc_r+0x7fc>
 4004668:	8804d27a 	srli	r2,r17,9
 400466c:	1000a126 	beq	r2,zero,40048f4 <_malloc_r+0x2e4>
 4004670:	00c00104 	movi	r3,4
 4004674:	18811e36 	bltu	r3,r2,4004af0 <_malloc_r+0x4e0>
 4004678:	8804d1ba 	srli	r2,r17,6
 400467c:	12000e44 	addi	r8,r2,57
 4004680:	11c00e04 	addi	r7,r2,56
 4004684:	4209883a 	add	r4,r8,r8
 4004688:	04c10074 	movhi	r19,1025
 400468c:	2109883a 	add	r4,r4,r4
 4004690:	9cdb9704 	addi	r19,r19,28252
 4004694:	2109883a 	add	r4,r4,r4
 4004698:	9909883a 	add	r4,r19,r4
 400469c:	24000117 	ldw	r16,4(r4)
 40046a0:	213ffe04 	addi	r4,r4,-8
 40046a4:	24009726 	beq	r4,r16,4004904 <_malloc_r+0x2f4>
 40046a8:	80800117 	ldw	r2,4(r16)
 40046ac:	01bfff04 	movi	r6,-4
 40046b0:	014003c4 	movi	r5,15
 40046b4:	1184703a 	and	r2,r2,r6
 40046b8:	1447c83a 	sub	r3,r2,r17
 40046bc:	28c00716 	blt	r5,r3,40046dc <_malloc_r+0xcc>
 40046c0:	1800920e 	bge	r3,zero,400490c <_malloc_r+0x2fc>
 40046c4:	84000317 	ldw	r16,12(r16)
 40046c8:	24008e26 	beq	r4,r16,4004904 <_malloc_r+0x2f4>
 40046cc:	80800117 	ldw	r2,4(r16)
 40046d0:	1184703a 	and	r2,r2,r6
 40046d4:	1447c83a 	sub	r3,r2,r17
 40046d8:	28fff90e 	bge	r5,r3,40046c0 <__alt_data_end+0xfc0046c0>
 40046dc:	3809883a 	mov	r4,r7
 40046e0:	01810074 	movhi	r6,1025
 40046e4:	9c000417 	ldw	r16,16(r19)
 40046e8:	319b9704 	addi	r6,r6,28252
 40046ec:	32000204 	addi	r8,r6,8
 40046f0:	82013426 	beq	r16,r8,4004bc4 <_malloc_r+0x5b4>
 40046f4:	80c00117 	ldw	r3,4(r16)
 40046f8:	00bfff04 	movi	r2,-4
 40046fc:	188e703a 	and	r7,r3,r2
 4004700:	3c45c83a 	sub	r2,r7,r17
 4004704:	00c003c4 	movi	r3,15
 4004708:	18811f16 	blt	r3,r2,4004b88 <_malloc_r+0x578>
 400470c:	32000515 	stw	r8,20(r6)
 4004710:	32000415 	stw	r8,16(r6)
 4004714:	10007f0e 	bge	r2,zero,4004914 <_malloc_r+0x304>
 4004718:	00807fc4 	movi	r2,511
 400471c:	11c0fd36 	bltu	r2,r7,4004b14 <_malloc_r+0x504>
 4004720:	3806d0fa 	srli	r3,r7,3
 4004724:	01c00044 	movi	r7,1
 4004728:	30800117 	ldw	r2,4(r6)
 400472c:	19400044 	addi	r5,r3,1
 4004730:	294b883a 	add	r5,r5,r5
 4004734:	1807d0ba 	srai	r3,r3,2
 4004738:	294b883a 	add	r5,r5,r5
 400473c:	294b883a 	add	r5,r5,r5
 4004740:	298b883a 	add	r5,r5,r6
 4004744:	38c6983a 	sll	r3,r7,r3
 4004748:	29c00017 	ldw	r7,0(r5)
 400474c:	2a7ffe04 	addi	r9,r5,-8
 4004750:	1886b03a 	or	r3,r3,r2
 4004754:	82400315 	stw	r9,12(r16)
 4004758:	81c00215 	stw	r7,8(r16)
 400475c:	30c00115 	stw	r3,4(r6)
 4004760:	2c000015 	stw	r16,0(r5)
 4004764:	3c000315 	stw	r16,12(r7)
 4004768:	2005d0ba 	srai	r2,r4,2
 400476c:	01400044 	movi	r5,1
 4004770:	288a983a 	sll	r5,r5,r2
 4004774:	19406f36 	bltu	r3,r5,4004934 <_malloc_r+0x324>
 4004778:	28c4703a 	and	r2,r5,r3
 400477c:	10000a1e 	bne	r2,zero,40047a8 <_malloc_r+0x198>
 4004780:	00bfff04 	movi	r2,-4
 4004784:	294b883a 	add	r5,r5,r5
 4004788:	2088703a 	and	r4,r4,r2
 400478c:	28c4703a 	and	r2,r5,r3
 4004790:	21000104 	addi	r4,r4,4
 4004794:	1000041e 	bne	r2,zero,40047a8 <_malloc_r+0x198>
 4004798:	294b883a 	add	r5,r5,r5
 400479c:	28c4703a 	and	r2,r5,r3
 40047a0:	21000104 	addi	r4,r4,4
 40047a4:	103ffc26 	beq	r2,zero,4004798 <__alt_data_end+0xfc004798>
 40047a8:	02bfff04 	movi	r10,-4
 40047ac:	024003c4 	movi	r9,15
 40047b0:	21800044 	addi	r6,r4,1
 40047b4:	318d883a 	add	r6,r6,r6
 40047b8:	318d883a 	add	r6,r6,r6
 40047bc:	318d883a 	add	r6,r6,r6
 40047c0:	998d883a 	add	r6,r19,r6
 40047c4:	333ffe04 	addi	r12,r6,-8
 40047c8:	2017883a 	mov	r11,r4
 40047cc:	31800104 	addi	r6,r6,4
 40047d0:	34000017 	ldw	r16,0(r6)
 40047d4:	31fffd04 	addi	r7,r6,-12
 40047d8:	81c0041e 	bne	r16,r7,40047ec <_malloc_r+0x1dc>
 40047dc:	0000fb06 	br	4004bcc <_malloc_r+0x5bc>
 40047e0:	1801030e 	bge	r3,zero,4004bf0 <_malloc_r+0x5e0>
 40047e4:	84000317 	ldw	r16,12(r16)
 40047e8:	81c0f826 	beq	r16,r7,4004bcc <_malloc_r+0x5bc>
 40047ec:	80800117 	ldw	r2,4(r16)
 40047f0:	1284703a 	and	r2,r2,r10
 40047f4:	1447c83a 	sub	r3,r2,r17
 40047f8:	48fff90e 	bge	r9,r3,40047e0 <__alt_data_end+0xfc0047e0>
 40047fc:	80800317 	ldw	r2,12(r16)
 4004800:	81000217 	ldw	r4,8(r16)
 4004804:	89400054 	ori	r5,r17,1
 4004808:	81400115 	stw	r5,4(r16)
 400480c:	20800315 	stw	r2,12(r4)
 4004810:	11000215 	stw	r4,8(r2)
 4004814:	8463883a 	add	r17,r16,r17
 4004818:	9c400515 	stw	r17,20(r19)
 400481c:	9c400415 	stw	r17,16(r19)
 4004820:	18800054 	ori	r2,r3,1
 4004824:	88800115 	stw	r2,4(r17)
 4004828:	8a000315 	stw	r8,12(r17)
 400482c:	8a000215 	stw	r8,8(r17)
 4004830:	88e3883a 	add	r17,r17,r3
 4004834:	88c00015 	stw	r3,0(r17)
 4004838:	9009883a 	mov	r4,r18
 400483c:	40119e00 	call	40119e0 <__malloc_unlock>
 4004840:	80800204 	addi	r2,r16,8
 4004844:	00001b06 	br	40048b4 <_malloc_r+0x2a4>
 4004848:	04400404 	movi	r17,16
 400484c:	89402536 	bltu	r17,r5,40048e4 <_malloc_r+0x2d4>
 4004850:	40119bc0 	call	40119bc <__malloc_lock>
 4004854:	00800184 	movi	r2,6
 4004858:	01000084 	movi	r4,2
 400485c:	04c10074 	movhi	r19,1025
 4004860:	1085883a 	add	r2,r2,r2
 4004864:	9cdb9704 	addi	r19,r19,28252
 4004868:	1085883a 	add	r2,r2,r2
 400486c:	9885883a 	add	r2,r19,r2
 4004870:	14000117 	ldw	r16,4(r2)
 4004874:	10fffe04 	addi	r3,r2,-8
 4004878:	80c0d926 	beq	r16,r3,4004be0 <_malloc_r+0x5d0>
 400487c:	80c00117 	ldw	r3,4(r16)
 4004880:	81000317 	ldw	r4,12(r16)
 4004884:	00bfff04 	movi	r2,-4
 4004888:	1884703a 	and	r2,r3,r2
 400488c:	81400217 	ldw	r5,8(r16)
 4004890:	8085883a 	add	r2,r16,r2
 4004894:	10c00117 	ldw	r3,4(r2)
 4004898:	29000315 	stw	r4,12(r5)
 400489c:	21400215 	stw	r5,8(r4)
 40048a0:	18c00054 	ori	r3,r3,1
 40048a4:	10c00115 	stw	r3,4(r2)
 40048a8:	9009883a 	mov	r4,r18
 40048ac:	40119e00 	call	40119e0 <__malloc_unlock>
 40048b0:	80800204 	addi	r2,r16,8
 40048b4:	dfc00a17 	ldw	ra,40(sp)
 40048b8:	df000917 	ldw	fp,36(sp)
 40048bc:	ddc00817 	ldw	r23,32(sp)
 40048c0:	dd800717 	ldw	r22,28(sp)
 40048c4:	dd400617 	ldw	r21,24(sp)
 40048c8:	dd000517 	ldw	r20,20(sp)
 40048cc:	dcc00417 	ldw	r19,16(sp)
 40048d0:	dc800317 	ldw	r18,12(sp)
 40048d4:	dc400217 	ldw	r17,8(sp)
 40048d8:	dc000117 	ldw	r16,4(sp)
 40048dc:	dec00b04 	addi	sp,sp,44
 40048e0:	f800283a 	ret
 40048e4:	00800304 	movi	r2,12
 40048e8:	90800015 	stw	r2,0(r18)
 40048ec:	0005883a 	mov	r2,zero
 40048f0:	003ff006 	br	40048b4 <__alt_data_end+0xfc0048b4>
 40048f4:	01002004 	movi	r4,128
 40048f8:	02001004 	movi	r8,64
 40048fc:	01c00fc4 	movi	r7,63
 4004900:	003f6106 	br	4004688 <__alt_data_end+0xfc004688>
 4004904:	4009883a 	mov	r4,r8
 4004908:	003f7506 	br	40046e0 <__alt_data_end+0xfc0046e0>
 400490c:	81000317 	ldw	r4,12(r16)
 4004910:	003fde06 	br	400488c <__alt_data_end+0xfc00488c>
 4004914:	81c5883a 	add	r2,r16,r7
 4004918:	11400117 	ldw	r5,4(r2)
 400491c:	9009883a 	mov	r4,r18
 4004920:	29400054 	ori	r5,r5,1
 4004924:	11400115 	stw	r5,4(r2)
 4004928:	40119e00 	call	40119e0 <__malloc_unlock>
 400492c:	80800204 	addi	r2,r16,8
 4004930:	003fe006 	br	40048b4 <__alt_data_end+0xfc0048b4>
 4004934:	9c000217 	ldw	r16,8(r19)
 4004938:	00bfff04 	movi	r2,-4
 400493c:	85800117 	ldw	r22,4(r16)
 4004940:	b0ac703a 	and	r22,r22,r2
 4004944:	b4400336 	bltu	r22,r17,4004954 <_malloc_r+0x344>
 4004948:	b445c83a 	sub	r2,r22,r17
 400494c:	00c003c4 	movi	r3,15
 4004950:	18805d16 	blt	r3,r2,4004ac8 <_malloc_r+0x4b8>
 4004954:	05c100b4 	movhi	r23,1026
 4004958:	008100b4 	movhi	r2,1026
 400495c:	10a87c04 	addi	r2,r2,-24080
 4004960:	bde16204 	addi	r23,r23,-31352
 4004964:	15400017 	ldw	r21,0(r2)
 4004968:	b8c00017 	ldw	r3,0(r23)
 400496c:	00bfffc4 	movi	r2,-1
 4004970:	858d883a 	add	r6,r16,r22
 4004974:	8d6b883a 	add	r21,r17,r21
 4004978:	1880ea26 	beq	r3,r2,4004d24 <_malloc_r+0x714>
 400497c:	ad4403c4 	addi	r21,r21,4111
 4004980:	00bc0004 	movi	r2,-4096
 4004984:	a8aa703a 	and	r21,r21,r2
 4004988:	a80b883a 	mov	r5,r21
 400498c:	9009883a 	mov	r4,r18
 4004990:	d9800015 	stw	r6,0(sp)
 4004994:	40051ec0 	call	40051ec <_sbrk_r>
 4004998:	1029883a 	mov	r20,r2
 400499c:	00bfffc4 	movi	r2,-1
 40049a0:	d9800017 	ldw	r6,0(sp)
 40049a4:	a080e826 	beq	r20,r2,4004d48 <_malloc_r+0x738>
 40049a8:	a180a636 	bltu	r20,r6,4004c44 <_malloc_r+0x634>
 40049ac:	070100b4 	movhi	fp,1026
 40049b0:	e7288804 	addi	fp,fp,-24032
 40049b4:	e0800017 	ldw	r2,0(fp)
 40049b8:	a887883a 	add	r3,r21,r2
 40049bc:	e0c00015 	stw	r3,0(fp)
 40049c0:	3500e626 	beq	r6,r20,4004d5c <_malloc_r+0x74c>
 40049c4:	b9000017 	ldw	r4,0(r23)
 40049c8:	00bfffc4 	movi	r2,-1
 40049cc:	2080ee26 	beq	r4,r2,4004d88 <_malloc_r+0x778>
 40049d0:	a185c83a 	sub	r2,r20,r6
 40049d4:	10c5883a 	add	r2,r2,r3
 40049d8:	e0800015 	stw	r2,0(fp)
 40049dc:	a0c001cc 	andi	r3,r20,7
 40049e0:	1800bc26 	beq	r3,zero,4004cd4 <_malloc_r+0x6c4>
 40049e4:	a0e9c83a 	sub	r20,r20,r3
 40049e8:	00840204 	movi	r2,4104
 40049ec:	a5000204 	addi	r20,r20,8
 40049f0:	10c7c83a 	sub	r3,r2,r3
 40049f4:	a545883a 	add	r2,r20,r21
 40049f8:	1083ffcc 	andi	r2,r2,4095
 40049fc:	18abc83a 	sub	r21,r3,r2
 4004a00:	a80b883a 	mov	r5,r21
 4004a04:	9009883a 	mov	r4,r18
 4004a08:	40051ec0 	call	40051ec <_sbrk_r>
 4004a0c:	00ffffc4 	movi	r3,-1
 4004a10:	10c0e126 	beq	r2,r3,4004d98 <_malloc_r+0x788>
 4004a14:	1505c83a 	sub	r2,r2,r20
 4004a18:	1545883a 	add	r2,r2,r21
 4004a1c:	10800054 	ori	r2,r2,1
 4004a20:	e0c00017 	ldw	r3,0(fp)
 4004a24:	9d000215 	stw	r20,8(r19)
 4004a28:	a0800115 	stw	r2,4(r20)
 4004a2c:	a8c7883a 	add	r3,r21,r3
 4004a30:	e0c00015 	stw	r3,0(fp)
 4004a34:	84c00e26 	beq	r16,r19,4004a70 <_malloc_r+0x460>
 4004a38:	018003c4 	movi	r6,15
 4004a3c:	3580a72e 	bgeu	r6,r22,4004cdc <_malloc_r+0x6cc>
 4004a40:	81400117 	ldw	r5,4(r16)
 4004a44:	013ffe04 	movi	r4,-8
 4004a48:	b0bffd04 	addi	r2,r22,-12
 4004a4c:	1104703a 	and	r2,r2,r4
 4004a50:	2900004c 	andi	r4,r5,1
 4004a54:	2088b03a 	or	r4,r4,r2
 4004a58:	81000115 	stw	r4,4(r16)
 4004a5c:	01400144 	movi	r5,5
 4004a60:	8089883a 	add	r4,r16,r2
 4004a64:	21400115 	stw	r5,4(r4)
 4004a68:	21400215 	stw	r5,8(r4)
 4004a6c:	3080cd36 	bltu	r6,r2,4004da4 <_malloc_r+0x794>
 4004a70:	008100b4 	movhi	r2,1026
 4004a74:	10a87b04 	addi	r2,r2,-24084
 4004a78:	11000017 	ldw	r4,0(r2)
 4004a7c:	20c0012e 	bgeu	r4,r3,4004a84 <_malloc_r+0x474>
 4004a80:	10c00015 	stw	r3,0(r2)
 4004a84:	008100b4 	movhi	r2,1026
 4004a88:	10a87a04 	addi	r2,r2,-24088
 4004a8c:	11000017 	ldw	r4,0(r2)
 4004a90:	9c000217 	ldw	r16,8(r19)
 4004a94:	20c0012e 	bgeu	r4,r3,4004a9c <_malloc_r+0x48c>
 4004a98:	10c00015 	stw	r3,0(r2)
 4004a9c:	80c00117 	ldw	r3,4(r16)
 4004aa0:	00bfff04 	movi	r2,-4
 4004aa4:	1886703a 	and	r3,r3,r2
 4004aa8:	1c45c83a 	sub	r2,r3,r17
 4004aac:	1c400236 	bltu	r3,r17,4004ab8 <_malloc_r+0x4a8>
 4004ab0:	00c003c4 	movi	r3,15
 4004ab4:	18800416 	blt	r3,r2,4004ac8 <_malloc_r+0x4b8>
 4004ab8:	9009883a 	mov	r4,r18
 4004abc:	40119e00 	call	40119e0 <__malloc_unlock>
 4004ac0:	0005883a 	mov	r2,zero
 4004ac4:	003f7b06 	br	40048b4 <__alt_data_end+0xfc0048b4>
 4004ac8:	88c00054 	ori	r3,r17,1
 4004acc:	80c00115 	stw	r3,4(r16)
 4004ad0:	8463883a 	add	r17,r16,r17
 4004ad4:	10800054 	ori	r2,r2,1
 4004ad8:	9c400215 	stw	r17,8(r19)
 4004adc:	88800115 	stw	r2,4(r17)
 4004ae0:	9009883a 	mov	r4,r18
 4004ae4:	40119e00 	call	40119e0 <__malloc_unlock>
 4004ae8:	80800204 	addi	r2,r16,8
 4004aec:	003f7106 	br	40048b4 <__alt_data_end+0xfc0048b4>
 4004af0:	00c00504 	movi	r3,20
 4004af4:	18804a2e 	bgeu	r3,r2,4004c20 <_malloc_r+0x610>
 4004af8:	00c01504 	movi	r3,84
 4004afc:	18806e36 	bltu	r3,r2,4004cb8 <_malloc_r+0x6a8>
 4004b00:	8804d33a 	srli	r2,r17,12
 4004b04:	12001bc4 	addi	r8,r2,111
 4004b08:	11c01b84 	addi	r7,r2,110
 4004b0c:	4209883a 	add	r4,r8,r8
 4004b10:	003edd06 	br	4004688 <__alt_data_end+0xfc004688>
 4004b14:	3804d27a 	srli	r2,r7,9
 4004b18:	00c00104 	movi	r3,4
 4004b1c:	1880442e 	bgeu	r3,r2,4004c30 <_malloc_r+0x620>
 4004b20:	00c00504 	movi	r3,20
 4004b24:	18808136 	bltu	r3,r2,4004d2c <_malloc_r+0x71c>
 4004b28:	11401704 	addi	r5,r2,92
 4004b2c:	10c016c4 	addi	r3,r2,91
 4004b30:	294b883a 	add	r5,r5,r5
 4004b34:	294b883a 	add	r5,r5,r5
 4004b38:	294b883a 	add	r5,r5,r5
 4004b3c:	994b883a 	add	r5,r19,r5
 4004b40:	28800017 	ldw	r2,0(r5)
 4004b44:	01810074 	movhi	r6,1025
 4004b48:	297ffe04 	addi	r5,r5,-8
 4004b4c:	319b9704 	addi	r6,r6,28252
 4004b50:	28806526 	beq	r5,r2,4004ce8 <_malloc_r+0x6d8>
 4004b54:	01bfff04 	movi	r6,-4
 4004b58:	10c00117 	ldw	r3,4(r2)
 4004b5c:	1986703a 	and	r3,r3,r6
 4004b60:	38c0022e 	bgeu	r7,r3,4004b6c <_malloc_r+0x55c>
 4004b64:	10800217 	ldw	r2,8(r2)
 4004b68:	28bffb1e 	bne	r5,r2,4004b58 <__alt_data_end+0xfc004b58>
 4004b6c:	11400317 	ldw	r5,12(r2)
 4004b70:	98c00117 	ldw	r3,4(r19)
 4004b74:	81400315 	stw	r5,12(r16)
 4004b78:	80800215 	stw	r2,8(r16)
 4004b7c:	2c000215 	stw	r16,8(r5)
 4004b80:	14000315 	stw	r16,12(r2)
 4004b84:	003ef806 	br	4004768 <__alt_data_end+0xfc004768>
 4004b88:	88c00054 	ori	r3,r17,1
 4004b8c:	80c00115 	stw	r3,4(r16)
 4004b90:	8463883a 	add	r17,r16,r17
 4004b94:	34400515 	stw	r17,20(r6)
 4004b98:	34400415 	stw	r17,16(r6)
 4004b9c:	10c00054 	ori	r3,r2,1
 4004ba0:	8a000315 	stw	r8,12(r17)
 4004ba4:	8a000215 	stw	r8,8(r17)
 4004ba8:	88c00115 	stw	r3,4(r17)
 4004bac:	88a3883a 	add	r17,r17,r2
 4004bb0:	88800015 	stw	r2,0(r17)
 4004bb4:	9009883a 	mov	r4,r18
 4004bb8:	40119e00 	call	40119e0 <__malloc_unlock>
 4004bbc:	80800204 	addi	r2,r16,8
 4004bc0:	003f3c06 	br	40048b4 <__alt_data_end+0xfc0048b4>
 4004bc4:	30c00117 	ldw	r3,4(r6)
 4004bc8:	003ee706 	br	4004768 <__alt_data_end+0xfc004768>
 4004bcc:	5ac00044 	addi	r11,r11,1
 4004bd0:	588000cc 	andi	r2,r11,3
 4004bd4:	31800204 	addi	r6,r6,8
 4004bd8:	103efd1e 	bne	r2,zero,40047d0 <__alt_data_end+0xfc0047d0>
 4004bdc:	00002406 	br	4004c70 <_malloc_r+0x660>
 4004be0:	14000317 	ldw	r16,12(r2)
 4004be4:	143f251e 	bne	r2,r16,400487c <__alt_data_end+0xfc00487c>
 4004be8:	21000084 	addi	r4,r4,2
 4004bec:	003ebc06 	br	40046e0 <__alt_data_end+0xfc0046e0>
 4004bf0:	8085883a 	add	r2,r16,r2
 4004bf4:	10c00117 	ldw	r3,4(r2)
 4004bf8:	81000317 	ldw	r4,12(r16)
 4004bfc:	81400217 	ldw	r5,8(r16)
 4004c00:	18c00054 	ori	r3,r3,1
 4004c04:	10c00115 	stw	r3,4(r2)
 4004c08:	29000315 	stw	r4,12(r5)
 4004c0c:	21400215 	stw	r5,8(r4)
 4004c10:	9009883a 	mov	r4,r18
 4004c14:	40119e00 	call	40119e0 <__malloc_unlock>
 4004c18:	80800204 	addi	r2,r16,8
 4004c1c:	003f2506 	br	40048b4 <__alt_data_end+0xfc0048b4>
 4004c20:	12001704 	addi	r8,r2,92
 4004c24:	11c016c4 	addi	r7,r2,91
 4004c28:	4209883a 	add	r4,r8,r8
 4004c2c:	003e9606 	br	4004688 <__alt_data_end+0xfc004688>
 4004c30:	3804d1ba 	srli	r2,r7,6
 4004c34:	11400e44 	addi	r5,r2,57
 4004c38:	10c00e04 	addi	r3,r2,56
 4004c3c:	294b883a 	add	r5,r5,r5
 4004c40:	003fbc06 	br	4004b34 <__alt_data_end+0xfc004b34>
 4004c44:	84ff5926 	beq	r16,r19,40049ac <__alt_data_end+0xfc0049ac>
 4004c48:	00810074 	movhi	r2,1025
 4004c4c:	109b9704 	addi	r2,r2,28252
 4004c50:	14000217 	ldw	r16,8(r2)
 4004c54:	00bfff04 	movi	r2,-4
 4004c58:	80c00117 	ldw	r3,4(r16)
 4004c5c:	1886703a 	and	r3,r3,r2
 4004c60:	003f9106 	br	4004aa8 <__alt_data_end+0xfc004aa8>
 4004c64:	60800217 	ldw	r2,8(r12)
 4004c68:	213fffc4 	addi	r4,r4,-1
 4004c6c:	1300651e 	bne	r2,r12,4004e04 <_malloc_r+0x7f4>
 4004c70:	208000cc 	andi	r2,r4,3
 4004c74:	633ffe04 	addi	r12,r12,-8
 4004c78:	103ffa1e 	bne	r2,zero,4004c64 <__alt_data_end+0xfc004c64>
 4004c7c:	98800117 	ldw	r2,4(r19)
 4004c80:	0146303a 	nor	r3,zero,r5
 4004c84:	1884703a 	and	r2,r3,r2
 4004c88:	98800115 	stw	r2,4(r19)
 4004c8c:	294b883a 	add	r5,r5,r5
 4004c90:	117f2836 	bltu	r2,r5,4004934 <__alt_data_end+0xfc004934>
 4004c94:	283f2726 	beq	r5,zero,4004934 <__alt_data_end+0xfc004934>
 4004c98:	2886703a 	and	r3,r5,r2
 4004c9c:	5809883a 	mov	r4,r11
 4004ca0:	183ec31e 	bne	r3,zero,40047b0 <__alt_data_end+0xfc0047b0>
 4004ca4:	294b883a 	add	r5,r5,r5
 4004ca8:	2886703a 	and	r3,r5,r2
 4004cac:	21000104 	addi	r4,r4,4
 4004cb0:	183ffc26 	beq	r3,zero,4004ca4 <__alt_data_end+0xfc004ca4>
 4004cb4:	003ebe06 	br	40047b0 <__alt_data_end+0xfc0047b0>
 4004cb8:	00c05504 	movi	r3,340
 4004cbc:	18801236 	bltu	r3,r2,4004d08 <_malloc_r+0x6f8>
 4004cc0:	8804d3fa 	srli	r2,r17,15
 4004cc4:	12001e04 	addi	r8,r2,120
 4004cc8:	11c01dc4 	addi	r7,r2,119
 4004ccc:	4209883a 	add	r4,r8,r8
 4004cd0:	003e6d06 	br	4004688 <__alt_data_end+0xfc004688>
 4004cd4:	00c40004 	movi	r3,4096
 4004cd8:	003f4606 	br	40049f4 <__alt_data_end+0xfc0049f4>
 4004cdc:	00800044 	movi	r2,1
 4004ce0:	a0800115 	stw	r2,4(r20)
 4004ce4:	003f7406 	br	4004ab8 <__alt_data_end+0xfc004ab8>
 4004ce8:	1805d0ba 	srai	r2,r3,2
 4004cec:	01c00044 	movi	r7,1
 4004cf0:	30c00117 	ldw	r3,4(r6)
 4004cf4:	388e983a 	sll	r7,r7,r2
 4004cf8:	2805883a 	mov	r2,r5
 4004cfc:	38c6b03a 	or	r3,r7,r3
 4004d00:	30c00115 	stw	r3,4(r6)
 4004d04:	003f9b06 	br	4004b74 <__alt_data_end+0xfc004b74>
 4004d08:	00c15504 	movi	r3,1364
 4004d0c:	18801a36 	bltu	r3,r2,4004d78 <_malloc_r+0x768>
 4004d10:	8804d4ba 	srli	r2,r17,18
 4004d14:	12001f44 	addi	r8,r2,125
 4004d18:	11c01f04 	addi	r7,r2,124
 4004d1c:	4209883a 	add	r4,r8,r8
 4004d20:	003e5906 	br	4004688 <__alt_data_end+0xfc004688>
 4004d24:	ad400404 	addi	r21,r21,16
 4004d28:	003f1706 	br	4004988 <__alt_data_end+0xfc004988>
 4004d2c:	00c01504 	movi	r3,84
 4004d30:	18802336 	bltu	r3,r2,4004dc0 <_malloc_r+0x7b0>
 4004d34:	3804d33a 	srli	r2,r7,12
 4004d38:	11401bc4 	addi	r5,r2,111
 4004d3c:	10c01b84 	addi	r3,r2,110
 4004d40:	294b883a 	add	r5,r5,r5
 4004d44:	003f7b06 	br	4004b34 <__alt_data_end+0xfc004b34>
 4004d48:	9c000217 	ldw	r16,8(r19)
 4004d4c:	00bfff04 	movi	r2,-4
 4004d50:	80c00117 	ldw	r3,4(r16)
 4004d54:	1886703a 	and	r3,r3,r2
 4004d58:	003f5306 	br	4004aa8 <__alt_data_end+0xfc004aa8>
 4004d5c:	3083ffcc 	andi	r2,r6,4095
 4004d60:	103f181e 	bne	r2,zero,40049c4 <__alt_data_end+0xfc0049c4>
 4004d64:	99000217 	ldw	r4,8(r19)
 4004d68:	b545883a 	add	r2,r22,r21
 4004d6c:	10800054 	ori	r2,r2,1
 4004d70:	20800115 	stw	r2,4(r4)
 4004d74:	003f3e06 	br	4004a70 <__alt_data_end+0xfc004a70>
 4004d78:	01003f84 	movi	r4,254
 4004d7c:	02001fc4 	movi	r8,127
 4004d80:	01c01f84 	movi	r7,126
 4004d84:	003e4006 	br	4004688 <__alt_data_end+0xfc004688>
 4004d88:	008100b4 	movhi	r2,1026
 4004d8c:	10a16204 	addi	r2,r2,-31352
 4004d90:	15000015 	stw	r20,0(r2)
 4004d94:	003f1106 	br	40049dc <__alt_data_end+0xfc0049dc>
 4004d98:	00800044 	movi	r2,1
 4004d9c:	002b883a 	mov	r21,zero
 4004da0:	003f1f06 	br	4004a20 <__alt_data_end+0xfc004a20>
 4004da4:	81400204 	addi	r5,r16,8
 4004da8:	9009883a 	mov	r4,r18
 4004dac:	400980c0 	call	400980c <_free_r>
 4004db0:	008100b4 	movhi	r2,1026
 4004db4:	10a88804 	addi	r2,r2,-24032
 4004db8:	10c00017 	ldw	r3,0(r2)
 4004dbc:	003f2c06 	br	4004a70 <__alt_data_end+0xfc004a70>
 4004dc0:	00c05504 	movi	r3,340
 4004dc4:	18800536 	bltu	r3,r2,4004ddc <_malloc_r+0x7cc>
 4004dc8:	3804d3fa 	srli	r2,r7,15
 4004dcc:	11401e04 	addi	r5,r2,120
 4004dd0:	10c01dc4 	addi	r3,r2,119
 4004dd4:	294b883a 	add	r5,r5,r5
 4004dd8:	003f5606 	br	4004b34 <__alt_data_end+0xfc004b34>
 4004ddc:	00c15504 	movi	r3,1364
 4004de0:	18800536 	bltu	r3,r2,4004df8 <_malloc_r+0x7e8>
 4004de4:	3804d4ba 	srli	r2,r7,18
 4004de8:	11401f44 	addi	r5,r2,125
 4004dec:	10c01f04 	addi	r3,r2,124
 4004df0:	294b883a 	add	r5,r5,r5
 4004df4:	003f4f06 	br	4004b34 <__alt_data_end+0xfc004b34>
 4004df8:	01403f84 	movi	r5,254
 4004dfc:	00c01f84 	movi	r3,126
 4004e00:	003f4c06 	br	4004b34 <__alt_data_end+0xfc004b34>
 4004e04:	98800117 	ldw	r2,4(r19)
 4004e08:	003fa006 	br	4004c8c <__alt_data_end+0xfc004c8c>
 4004e0c:	8808d0fa 	srli	r4,r17,3
 4004e10:	20800044 	addi	r2,r4,1
 4004e14:	1085883a 	add	r2,r2,r2
 4004e18:	003e9006 	br	400485c <__alt_data_end+0xfc00485c>

04004e1c <memcpy>:
 4004e1c:	defffd04 	addi	sp,sp,-12
 4004e20:	dfc00215 	stw	ra,8(sp)
 4004e24:	dc400115 	stw	r17,4(sp)
 4004e28:	dc000015 	stw	r16,0(sp)
 4004e2c:	00c003c4 	movi	r3,15
 4004e30:	2005883a 	mov	r2,r4
 4004e34:	1980452e 	bgeu	r3,r6,4004f4c <memcpy+0x130>
 4004e38:	2906b03a 	or	r3,r5,r4
 4004e3c:	18c000cc 	andi	r3,r3,3
 4004e40:	1800441e 	bne	r3,zero,4004f54 <memcpy+0x138>
 4004e44:	347ffc04 	addi	r17,r6,-16
 4004e48:	8822d13a 	srli	r17,r17,4
 4004e4c:	28c00104 	addi	r3,r5,4
 4004e50:	23400104 	addi	r13,r4,4
 4004e54:	8820913a 	slli	r16,r17,4
 4004e58:	2b000204 	addi	r12,r5,8
 4004e5c:	22c00204 	addi	r11,r4,8
 4004e60:	84000504 	addi	r16,r16,20
 4004e64:	2a800304 	addi	r10,r5,12
 4004e68:	22400304 	addi	r9,r4,12
 4004e6c:	2c21883a 	add	r16,r5,r16
 4004e70:	2811883a 	mov	r8,r5
 4004e74:	200f883a 	mov	r7,r4
 4004e78:	41000017 	ldw	r4,0(r8)
 4004e7c:	1fc00017 	ldw	ra,0(r3)
 4004e80:	63c00017 	ldw	r15,0(r12)
 4004e84:	39000015 	stw	r4,0(r7)
 4004e88:	53800017 	ldw	r14,0(r10)
 4004e8c:	6fc00015 	stw	ra,0(r13)
 4004e90:	5bc00015 	stw	r15,0(r11)
 4004e94:	4b800015 	stw	r14,0(r9)
 4004e98:	18c00404 	addi	r3,r3,16
 4004e9c:	39c00404 	addi	r7,r7,16
 4004ea0:	42000404 	addi	r8,r8,16
 4004ea4:	6b400404 	addi	r13,r13,16
 4004ea8:	63000404 	addi	r12,r12,16
 4004eac:	5ac00404 	addi	r11,r11,16
 4004eb0:	52800404 	addi	r10,r10,16
 4004eb4:	4a400404 	addi	r9,r9,16
 4004eb8:	1c3fef1e 	bne	r3,r16,4004e78 <__alt_data_end+0xfc004e78>
 4004ebc:	89c00044 	addi	r7,r17,1
 4004ec0:	380e913a 	slli	r7,r7,4
 4004ec4:	310003cc 	andi	r4,r6,15
 4004ec8:	02c000c4 	movi	r11,3
 4004ecc:	11c7883a 	add	r3,r2,r7
 4004ed0:	29cb883a 	add	r5,r5,r7
 4004ed4:	5900212e 	bgeu	r11,r4,4004f5c <memcpy+0x140>
 4004ed8:	1813883a 	mov	r9,r3
 4004edc:	2811883a 	mov	r8,r5
 4004ee0:	200f883a 	mov	r7,r4
 4004ee4:	42800017 	ldw	r10,0(r8)
 4004ee8:	4a400104 	addi	r9,r9,4
 4004eec:	39ffff04 	addi	r7,r7,-4
 4004ef0:	4abfff15 	stw	r10,-4(r9)
 4004ef4:	42000104 	addi	r8,r8,4
 4004ef8:	59fffa36 	bltu	r11,r7,4004ee4 <__alt_data_end+0xfc004ee4>
 4004efc:	213fff04 	addi	r4,r4,-4
 4004f00:	2008d0ba 	srli	r4,r4,2
 4004f04:	318000cc 	andi	r6,r6,3
 4004f08:	21000044 	addi	r4,r4,1
 4004f0c:	2109883a 	add	r4,r4,r4
 4004f10:	2109883a 	add	r4,r4,r4
 4004f14:	1907883a 	add	r3,r3,r4
 4004f18:	290b883a 	add	r5,r5,r4
 4004f1c:	30000626 	beq	r6,zero,4004f38 <memcpy+0x11c>
 4004f20:	198d883a 	add	r6,r3,r6
 4004f24:	29c00003 	ldbu	r7,0(r5)
 4004f28:	18c00044 	addi	r3,r3,1
 4004f2c:	29400044 	addi	r5,r5,1
 4004f30:	19ffffc5 	stb	r7,-1(r3)
 4004f34:	19bffb1e 	bne	r3,r6,4004f24 <__alt_data_end+0xfc004f24>
 4004f38:	dfc00217 	ldw	ra,8(sp)
 4004f3c:	dc400117 	ldw	r17,4(sp)
 4004f40:	dc000017 	ldw	r16,0(sp)
 4004f44:	dec00304 	addi	sp,sp,12
 4004f48:	f800283a 	ret
 4004f4c:	2007883a 	mov	r3,r4
 4004f50:	003ff206 	br	4004f1c <__alt_data_end+0xfc004f1c>
 4004f54:	2007883a 	mov	r3,r4
 4004f58:	003ff106 	br	4004f20 <__alt_data_end+0xfc004f20>
 4004f5c:	200d883a 	mov	r6,r4
 4004f60:	003fee06 	br	4004f1c <__alt_data_end+0xfc004f1c>

04004f64 <memset>:
 4004f64:	20c000cc 	andi	r3,r4,3
 4004f68:	2005883a 	mov	r2,r4
 4004f6c:	18004426 	beq	r3,zero,4005080 <memset+0x11c>
 4004f70:	31ffffc4 	addi	r7,r6,-1
 4004f74:	30004026 	beq	r6,zero,4005078 <memset+0x114>
 4004f78:	2813883a 	mov	r9,r5
 4004f7c:	200d883a 	mov	r6,r4
 4004f80:	2007883a 	mov	r3,r4
 4004f84:	00000406 	br	4004f98 <memset+0x34>
 4004f88:	3a3fffc4 	addi	r8,r7,-1
 4004f8c:	31800044 	addi	r6,r6,1
 4004f90:	38003926 	beq	r7,zero,4005078 <memset+0x114>
 4004f94:	400f883a 	mov	r7,r8
 4004f98:	18c00044 	addi	r3,r3,1
 4004f9c:	32400005 	stb	r9,0(r6)
 4004fa0:	1a0000cc 	andi	r8,r3,3
 4004fa4:	403ff81e 	bne	r8,zero,4004f88 <__alt_data_end+0xfc004f88>
 4004fa8:	010000c4 	movi	r4,3
 4004fac:	21c02d2e 	bgeu	r4,r7,4005064 <memset+0x100>
 4004fb0:	29003fcc 	andi	r4,r5,255
 4004fb4:	200c923a 	slli	r6,r4,8
 4004fb8:	3108b03a 	or	r4,r6,r4
 4004fbc:	200c943a 	slli	r6,r4,16
 4004fc0:	218cb03a 	or	r6,r4,r6
 4004fc4:	010003c4 	movi	r4,15
 4004fc8:	21c0182e 	bgeu	r4,r7,400502c <memset+0xc8>
 4004fcc:	3b3ffc04 	addi	r12,r7,-16
 4004fd0:	6018d13a 	srli	r12,r12,4
 4004fd4:	1a000104 	addi	r8,r3,4
 4004fd8:	1ac00204 	addi	r11,r3,8
 4004fdc:	6008913a 	slli	r4,r12,4
 4004fe0:	1a800304 	addi	r10,r3,12
 4004fe4:	1813883a 	mov	r9,r3
 4004fe8:	21000504 	addi	r4,r4,20
 4004fec:	1909883a 	add	r4,r3,r4
 4004ff0:	49800015 	stw	r6,0(r9)
 4004ff4:	41800015 	stw	r6,0(r8)
 4004ff8:	59800015 	stw	r6,0(r11)
 4004ffc:	51800015 	stw	r6,0(r10)
 4005000:	42000404 	addi	r8,r8,16
 4005004:	4a400404 	addi	r9,r9,16
 4005008:	5ac00404 	addi	r11,r11,16
 400500c:	52800404 	addi	r10,r10,16
 4005010:	413ff71e 	bne	r8,r4,4004ff0 <__alt_data_end+0xfc004ff0>
 4005014:	63000044 	addi	r12,r12,1
 4005018:	6018913a 	slli	r12,r12,4
 400501c:	39c003cc 	andi	r7,r7,15
 4005020:	010000c4 	movi	r4,3
 4005024:	1b07883a 	add	r3,r3,r12
 4005028:	21c00e2e 	bgeu	r4,r7,4005064 <memset+0x100>
 400502c:	1813883a 	mov	r9,r3
 4005030:	3811883a 	mov	r8,r7
 4005034:	010000c4 	movi	r4,3
 4005038:	49800015 	stw	r6,0(r9)
 400503c:	423fff04 	addi	r8,r8,-4
 4005040:	4a400104 	addi	r9,r9,4
 4005044:	223ffc36 	bltu	r4,r8,4005038 <__alt_data_end+0xfc005038>
 4005048:	393fff04 	addi	r4,r7,-4
 400504c:	2008d0ba 	srli	r4,r4,2
 4005050:	39c000cc 	andi	r7,r7,3
 4005054:	21000044 	addi	r4,r4,1
 4005058:	2109883a 	add	r4,r4,r4
 400505c:	2109883a 	add	r4,r4,r4
 4005060:	1907883a 	add	r3,r3,r4
 4005064:	38000526 	beq	r7,zero,400507c <memset+0x118>
 4005068:	19cf883a 	add	r7,r3,r7
 400506c:	19400005 	stb	r5,0(r3)
 4005070:	18c00044 	addi	r3,r3,1
 4005074:	38fffd1e 	bne	r7,r3,400506c <__alt_data_end+0xfc00506c>
 4005078:	f800283a 	ret
 400507c:	f800283a 	ret
 4005080:	2007883a 	mov	r3,r4
 4005084:	300f883a 	mov	r7,r6
 4005088:	003fc706 	br	4004fa8 <__alt_data_end+0xfc004fa8>

0400508c <_printf_r>:
 400508c:	defffd04 	addi	sp,sp,-12
 4005090:	2805883a 	mov	r2,r5
 4005094:	dfc00015 	stw	ra,0(sp)
 4005098:	d9800115 	stw	r6,4(sp)
 400509c:	d9c00215 	stw	r7,8(sp)
 40050a0:	21400217 	ldw	r5,8(r4)
 40050a4:	d9c00104 	addi	r7,sp,4
 40050a8:	100d883a 	mov	r6,r2
 40050ac:	40052d80 	call	40052d8 <___vfprintf_internal_r>
 40050b0:	dfc00017 	ldw	ra,0(sp)
 40050b4:	dec00304 	addi	sp,sp,12
 40050b8:	f800283a 	ret

040050bc <printf>:
 40050bc:	defffc04 	addi	sp,sp,-16
 40050c0:	dfc00015 	stw	ra,0(sp)
 40050c4:	d9400115 	stw	r5,4(sp)
 40050c8:	d9800215 	stw	r6,8(sp)
 40050cc:	d9c00315 	stw	r7,12(sp)
 40050d0:	008100b4 	movhi	r2,1026
 40050d4:	10a16104 	addi	r2,r2,-31356
 40050d8:	10800017 	ldw	r2,0(r2)
 40050dc:	200b883a 	mov	r5,r4
 40050e0:	d9800104 	addi	r6,sp,4
 40050e4:	11000217 	ldw	r4,8(r2)
 40050e8:	40075b40 	call	40075b4 <__vfprintf_internal>
 40050ec:	dfc00017 	ldw	ra,0(sp)
 40050f0:	dec00404 	addi	sp,sp,16
 40050f4:	f800283a 	ret

040050f8 <_putchar_r>:
 40050f8:	21800217 	ldw	r6,8(r4)
 40050fc:	400b6fc1 	jmpi	400b6fc <_putc_r>

04005100 <putchar>:
 4005100:	008100b4 	movhi	r2,1026
 4005104:	10a16104 	addi	r2,r2,-31356
 4005108:	200b883a 	mov	r5,r4
 400510c:	11000017 	ldw	r4,0(r2)
 4005110:	21800217 	ldw	r6,8(r4)
 4005114:	400b6fc1 	jmpi	400b6fc <_putc_r>

04005118 <_puts_r>:
 4005118:	defff604 	addi	sp,sp,-40
 400511c:	dc000715 	stw	r16,28(sp)
 4005120:	2021883a 	mov	r16,r4
 4005124:	2809883a 	mov	r4,r5
 4005128:	dc400815 	stw	r17,32(sp)
 400512c:	dfc00915 	stw	ra,36(sp)
 4005130:	2823883a 	mov	r17,r5
 4005134:	40052400 	call	4005240 <strlen>
 4005138:	10c00044 	addi	r3,r2,1
 400513c:	d8800115 	stw	r2,4(sp)
 4005140:	00810074 	movhi	r2,1025
 4005144:	10993d04 	addi	r2,r2,25844
 4005148:	d8800215 	stw	r2,8(sp)
 400514c:	00800044 	movi	r2,1
 4005150:	d8800315 	stw	r2,12(sp)
 4005154:	00800084 	movi	r2,2
 4005158:	dc400015 	stw	r17,0(sp)
 400515c:	d8c00615 	stw	r3,24(sp)
 4005160:	dec00415 	stw	sp,16(sp)
 4005164:	d8800515 	stw	r2,20(sp)
 4005168:	80000226 	beq	r16,zero,4005174 <_puts_r+0x5c>
 400516c:	80800e17 	ldw	r2,56(r16)
 4005170:	10001426 	beq	r2,zero,40051c4 <_puts_r+0xac>
 4005174:	81400217 	ldw	r5,8(r16)
 4005178:	2880030b 	ldhu	r2,12(r5)
 400517c:	10c8000c 	andi	r3,r2,8192
 4005180:	1800061e 	bne	r3,zero,400519c <_puts_r+0x84>
 4005184:	29001917 	ldw	r4,100(r5)
 4005188:	00f7ffc4 	movi	r3,-8193
 400518c:	10880014 	ori	r2,r2,8192
 4005190:	20c6703a 	and	r3,r4,r3
 4005194:	2880030d 	sth	r2,12(r5)
 4005198:	28c01915 	stw	r3,100(r5)
 400519c:	d9800404 	addi	r6,sp,16
 40051a0:	8009883a 	mov	r4,r16
 40051a4:	4009b1c0 	call	4009b1c <__sfvwrite_r>
 40051a8:	1000091e 	bne	r2,zero,40051d0 <_puts_r+0xb8>
 40051ac:	00800284 	movi	r2,10
 40051b0:	dfc00917 	ldw	ra,36(sp)
 40051b4:	dc400817 	ldw	r17,32(sp)
 40051b8:	dc000717 	ldw	r16,28(sp)
 40051bc:	dec00a04 	addi	sp,sp,40
 40051c0:	f800283a 	ret
 40051c4:	8009883a 	mov	r4,r16
 40051c8:	40096980 	call	4009698 <__sinit>
 40051cc:	003fe906 	br	4005174 <__alt_data_end+0xfc005174>
 40051d0:	00bfffc4 	movi	r2,-1
 40051d4:	003ff606 	br	40051b0 <__alt_data_end+0xfc0051b0>

040051d8 <puts>:
 40051d8:	008100b4 	movhi	r2,1026
 40051dc:	10a16104 	addi	r2,r2,-31356
 40051e0:	200b883a 	mov	r5,r4
 40051e4:	11000017 	ldw	r4,0(r2)
 40051e8:	40051181 	jmpi	4005118 <_puts_r>

040051ec <_sbrk_r>:
 40051ec:	defffd04 	addi	sp,sp,-12
 40051f0:	dc000015 	stw	r16,0(sp)
 40051f4:	040100b4 	movhi	r16,1026
 40051f8:	dc400115 	stw	r17,4(sp)
 40051fc:	84287d04 	addi	r16,r16,-24076
 4005200:	2023883a 	mov	r17,r4
 4005204:	2809883a 	mov	r4,r5
 4005208:	dfc00215 	stw	ra,8(sp)
 400520c:	80000015 	stw	zero,0(r16)
 4005210:	4011bc80 	call	4011bc8 <sbrk>
 4005214:	00ffffc4 	movi	r3,-1
 4005218:	10c00526 	beq	r2,r3,4005230 <_sbrk_r+0x44>
 400521c:	dfc00217 	ldw	ra,8(sp)
 4005220:	dc400117 	ldw	r17,4(sp)
 4005224:	dc000017 	ldw	r16,0(sp)
 4005228:	dec00304 	addi	sp,sp,12
 400522c:	f800283a 	ret
 4005230:	80c00017 	ldw	r3,0(r16)
 4005234:	183ff926 	beq	r3,zero,400521c <__alt_data_end+0xfc00521c>
 4005238:	88c00015 	stw	r3,0(r17)
 400523c:	003ff706 	br	400521c <__alt_data_end+0xfc00521c>

04005240 <strlen>:
 4005240:	208000cc 	andi	r2,r4,3
 4005244:	10002026 	beq	r2,zero,40052c8 <strlen+0x88>
 4005248:	20800007 	ldb	r2,0(r4)
 400524c:	10002026 	beq	r2,zero,40052d0 <strlen+0x90>
 4005250:	2005883a 	mov	r2,r4
 4005254:	00000206 	br	4005260 <strlen+0x20>
 4005258:	10c00007 	ldb	r3,0(r2)
 400525c:	18001826 	beq	r3,zero,40052c0 <strlen+0x80>
 4005260:	10800044 	addi	r2,r2,1
 4005264:	10c000cc 	andi	r3,r2,3
 4005268:	183ffb1e 	bne	r3,zero,4005258 <__alt_data_end+0xfc005258>
 400526c:	10c00017 	ldw	r3,0(r2)
 4005270:	01ffbff4 	movhi	r7,65279
 4005274:	39ffbfc4 	addi	r7,r7,-257
 4005278:	00ca303a 	nor	r5,zero,r3
 400527c:	01a02074 	movhi	r6,32897
 4005280:	19c7883a 	add	r3,r3,r7
 4005284:	31a02004 	addi	r6,r6,-32640
 4005288:	1946703a 	and	r3,r3,r5
 400528c:	1986703a 	and	r3,r3,r6
 4005290:	1800091e 	bne	r3,zero,40052b8 <strlen+0x78>
 4005294:	10800104 	addi	r2,r2,4
 4005298:	10c00017 	ldw	r3,0(r2)
 400529c:	19cb883a 	add	r5,r3,r7
 40052a0:	00c6303a 	nor	r3,zero,r3
 40052a4:	28c6703a 	and	r3,r5,r3
 40052a8:	1986703a 	and	r3,r3,r6
 40052ac:	183ff926 	beq	r3,zero,4005294 <__alt_data_end+0xfc005294>
 40052b0:	00000106 	br	40052b8 <strlen+0x78>
 40052b4:	10800044 	addi	r2,r2,1
 40052b8:	10c00007 	ldb	r3,0(r2)
 40052bc:	183ffd1e 	bne	r3,zero,40052b4 <__alt_data_end+0xfc0052b4>
 40052c0:	1105c83a 	sub	r2,r2,r4
 40052c4:	f800283a 	ret
 40052c8:	2005883a 	mov	r2,r4
 40052cc:	003fe706 	br	400526c <__alt_data_end+0xfc00526c>
 40052d0:	0005883a 	mov	r2,zero
 40052d4:	f800283a 	ret

040052d8 <___vfprintf_internal_r>:
 40052d8:	deffb804 	addi	sp,sp,-288
 40052dc:	dfc04715 	stw	ra,284(sp)
 40052e0:	ddc04515 	stw	r23,276(sp)
 40052e4:	dd404315 	stw	r21,268(sp)
 40052e8:	d9002d15 	stw	r4,180(sp)
 40052ec:	282f883a 	mov	r23,r5
 40052f0:	302b883a 	mov	r21,r6
 40052f4:	d9c02e15 	stw	r7,184(sp)
 40052f8:	df004615 	stw	fp,280(sp)
 40052fc:	dd804415 	stw	r22,272(sp)
 4005300:	dd004215 	stw	r20,264(sp)
 4005304:	dcc04115 	stw	r19,260(sp)
 4005308:	dc804015 	stw	r18,256(sp)
 400530c:	dc403f15 	stw	r17,252(sp)
 4005310:	dc003e15 	stw	r16,248(sp)
 4005314:	400a2180 	call	400a218 <_localeconv_r>
 4005318:	10800017 	ldw	r2,0(r2)
 400531c:	1009883a 	mov	r4,r2
 4005320:	d8803415 	stw	r2,208(sp)
 4005324:	40052400 	call	4005240 <strlen>
 4005328:	d8803715 	stw	r2,220(sp)
 400532c:	d8802d17 	ldw	r2,180(sp)
 4005330:	10000226 	beq	r2,zero,400533c <___vfprintf_internal_r+0x64>
 4005334:	10800e17 	ldw	r2,56(r2)
 4005338:	1000fb26 	beq	r2,zero,4005728 <___vfprintf_internal_r+0x450>
 400533c:	b880030b 	ldhu	r2,12(r23)
 4005340:	10c8000c 	andi	r3,r2,8192
 4005344:	1800061e 	bne	r3,zero,4005360 <___vfprintf_internal_r+0x88>
 4005348:	b9001917 	ldw	r4,100(r23)
 400534c:	00f7ffc4 	movi	r3,-8193
 4005350:	10880014 	ori	r2,r2,8192
 4005354:	20c6703a 	and	r3,r4,r3
 4005358:	b880030d 	sth	r2,12(r23)
 400535c:	b8c01915 	stw	r3,100(r23)
 4005360:	10c0020c 	andi	r3,r2,8
 4005364:	1800c326 	beq	r3,zero,4005674 <___vfprintf_internal_r+0x39c>
 4005368:	b8c00417 	ldw	r3,16(r23)
 400536c:	1800c126 	beq	r3,zero,4005674 <___vfprintf_internal_r+0x39c>
 4005370:	1080068c 	andi	r2,r2,26
 4005374:	00c00284 	movi	r3,10
 4005378:	10c0c626 	beq	r2,r3,4005694 <___vfprintf_internal_r+0x3bc>
 400537c:	d8c00404 	addi	r3,sp,16
 4005380:	05010074 	movhi	r20,1025
 4005384:	d9001e04 	addi	r4,sp,120
 4005388:	a5194e84 	addi	r20,r20,25914
 400538c:	d8c01e15 	stw	r3,120(sp)
 4005390:	d8002015 	stw	zero,128(sp)
 4005394:	d8001f15 	stw	zero,124(sp)
 4005398:	d8003315 	stw	zero,204(sp)
 400539c:	d8003615 	stw	zero,216(sp)
 40053a0:	d8003815 	stw	zero,224(sp)
 40053a4:	1811883a 	mov	r8,r3
 40053a8:	d8003915 	stw	zero,228(sp)
 40053ac:	d8003a15 	stw	zero,232(sp)
 40053b0:	d8002f15 	stw	zero,188(sp)
 40053b4:	d9002815 	stw	r4,160(sp)
 40053b8:	a8800007 	ldb	r2,0(r21)
 40053bc:	10028b26 	beq	r2,zero,4005dec <___vfprintf_internal_r+0xb14>
 40053c0:	00c00944 	movi	r3,37
 40053c4:	a823883a 	mov	r17,r21
 40053c8:	10c0021e 	bne	r2,r3,40053d4 <___vfprintf_internal_r+0xfc>
 40053cc:	00001406 	br	4005420 <___vfprintf_internal_r+0x148>
 40053d0:	10c00326 	beq	r2,r3,40053e0 <___vfprintf_internal_r+0x108>
 40053d4:	8c400044 	addi	r17,r17,1
 40053d8:	88800007 	ldb	r2,0(r17)
 40053dc:	103ffc1e 	bne	r2,zero,40053d0 <__alt_data_end+0xfc0053d0>
 40053e0:	8d61c83a 	sub	r16,r17,r21
 40053e4:	80000e26 	beq	r16,zero,4005420 <___vfprintf_internal_r+0x148>
 40053e8:	d8c02017 	ldw	r3,128(sp)
 40053ec:	d8801f17 	ldw	r2,124(sp)
 40053f0:	45400015 	stw	r21,0(r8)
 40053f4:	1c07883a 	add	r3,r3,r16
 40053f8:	10800044 	addi	r2,r2,1
 40053fc:	d8c02015 	stw	r3,128(sp)
 4005400:	44000115 	stw	r16,4(r8)
 4005404:	d8801f15 	stw	r2,124(sp)
 4005408:	00c001c4 	movi	r3,7
 400540c:	1880a916 	blt	r3,r2,40056b4 <___vfprintf_internal_r+0x3dc>
 4005410:	42000204 	addi	r8,r8,8
 4005414:	d9402f17 	ldw	r5,188(sp)
 4005418:	2c0b883a 	add	r5,r5,r16
 400541c:	d9402f15 	stw	r5,188(sp)
 4005420:	88800007 	ldb	r2,0(r17)
 4005424:	1000aa26 	beq	r2,zero,40056d0 <___vfprintf_internal_r+0x3f8>
 4005428:	8d400044 	addi	r21,r17,1
 400542c:	8c400047 	ldb	r17,1(r17)
 4005430:	0021883a 	mov	r16,zero
 4005434:	00bfffc4 	movi	r2,-1
 4005438:	0025883a 	mov	r18,zero
 400543c:	dc002905 	stb	r16,164(sp)
 4005440:	d8002785 	stb	zero,158(sp)
 4005444:	d8002b05 	stb	zero,172(sp)
 4005448:	d8802a15 	stw	r2,168(sp)
 400544c:	d8003115 	stw	zero,196(sp)
 4005450:	04c01604 	movi	r19,88
 4005454:	05800244 	movi	r22,9
 4005458:	9021883a 	mov	r16,r18
 400545c:	4039883a 	mov	fp,r8
 4005460:	ad400044 	addi	r21,r21,1
 4005464:	88bff804 	addi	r2,r17,-32
 4005468:	98833236 	bltu	r19,r2,4006134 <___vfprintf_internal_r+0xe5c>
 400546c:	100490ba 	slli	r2,r2,2
 4005470:	00c10034 	movhi	r3,1024
 4005474:	18d52104 	addi	r3,r3,21636
 4005478:	10c5883a 	add	r2,r2,r3
 400547c:	10800017 	ldw	r2,0(r2)
 4005480:	1000683a 	jmp	r2
 4005484:	0400602c 	andhi	r16,zero,384
 4005488:	04006134 	movhi	r16,388
 400548c:	04006134 	movhi	r16,388
 4005490:	0400604c 	andi	r16,zero,385
 4005494:	04006134 	movhi	r16,388
 4005498:	04006134 	movhi	r16,388
 400549c:	04006134 	movhi	r16,388
 40054a0:	04006134 	movhi	r16,388
 40054a4:	04006134 	movhi	r16,388
 40054a8:	04006134 	movhi	r16,388
 40054ac:	04005734 	movhi	r16,348
 40054b0:	04005f3c 	xorhi	r16,zero,380
 40054b4:	04006134 	movhi	r16,388
 40054b8:	040055f8 	rdprs	r16,zero,343
 40054bc:	04005758 	cmpnei	r16,zero,349
 40054c0:	04006134 	movhi	r16,388
 40054c4:	040057a8 	cmpgeui	r16,zero,350
 40054c8:	040057b4 	movhi	r16,350
 40054cc:	040057b4 	movhi	r16,350
 40054d0:	040057b4 	movhi	r16,350
 40054d4:	040057b4 	movhi	r16,350
 40054d8:	040057b4 	movhi	r16,350
 40054dc:	040057b4 	movhi	r16,350
 40054e0:	040057b4 	movhi	r16,350
 40054e4:	040057b4 	movhi	r16,350
 40054e8:	040057b4 	movhi	r16,350
 40054ec:	04006134 	movhi	r16,388
 40054f0:	04006134 	movhi	r16,388
 40054f4:	04006134 	movhi	r16,388
 40054f8:	04006134 	movhi	r16,388
 40054fc:	04006134 	movhi	r16,388
 4005500:	04006134 	movhi	r16,388
 4005504:	04006134 	movhi	r16,388
 4005508:	04006134 	movhi	r16,388
 400550c:	04006134 	movhi	r16,388
 4005510:	04006134 	movhi	r16,388
 4005514:	040057f0 	cmpltui	r16,zero,351
 4005518:	040058b8 	rdprs	r16,zero,354
 400551c:	04006134 	movhi	r16,388
 4005520:	040058b8 	rdprs	r16,zero,354
 4005524:	04006134 	movhi	r16,388
 4005528:	04006134 	movhi	r16,388
 400552c:	04006134 	movhi	r16,388
 4005530:	04006134 	movhi	r16,388
 4005534:	04005964 	muli	r16,zero,357
 4005538:	04006134 	movhi	r16,388
 400553c:	04006134 	movhi	r16,388
 4005540:	04005970 	cmpltui	r16,zero,357
 4005544:	04006134 	movhi	r16,388
 4005548:	04006134 	movhi	r16,388
 400554c:	04006134 	movhi	r16,388
 4005550:	04006134 	movhi	r16,388
 4005554:	04006134 	movhi	r16,388
 4005558:	04005df4 	movhi	r16,375
 400555c:	04006134 	movhi	r16,388
 4005560:	04006134 	movhi	r16,388
 4005564:	04005e60 	cmpeqi	r16,zero,377
 4005568:	04006134 	movhi	r16,388
 400556c:	04006134 	movhi	r16,388
 4005570:	04006134 	movhi	r16,388
 4005574:	04006134 	movhi	r16,388
 4005578:	04006134 	movhi	r16,388
 400557c:	04006134 	movhi	r16,388
 4005580:	04006134 	movhi	r16,388
 4005584:	04006134 	movhi	r16,388
 4005588:	04006134 	movhi	r16,388
 400558c:	04006134 	movhi	r16,388
 4005590:	040060d8 	cmpnei	r16,zero,387
 4005594:	04006058 	cmpnei	r16,zero,385
 4005598:	040058b8 	rdprs	r16,zero,354
 400559c:	040058b8 	rdprs	r16,zero,354
 40055a0:	040058b8 	rdprs	r16,zero,354
 40055a4:	04006078 	rdprs	r16,zero,385
 40055a8:	04006058 	cmpnei	r16,zero,385
 40055ac:	04006134 	movhi	r16,388
 40055b0:	04006134 	movhi	r16,388
 40055b4:	04006084 	movi	r16,386
 40055b8:	04006134 	movhi	r16,388
 40055bc:	04006098 	cmpnei	r16,zero,386
 40055c0:	04005f1c 	xori	r16,zero,380
 40055c4:	04005604 	movi	r16,344
 40055c8:	04005f54 	movui	r16,381
 40055cc:	04006134 	movhi	r16,388
 40055d0:	04005f60 	cmpeqi	r16,zero,381
 40055d4:	04006134 	movhi	r16,388
 40055d8:	04005fc4 	movi	r16,383
 40055dc:	04006134 	movhi	r16,388
 40055e0:	04006134 	movhi	r16,388
 40055e4:	04005fe4 	muli	r16,zero,383
 40055e8:	d8c03117 	ldw	r3,196(sp)
 40055ec:	d8802e15 	stw	r2,184(sp)
 40055f0:	00c7c83a 	sub	r3,zero,r3
 40055f4:	d8c03115 	stw	r3,196(sp)
 40055f8:	84000114 	ori	r16,r16,4
 40055fc:	ac400007 	ldb	r17,0(r21)
 4005600:	003f9706 	br	4005460 <__alt_data_end+0xfc005460>
 4005604:	00800c04 	movi	r2,48
 4005608:	d8802705 	stb	r2,156(sp)
 400560c:	00801e04 	movi	r2,120
 4005610:	d8802745 	stb	r2,157(sp)
 4005614:	d9002a17 	ldw	r4,168(sp)
 4005618:	d8802e17 	ldw	r2,184(sp)
 400561c:	d8002785 	stb	zero,158(sp)
 4005620:	e011883a 	mov	r8,fp
 4005624:	10c00104 	addi	r3,r2,4
 4005628:	14c00017 	ldw	r19,0(r2)
 400562c:	002d883a 	mov	r22,zero
 4005630:	80800094 	ori	r2,r16,2
 4005634:	2002ca16 	blt	r4,zero,4006160 <___vfprintf_internal_r+0xe88>
 4005638:	00bfdfc4 	movi	r2,-129
 400563c:	80a4703a 	and	r18,r16,r2
 4005640:	d8c02e15 	stw	r3,184(sp)
 4005644:	94800094 	ori	r18,r18,2
 4005648:	9802b41e 	bne	r19,zero,400611c <___vfprintf_internal_r+0xe44>
 400564c:	01410074 	movhi	r5,1025
 4005650:	29594704 	addi	r5,r5,25884
 4005654:	d9403915 	stw	r5,228(sp)
 4005658:	04401e04 	movi	r17,120
 400565c:	d8802a17 	ldw	r2,168(sp)
 4005660:	0039883a 	mov	fp,zero
 4005664:	1001fa26 	beq	r2,zero,4005e50 <___vfprintf_internal_r+0xb78>
 4005668:	0027883a 	mov	r19,zero
 400566c:	002d883a 	mov	r22,zero
 4005670:	00021906 	br	4005ed8 <___vfprintf_internal_r+0xc00>
 4005674:	d9002d17 	ldw	r4,180(sp)
 4005678:	b80b883a 	mov	r5,r23
 400567c:	400768c0 	call	400768c <__swsetup_r>
 4005680:	1005dc1e 	bne	r2,zero,4006df4 <___vfprintf_internal_r+0x1b1c>
 4005684:	b880030b 	ldhu	r2,12(r23)
 4005688:	00c00284 	movi	r3,10
 400568c:	1080068c 	andi	r2,r2,26
 4005690:	10ff3a1e 	bne	r2,r3,400537c <__alt_data_end+0xfc00537c>
 4005694:	b880038f 	ldh	r2,14(r23)
 4005698:	103f3816 	blt	r2,zero,400537c <__alt_data_end+0xfc00537c>
 400569c:	d9c02e17 	ldw	r7,184(sp)
 40056a0:	d9002d17 	ldw	r4,180(sp)
 40056a4:	a80d883a 	mov	r6,r21
 40056a8:	b80b883a 	mov	r5,r23
 40056ac:	40075d00 	call	40075d0 <__sbprintf>
 40056b0:	00001106 	br	40056f8 <___vfprintf_internal_r+0x420>
 40056b4:	d9002d17 	ldw	r4,180(sp)
 40056b8:	d9801e04 	addi	r6,sp,120
 40056bc:	b80b883a 	mov	r5,r23
 40056c0:	400c1500 	call	400c150 <__sprint_r>
 40056c4:	1000081e 	bne	r2,zero,40056e8 <___vfprintf_internal_r+0x410>
 40056c8:	da000404 	addi	r8,sp,16
 40056cc:	003f5106 	br	4005414 <__alt_data_end+0xfc005414>
 40056d0:	d8802017 	ldw	r2,128(sp)
 40056d4:	10000426 	beq	r2,zero,40056e8 <___vfprintf_internal_r+0x410>
 40056d8:	d9002d17 	ldw	r4,180(sp)
 40056dc:	d9801e04 	addi	r6,sp,120
 40056e0:	b80b883a 	mov	r5,r23
 40056e4:	400c1500 	call	400c150 <__sprint_r>
 40056e8:	b880030b 	ldhu	r2,12(r23)
 40056ec:	1080100c 	andi	r2,r2,64
 40056f0:	1005c01e 	bne	r2,zero,4006df4 <___vfprintf_internal_r+0x1b1c>
 40056f4:	d8802f17 	ldw	r2,188(sp)
 40056f8:	dfc04717 	ldw	ra,284(sp)
 40056fc:	df004617 	ldw	fp,280(sp)
 4005700:	ddc04517 	ldw	r23,276(sp)
 4005704:	dd804417 	ldw	r22,272(sp)
 4005708:	dd404317 	ldw	r21,268(sp)
 400570c:	dd004217 	ldw	r20,264(sp)
 4005710:	dcc04117 	ldw	r19,260(sp)
 4005714:	dc804017 	ldw	r18,256(sp)
 4005718:	dc403f17 	ldw	r17,252(sp)
 400571c:	dc003e17 	ldw	r16,248(sp)
 4005720:	dec04804 	addi	sp,sp,288
 4005724:	f800283a 	ret
 4005728:	d9002d17 	ldw	r4,180(sp)
 400572c:	40096980 	call	4009698 <__sinit>
 4005730:	003f0206 	br	400533c <__alt_data_end+0xfc00533c>
 4005734:	d9002e17 	ldw	r4,184(sp)
 4005738:	d9402e17 	ldw	r5,184(sp)
 400573c:	21000017 	ldw	r4,0(r4)
 4005740:	28800104 	addi	r2,r5,4
 4005744:	d9003115 	stw	r4,196(sp)
 4005748:	203fa716 	blt	r4,zero,40055e8 <__alt_data_end+0xfc0055e8>
 400574c:	d8802e15 	stw	r2,184(sp)
 4005750:	ac400007 	ldb	r17,0(r21)
 4005754:	003f4206 	br	4005460 <__alt_data_end+0xfc005460>
 4005758:	ac400007 	ldb	r17,0(r21)
 400575c:	01000a84 	movi	r4,42
 4005760:	a8c00044 	addi	r3,r21,1
 4005764:	89075826 	beq	r17,r4,40074c8 <___vfprintf_internal_r+0x21f0>
 4005768:	8cbff404 	addi	r18,r17,-48
 400576c:	b486ae36 	bltu	r22,r18,4007228 <___vfprintf_internal_r+0x1f50>
 4005770:	0009883a 	mov	r4,zero
 4005774:	1823883a 	mov	r17,r3
 4005778:	01400284 	movi	r5,10
 400577c:	40044f40 	call	40044f4 <__mulsi3>
 4005780:	88c00007 	ldb	r3,0(r17)
 4005784:	1489883a 	add	r4,r2,r18
 4005788:	8d400044 	addi	r21,r17,1
 400578c:	1cbff404 	addi	r18,r3,-48
 4005790:	a823883a 	mov	r17,r21
 4005794:	b4bff82e 	bgeu	r22,r18,4005778 <__alt_data_end+0xfc005778>
 4005798:	1823883a 	mov	r17,r3
 400579c:	2005f616 	blt	r4,zero,4006f78 <___vfprintf_internal_r+0x1ca0>
 40057a0:	d9002a15 	stw	r4,168(sp)
 40057a4:	003f2f06 	br	4005464 <__alt_data_end+0xfc005464>
 40057a8:	84002014 	ori	r16,r16,128
 40057ac:	ac400007 	ldb	r17,0(r21)
 40057b0:	003f2b06 	br	4005460 <__alt_data_end+0xfc005460>
 40057b4:	8cbff404 	addi	r18,r17,-48
 40057b8:	d8003115 	stw	zero,196(sp)
 40057bc:	0009883a 	mov	r4,zero
 40057c0:	a823883a 	mov	r17,r21
 40057c4:	01400284 	movi	r5,10
 40057c8:	40044f40 	call	40044f4 <__mulsi3>
 40057cc:	88c00007 	ldb	r3,0(r17)
 40057d0:	9089883a 	add	r4,r18,r2
 40057d4:	ad400044 	addi	r21,r21,1
 40057d8:	1cbff404 	addi	r18,r3,-48
 40057dc:	a823883a 	mov	r17,r21
 40057e0:	b4bff82e 	bgeu	r22,r18,40057c4 <__alt_data_end+0xfc0057c4>
 40057e4:	1823883a 	mov	r17,r3
 40057e8:	d9003115 	stw	r4,196(sp)
 40057ec:	003f1d06 	br	4005464 <__alt_data_end+0xfc005464>
 40057f0:	8025883a 	mov	r18,r16
 40057f4:	dc002903 	ldbu	r16,164(sp)
 40057f8:	e011883a 	mov	r8,fp
 40057fc:	84003fcc 	andi	r16,r16,255
 4005800:	8007531e 	bne	r16,zero,4007550 <___vfprintf_internal_r+0x2278>
 4005804:	94800414 	ori	r18,r18,16
 4005808:	9080080c 	andi	r2,r18,32
 400580c:	1003a326 	beq	r2,zero,400669c <___vfprintf_internal_r+0x13c4>
 4005810:	d9002e17 	ldw	r4,184(sp)
 4005814:	20800117 	ldw	r2,4(r4)
 4005818:	24c00017 	ldw	r19,0(r4)
 400581c:	21000204 	addi	r4,r4,8
 4005820:	d9002e15 	stw	r4,184(sp)
 4005824:	102d883a 	mov	r22,r2
 4005828:	10047316 	blt	r2,zero,40069f8 <___vfprintf_internal_r+0x1720>
 400582c:	d9002a17 	ldw	r4,168(sp)
 4005830:	df002783 	ldbu	fp,158(sp)
 4005834:	2003e416 	blt	r4,zero,40067c8 <___vfprintf_internal_r+0x14f0>
 4005838:	00ffdfc4 	movi	r3,-129
 400583c:	9d84b03a 	or	r2,r19,r22
 4005840:	90e4703a 	and	r18,r18,r3
 4005844:	10018026 	beq	r2,zero,4005e48 <___vfprintf_internal_r+0xb70>
 4005848:	b003ab26 	beq	r22,zero,40066f8 <___vfprintf_internal_r+0x1420>
 400584c:	dc402915 	stw	r17,164(sp)
 4005850:	dc001e04 	addi	r16,sp,120
 4005854:	b023883a 	mov	r17,r22
 4005858:	402d883a 	mov	r22,r8
 400585c:	9809883a 	mov	r4,r19
 4005860:	880b883a 	mov	r5,r17
 4005864:	01800284 	movi	r6,10
 4005868:	000f883a 	mov	r7,zero
 400586c:	400e5b80 	call	400e5b8 <__umoddi3>
 4005870:	10800c04 	addi	r2,r2,48
 4005874:	843fffc4 	addi	r16,r16,-1
 4005878:	9809883a 	mov	r4,r19
 400587c:	880b883a 	mov	r5,r17
 4005880:	80800005 	stb	r2,0(r16)
 4005884:	01800284 	movi	r6,10
 4005888:	000f883a 	mov	r7,zero
 400588c:	400dfbc0 	call	400dfbc <__udivdi3>
 4005890:	1027883a 	mov	r19,r2
 4005894:	10c4b03a 	or	r2,r2,r3
 4005898:	1823883a 	mov	r17,r3
 400589c:	103fef1e 	bne	r2,zero,400585c <__alt_data_end+0xfc00585c>
 40058a0:	d8c02817 	ldw	r3,160(sp)
 40058a4:	dc402917 	ldw	r17,164(sp)
 40058a8:	b011883a 	mov	r8,r22
 40058ac:	1c07c83a 	sub	r3,r3,r16
 40058b0:	d8c02b15 	stw	r3,172(sp)
 40058b4:	00005f06 	br	4005a34 <___vfprintf_internal_r+0x75c>
 40058b8:	8025883a 	mov	r18,r16
 40058bc:	dc002903 	ldbu	r16,164(sp)
 40058c0:	e011883a 	mov	r8,fp
 40058c4:	84003fcc 	andi	r16,r16,255
 40058c8:	80071e1e 	bne	r16,zero,4007544 <___vfprintf_internal_r+0x226c>
 40058cc:	9080020c 	andi	r2,r18,8
 40058d0:	1004af26 	beq	r2,zero,4006b90 <___vfprintf_internal_r+0x18b8>
 40058d4:	d9002e17 	ldw	r4,184(sp)
 40058d8:	d9402e17 	ldw	r5,184(sp)
 40058dc:	d8802e17 	ldw	r2,184(sp)
 40058e0:	21000017 	ldw	r4,0(r4)
 40058e4:	29400117 	ldw	r5,4(r5)
 40058e8:	10800204 	addi	r2,r2,8
 40058ec:	d9003615 	stw	r4,216(sp)
 40058f0:	d9403815 	stw	r5,224(sp)
 40058f4:	d8802e15 	stw	r2,184(sp)
 40058f8:	d9003617 	ldw	r4,216(sp)
 40058fc:	d9403817 	ldw	r5,224(sp)
 4005900:	da003d15 	stw	r8,244(sp)
 4005904:	04000044 	movi	r16,1
 4005908:	400bdc80 	call	400bdc8 <__fpclassifyd>
 400590c:	da003d17 	ldw	r8,244(sp)
 4005910:	1404441e 	bne	r2,r16,4006a24 <___vfprintf_internal_r+0x174c>
 4005914:	d9003617 	ldw	r4,216(sp)
 4005918:	d9403817 	ldw	r5,224(sp)
 400591c:	000d883a 	mov	r6,zero
 4005920:	000f883a 	mov	r7,zero
 4005924:	400ff5c0 	call	400ff5c <__ledf2>
 4005928:	da003d17 	ldw	r8,244(sp)
 400592c:	1005e316 	blt	r2,zero,40070bc <___vfprintf_internal_r+0x1de4>
 4005930:	df002783 	ldbu	fp,158(sp)
 4005934:	008011c4 	movi	r2,71
 4005938:	1445580e 	bge	r2,r17,4006e9c <___vfprintf_internal_r+0x1bc4>
 400593c:	04010074 	movhi	r16,1025
 4005940:	84193f04 	addi	r16,r16,25852
 4005944:	00c000c4 	movi	r3,3
 4005948:	00bfdfc4 	movi	r2,-129
 400594c:	d8c02915 	stw	r3,164(sp)
 4005950:	90a4703a 	and	r18,r18,r2
 4005954:	d8c02b15 	stw	r3,172(sp)
 4005958:	d8002a15 	stw	zero,168(sp)
 400595c:	d8003215 	stw	zero,200(sp)
 4005960:	00003a06 	br	4005a4c <___vfprintf_internal_r+0x774>
 4005964:	84000214 	ori	r16,r16,8
 4005968:	ac400007 	ldb	r17,0(r21)
 400596c:	003ebc06 	br	4005460 <__alt_data_end+0xfc005460>
 4005970:	8025883a 	mov	r18,r16
 4005974:	dc002903 	ldbu	r16,164(sp)
 4005978:	e011883a 	mov	r8,fp
 400597c:	84003fcc 	andi	r16,r16,255
 4005980:	8007001e 	bne	r16,zero,4007584 <___vfprintf_internal_r+0x22ac>
 4005984:	94800414 	ori	r18,r18,16
 4005988:	9080080c 	andi	r2,r18,32
 400598c:	1002fa26 	beq	r2,zero,4006578 <___vfprintf_internal_r+0x12a0>
 4005990:	d9002e17 	ldw	r4,184(sp)
 4005994:	d9402a17 	ldw	r5,168(sp)
 4005998:	d8002785 	stb	zero,158(sp)
 400599c:	20800204 	addi	r2,r4,8
 40059a0:	24c00017 	ldw	r19,0(r4)
 40059a4:	25800117 	ldw	r22,4(r4)
 40059a8:	2804b116 	blt	r5,zero,4006c70 <___vfprintf_internal_r+0x1998>
 40059ac:	013fdfc4 	movi	r4,-129
 40059b0:	9d86b03a 	or	r3,r19,r22
 40059b4:	d8802e15 	stw	r2,184(sp)
 40059b8:	9124703a 	and	r18,r18,r4
 40059bc:	1802fb1e 	bne	r3,zero,40065ac <___vfprintf_internal_r+0x12d4>
 40059c0:	d8c02a17 	ldw	r3,168(sp)
 40059c4:	0039883a 	mov	fp,zero
 40059c8:	1805e526 	beq	r3,zero,4007160 <___vfprintf_internal_r+0x1e88>
 40059cc:	0027883a 	mov	r19,zero
 40059d0:	002d883a 	mov	r22,zero
 40059d4:	dc001e04 	addi	r16,sp,120
 40059d8:	9806d0fa 	srli	r3,r19,3
 40059dc:	b008977a 	slli	r4,r22,29
 40059e0:	b02cd0fa 	srli	r22,r22,3
 40059e4:	9cc001cc 	andi	r19,r19,7
 40059e8:	98800c04 	addi	r2,r19,48
 40059ec:	843fffc4 	addi	r16,r16,-1
 40059f0:	20e6b03a 	or	r19,r4,r3
 40059f4:	80800005 	stb	r2,0(r16)
 40059f8:	9d86b03a 	or	r3,r19,r22
 40059fc:	183ff61e 	bne	r3,zero,40059d8 <__alt_data_end+0xfc0059d8>
 4005a00:	90c0004c 	andi	r3,r18,1
 4005a04:	18014126 	beq	r3,zero,4005f0c <___vfprintf_internal_r+0xc34>
 4005a08:	10803fcc 	andi	r2,r2,255
 4005a0c:	1080201c 	xori	r2,r2,128
 4005a10:	10bfe004 	addi	r2,r2,-128
 4005a14:	00c00c04 	movi	r3,48
 4005a18:	10c13c26 	beq	r2,r3,4005f0c <___vfprintf_internal_r+0xc34>
 4005a1c:	80ffffc5 	stb	r3,-1(r16)
 4005a20:	d8c02817 	ldw	r3,160(sp)
 4005a24:	80bfffc4 	addi	r2,r16,-1
 4005a28:	1021883a 	mov	r16,r2
 4005a2c:	1887c83a 	sub	r3,r3,r2
 4005a30:	d8c02b15 	stw	r3,172(sp)
 4005a34:	d8802b17 	ldw	r2,172(sp)
 4005a38:	d9002a17 	ldw	r4,168(sp)
 4005a3c:	1100010e 	bge	r2,r4,4005a44 <___vfprintf_internal_r+0x76c>
 4005a40:	2005883a 	mov	r2,r4
 4005a44:	d8802915 	stw	r2,164(sp)
 4005a48:	d8003215 	stw	zero,200(sp)
 4005a4c:	e7003fcc 	andi	fp,fp,255
 4005a50:	e700201c 	xori	fp,fp,128
 4005a54:	e73fe004 	addi	fp,fp,-128
 4005a58:	e0000326 	beq	fp,zero,4005a68 <___vfprintf_internal_r+0x790>
 4005a5c:	d8c02917 	ldw	r3,164(sp)
 4005a60:	18c00044 	addi	r3,r3,1
 4005a64:	d8c02915 	stw	r3,164(sp)
 4005a68:	90c0008c 	andi	r3,r18,2
 4005a6c:	d8c02c15 	stw	r3,176(sp)
 4005a70:	18000326 	beq	r3,zero,4005a80 <___vfprintf_internal_r+0x7a8>
 4005a74:	d8c02917 	ldw	r3,164(sp)
 4005a78:	18c00084 	addi	r3,r3,2
 4005a7c:	d8c02915 	stw	r3,164(sp)
 4005a80:	90c0210c 	andi	r3,r18,132
 4005a84:	d8c03015 	stw	r3,192(sp)
 4005a88:	1801c51e 	bne	r3,zero,40061a0 <___vfprintf_internal_r+0xec8>
 4005a8c:	d9003117 	ldw	r4,196(sp)
 4005a90:	d8c02917 	ldw	r3,164(sp)
 4005a94:	20e7c83a 	sub	r19,r4,r3
 4005a98:	04c1c10e 	bge	zero,r19,40061a0 <___vfprintf_internal_r+0xec8>
 4005a9c:	02400404 	movi	r9,16
 4005aa0:	d8c02017 	ldw	r3,128(sp)
 4005aa4:	d8801f17 	ldw	r2,124(sp)
 4005aa8:	4cc52f0e 	bge	r9,r19,4006f68 <___vfprintf_internal_r+0x1c90>
 4005aac:	01410074 	movhi	r5,1025
 4005ab0:	29595284 	addi	r5,r5,25930
 4005ab4:	dc403b15 	stw	r17,236(sp)
 4005ab8:	d9403515 	stw	r5,212(sp)
 4005abc:	9823883a 	mov	r17,r19
 4005ac0:	482d883a 	mov	r22,r9
 4005ac4:	9027883a 	mov	r19,r18
 4005ac8:	070001c4 	movi	fp,7
 4005acc:	8025883a 	mov	r18,r16
 4005ad0:	dc002d17 	ldw	r16,180(sp)
 4005ad4:	00000306 	br	4005ae4 <___vfprintf_internal_r+0x80c>
 4005ad8:	8c7ffc04 	addi	r17,r17,-16
 4005adc:	42000204 	addi	r8,r8,8
 4005ae0:	b440130e 	bge	r22,r17,4005b30 <___vfprintf_internal_r+0x858>
 4005ae4:	01010074 	movhi	r4,1025
 4005ae8:	18c00404 	addi	r3,r3,16
 4005aec:	10800044 	addi	r2,r2,1
 4005af0:	21195284 	addi	r4,r4,25930
 4005af4:	41000015 	stw	r4,0(r8)
 4005af8:	45800115 	stw	r22,4(r8)
 4005afc:	d8c02015 	stw	r3,128(sp)
 4005b00:	d8801f15 	stw	r2,124(sp)
 4005b04:	e0bff40e 	bge	fp,r2,4005ad8 <__alt_data_end+0xfc005ad8>
 4005b08:	d9801e04 	addi	r6,sp,120
 4005b0c:	b80b883a 	mov	r5,r23
 4005b10:	8009883a 	mov	r4,r16
 4005b14:	400c1500 	call	400c150 <__sprint_r>
 4005b18:	103ef31e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 4005b1c:	8c7ffc04 	addi	r17,r17,-16
 4005b20:	d8c02017 	ldw	r3,128(sp)
 4005b24:	d8801f17 	ldw	r2,124(sp)
 4005b28:	da000404 	addi	r8,sp,16
 4005b2c:	b47fed16 	blt	r22,r17,4005ae4 <__alt_data_end+0xfc005ae4>
 4005b30:	9021883a 	mov	r16,r18
 4005b34:	9825883a 	mov	r18,r19
 4005b38:	8827883a 	mov	r19,r17
 4005b3c:	dc403b17 	ldw	r17,236(sp)
 4005b40:	d9403517 	ldw	r5,212(sp)
 4005b44:	98c7883a 	add	r3,r19,r3
 4005b48:	10800044 	addi	r2,r2,1
 4005b4c:	41400015 	stw	r5,0(r8)
 4005b50:	44c00115 	stw	r19,4(r8)
 4005b54:	d8c02015 	stw	r3,128(sp)
 4005b58:	d8801f15 	stw	r2,124(sp)
 4005b5c:	010001c4 	movi	r4,7
 4005b60:	2082c516 	blt	r4,r2,4006678 <___vfprintf_internal_r+0x13a0>
 4005b64:	df002787 	ldb	fp,158(sp)
 4005b68:	42000204 	addi	r8,r8,8
 4005b6c:	e0000c26 	beq	fp,zero,4005ba0 <___vfprintf_internal_r+0x8c8>
 4005b70:	d8801f17 	ldw	r2,124(sp)
 4005b74:	d9002784 	addi	r4,sp,158
 4005b78:	18c00044 	addi	r3,r3,1
 4005b7c:	10800044 	addi	r2,r2,1
 4005b80:	41000015 	stw	r4,0(r8)
 4005b84:	01000044 	movi	r4,1
 4005b88:	41000115 	stw	r4,4(r8)
 4005b8c:	d8c02015 	stw	r3,128(sp)
 4005b90:	d8801f15 	stw	r2,124(sp)
 4005b94:	010001c4 	movi	r4,7
 4005b98:	20825e16 	blt	r4,r2,4006514 <___vfprintf_internal_r+0x123c>
 4005b9c:	42000204 	addi	r8,r8,8
 4005ba0:	d8802c17 	ldw	r2,176(sp)
 4005ba4:	10000c26 	beq	r2,zero,4005bd8 <___vfprintf_internal_r+0x900>
 4005ba8:	d8801f17 	ldw	r2,124(sp)
 4005bac:	d9002704 	addi	r4,sp,156
 4005bb0:	18c00084 	addi	r3,r3,2
 4005bb4:	10800044 	addi	r2,r2,1
 4005bb8:	41000015 	stw	r4,0(r8)
 4005bbc:	01000084 	movi	r4,2
 4005bc0:	41000115 	stw	r4,4(r8)
 4005bc4:	d8c02015 	stw	r3,128(sp)
 4005bc8:	d8801f15 	stw	r2,124(sp)
 4005bcc:	010001c4 	movi	r4,7
 4005bd0:	20825816 	blt	r4,r2,4006534 <___vfprintf_internal_r+0x125c>
 4005bd4:	42000204 	addi	r8,r8,8
 4005bd8:	d9003017 	ldw	r4,192(sp)
 4005bdc:	00802004 	movi	r2,128
 4005be0:	2081bb26 	beq	r4,r2,40062d0 <___vfprintf_internal_r+0xff8>
 4005be4:	d9402a17 	ldw	r5,168(sp)
 4005be8:	d8802b17 	ldw	r2,172(sp)
 4005bec:	28adc83a 	sub	r22,r5,r2
 4005bf0:	0580310e 	bge	zero,r22,4005cb8 <___vfprintf_internal_r+0x9e0>
 4005bf4:	07000404 	movi	fp,16
 4005bf8:	d8801f17 	ldw	r2,124(sp)
 4005bfc:	e584360e 	bge	fp,r22,4006cd8 <___vfprintf_internal_r+0x1a00>
 4005c00:	01410074 	movhi	r5,1025
 4005c04:	29594e84 	addi	r5,r5,25914
 4005c08:	dc402a15 	stw	r17,168(sp)
 4005c0c:	d9402c15 	stw	r5,176(sp)
 4005c10:	b023883a 	mov	r17,r22
 4005c14:	04c001c4 	movi	r19,7
 4005c18:	a82d883a 	mov	r22,r21
 4005c1c:	902b883a 	mov	r21,r18
 4005c20:	8025883a 	mov	r18,r16
 4005c24:	dc002d17 	ldw	r16,180(sp)
 4005c28:	00000306 	br	4005c38 <___vfprintf_internal_r+0x960>
 4005c2c:	8c7ffc04 	addi	r17,r17,-16
 4005c30:	42000204 	addi	r8,r8,8
 4005c34:	e440110e 	bge	fp,r17,4005c7c <___vfprintf_internal_r+0x9a4>
 4005c38:	18c00404 	addi	r3,r3,16
 4005c3c:	10800044 	addi	r2,r2,1
 4005c40:	45000015 	stw	r20,0(r8)
 4005c44:	47000115 	stw	fp,4(r8)
 4005c48:	d8c02015 	stw	r3,128(sp)
 4005c4c:	d8801f15 	stw	r2,124(sp)
 4005c50:	98bff60e 	bge	r19,r2,4005c2c <__alt_data_end+0xfc005c2c>
 4005c54:	d9801e04 	addi	r6,sp,120
 4005c58:	b80b883a 	mov	r5,r23
 4005c5c:	8009883a 	mov	r4,r16
 4005c60:	400c1500 	call	400c150 <__sprint_r>
 4005c64:	103ea01e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 4005c68:	8c7ffc04 	addi	r17,r17,-16
 4005c6c:	d8c02017 	ldw	r3,128(sp)
 4005c70:	d8801f17 	ldw	r2,124(sp)
 4005c74:	da000404 	addi	r8,sp,16
 4005c78:	e47fef16 	blt	fp,r17,4005c38 <__alt_data_end+0xfc005c38>
 4005c7c:	9021883a 	mov	r16,r18
 4005c80:	a825883a 	mov	r18,r21
 4005c84:	b02b883a 	mov	r21,r22
 4005c88:	882d883a 	mov	r22,r17
 4005c8c:	dc402a17 	ldw	r17,168(sp)
 4005c90:	d9002c17 	ldw	r4,176(sp)
 4005c94:	1d87883a 	add	r3,r3,r22
 4005c98:	10800044 	addi	r2,r2,1
 4005c9c:	41000015 	stw	r4,0(r8)
 4005ca0:	45800115 	stw	r22,4(r8)
 4005ca4:	d8c02015 	stw	r3,128(sp)
 4005ca8:	d8801f15 	stw	r2,124(sp)
 4005cac:	010001c4 	movi	r4,7
 4005cb0:	20821016 	blt	r4,r2,40064f4 <___vfprintf_internal_r+0x121c>
 4005cb4:	42000204 	addi	r8,r8,8
 4005cb8:	9080400c 	andi	r2,r18,256
 4005cbc:	10013a1e 	bne	r2,zero,40061a8 <___vfprintf_internal_r+0xed0>
 4005cc0:	d9402b17 	ldw	r5,172(sp)
 4005cc4:	d8801f17 	ldw	r2,124(sp)
 4005cc8:	44000015 	stw	r16,0(r8)
 4005ccc:	1947883a 	add	r3,r3,r5
 4005cd0:	10800044 	addi	r2,r2,1
 4005cd4:	41400115 	stw	r5,4(r8)
 4005cd8:	d8c02015 	stw	r3,128(sp)
 4005cdc:	d8801f15 	stw	r2,124(sp)
 4005ce0:	010001c4 	movi	r4,7
 4005ce4:	2081f516 	blt	r4,r2,40064bc <___vfprintf_internal_r+0x11e4>
 4005ce8:	42000204 	addi	r8,r8,8
 4005cec:	9480010c 	andi	r18,r18,4
 4005cf0:	90003226 	beq	r18,zero,4005dbc <___vfprintf_internal_r+0xae4>
 4005cf4:	d9403117 	ldw	r5,196(sp)
 4005cf8:	d8802917 	ldw	r2,164(sp)
 4005cfc:	28a1c83a 	sub	r16,r5,r2
 4005d00:	04002e0e 	bge	zero,r16,4005dbc <___vfprintf_internal_r+0xae4>
 4005d04:	04400404 	movi	r17,16
 4005d08:	d8801f17 	ldw	r2,124(sp)
 4005d0c:	8c04c40e 	bge	r17,r16,4007020 <___vfprintf_internal_r+0x1d48>
 4005d10:	01410074 	movhi	r5,1025
 4005d14:	29595284 	addi	r5,r5,25930
 4005d18:	d9403515 	stw	r5,212(sp)
 4005d1c:	048001c4 	movi	r18,7
 4005d20:	dcc02d17 	ldw	r19,180(sp)
 4005d24:	00000306 	br	4005d34 <___vfprintf_internal_r+0xa5c>
 4005d28:	843ffc04 	addi	r16,r16,-16
 4005d2c:	42000204 	addi	r8,r8,8
 4005d30:	8c00130e 	bge	r17,r16,4005d80 <___vfprintf_internal_r+0xaa8>
 4005d34:	01010074 	movhi	r4,1025
 4005d38:	18c00404 	addi	r3,r3,16
 4005d3c:	10800044 	addi	r2,r2,1
 4005d40:	21195284 	addi	r4,r4,25930
 4005d44:	41000015 	stw	r4,0(r8)
 4005d48:	44400115 	stw	r17,4(r8)
 4005d4c:	d8c02015 	stw	r3,128(sp)
 4005d50:	d8801f15 	stw	r2,124(sp)
 4005d54:	90bff40e 	bge	r18,r2,4005d28 <__alt_data_end+0xfc005d28>
 4005d58:	d9801e04 	addi	r6,sp,120
 4005d5c:	b80b883a 	mov	r5,r23
 4005d60:	9809883a 	mov	r4,r19
 4005d64:	400c1500 	call	400c150 <__sprint_r>
 4005d68:	103e5f1e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 4005d6c:	843ffc04 	addi	r16,r16,-16
 4005d70:	d8c02017 	ldw	r3,128(sp)
 4005d74:	d8801f17 	ldw	r2,124(sp)
 4005d78:	da000404 	addi	r8,sp,16
 4005d7c:	8c3fed16 	blt	r17,r16,4005d34 <__alt_data_end+0xfc005d34>
 4005d80:	d9403517 	ldw	r5,212(sp)
 4005d84:	1c07883a 	add	r3,r3,r16
 4005d88:	10800044 	addi	r2,r2,1
 4005d8c:	41400015 	stw	r5,0(r8)
 4005d90:	44000115 	stw	r16,4(r8)
 4005d94:	d8c02015 	stw	r3,128(sp)
 4005d98:	d8801f15 	stw	r2,124(sp)
 4005d9c:	010001c4 	movi	r4,7
 4005da0:	2080060e 	bge	r4,r2,4005dbc <___vfprintf_internal_r+0xae4>
 4005da4:	d9002d17 	ldw	r4,180(sp)
 4005da8:	d9801e04 	addi	r6,sp,120
 4005dac:	b80b883a 	mov	r5,r23
 4005db0:	400c1500 	call	400c150 <__sprint_r>
 4005db4:	103e4c1e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 4005db8:	d8c02017 	ldw	r3,128(sp)
 4005dbc:	d8803117 	ldw	r2,196(sp)
 4005dc0:	d9002917 	ldw	r4,164(sp)
 4005dc4:	1100010e 	bge	r2,r4,4005dcc <___vfprintf_internal_r+0xaf4>
 4005dc8:	2005883a 	mov	r2,r4
 4005dcc:	d9402f17 	ldw	r5,188(sp)
 4005dd0:	288b883a 	add	r5,r5,r2
 4005dd4:	d9402f15 	stw	r5,188(sp)
 4005dd8:	1801c01e 	bne	r3,zero,40064dc <___vfprintf_internal_r+0x1204>
 4005ddc:	a8800007 	ldb	r2,0(r21)
 4005de0:	d8001f15 	stw	zero,124(sp)
 4005de4:	da000404 	addi	r8,sp,16
 4005de8:	103d751e 	bne	r2,zero,40053c0 <__alt_data_end+0xfc0053c0>
 4005dec:	a823883a 	mov	r17,r21
 4005df0:	003d8b06 	br	4005420 <__alt_data_end+0xfc005420>
 4005df4:	8025883a 	mov	r18,r16
 4005df8:	dc002903 	ldbu	r16,164(sp)
 4005dfc:	e011883a 	mov	r8,fp
 4005e00:	84003fcc 	andi	r16,r16,255
 4005e04:	8005e51e 	bne	r16,zero,400759c <___vfprintf_internal_r+0x22c4>
 4005e08:	94800414 	ori	r18,r18,16
 4005e0c:	9080080c 	andi	r2,r18,32
 4005e10:	10022b26 	beq	r2,zero,40066c0 <___vfprintf_internal_r+0x13e8>
 4005e14:	d9002e17 	ldw	r4,184(sp)
 4005e18:	d9402a17 	ldw	r5,168(sp)
 4005e1c:	d8002785 	stb	zero,158(sp)
 4005e20:	20c00204 	addi	r3,r4,8
 4005e24:	24c00017 	ldw	r19,0(r4)
 4005e28:	25800117 	ldw	r22,4(r4)
 4005e2c:	28042e16 	blt	r5,zero,4006ee8 <___vfprintf_internal_r+0x1c10>
 4005e30:	013fdfc4 	movi	r4,-129
 4005e34:	9d84b03a 	or	r2,r19,r22
 4005e38:	d8c02e15 	stw	r3,184(sp)
 4005e3c:	9124703a 	and	r18,r18,r4
 4005e40:	0039883a 	mov	fp,zero
 4005e44:	103e801e 	bne	r2,zero,4005848 <__alt_data_end+0xfc005848>
 4005e48:	d9002a17 	ldw	r4,168(sp)
 4005e4c:	2002e01e 	bne	r4,zero,40069d0 <___vfprintf_internal_r+0x16f8>
 4005e50:	d8002a15 	stw	zero,168(sp)
 4005e54:	d8002b15 	stw	zero,172(sp)
 4005e58:	dc001e04 	addi	r16,sp,120
 4005e5c:	003ef506 	br	4005a34 <__alt_data_end+0xfc005a34>
 4005e60:	8025883a 	mov	r18,r16
 4005e64:	dc002903 	ldbu	r16,164(sp)
 4005e68:	e011883a 	mov	r8,fp
 4005e6c:	84003fcc 	andi	r16,r16,255
 4005e70:	8005ba1e 	bne	r16,zero,400755c <___vfprintf_internal_r+0x2284>
 4005e74:	01010074 	movhi	r4,1025
 4005e78:	21194204 	addi	r4,r4,25864
 4005e7c:	d9003915 	stw	r4,228(sp)
 4005e80:	9080080c 	andi	r2,r18,32
 4005e84:	10006126 	beq	r2,zero,400600c <___vfprintf_internal_r+0xd34>
 4005e88:	d9402e17 	ldw	r5,184(sp)
 4005e8c:	2cc00017 	ldw	r19,0(r5)
 4005e90:	2d800117 	ldw	r22,4(r5)
 4005e94:	29400204 	addi	r5,r5,8
 4005e98:	d9402e15 	stw	r5,184(sp)
 4005e9c:	9080004c 	andi	r2,r18,1
 4005ea0:	1001ac26 	beq	r2,zero,4006554 <___vfprintf_internal_r+0x127c>
 4005ea4:	9d84b03a 	or	r2,r19,r22
 4005ea8:	10038526 	beq	r2,zero,4006cc0 <___vfprintf_internal_r+0x19e8>
 4005eac:	d8c02a17 	ldw	r3,168(sp)
 4005eb0:	00800c04 	movi	r2,48
 4005eb4:	d8802705 	stb	r2,156(sp)
 4005eb8:	dc402745 	stb	r17,157(sp)
 4005ebc:	d8002785 	stb	zero,158(sp)
 4005ec0:	90800094 	ori	r2,r18,2
 4005ec4:	18047916 	blt	r3,zero,40070ac <___vfprintf_internal_r+0x1dd4>
 4005ec8:	00bfdfc4 	movi	r2,-129
 4005ecc:	90a4703a 	and	r18,r18,r2
 4005ed0:	94800094 	ori	r18,r18,2
 4005ed4:	0039883a 	mov	fp,zero
 4005ed8:	d9003917 	ldw	r4,228(sp)
 4005edc:	dc001e04 	addi	r16,sp,120
 4005ee0:	988003cc 	andi	r2,r19,15
 4005ee4:	b006973a 	slli	r3,r22,28
 4005ee8:	2085883a 	add	r2,r4,r2
 4005eec:	9826d13a 	srli	r19,r19,4
 4005ef0:	10800003 	ldbu	r2,0(r2)
 4005ef4:	b02cd13a 	srli	r22,r22,4
 4005ef8:	843fffc4 	addi	r16,r16,-1
 4005efc:	1ce6b03a 	or	r19,r3,r19
 4005f00:	80800005 	stb	r2,0(r16)
 4005f04:	9d84b03a 	or	r2,r19,r22
 4005f08:	103ff51e 	bne	r2,zero,4005ee0 <__alt_data_end+0xfc005ee0>
 4005f0c:	d8c02817 	ldw	r3,160(sp)
 4005f10:	1c07c83a 	sub	r3,r3,r16
 4005f14:	d8c02b15 	stw	r3,172(sp)
 4005f18:	003ec606 	br	4005a34 <__alt_data_end+0xfc005a34>
 4005f1c:	8025883a 	mov	r18,r16
 4005f20:	dc002903 	ldbu	r16,164(sp)
 4005f24:	e011883a 	mov	r8,fp
 4005f28:	84003fcc 	andi	r16,r16,255
 4005f2c:	803e9626 	beq	r16,zero,4005988 <__alt_data_end+0xfc005988>
 4005f30:	d8c02b03 	ldbu	r3,172(sp)
 4005f34:	d8c02785 	stb	r3,158(sp)
 4005f38:	003e9306 	br	4005988 <__alt_data_end+0xfc005988>
 4005f3c:	00c00044 	movi	r3,1
 4005f40:	d8c02905 	stb	r3,164(sp)
 4005f44:	00c00ac4 	movi	r3,43
 4005f48:	d8c02b05 	stb	r3,172(sp)
 4005f4c:	ac400007 	ldb	r17,0(r21)
 4005f50:	003d4306 	br	4005460 <__alt_data_end+0xfc005460>
 4005f54:	84000814 	ori	r16,r16,32
 4005f58:	ac400007 	ldb	r17,0(r21)
 4005f5c:	003d4006 	br	4005460 <__alt_data_end+0xfc005460>
 4005f60:	d8802e17 	ldw	r2,184(sp)
 4005f64:	8025883a 	mov	r18,r16
 4005f68:	d8002785 	stb	zero,158(sp)
 4005f6c:	14000017 	ldw	r16,0(r2)
 4005f70:	e011883a 	mov	r8,fp
 4005f74:	14c00104 	addi	r19,r2,4
 4005f78:	80042d26 	beq	r16,zero,4007030 <___vfprintf_internal_r+0x1d58>
 4005f7c:	d8c02a17 	ldw	r3,168(sp)
 4005f80:	1803e416 	blt	r3,zero,4006f14 <___vfprintf_internal_r+0x1c3c>
 4005f84:	180d883a 	mov	r6,r3
 4005f88:	000b883a 	mov	r5,zero
 4005f8c:	8009883a 	mov	r4,r16
 4005f90:	df003d15 	stw	fp,244(sp)
 4005f94:	400a4040 	call	400a404 <memchr>
 4005f98:	da003d17 	ldw	r8,244(sp)
 4005f9c:	10046826 	beq	r2,zero,4007140 <___vfprintf_internal_r+0x1e68>
 4005fa0:	1405c83a 	sub	r2,r2,r16
 4005fa4:	d8802b15 	stw	r2,172(sp)
 4005fa8:	1003e016 	blt	r2,zero,4006f2c <___vfprintf_internal_r+0x1c54>
 4005fac:	df002783 	ldbu	fp,158(sp)
 4005fb0:	d8802915 	stw	r2,164(sp)
 4005fb4:	dcc02e15 	stw	r19,184(sp)
 4005fb8:	d8002a15 	stw	zero,168(sp)
 4005fbc:	d8003215 	stw	zero,200(sp)
 4005fc0:	003ea206 	br	4005a4c <__alt_data_end+0xfc005a4c>
 4005fc4:	8025883a 	mov	r18,r16
 4005fc8:	dc002903 	ldbu	r16,164(sp)
 4005fcc:	e011883a 	mov	r8,fp
 4005fd0:	84003fcc 	andi	r16,r16,255
 4005fd4:	803f8d26 	beq	r16,zero,4005e0c <__alt_data_end+0xfc005e0c>
 4005fd8:	d8c02b03 	ldbu	r3,172(sp)
 4005fdc:	d8c02785 	stb	r3,158(sp)
 4005fe0:	003f8a06 	br	4005e0c <__alt_data_end+0xfc005e0c>
 4005fe4:	8025883a 	mov	r18,r16
 4005fe8:	dc002903 	ldbu	r16,164(sp)
 4005fec:	e011883a 	mov	r8,fp
 4005ff0:	84003fcc 	andi	r16,r16,255
 4005ff4:	8005661e 	bne	r16,zero,4007590 <___vfprintf_internal_r+0x22b8>
 4005ff8:	01010074 	movhi	r4,1025
 4005ffc:	21194704 	addi	r4,r4,25884
 4006000:	d9003915 	stw	r4,228(sp)
 4006004:	9080080c 	andi	r2,r18,32
 4006008:	103f9f1e 	bne	r2,zero,4005e88 <__alt_data_end+0xfc005e88>
 400600c:	9080040c 	andi	r2,r18,16
 4006010:	1002eb26 	beq	r2,zero,4006bc0 <___vfprintf_internal_r+0x18e8>
 4006014:	d8802e17 	ldw	r2,184(sp)
 4006018:	002d883a 	mov	r22,zero
 400601c:	14c00017 	ldw	r19,0(r2)
 4006020:	10800104 	addi	r2,r2,4
 4006024:	d8802e15 	stw	r2,184(sp)
 4006028:	003f9c06 	br	4005e9c <__alt_data_end+0xfc005e9c>
 400602c:	d8802b07 	ldb	r2,172(sp)
 4006030:	1002e11e 	bne	r2,zero,4006bb8 <___vfprintf_internal_r+0x18e0>
 4006034:	00c00044 	movi	r3,1
 4006038:	d8c02905 	stb	r3,164(sp)
 400603c:	00c00804 	movi	r3,32
 4006040:	d8c02b05 	stb	r3,172(sp)
 4006044:	ac400007 	ldb	r17,0(r21)
 4006048:	003d0506 	br	4005460 <__alt_data_end+0xfc005460>
 400604c:	84000054 	ori	r16,r16,1
 4006050:	ac400007 	ldb	r17,0(r21)
 4006054:	003d0206 	br	4005460 <__alt_data_end+0xfc005460>
 4006058:	8025883a 	mov	r18,r16
 400605c:	dc002903 	ldbu	r16,164(sp)
 4006060:	e011883a 	mov	r8,fp
 4006064:	84003fcc 	andi	r16,r16,255
 4006068:	803de726 	beq	r16,zero,4005808 <__alt_data_end+0xfc005808>
 400606c:	d8c02b03 	ldbu	r3,172(sp)
 4006070:	d8c02785 	stb	r3,158(sp)
 4006074:	003de406 	br	4005808 <__alt_data_end+0xfc005808>
 4006078:	84001014 	ori	r16,r16,64
 400607c:	ac400007 	ldb	r17,0(r21)
 4006080:	003cf706 	br	4005460 <__alt_data_end+0xfc005460>
 4006084:	ac400007 	ldb	r17,0(r21)
 4006088:	00801b04 	movi	r2,108
 400608c:	88838f26 	beq	r17,r2,4006ecc <___vfprintf_internal_r+0x1bf4>
 4006090:	84000414 	ori	r16,r16,16
 4006094:	003cf206 	br	4005460 <__alt_data_end+0xfc005460>
 4006098:	8025883a 	mov	r18,r16
 400609c:	dc002903 	ldbu	r16,164(sp)
 40060a0:	e011883a 	mov	r8,fp
 40060a4:	84003fcc 	andi	r16,r16,255
 40060a8:	80053f1e 	bne	r16,zero,40075a8 <___vfprintf_internal_r+0x22d0>
 40060ac:	9080080c 	andi	r2,r18,32
 40060b0:	1002d226 	beq	r2,zero,4006bfc <___vfprintf_internal_r+0x1924>
 40060b4:	d9002e17 	ldw	r4,184(sp)
 40060b8:	d9402f17 	ldw	r5,188(sp)
 40060bc:	20800017 	ldw	r2,0(r4)
 40060c0:	2807d7fa 	srai	r3,r5,31
 40060c4:	21000104 	addi	r4,r4,4
 40060c8:	d9002e15 	stw	r4,184(sp)
 40060cc:	11400015 	stw	r5,0(r2)
 40060d0:	10c00115 	stw	r3,4(r2)
 40060d4:	003cb806 	br	40053b8 <__alt_data_end+0xfc0053b8>
 40060d8:	d8c02e17 	ldw	r3,184(sp)
 40060dc:	d9002e17 	ldw	r4,184(sp)
 40060e0:	8025883a 	mov	r18,r16
 40060e4:	18800017 	ldw	r2,0(r3)
 40060e8:	21000104 	addi	r4,r4,4
 40060ec:	00c00044 	movi	r3,1
 40060f0:	e011883a 	mov	r8,fp
 40060f4:	d8c02915 	stw	r3,164(sp)
 40060f8:	d8002785 	stb	zero,158(sp)
 40060fc:	d8801405 	stb	r2,80(sp)
 4006100:	d9002e15 	stw	r4,184(sp)
 4006104:	d8c02b15 	stw	r3,172(sp)
 4006108:	d8002a15 	stw	zero,168(sp)
 400610c:	d8003215 	stw	zero,200(sp)
 4006110:	dc001404 	addi	r16,sp,80
 4006114:	0039883a 	mov	fp,zero
 4006118:	003e5306 	br	4005a68 <__alt_data_end+0xfc005a68>
 400611c:	01010074 	movhi	r4,1025
 4006120:	21194704 	addi	r4,r4,25884
 4006124:	0039883a 	mov	fp,zero
 4006128:	d9003915 	stw	r4,228(sp)
 400612c:	04401e04 	movi	r17,120
 4006130:	003f6906 	br	4005ed8 <__alt_data_end+0xfc005ed8>
 4006134:	8025883a 	mov	r18,r16
 4006138:	dc002903 	ldbu	r16,164(sp)
 400613c:	e011883a 	mov	r8,fp
 4006140:	84003fcc 	andi	r16,r16,255
 4006144:	8005081e 	bne	r16,zero,4007568 <___vfprintf_internal_r+0x2290>
 4006148:	883d6126 	beq	r17,zero,40056d0 <__alt_data_end+0xfc0056d0>
 400614c:	00c00044 	movi	r3,1
 4006150:	d8c02915 	stw	r3,164(sp)
 4006154:	dc401405 	stb	r17,80(sp)
 4006158:	d8002785 	stb	zero,158(sp)
 400615c:	003fe906 	br	4006104 <__alt_data_end+0xfc006104>
 4006160:	01410074 	movhi	r5,1025
 4006164:	29594704 	addi	r5,r5,25884
 4006168:	d9403915 	stw	r5,228(sp)
 400616c:	d8c02e15 	stw	r3,184(sp)
 4006170:	1025883a 	mov	r18,r2
 4006174:	04401e04 	movi	r17,120
 4006178:	9d84b03a 	or	r2,r19,r22
 400617c:	1000fc1e 	bne	r2,zero,4006570 <___vfprintf_internal_r+0x1298>
 4006180:	0039883a 	mov	fp,zero
 4006184:	00800084 	movi	r2,2
 4006188:	10803fcc 	andi	r2,r2,255
 400618c:	00c00044 	movi	r3,1
 4006190:	10c20f26 	beq	r2,r3,40069d0 <___vfprintf_internal_r+0x16f8>
 4006194:	00c00084 	movi	r3,2
 4006198:	10fd3326 	beq	r2,r3,4005668 <__alt_data_end+0xfc005668>
 400619c:	003e0b06 	br	40059cc <__alt_data_end+0xfc0059cc>
 40061a0:	d8c02017 	ldw	r3,128(sp)
 40061a4:	003e7106 	br	4005b6c <__alt_data_end+0xfc005b6c>
 40061a8:	00801944 	movi	r2,101
 40061ac:	14407e0e 	bge	r2,r17,40063a8 <___vfprintf_internal_r+0x10d0>
 40061b0:	d9003617 	ldw	r4,216(sp)
 40061b4:	d9403817 	ldw	r5,224(sp)
 40061b8:	000d883a 	mov	r6,zero
 40061bc:	000f883a 	mov	r7,zero
 40061c0:	d8c03c15 	stw	r3,240(sp)
 40061c4:	da003d15 	stw	r8,244(sp)
 40061c8:	400fdf80 	call	400fdf8 <__eqdf2>
 40061cc:	d8c03c17 	ldw	r3,240(sp)
 40061d0:	da003d17 	ldw	r8,244(sp)
 40061d4:	1000f71e 	bne	r2,zero,40065b4 <___vfprintf_internal_r+0x12dc>
 40061d8:	d8801f17 	ldw	r2,124(sp)
 40061dc:	01010074 	movhi	r4,1025
 40061e0:	21194e04 	addi	r4,r4,25912
 40061e4:	18c00044 	addi	r3,r3,1
 40061e8:	10800044 	addi	r2,r2,1
 40061ec:	41000015 	stw	r4,0(r8)
 40061f0:	01000044 	movi	r4,1
 40061f4:	41000115 	stw	r4,4(r8)
 40061f8:	d8c02015 	stw	r3,128(sp)
 40061fc:	d8801f15 	stw	r2,124(sp)
 4006200:	010001c4 	movi	r4,7
 4006204:	2082b816 	blt	r4,r2,4006ce8 <___vfprintf_internal_r+0x1a10>
 4006208:	42000204 	addi	r8,r8,8
 400620c:	d8802617 	ldw	r2,152(sp)
 4006210:	d9403317 	ldw	r5,204(sp)
 4006214:	11400216 	blt	r2,r5,4006220 <___vfprintf_internal_r+0xf48>
 4006218:	9080004c 	andi	r2,r18,1
 400621c:	103eb326 	beq	r2,zero,4005cec <__alt_data_end+0xfc005cec>
 4006220:	d8803717 	ldw	r2,220(sp)
 4006224:	d9003417 	ldw	r4,208(sp)
 4006228:	d9403717 	ldw	r5,220(sp)
 400622c:	1887883a 	add	r3,r3,r2
 4006230:	d8801f17 	ldw	r2,124(sp)
 4006234:	41000015 	stw	r4,0(r8)
 4006238:	41400115 	stw	r5,4(r8)
 400623c:	10800044 	addi	r2,r2,1
 4006240:	d8c02015 	stw	r3,128(sp)
 4006244:	d8801f15 	stw	r2,124(sp)
 4006248:	010001c4 	movi	r4,7
 400624c:	20832916 	blt	r4,r2,4006ef4 <___vfprintf_internal_r+0x1c1c>
 4006250:	42000204 	addi	r8,r8,8
 4006254:	d8803317 	ldw	r2,204(sp)
 4006258:	143fffc4 	addi	r16,r2,-1
 400625c:	043ea30e 	bge	zero,r16,4005cec <__alt_data_end+0xfc005cec>
 4006260:	04400404 	movi	r17,16
 4006264:	d8801f17 	ldw	r2,124(sp)
 4006268:	8c00880e 	bge	r17,r16,400648c <___vfprintf_internal_r+0x11b4>
 400626c:	01410074 	movhi	r5,1025
 4006270:	29594e84 	addi	r5,r5,25914
 4006274:	d9402c15 	stw	r5,176(sp)
 4006278:	058001c4 	movi	r22,7
 400627c:	dcc02d17 	ldw	r19,180(sp)
 4006280:	00000306 	br	4006290 <___vfprintf_internal_r+0xfb8>
 4006284:	42000204 	addi	r8,r8,8
 4006288:	843ffc04 	addi	r16,r16,-16
 400628c:	8c00820e 	bge	r17,r16,4006498 <___vfprintf_internal_r+0x11c0>
 4006290:	18c00404 	addi	r3,r3,16
 4006294:	10800044 	addi	r2,r2,1
 4006298:	45000015 	stw	r20,0(r8)
 400629c:	44400115 	stw	r17,4(r8)
 40062a0:	d8c02015 	stw	r3,128(sp)
 40062a4:	d8801f15 	stw	r2,124(sp)
 40062a8:	b0bff60e 	bge	r22,r2,4006284 <__alt_data_end+0xfc006284>
 40062ac:	d9801e04 	addi	r6,sp,120
 40062b0:	b80b883a 	mov	r5,r23
 40062b4:	9809883a 	mov	r4,r19
 40062b8:	400c1500 	call	400c150 <__sprint_r>
 40062bc:	103d0a1e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 40062c0:	d8c02017 	ldw	r3,128(sp)
 40062c4:	d8801f17 	ldw	r2,124(sp)
 40062c8:	da000404 	addi	r8,sp,16
 40062cc:	003fee06 	br	4006288 <__alt_data_end+0xfc006288>
 40062d0:	d9403117 	ldw	r5,196(sp)
 40062d4:	d8802917 	ldw	r2,164(sp)
 40062d8:	28adc83a 	sub	r22,r5,r2
 40062dc:	05be410e 	bge	zero,r22,4005be4 <__alt_data_end+0xfc005be4>
 40062e0:	07000404 	movi	fp,16
 40062e4:	d8801f17 	ldw	r2,124(sp)
 40062e8:	e5838f0e 	bge	fp,r22,4007128 <___vfprintf_internal_r+0x1e50>
 40062ec:	01410074 	movhi	r5,1025
 40062f0:	29594e84 	addi	r5,r5,25914
 40062f4:	dc403015 	stw	r17,192(sp)
 40062f8:	d9402c15 	stw	r5,176(sp)
 40062fc:	b023883a 	mov	r17,r22
 4006300:	04c001c4 	movi	r19,7
 4006304:	a82d883a 	mov	r22,r21
 4006308:	902b883a 	mov	r21,r18
 400630c:	8025883a 	mov	r18,r16
 4006310:	dc002d17 	ldw	r16,180(sp)
 4006314:	00000306 	br	4006324 <___vfprintf_internal_r+0x104c>
 4006318:	8c7ffc04 	addi	r17,r17,-16
 400631c:	42000204 	addi	r8,r8,8
 4006320:	e440110e 	bge	fp,r17,4006368 <___vfprintf_internal_r+0x1090>
 4006324:	18c00404 	addi	r3,r3,16
 4006328:	10800044 	addi	r2,r2,1
 400632c:	45000015 	stw	r20,0(r8)
 4006330:	47000115 	stw	fp,4(r8)
 4006334:	d8c02015 	stw	r3,128(sp)
 4006338:	d8801f15 	stw	r2,124(sp)
 400633c:	98bff60e 	bge	r19,r2,4006318 <__alt_data_end+0xfc006318>
 4006340:	d9801e04 	addi	r6,sp,120
 4006344:	b80b883a 	mov	r5,r23
 4006348:	8009883a 	mov	r4,r16
 400634c:	400c1500 	call	400c150 <__sprint_r>
 4006350:	103ce51e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 4006354:	8c7ffc04 	addi	r17,r17,-16
 4006358:	d8c02017 	ldw	r3,128(sp)
 400635c:	d8801f17 	ldw	r2,124(sp)
 4006360:	da000404 	addi	r8,sp,16
 4006364:	e47fef16 	blt	fp,r17,4006324 <__alt_data_end+0xfc006324>
 4006368:	9021883a 	mov	r16,r18
 400636c:	a825883a 	mov	r18,r21
 4006370:	b02b883a 	mov	r21,r22
 4006374:	882d883a 	mov	r22,r17
 4006378:	dc403017 	ldw	r17,192(sp)
 400637c:	d9002c17 	ldw	r4,176(sp)
 4006380:	1d87883a 	add	r3,r3,r22
 4006384:	10800044 	addi	r2,r2,1
 4006388:	41000015 	stw	r4,0(r8)
 400638c:	45800115 	stw	r22,4(r8)
 4006390:	d8c02015 	stw	r3,128(sp)
 4006394:	d8801f15 	stw	r2,124(sp)
 4006398:	010001c4 	movi	r4,7
 400639c:	20818e16 	blt	r4,r2,40069d8 <___vfprintf_internal_r+0x1700>
 40063a0:	42000204 	addi	r8,r8,8
 40063a4:	003e0f06 	br	4005be4 <__alt_data_end+0xfc005be4>
 40063a8:	d9403317 	ldw	r5,204(sp)
 40063ac:	00800044 	movi	r2,1
 40063b0:	18c00044 	addi	r3,r3,1
 40063b4:	1141530e 	bge	r2,r5,4006904 <___vfprintf_internal_r+0x162c>
 40063b8:	dc401f17 	ldw	r17,124(sp)
 40063bc:	00800044 	movi	r2,1
 40063c0:	40800115 	stw	r2,4(r8)
 40063c4:	8c400044 	addi	r17,r17,1
 40063c8:	44000015 	stw	r16,0(r8)
 40063cc:	d8c02015 	stw	r3,128(sp)
 40063d0:	dc401f15 	stw	r17,124(sp)
 40063d4:	008001c4 	movi	r2,7
 40063d8:	14416b16 	blt	r2,r17,4006988 <___vfprintf_internal_r+0x16b0>
 40063dc:	42000204 	addi	r8,r8,8
 40063e0:	d8803717 	ldw	r2,220(sp)
 40063e4:	d9003417 	ldw	r4,208(sp)
 40063e8:	8c400044 	addi	r17,r17,1
 40063ec:	10c7883a 	add	r3,r2,r3
 40063f0:	40800115 	stw	r2,4(r8)
 40063f4:	41000015 	stw	r4,0(r8)
 40063f8:	d8c02015 	stw	r3,128(sp)
 40063fc:	dc401f15 	stw	r17,124(sp)
 4006400:	008001c4 	movi	r2,7
 4006404:	14416916 	blt	r2,r17,40069ac <___vfprintf_internal_r+0x16d4>
 4006408:	45800204 	addi	r22,r8,8
 400640c:	d9003617 	ldw	r4,216(sp)
 4006410:	d9403817 	ldw	r5,224(sp)
 4006414:	000d883a 	mov	r6,zero
 4006418:	000f883a 	mov	r7,zero
 400641c:	d8c03c15 	stw	r3,240(sp)
 4006420:	400fdf80 	call	400fdf8 <__eqdf2>
 4006424:	d8c03c17 	ldw	r3,240(sp)
 4006428:	1000bc26 	beq	r2,zero,400671c <___vfprintf_internal_r+0x1444>
 400642c:	d9403317 	ldw	r5,204(sp)
 4006430:	84000044 	addi	r16,r16,1
 4006434:	8c400044 	addi	r17,r17,1
 4006438:	28bfffc4 	addi	r2,r5,-1
 400643c:	1887883a 	add	r3,r3,r2
 4006440:	b0800115 	stw	r2,4(r22)
 4006444:	b4000015 	stw	r16,0(r22)
 4006448:	d8c02015 	stw	r3,128(sp)
 400644c:	dc401f15 	stw	r17,124(sp)
 4006450:	008001c4 	movi	r2,7
 4006454:	14414316 	blt	r2,r17,4006964 <___vfprintf_internal_r+0x168c>
 4006458:	b5800204 	addi	r22,r22,8
 400645c:	d9003a17 	ldw	r4,232(sp)
 4006460:	df0022c4 	addi	fp,sp,139
 4006464:	8c400044 	addi	r17,r17,1
 4006468:	20c7883a 	add	r3,r4,r3
 400646c:	b7000015 	stw	fp,0(r22)
 4006470:	b1000115 	stw	r4,4(r22)
 4006474:	d8c02015 	stw	r3,128(sp)
 4006478:	dc401f15 	stw	r17,124(sp)
 400647c:	008001c4 	movi	r2,7
 4006480:	14400e16 	blt	r2,r17,40064bc <___vfprintf_internal_r+0x11e4>
 4006484:	b2000204 	addi	r8,r22,8
 4006488:	003e1806 	br	4005cec <__alt_data_end+0xfc005cec>
 400648c:	01010074 	movhi	r4,1025
 4006490:	21194e84 	addi	r4,r4,25914
 4006494:	d9002c15 	stw	r4,176(sp)
 4006498:	d9002c17 	ldw	r4,176(sp)
 400649c:	1c07883a 	add	r3,r3,r16
 40064a0:	44000115 	stw	r16,4(r8)
 40064a4:	41000015 	stw	r4,0(r8)
 40064a8:	10800044 	addi	r2,r2,1
 40064ac:	d8c02015 	stw	r3,128(sp)
 40064b0:	d8801f15 	stw	r2,124(sp)
 40064b4:	010001c4 	movi	r4,7
 40064b8:	20be0b0e 	bge	r4,r2,4005ce8 <__alt_data_end+0xfc005ce8>
 40064bc:	d9002d17 	ldw	r4,180(sp)
 40064c0:	d9801e04 	addi	r6,sp,120
 40064c4:	b80b883a 	mov	r5,r23
 40064c8:	400c1500 	call	400c150 <__sprint_r>
 40064cc:	103c861e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 40064d0:	d8c02017 	ldw	r3,128(sp)
 40064d4:	da000404 	addi	r8,sp,16
 40064d8:	003e0406 	br	4005cec <__alt_data_end+0xfc005cec>
 40064dc:	d9002d17 	ldw	r4,180(sp)
 40064e0:	d9801e04 	addi	r6,sp,120
 40064e4:	b80b883a 	mov	r5,r23
 40064e8:	400c1500 	call	400c150 <__sprint_r>
 40064ec:	103e3b26 	beq	r2,zero,4005ddc <__alt_data_end+0xfc005ddc>
 40064f0:	003c7d06 	br	40056e8 <__alt_data_end+0xfc0056e8>
 40064f4:	d9002d17 	ldw	r4,180(sp)
 40064f8:	d9801e04 	addi	r6,sp,120
 40064fc:	b80b883a 	mov	r5,r23
 4006500:	400c1500 	call	400c150 <__sprint_r>
 4006504:	103c781e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 4006508:	d8c02017 	ldw	r3,128(sp)
 400650c:	da000404 	addi	r8,sp,16
 4006510:	003de906 	br	4005cb8 <__alt_data_end+0xfc005cb8>
 4006514:	d9002d17 	ldw	r4,180(sp)
 4006518:	d9801e04 	addi	r6,sp,120
 400651c:	b80b883a 	mov	r5,r23
 4006520:	400c1500 	call	400c150 <__sprint_r>
 4006524:	103c701e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 4006528:	d8c02017 	ldw	r3,128(sp)
 400652c:	da000404 	addi	r8,sp,16
 4006530:	003d9b06 	br	4005ba0 <__alt_data_end+0xfc005ba0>
 4006534:	d9002d17 	ldw	r4,180(sp)
 4006538:	d9801e04 	addi	r6,sp,120
 400653c:	b80b883a 	mov	r5,r23
 4006540:	400c1500 	call	400c150 <__sprint_r>
 4006544:	103c681e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 4006548:	d8c02017 	ldw	r3,128(sp)
 400654c:	da000404 	addi	r8,sp,16
 4006550:	003da106 	br	4005bd8 <__alt_data_end+0xfc005bd8>
 4006554:	d9402a17 	ldw	r5,168(sp)
 4006558:	d8002785 	stb	zero,158(sp)
 400655c:	283f0616 	blt	r5,zero,4006178 <__alt_data_end+0xfc006178>
 4006560:	00ffdfc4 	movi	r3,-129
 4006564:	9d84b03a 	or	r2,r19,r22
 4006568:	90e4703a 	and	r18,r18,r3
 400656c:	103c3b26 	beq	r2,zero,400565c <__alt_data_end+0xfc00565c>
 4006570:	0039883a 	mov	fp,zero
 4006574:	003e5806 	br	4005ed8 <__alt_data_end+0xfc005ed8>
 4006578:	9080040c 	andi	r2,r18,16
 400657c:	1001b326 	beq	r2,zero,4006c4c <___vfprintf_internal_r+0x1974>
 4006580:	d8c02e17 	ldw	r3,184(sp)
 4006584:	d9002a17 	ldw	r4,168(sp)
 4006588:	d8002785 	stb	zero,158(sp)
 400658c:	18800104 	addi	r2,r3,4
 4006590:	1cc00017 	ldw	r19,0(r3)
 4006594:	002d883a 	mov	r22,zero
 4006598:	2001b516 	blt	r4,zero,4006c70 <___vfprintf_internal_r+0x1998>
 400659c:	00ffdfc4 	movi	r3,-129
 40065a0:	d8802e15 	stw	r2,184(sp)
 40065a4:	90e4703a 	and	r18,r18,r3
 40065a8:	983d0526 	beq	r19,zero,40059c0 <__alt_data_end+0xfc0059c0>
 40065ac:	0039883a 	mov	fp,zero
 40065b0:	003d0806 	br	40059d4 <__alt_data_end+0xfc0059d4>
 40065b4:	dc402617 	ldw	r17,152(sp)
 40065b8:	0441d30e 	bge	zero,r17,4006d08 <___vfprintf_internal_r+0x1a30>
 40065bc:	dc403217 	ldw	r17,200(sp)
 40065c0:	d8803317 	ldw	r2,204(sp)
 40065c4:	1440010e 	bge	r2,r17,40065cc <___vfprintf_internal_r+0x12f4>
 40065c8:	1023883a 	mov	r17,r2
 40065cc:	04400a0e 	bge	zero,r17,40065f8 <___vfprintf_internal_r+0x1320>
 40065d0:	d8801f17 	ldw	r2,124(sp)
 40065d4:	1c47883a 	add	r3,r3,r17
 40065d8:	44000015 	stw	r16,0(r8)
 40065dc:	10800044 	addi	r2,r2,1
 40065e0:	44400115 	stw	r17,4(r8)
 40065e4:	d8c02015 	stw	r3,128(sp)
 40065e8:	d8801f15 	stw	r2,124(sp)
 40065ec:	010001c4 	movi	r4,7
 40065f0:	20826516 	blt	r4,r2,4006f88 <___vfprintf_internal_r+0x1cb0>
 40065f4:	42000204 	addi	r8,r8,8
 40065f8:	88026116 	blt	r17,zero,4006f80 <___vfprintf_internal_r+0x1ca8>
 40065fc:	d9003217 	ldw	r4,200(sp)
 4006600:	2463c83a 	sub	r17,r4,r17
 4006604:	04407b0e 	bge	zero,r17,40067f4 <___vfprintf_internal_r+0x151c>
 4006608:	05800404 	movi	r22,16
 400660c:	d8801f17 	ldw	r2,124(sp)
 4006610:	b4419d0e 	bge	r22,r17,4006c88 <___vfprintf_internal_r+0x19b0>
 4006614:	01010074 	movhi	r4,1025
 4006618:	21194e84 	addi	r4,r4,25914
 400661c:	d9002c15 	stw	r4,176(sp)
 4006620:	070001c4 	movi	fp,7
 4006624:	dcc02d17 	ldw	r19,180(sp)
 4006628:	00000306 	br	4006638 <___vfprintf_internal_r+0x1360>
 400662c:	42000204 	addi	r8,r8,8
 4006630:	8c7ffc04 	addi	r17,r17,-16
 4006634:	b441970e 	bge	r22,r17,4006c94 <___vfprintf_internal_r+0x19bc>
 4006638:	18c00404 	addi	r3,r3,16
 400663c:	10800044 	addi	r2,r2,1
 4006640:	45000015 	stw	r20,0(r8)
 4006644:	45800115 	stw	r22,4(r8)
 4006648:	d8c02015 	stw	r3,128(sp)
 400664c:	d8801f15 	stw	r2,124(sp)
 4006650:	e0bff60e 	bge	fp,r2,400662c <__alt_data_end+0xfc00662c>
 4006654:	d9801e04 	addi	r6,sp,120
 4006658:	b80b883a 	mov	r5,r23
 400665c:	9809883a 	mov	r4,r19
 4006660:	400c1500 	call	400c150 <__sprint_r>
 4006664:	103c201e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 4006668:	d8c02017 	ldw	r3,128(sp)
 400666c:	d8801f17 	ldw	r2,124(sp)
 4006670:	da000404 	addi	r8,sp,16
 4006674:	003fee06 	br	4006630 <__alt_data_end+0xfc006630>
 4006678:	d9002d17 	ldw	r4,180(sp)
 400667c:	d9801e04 	addi	r6,sp,120
 4006680:	b80b883a 	mov	r5,r23
 4006684:	400c1500 	call	400c150 <__sprint_r>
 4006688:	103c171e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 400668c:	d8c02017 	ldw	r3,128(sp)
 4006690:	df002787 	ldb	fp,158(sp)
 4006694:	da000404 	addi	r8,sp,16
 4006698:	003d3406 	br	4005b6c <__alt_data_end+0xfc005b6c>
 400669c:	9080040c 	andi	r2,r18,16
 40066a0:	10016126 	beq	r2,zero,4006c28 <___vfprintf_internal_r+0x1950>
 40066a4:	d9402e17 	ldw	r5,184(sp)
 40066a8:	2cc00017 	ldw	r19,0(r5)
 40066ac:	29400104 	addi	r5,r5,4
 40066b0:	d9402e15 	stw	r5,184(sp)
 40066b4:	982dd7fa 	srai	r22,r19,31
 40066b8:	b005883a 	mov	r2,r22
 40066bc:	003c5a06 	br	4005828 <__alt_data_end+0xfc005828>
 40066c0:	9080040c 	andi	r2,r18,16
 40066c4:	10003526 	beq	r2,zero,400679c <___vfprintf_internal_r+0x14c4>
 40066c8:	d8c02e17 	ldw	r3,184(sp)
 40066cc:	d9002a17 	ldw	r4,168(sp)
 40066d0:	d8002785 	stb	zero,158(sp)
 40066d4:	18800104 	addi	r2,r3,4
 40066d8:	1cc00017 	ldw	r19,0(r3)
 40066dc:	002d883a 	mov	r22,zero
 40066e0:	20003716 	blt	r4,zero,40067c0 <___vfprintf_internal_r+0x14e8>
 40066e4:	00ffdfc4 	movi	r3,-129
 40066e8:	d8802e15 	stw	r2,184(sp)
 40066ec:	90e4703a 	and	r18,r18,r3
 40066f0:	0039883a 	mov	fp,zero
 40066f4:	983dd426 	beq	r19,zero,4005e48 <__alt_data_end+0xfc005e48>
 40066f8:	00800244 	movi	r2,9
 40066fc:	14fc5336 	bltu	r2,r19,400584c <__alt_data_end+0xfc00584c>
 4006700:	d8c02817 	ldw	r3,160(sp)
 4006704:	dc001dc4 	addi	r16,sp,119
 4006708:	9cc00c04 	addi	r19,r19,48
 400670c:	1c07c83a 	sub	r3,r3,r16
 4006710:	dcc01dc5 	stb	r19,119(sp)
 4006714:	d8c02b15 	stw	r3,172(sp)
 4006718:	003cc606 	br	4005a34 <__alt_data_end+0xfc005a34>
 400671c:	d8803317 	ldw	r2,204(sp)
 4006720:	143fffc4 	addi	r16,r2,-1
 4006724:	043f4d0e 	bge	zero,r16,400645c <__alt_data_end+0xfc00645c>
 4006728:	07000404 	movi	fp,16
 400672c:	e400810e 	bge	fp,r16,4006934 <___vfprintf_internal_r+0x165c>
 4006730:	01410074 	movhi	r5,1025
 4006734:	29594e84 	addi	r5,r5,25914
 4006738:	d9402c15 	stw	r5,176(sp)
 400673c:	01c001c4 	movi	r7,7
 4006740:	dcc02d17 	ldw	r19,180(sp)
 4006744:	00000306 	br	4006754 <___vfprintf_internal_r+0x147c>
 4006748:	b5800204 	addi	r22,r22,8
 400674c:	843ffc04 	addi	r16,r16,-16
 4006750:	e4007b0e 	bge	fp,r16,4006940 <___vfprintf_internal_r+0x1668>
 4006754:	18c00404 	addi	r3,r3,16
 4006758:	8c400044 	addi	r17,r17,1
 400675c:	b5000015 	stw	r20,0(r22)
 4006760:	b7000115 	stw	fp,4(r22)
 4006764:	d8c02015 	stw	r3,128(sp)
 4006768:	dc401f15 	stw	r17,124(sp)
 400676c:	3c7ff60e 	bge	r7,r17,4006748 <__alt_data_end+0xfc006748>
 4006770:	d9801e04 	addi	r6,sp,120
 4006774:	b80b883a 	mov	r5,r23
 4006778:	9809883a 	mov	r4,r19
 400677c:	d9c03c15 	stw	r7,240(sp)
 4006780:	400c1500 	call	400c150 <__sprint_r>
 4006784:	d9c03c17 	ldw	r7,240(sp)
 4006788:	103bd71e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 400678c:	d8c02017 	ldw	r3,128(sp)
 4006790:	dc401f17 	ldw	r17,124(sp)
 4006794:	dd800404 	addi	r22,sp,16
 4006798:	003fec06 	br	400674c <__alt_data_end+0xfc00674c>
 400679c:	9080100c 	andi	r2,r18,64
 40067a0:	d8002785 	stb	zero,158(sp)
 40067a4:	10010e26 	beq	r2,zero,4006be0 <___vfprintf_internal_r+0x1908>
 40067a8:	d9402e17 	ldw	r5,184(sp)
 40067ac:	d8c02a17 	ldw	r3,168(sp)
 40067b0:	002d883a 	mov	r22,zero
 40067b4:	28800104 	addi	r2,r5,4
 40067b8:	2cc0000b 	ldhu	r19,0(r5)
 40067bc:	183fc90e 	bge	r3,zero,40066e4 <__alt_data_end+0xfc0066e4>
 40067c0:	d8802e15 	stw	r2,184(sp)
 40067c4:	0039883a 	mov	fp,zero
 40067c8:	9d84b03a 	or	r2,r19,r22
 40067cc:	103c1e1e 	bne	r2,zero,4005848 <__alt_data_end+0xfc005848>
 40067d0:	00800044 	movi	r2,1
 40067d4:	003e6c06 	br	4006188 <__alt_data_end+0xfc006188>
 40067d8:	d9002d17 	ldw	r4,180(sp)
 40067dc:	d9801e04 	addi	r6,sp,120
 40067e0:	b80b883a 	mov	r5,r23
 40067e4:	400c1500 	call	400c150 <__sprint_r>
 40067e8:	103bbf1e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 40067ec:	d8c02017 	ldw	r3,128(sp)
 40067f0:	da000404 	addi	r8,sp,16
 40067f4:	d9003217 	ldw	r4,200(sp)
 40067f8:	d8802617 	ldw	r2,152(sp)
 40067fc:	d9403317 	ldw	r5,204(sp)
 4006800:	8123883a 	add	r17,r16,r4
 4006804:	11400216 	blt	r2,r5,4006810 <___vfprintf_internal_r+0x1538>
 4006808:	9100004c 	andi	r4,r18,1
 400680c:	20000d26 	beq	r4,zero,4006844 <___vfprintf_internal_r+0x156c>
 4006810:	d9003717 	ldw	r4,220(sp)
 4006814:	d9403417 	ldw	r5,208(sp)
 4006818:	1907883a 	add	r3,r3,r4
 400681c:	d9001f17 	ldw	r4,124(sp)
 4006820:	41400015 	stw	r5,0(r8)
 4006824:	d9403717 	ldw	r5,220(sp)
 4006828:	21000044 	addi	r4,r4,1
 400682c:	d8c02015 	stw	r3,128(sp)
 4006830:	41400115 	stw	r5,4(r8)
 4006834:	d9001f15 	stw	r4,124(sp)
 4006838:	014001c4 	movi	r5,7
 400683c:	2901e816 	blt	r5,r4,4006fe0 <___vfprintf_internal_r+0x1d08>
 4006840:	42000204 	addi	r8,r8,8
 4006844:	d9003317 	ldw	r4,204(sp)
 4006848:	8121883a 	add	r16,r16,r4
 400684c:	2085c83a 	sub	r2,r4,r2
 4006850:	8461c83a 	sub	r16,r16,r17
 4006854:	1400010e 	bge	r2,r16,400685c <___vfprintf_internal_r+0x1584>
 4006858:	1021883a 	mov	r16,r2
 400685c:	04000a0e 	bge	zero,r16,4006888 <___vfprintf_internal_r+0x15b0>
 4006860:	d9001f17 	ldw	r4,124(sp)
 4006864:	1c07883a 	add	r3,r3,r16
 4006868:	44400015 	stw	r17,0(r8)
 400686c:	21000044 	addi	r4,r4,1
 4006870:	44000115 	stw	r16,4(r8)
 4006874:	d8c02015 	stw	r3,128(sp)
 4006878:	d9001f15 	stw	r4,124(sp)
 400687c:	014001c4 	movi	r5,7
 4006880:	2901fb16 	blt	r5,r4,4007070 <___vfprintf_internal_r+0x1d98>
 4006884:	42000204 	addi	r8,r8,8
 4006888:	8001f716 	blt	r16,zero,4007068 <___vfprintf_internal_r+0x1d90>
 400688c:	1421c83a 	sub	r16,r2,r16
 4006890:	043d160e 	bge	zero,r16,4005cec <__alt_data_end+0xfc005cec>
 4006894:	04400404 	movi	r17,16
 4006898:	d8801f17 	ldw	r2,124(sp)
 400689c:	8c3efb0e 	bge	r17,r16,400648c <__alt_data_end+0xfc00648c>
 40068a0:	01410074 	movhi	r5,1025
 40068a4:	29594e84 	addi	r5,r5,25914
 40068a8:	d9402c15 	stw	r5,176(sp)
 40068ac:	058001c4 	movi	r22,7
 40068b0:	dcc02d17 	ldw	r19,180(sp)
 40068b4:	00000306 	br	40068c4 <___vfprintf_internal_r+0x15ec>
 40068b8:	42000204 	addi	r8,r8,8
 40068bc:	843ffc04 	addi	r16,r16,-16
 40068c0:	8c3ef50e 	bge	r17,r16,4006498 <__alt_data_end+0xfc006498>
 40068c4:	18c00404 	addi	r3,r3,16
 40068c8:	10800044 	addi	r2,r2,1
 40068cc:	45000015 	stw	r20,0(r8)
 40068d0:	44400115 	stw	r17,4(r8)
 40068d4:	d8c02015 	stw	r3,128(sp)
 40068d8:	d8801f15 	stw	r2,124(sp)
 40068dc:	b0bff60e 	bge	r22,r2,40068b8 <__alt_data_end+0xfc0068b8>
 40068e0:	d9801e04 	addi	r6,sp,120
 40068e4:	b80b883a 	mov	r5,r23
 40068e8:	9809883a 	mov	r4,r19
 40068ec:	400c1500 	call	400c150 <__sprint_r>
 40068f0:	103b7d1e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 40068f4:	d8c02017 	ldw	r3,128(sp)
 40068f8:	d8801f17 	ldw	r2,124(sp)
 40068fc:	da000404 	addi	r8,sp,16
 4006900:	003fee06 	br	40068bc <__alt_data_end+0xfc0068bc>
 4006904:	9088703a 	and	r4,r18,r2
 4006908:	203eab1e 	bne	r4,zero,40063b8 <__alt_data_end+0xfc0063b8>
 400690c:	dc401f17 	ldw	r17,124(sp)
 4006910:	40800115 	stw	r2,4(r8)
 4006914:	44000015 	stw	r16,0(r8)
 4006918:	8c400044 	addi	r17,r17,1
 400691c:	d8c02015 	stw	r3,128(sp)
 4006920:	dc401f15 	stw	r17,124(sp)
 4006924:	008001c4 	movi	r2,7
 4006928:	14400e16 	blt	r2,r17,4006964 <___vfprintf_internal_r+0x168c>
 400692c:	45800204 	addi	r22,r8,8
 4006930:	003eca06 	br	400645c <__alt_data_end+0xfc00645c>
 4006934:	01010074 	movhi	r4,1025
 4006938:	21194e84 	addi	r4,r4,25914
 400693c:	d9002c15 	stw	r4,176(sp)
 4006940:	d8802c17 	ldw	r2,176(sp)
 4006944:	1c07883a 	add	r3,r3,r16
 4006948:	8c400044 	addi	r17,r17,1
 400694c:	b0800015 	stw	r2,0(r22)
 4006950:	b4000115 	stw	r16,4(r22)
 4006954:	d8c02015 	stw	r3,128(sp)
 4006958:	dc401f15 	stw	r17,124(sp)
 400695c:	008001c4 	movi	r2,7
 4006960:	147ebd0e 	bge	r2,r17,4006458 <__alt_data_end+0xfc006458>
 4006964:	d9002d17 	ldw	r4,180(sp)
 4006968:	d9801e04 	addi	r6,sp,120
 400696c:	b80b883a 	mov	r5,r23
 4006970:	400c1500 	call	400c150 <__sprint_r>
 4006974:	103b5c1e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 4006978:	d8c02017 	ldw	r3,128(sp)
 400697c:	dc401f17 	ldw	r17,124(sp)
 4006980:	dd800404 	addi	r22,sp,16
 4006984:	003eb506 	br	400645c <__alt_data_end+0xfc00645c>
 4006988:	d9002d17 	ldw	r4,180(sp)
 400698c:	d9801e04 	addi	r6,sp,120
 4006990:	b80b883a 	mov	r5,r23
 4006994:	400c1500 	call	400c150 <__sprint_r>
 4006998:	103b531e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 400699c:	d8c02017 	ldw	r3,128(sp)
 40069a0:	dc401f17 	ldw	r17,124(sp)
 40069a4:	da000404 	addi	r8,sp,16
 40069a8:	003e8d06 	br	40063e0 <__alt_data_end+0xfc0063e0>
 40069ac:	d9002d17 	ldw	r4,180(sp)
 40069b0:	d9801e04 	addi	r6,sp,120
 40069b4:	b80b883a 	mov	r5,r23
 40069b8:	400c1500 	call	400c150 <__sprint_r>
 40069bc:	103b4a1e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 40069c0:	d8c02017 	ldw	r3,128(sp)
 40069c4:	dc401f17 	ldw	r17,124(sp)
 40069c8:	dd800404 	addi	r22,sp,16
 40069cc:	003e8f06 	br	400640c <__alt_data_end+0xfc00640c>
 40069d0:	0027883a 	mov	r19,zero
 40069d4:	003f4a06 	br	4006700 <__alt_data_end+0xfc006700>
 40069d8:	d9002d17 	ldw	r4,180(sp)
 40069dc:	d9801e04 	addi	r6,sp,120
 40069e0:	b80b883a 	mov	r5,r23
 40069e4:	400c1500 	call	400c150 <__sprint_r>
 40069e8:	103b3f1e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 40069ec:	d8c02017 	ldw	r3,128(sp)
 40069f0:	da000404 	addi	r8,sp,16
 40069f4:	003c7b06 	br	4005be4 <__alt_data_end+0xfc005be4>
 40069f8:	d9402a17 	ldw	r5,168(sp)
 40069fc:	04e7c83a 	sub	r19,zero,r19
 4006a00:	07000b44 	movi	fp,45
 4006a04:	9804c03a 	cmpne	r2,r19,zero
 4006a08:	05adc83a 	sub	r22,zero,r22
 4006a0c:	df002785 	stb	fp,158(sp)
 4006a10:	b0adc83a 	sub	r22,r22,r2
 4006a14:	28017b16 	blt	r5,zero,4007004 <___vfprintf_internal_r+0x1d2c>
 4006a18:	00bfdfc4 	movi	r2,-129
 4006a1c:	90a4703a 	and	r18,r18,r2
 4006a20:	003b8906 	br	4005848 <__alt_data_end+0xfc005848>
 4006a24:	d9003617 	ldw	r4,216(sp)
 4006a28:	d9403817 	ldw	r5,224(sp)
 4006a2c:	da003d15 	stw	r8,244(sp)
 4006a30:	400bdc80 	call	400bdc8 <__fpclassifyd>
 4006a34:	da003d17 	ldw	r8,244(sp)
 4006a38:	1000f026 	beq	r2,zero,4006dfc <___vfprintf_internal_r+0x1b24>
 4006a3c:	d9002a17 	ldw	r4,168(sp)
 4006a40:	05bff7c4 	movi	r22,-33
 4006a44:	00bfffc4 	movi	r2,-1
 4006a48:	8dac703a 	and	r22,r17,r22
 4006a4c:	20820026 	beq	r4,r2,4007250 <___vfprintf_internal_r+0x1f78>
 4006a50:	008011c4 	movi	r2,71
 4006a54:	b081f726 	beq	r22,r2,4007234 <___vfprintf_internal_r+0x1f5c>
 4006a58:	d9003817 	ldw	r4,224(sp)
 4006a5c:	90c04014 	ori	r3,r18,256
 4006a60:	d8c02c15 	stw	r3,176(sp)
 4006a64:	20021516 	blt	r4,zero,40072bc <___vfprintf_internal_r+0x1fe4>
 4006a68:	dcc03817 	ldw	r19,224(sp)
 4006a6c:	d8002905 	stb	zero,164(sp)
 4006a70:	00801984 	movi	r2,102
 4006a74:	8881f926 	beq	r17,r2,400725c <___vfprintf_internal_r+0x1f84>
 4006a78:	00801184 	movi	r2,70
 4006a7c:	88821c26 	beq	r17,r2,40072f0 <___vfprintf_internal_r+0x2018>
 4006a80:	00801144 	movi	r2,69
 4006a84:	b081ef26 	beq	r22,r2,4007244 <___vfprintf_internal_r+0x1f6c>
 4006a88:	d8c02a17 	ldw	r3,168(sp)
 4006a8c:	d8802104 	addi	r2,sp,132
 4006a90:	d8800315 	stw	r2,12(sp)
 4006a94:	d9403617 	ldw	r5,216(sp)
 4006a98:	d8802504 	addi	r2,sp,148
 4006a9c:	d9002d17 	ldw	r4,180(sp)
 4006aa0:	d8800215 	stw	r2,8(sp)
 4006aa4:	d8802604 	addi	r2,sp,152
 4006aa8:	d8c00015 	stw	r3,0(sp)
 4006aac:	d8800115 	stw	r2,4(sp)
 4006ab0:	01c00084 	movi	r7,2
 4006ab4:	980d883a 	mov	r6,r19
 4006ab8:	d8c03c15 	stw	r3,240(sp)
 4006abc:	da003d15 	stw	r8,244(sp)
 4006ac0:	4007a080 	call	4007a08 <_dtoa_r>
 4006ac4:	1021883a 	mov	r16,r2
 4006ac8:	008019c4 	movi	r2,103
 4006acc:	d8c03c17 	ldw	r3,240(sp)
 4006ad0:	da003d17 	ldw	r8,244(sp)
 4006ad4:	88817126 	beq	r17,r2,400709c <___vfprintf_internal_r+0x1dc4>
 4006ad8:	008011c4 	movi	r2,71
 4006adc:	88829126 	beq	r17,r2,4007524 <___vfprintf_internal_r+0x224c>
 4006ae0:	80f9883a 	add	fp,r16,r3
 4006ae4:	d9003617 	ldw	r4,216(sp)
 4006ae8:	000d883a 	mov	r6,zero
 4006aec:	000f883a 	mov	r7,zero
 4006af0:	980b883a 	mov	r5,r19
 4006af4:	da003d15 	stw	r8,244(sp)
 4006af8:	400fdf80 	call	400fdf8 <__eqdf2>
 4006afc:	da003d17 	ldw	r8,244(sp)
 4006b00:	10018d26 	beq	r2,zero,4007138 <___vfprintf_internal_r+0x1e60>
 4006b04:	d8802117 	ldw	r2,132(sp)
 4006b08:	1700062e 	bgeu	r2,fp,4006b24 <___vfprintf_internal_r+0x184c>
 4006b0c:	01000c04 	movi	r4,48
 4006b10:	10c00044 	addi	r3,r2,1
 4006b14:	d8c02115 	stw	r3,132(sp)
 4006b18:	11000005 	stb	r4,0(r2)
 4006b1c:	d8802117 	ldw	r2,132(sp)
 4006b20:	173ffb36 	bltu	r2,fp,4006b10 <__alt_data_end+0xfc006b10>
 4006b24:	1405c83a 	sub	r2,r2,r16
 4006b28:	d8803315 	stw	r2,204(sp)
 4006b2c:	008011c4 	movi	r2,71
 4006b30:	b0817626 	beq	r22,r2,400710c <___vfprintf_internal_r+0x1e34>
 4006b34:	00801944 	movi	r2,101
 4006b38:	1442800e 	bge	r2,r17,400753c <___vfprintf_internal_r+0x2264>
 4006b3c:	d8c02617 	ldw	r3,152(sp)
 4006b40:	00801984 	movi	r2,102
 4006b44:	d8c03215 	stw	r3,200(sp)
 4006b48:	8881fe26 	beq	r17,r2,4007344 <___vfprintf_internal_r+0x206c>
 4006b4c:	d8c03217 	ldw	r3,200(sp)
 4006b50:	d9003317 	ldw	r4,204(sp)
 4006b54:	1901dd16 	blt	r3,r4,40072cc <___vfprintf_internal_r+0x1ff4>
 4006b58:	9480004c 	andi	r18,r18,1
 4006b5c:	90022b1e 	bne	r18,zero,400740c <___vfprintf_internal_r+0x2134>
 4006b60:	1805883a 	mov	r2,r3
 4006b64:	18028316 	blt	r3,zero,4007574 <___vfprintf_internal_r+0x229c>
 4006b68:	d8c03217 	ldw	r3,200(sp)
 4006b6c:	044019c4 	movi	r17,103
 4006b70:	d8c02b15 	stw	r3,172(sp)
 4006b74:	df002907 	ldb	fp,164(sp)
 4006b78:	e001531e 	bne	fp,zero,40070c8 <___vfprintf_internal_r+0x1df0>
 4006b7c:	df002783 	ldbu	fp,158(sp)
 4006b80:	d8802915 	stw	r2,164(sp)
 4006b84:	dc802c17 	ldw	r18,176(sp)
 4006b88:	d8002a15 	stw	zero,168(sp)
 4006b8c:	003baf06 	br	4005a4c <__alt_data_end+0xfc005a4c>
 4006b90:	d8c02e17 	ldw	r3,184(sp)
 4006b94:	d9002e17 	ldw	r4,184(sp)
 4006b98:	d9402e17 	ldw	r5,184(sp)
 4006b9c:	18c00017 	ldw	r3,0(r3)
 4006ba0:	21000117 	ldw	r4,4(r4)
 4006ba4:	29400204 	addi	r5,r5,8
 4006ba8:	d8c03615 	stw	r3,216(sp)
 4006bac:	d9003815 	stw	r4,224(sp)
 4006bb0:	d9402e15 	stw	r5,184(sp)
 4006bb4:	003b5006 	br	40058f8 <__alt_data_end+0xfc0058f8>
 4006bb8:	ac400007 	ldb	r17,0(r21)
 4006bbc:	003a2806 	br	4005460 <__alt_data_end+0xfc005460>
 4006bc0:	9080100c 	andi	r2,r18,64
 4006bc4:	1000a826 	beq	r2,zero,4006e68 <___vfprintf_internal_r+0x1b90>
 4006bc8:	d8c02e17 	ldw	r3,184(sp)
 4006bcc:	002d883a 	mov	r22,zero
 4006bd0:	1cc0000b 	ldhu	r19,0(r3)
 4006bd4:	18c00104 	addi	r3,r3,4
 4006bd8:	d8c02e15 	stw	r3,184(sp)
 4006bdc:	003caf06 	br	4005e9c <__alt_data_end+0xfc005e9c>
 4006be0:	d9002e17 	ldw	r4,184(sp)
 4006be4:	d9402a17 	ldw	r5,168(sp)
 4006be8:	002d883a 	mov	r22,zero
 4006bec:	20800104 	addi	r2,r4,4
 4006bf0:	24c00017 	ldw	r19,0(r4)
 4006bf4:	283ebb0e 	bge	r5,zero,40066e4 <__alt_data_end+0xfc0066e4>
 4006bf8:	003ef106 	br	40067c0 <__alt_data_end+0xfc0067c0>
 4006bfc:	9080040c 	andi	r2,r18,16
 4006c00:	1000921e 	bne	r2,zero,4006e4c <___vfprintf_internal_r+0x1b74>
 4006c04:	9480100c 	andi	r18,r18,64
 4006c08:	90013926 	beq	r18,zero,40070f0 <___vfprintf_internal_r+0x1e18>
 4006c0c:	d9402e17 	ldw	r5,184(sp)
 4006c10:	d8c02f17 	ldw	r3,188(sp)
 4006c14:	28800017 	ldw	r2,0(r5)
 4006c18:	29400104 	addi	r5,r5,4
 4006c1c:	d9402e15 	stw	r5,184(sp)
 4006c20:	10c0000d 	sth	r3,0(r2)
 4006c24:	0039e406 	br	40053b8 <__alt_data_end+0xfc0053b8>
 4006c28:	9080100c 	andi	r2,r18,64
 4006c2c:	10008026 	beq	r2,zero,4006e30 <___vfprintf_internal_r+0x1b58>
 4006c30:	d8802e17 	ldw	r2,184(sp)
 4006c34:	14c0000f 	ldh	r19,0(r2)
 4006c38:	10800104 	addi	r2,r2,4
 4006c3c:	d8802e15 	stw	r2,184(sp)
 4006c40:	982dd7fa 	srai	r22,r19,31
 4006c44:	b005883a 	mov	r2,r22
 4006c48:	003af706 	br	4005828 <__alt_data_end+0xfc005828>
 4006c4c:	9080100c 	andi	r2,r18,64
 4006c50:	d8002785 	stb	zero,158(sp)
 4006c54:	10008a1e 	bne	r2,zero,4006e80 <___vfprintf_internal_r+0x1ba8>
 4006c58:	d9002e17 	ldw	r4,184(sp)
 4006c5c:	d9402a17 	ldw	r5,168(sp)
 4006c60:	002d883a 	mov	r22,zero
 4006c64:	20800104 	addi	r2,r4,4
 4006c68:	24c00017 	ldw	r19,0(r4)
 4006c6c:	283e4b0e 	bge	r5,zero,400659c <__alt_data_end+0xfc00659c>
 4006c70:	9d86b03a 	or	r3,r19,r22
 4006c74:	d8802e15 	stw	r2,184(sp)
 4006c78:	183e4c1e 	bne	r3,zero,40065ac <__alt_data_end+0xfc0065ac>
 4006c7c:	0039883a 	mov	fp,zero
 4006c80:	0005883a 	mov	r2,zero
 4006c84:	003d4006 	br	4006188 <__alt_data_end+0xfc006188>
 4006c88:	01410074 	movhi	r5,1025
 4006c8c:	29594e84 	addi	r5,r5,25914
 4006c90:	d9402c15 	stw	r5,176(sp)
 4006c94:	d9402c17 	ldw	r5,176(sp)
 4006c98:	1c47883a 	add	r3,r3,r17
 4006c9c:	10800044 	addi	r2,r2,1
 4006ca0:	41400015 	stw	r5,0(r8)
 4006ca4:	44400115 	stw	r17,4(r8)
 4006ca8:	d8c02015 	stw	r3,128(sp)
 4006cac:	d8801f15 	stw	r2,124(sp)
 4006cb0:	010001c4 	movi	r4,7
 4006cb4:	20bec816 	blt	r4,r2,40067d8 <__alt_data_end+0xfc0067d8>
 4006cb8:	42000204 	addi	r8,r8,8
 4006cbc:	003ecd06 	br	40067f4 <__alt_data_end+0xfc0067f4>
 4006cc0:	d9002a17 	ldw	r4,168(sp)
 4006cc4:	d8002785 	stb	zero,158(sp)
 4006cc8:	203d2d16 	blt	r4,zero,4006180 <__alt_data_end+0xfc006180>
 4006ccc:	00bfdfc4 	movi	r2,-129
 4006cd0:	90a4703a 	and	r18,r18,r2
 4006cd4:	003a6106 	br	400565c <__alt_data_end+0xfc00565c>
 4006cd8:	01010074 	movhi	r4,1025
 4006cdc:	21194e84 	addi	r4,r4,25914
 4006ce0:	d9002c15 	stw	r4,176(sp)
 4006ce4:	003bea06 	br	4005c90 <__alt_data_end+0xfc005c90>
 4006ce8:	d9002d17 	ldw	r4,180(sp)
 4006cec:	d9801e04 	addi	r6,sp,120
 4006cf0:	b80b883a 	mov	r5,r23
 4006cf4:	400c1500 	call	400c150 <__sprint_r>
 4006cf8:	103a7b1e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 4006cfc:	d8c02017 	ldw	r3,128(sp)
 4006d00:	da000404 	addi	r8,sp,16
 4006d04:	003d4106 	br	400620c <__alt_data_end+0xfc00620c>
 4006d08:	d8801f17 	ldw	r2,124(sp)
 4006d0c:	01410074 	movhi	r5,1025
 4006d10:	01000044 	movi	r4,1
 4006d14:	18c00044 	addi	r3,r3,1
 4006d18:	10800044 	addi	r2,r2,1
 4006d1c:	29594e04 	addi	r5,r5,25912
 4006d20:	41000115 	stw	r4,4(r8)
 4006d24:	41400015 	stw	r5,0(r8)
 4006d28:	d8c02015 	stw	r3,128(sp)
 4006d2c:	d8801f15 	stw	r2,124(sp)
 4006d30:	010001c4 	movi	r4,7
 4006d34:	20805c16 	blt	r4,r2,4006ea8 <___vfprintf_internal_r+0x1bd0>
 4006d38:	42000204 	addi	r8,r8,8
 4006d3c:	8800041e 	bne	r17,zero,4006d50 <___vfprintf_internal_r+0x1a78>
 4006d40:	d8803317 	ldw	r2,204(sp)
 4006d44:	1000021e 	bne	r2,zero,4006d50 <___vfprintf_internal_r+0x1a78>
 4006d48:	9080004c 	andi	r2,r18,1
 4006d4c:	103be726 	beq	r2,zero,4005cec <__alt_data_end+0xfc005cec>
 4006d50:	d9003717 	ldw	r4,220(sp)
 4006d54:	d8801f17 	ldw	r2,124(sp)
 4006d58:	d9403417 	ldw	r5,208(sp)
 4006d5c:	20c7883a 	add	r3,r4,r3
 4006d60:	10800044 	addi	r2,r2,1
 4006d64:	41000115 	stw	r4,4(r8)
 4006d68:	41400015 	stw	r5,0(r8)
 4006d6c:	d8c02015 	stw	r3,128(sp)
 4006d70:	d8801f15 	stw	r2,124(sp)
 4006d74:	010001c4 	movi	r4,7
 4006d78:	20812116 	blt	r4,r2,4007200 <___vfprintf_internal_r+0x1f28>
 4006d7c:	42000204 	addi	r8,r8,8
 4006d80:	0463c83a 	sub	r17,zero,r17
 4006d84:	0440730e 	bge	zero,r17,4006f54 <___vfprintf_internal_r+0x1c7c>
 4006d88:	05800404 	movi	r22,16
 4006d8c:	b440860e 	bge	r22,r17,4006fa8 <___vfprintf_internal_r+0x1cd0>
 4006d90:	01410074 	movhi	r5,1025
 4006d94:	29594e84 	addi	r5,r5,25914
 4006d98:	d9402c15 	stw	r5,176(sp)
 4006d9c:	070001c4 	movi	fp,7
 4006da0:	dcc02d17 	ldw	r19,180(sp)
 4006da4:	00000306 	br	4006db4 <___vfprintf_internal_r+0x1adc>
 4006da8:	42000204 	addi	r8,r8,8
 4006dac:	8c7ffc04 	addi	r17,r17,-16
 4006db0:	b440800e 	bge	r22,r17,4006fb4 <___vfprintf_internal_r+0x1cdc>
 4006db4:	18c00404 	addi	r3,r3,16
 4006db8:	10800044 	addi	r2,r2,1
 4006dbc:	45000015 	stw	r20,0(r8)
 4006dc0:	45800115 	stw	r22,4(r8)
 4006dc4:	d8c02015 	stw	r3,128(sp)
 4006dc8:	d8801f15 	stw	r2,124(sp)
 4006dcc:	e0bff60e 	bge	fp,r2,4006da8 <__alt_data_end+0xfc006da8>
 4006dd0:	d9801e04 	addi	r6,sp,120
 4006dd4:	b80b883a 	mov	r5,r23
 4006dd8:	9809883a 	mov	r4,r19
 4006ddc:	400c1500 	call	400c150 <__sprint_r>
 4006de0:	103a411e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 4006de4:	d8c02017 	ldw	r3,128(sp)
 4006de8:	d8801f17 	ldw	r2,124(sp)
 4006dec:	da000404 	addi	r8,sp,16
 4006df0:	003fee06 	br	4006dac <__alt_data_end+0xfc006dac>
 4006df4:	00bfffc4 	movi	r2,-1
 4006df8:	003a3f06 	br	40056f8 <__alt_data_end+0xfc0056f8>
 4006dfc:	008011c4 	movi	r2,71
 4006e00:	1440b816 	blt	r2,r17,40070e4 <___vfprintf_internal_r+0x1e0c>
 4006e04:	04010074 	movhi	r16,1025
 4006e08:	84194004 	addi	r16,r16,25856
 4006e0c:	00c000c4 	movi	r3,3
 4006e10:	00bfdfc4 	movi	r2,-129
 4006e14:	d8c02915 	stw	r3,164(sp)
 4006e18:	90a4703a 	and	r18,r18,r2
 4006e1c:	df002783 	ldbu	fp,158(sp)
 4006e20:	d8c02b15 	stw	r3,172(sp)
 4006e24:	d8002a15 	stw	zero,168(sp)
 4006e28:	d8003215 	stw	zero,200(sp)
 4006e2c:	003b0706 	br	4005a4c <__alt_data_end+0xfc005a4c>
 4006e30:	d8c02e17 	ldw	r3,184(sp)
 4006e34:	1cc00017 	ldw	r19,0(r3)
 4006e38:	18c00104 	addi	r3,r3,4
 4006e3c:	d8c02e15 	stw	r3,184(sp)
 4006e40:	982dd7fa 	srai	r22,r19,31
 4006e44:	b005883a 	mov	r2,r22
 4006e48:	003a7706 	br	4005828 <__alt_data_end+0xfc005828>
 4006e4c:	d8c02e17 	ldw	r3,184(sp)
 4006e50:	d9002f17 	ldw	r4,188(sp)
 4006e54:	18800017 	ldw	r2,0(r3)
 4006e58:	18c00104 	addi	r3,r3,4
 4006e5c:	d8c02e15 	stw	r3,184(sp)
 4006e60:	11000015 	stw	r4,0(r2)
 4006e64:	00395406 	br	40053b8 <__alt_data_end+0xfc0053b8>
 4006e68:	d9002e17 	ldw	r4,184(sp)
 4006e6c:	002d883a 	mov	r22,zero
 4006e70:	24c00017 	ldw	r19,0(r4)
 4006e74:	21000104 	addi	r4,r4,4
 4006e78:	d9002e15 	stw	r4,184(sp)
 4006e7c:	003c0706 	br	4005e9c <__alt_data_end+0xfc005e9c>
 4006e80:	d9402e17 	ldw	r5,184(sp)
 4006e84:	d8c02a17 	ldw	r3,168(sp)
 4006e88:	002d883a 	mov	r22,zero
 4006e8c:	28800104 	addi	r2,r5,4
 4006e90:	2cc0000b 	ldhu	r19,0(r5)
 4006e94:	183dc10e 	bge	r3,zero,400659c <__alt_data_end+0xfc00659c>
 4006e98:	003f7506 	br	4006c70 <__alt_data_end+0xfc006c70>
 4006e9c:	04010074 	movhi	r16,1025
 4006ea0:	84193e04 	addi	r16,r16,25848
 4006ea4:	003aa706 	br	4005944 <__alt_data_end+0xfc005944>
 4006ea8:	d9002d17 	ldw	r4,180(sp)
 4006eac:	d9801e04 	addi	r6,sp,120
 4006eb0:	b80b883a 	mov	r5,r23
 4006eb4:	400c1500 	call	400c150 <__sprint_r>
 4006eb8:	103a0b1e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 4006ebc:	dc402617 	ldw	r17,152(sp)
 4006ec0:	d8c02017 	ldw	r3,128(sp)
 4006ec4:	da000404 	addi	r8,sp,16
 4006ec8:	003f9c06 	br	4006d3c <__alt_data_end+0xfc006d3c>
 4006ecc:	ac400043 	ldbu	r17,1(r21)
 4006ed0:	84000814 	ori	r16,r16,32
 4006ed4:	ad400044 	addi	r21,r21,1
 4006ed8:	8c403fcc 	andi	r17,r17,255
 4006edc:	8c40201c 	xori	r17,r17,128
 4006ee0:	8c7fe004 	addi	r17,r17,-128
 4006ee4:	00395e06 	br	4005460 <__alt_data_end+0xfc005460>
 4006ee8:	d8c02e15 	stw	r3,184(sp)
 4006eec:	0039883a 	mov	fp,zero
 4006ef0:	003e3506 	br	40067c8 <__alt_data_end+0xfc0067c8>
 4006ef4:	d9002d17 	ldw	r4,180(sp)
 4006ef8:	d9801e04 	addi	r6,sp,120
 4006efc:	b80b883a 	mov	r5,r23
 4006f00:	400c1500 	call	400c150 <__sprint_r>
 4006f04:	1039f81e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 4006f08:	d8c02017 	ldw	r3,128(sp)
 4006f0c:	da000404 	addi	r8,sp,16
 4006f10:	003cd006 	br	4006254 <__alt_data_end+0xfc006254>
 4006f14:	8009883a 	mov	r4,r16
 4006f18:	df003d15 	stw	fp,244(sp)
 4006f1c:	40052400 	call	4005240 <strlen>
 4006f20:	d8802b15 	stw	r2,172(sp)
 4006f24:	da003d17 	ldw	r8,244(sp)
 4006f28:	103c200e 	bge	r2,zero,4005fac <__alt_data_end+0xfc005fac>
 4006f2c:	0005883a 	mov	r2,zero
 4006f30:	003c1e06 	br	4005fac <__alt_data_end+0xfc005fac>
 4006f34:	d9002d17 	ldw	r4,180(sp)
 4006f38:	d9801e04 	addi	r6,sp,120
 4006f3c:	b80b883a 	mov	r5,r23
 4006f40:	400c1500 	call	400c150 <__sprint_r>
 4006f44:	1039e81e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 4006f48:	d8c02017 	ldw	r3,128(sp)
 4006f4c:	d8801f17 	ldw	r2,124(sp)
 4006f50:	da000404 	addi	r8,sp,16
 4006f54:	d9403317 	ldw	r5,204(sp)
 4006f58:	10800044 	addi	r2,r2,1
 4006f5c:	44000015 	stw	r16,0(r8)
 4006f60:	28c7883a 	add	r3,r5,r3
 4006f64:	003b5b06 	br	4005cd4 <__alt_data_end+0xfc005cd4>
 4006f68:	01010074 	movhi	r4,1025
 4006f6c:	21195284 	addi	r4,r4,25930
 4006f70:	d9003515 	stw	r4,212(sp)
 4006f74:	003af206 	br	4005b40 <__alt_data_end+0xfc005b40>
 4006f78:	013fffc4 	movi	r4,-1
 4006f7c:	003a0806 	br	40057a0 <__alt_data_end+0xfc0057a0>
 4006f80:	0023883a 	mov	r17,zero
 4006f84:	003d9d06 	br	40065fc <__alt_data_end+0xfc0065fc>
 4006f88:	d9002d17 	ldw	r4,180(sp)
 4006f8c:	d9801e04 	addi	r6,sp,120
 4006f90:	b80b883a 	mov	r5,r23
 4006f94:	400c1500 	call	400c150 <__sprint_r>
 4006f98:	1039d31e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 4006f9c:	d8c02017 	ldw	r3,128(sp)
 4006fa0:	da000404 	addi	r8,sp,16
 4006fa4:	003d9406 	br	40065f8 <__alt_data_end+0xfc0065f8>
 4006fa8:	01010074 	movhi	r4,1025
 4006fac:	21194e84 	addi	r4,r4,25914
 4006fb0:	d9002c15 	stw	r4,176(sp)
 4006fb4:	d9002c17 	ldw	r4,176(sp)
 4006fb8:	1c47883a 	add	r3,r3,r17
 4006fbc:	10800044 	addi	r2,r2,1
 4006fc0:	41000015 	stw	r4,0(r8)
 4006fc4:	44400115 	stw	r17,4(r8)
 4006fc8:	d8c02015 	stw	r3,128(sp)
 4006fcc:	d8801f15 	stw	r2,124(sp)
 4006fd0:	010001c4 	movi	r4,7
 4006fd4:	20bfd716 	blt	r4,r2,4006f34 <__alt_data_end+0xfc006f34>
 4006fd8:	42000204 	addi	r8,r8,8
 4006fdc:	003fdd06 	br	4006f54 <__alt_data_end+0xfc006f54>
 4006fe0:	d9002d17 	ldw	r4,180(sp)
 4006fe4:	d9801e04 	addi	r6,sp,120
 4006fe8:	b80b883a 	mov	r5,r23
 4006fec:	400c1500 	call	400c150 <__sprint_r>
 4006ff0:	1039bd1e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 4006ff4:	d8802617 	ldw	r2,152(sp)
 4006ff8:	d8c02017 	ldw	r3,128(sp)
 4006ffc:	da000404 	addi	r8,sp,16
 4007000:	003e1006 	br	4006844 <__alt_data_end+0xfc006844>
 4007004:	00800044 	movi	r2,1
 4007008:	10803fcc 	andi	r2,r2,255
 400700c:	00c00044 	movi	r3,1
 4007010:	10fa0d26 	beq	r2,r3,4005848 <__alt_data_end+0xfc005848>
 4007014:	00c00084 	movi	r3,2
 4007018:	10fbaf26 	beq	r2,r3,4005ed8 <__alt_data_end+0xfc005ed8>
 400701c:	003a6d06 	br	40059d4 <__alt_data_end+0xfc0059d4>
 4007020:	01010074 	movhi	r4,1025
 4007024:	21195284 	addi	r4,r4,25930
 4007028:	d9003515 	stw	r4,212(sp)
 400702c:	003b5406 	br	4005d80 <__alt_data_end+0xfc005d80>
 4007030:	d8802a17 	ldw	r2,168(sp)
 4007034:	00c00184 	movi	r3,6
 4007038:	1880012e 	bgeu	r3,r2,4007040 <___vfprintf_internal_r+0x1d68>
 400703c:	1805883a 	mov	r2,r3
 4007040:	d8802b15 	stw	r2,172(sp)
 4007044:	1000ef16 	blt	r2,zero,4007404 <___vfprintf_internal_r+0x212c>
 4007048:	04010074 	movhi	r16,1025
 400704c:	d8802915 	stw	r2,164(sp)
 4007050:	dcc02e15 	stw	r19,184(sp)
 4007054:	d8002a15 	stw	zero,168(sp)
 4007058:	d8003215 	stw	zero,200(sp)
 400705c:	84194c04 	addi	r16,r16,25904
 4007060:	0039883a 	mov	fp,zero
 4007064:	003a8006 	br	4005a68 <__alt_data_end+0xfc005a68>
 4007068:	0021883a 	mov	r16,zero
 400706c:	003e0706 	br	400688c <__alt_data_end+0xfc00688c>
 4007070:	d9002d17 	ldw	r4,180(sp)
 4007074:	d9801e04 	addi	r6,sp,120
 4007078:	b80b883a 	mov	r5,r23
 400707c:	400c1500 	call	400c150 <__sprint_r>
 4007080:	1039991e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 4007084:	d8802617 	ldw	r2,152(sp)
 4007088:	d9403317 	ldw	r5,204(sp)
 400708c:	d8c02017 	ldw	r3,128(sp)
 4007090:	da000404 	addi	r8,sp,16
 4007094:	2885c83a 	sub	r2,r5,r2
 4007098:	003dfb06 	br	4006888 <__alt_data_end+0xfc006888>
 400709c:	9080004c 	andi	r2,r18,1
 40070a0:	103e8f1e 	bne	r2,zero,4006ae0 <__alt_data_end+0xfc006ae0>
 40070a4:	d8802117 	ldw	r2,132(sp)
 40070a8:	003e9e06 	br	4006b24 <__alt_data_end+0xfc006b24>
 40070ac:	1025883a 	mov	r18,r2
 40070b0:	0039883a 	mov	fp,zero
 40070b4:	00800084 	movi	r2,2
 40070b8:	003fd306 	br	4007008 <__alt_data_end+0xfc007008>
 40070bc:	07000b44 	movi	fp,45
 40070c0:	df002785 	stb	fp,158(sp)
 40070c4:	003a1b06 	br	4005934 <__alt_data_end+0xfc005934>
 40070c8:	00c00b44 	movi	r3,45
 40070cc:	d8c02785 	stb	r3,158(sp)
 40070d0:	d8802915 	stw	r2,164(sp)
 40070d4:	dc802c17 	ldw	r18,176(sp)
 40070d8:	d8002a15 	stw	zero,168(sp)
 40070dc:	07000b44 	movi	fp,45
 40070e0:	003a5e06 	br	4005a5c <__alt_data_end+0xfc005a5c>
 40070e4:	04010074 	movhi	r16,1025
 40070e8:	84194104 	addi	r16,r16,25860
 40070ec:	003f4706 	br	4006e0c <__alt_data_end+0xfc006e0c>
 40070f0:	d9002e17 	ldw	r4,184(sp)
 40070f4:	d9402f17 	ldw	r5,188(sp)
 40070f8:	20800017 	ldw	r2,0(r4)
 40070fc:	21000104 	addi	r4,r4,4
 4007100:	d9002e15 	stw	r4,184(sp)
 4007104:	11400015 	stw	r5,0(r2)
 4007108:	0038ab06 	br	40053b8 <__alt_data_end+0xfc0053b8>
 400710c:	dd802617 	ldw	r22,152(sp)
 4007110:	00bfff44 	movi	r2,-3
 4007114:	b0801c16 	blt	r22,r2,4007188 <___vfprintf_internal_r+0x1eb0>
 4007118:	d9402a17 	ldw	r5,168(sp)
 400711c:	2d801a16 	blt	r5,r22,4007188 <___vfprintf_internal_r+0x1eb0>
 4007120:	dd803215 	stw	r22,200(sp)
 4007124:	003e8906 	br	4006b4c <__alt_data_end+0xfc006b4c>
 4007128:	01010074 	movhi	r4,1025
 400712c:	21194e84 	addi	r4,r4,25914
 4007130:	d9002c15 	stw	r4,176(sp)
 4007134:	003c9106 	br	400637c <__alt_data_end+0xfc00637c>
 4007138:	e005883a 	mov	r2,fp
 400713c:	003e7906 	br	4006b24 <__alt_data_end+0xfc006b24>
 4007140:	d9002a17 	ldw	r4,168(sp)
 4007144:	df002783 	ldbu	fp,158(sp)
 4007148:	dcc02e15 	stw	r19,184(sp)
 400714c:	d9002915 	stw	r4,164(sp)
 4007150:	d9002b15 	stw	r4,172(sp)
 4007154:	d8002a15 	stw	zero,168(sp)
 4007158:	d8003215 	stw	zero,200(sp)
 400715c:	003a3b06 	br	4005a4c <__alt_data_end+0xfc005a4c>
 4007160:	9080004c 	andi	r2,r18,1
 4007164:	0039883a 	mov	fp,zero
 4007168:	10000426 	beq	r2,zero,400717c <___vfprintf_internal_r+0x1ea4>
 400716c:	00800c04 	movi	r2,48
 4007170:	dc001dc4 	addi	r16,sp,119
 4007174:	d8801dc5 	stb	r2,119(sp)
 4007178:	003b6406 	br	4005f0c <__alt_data_end+0xfc005f0c>
 400717c:	d8002b15 	stw	zero,172(sp)
 4007180:	dc001e04 	addi	r16,sp,120
 4007184:	003a2b06 	br	4005a34 <__alt_data_end+0xfc005a34>
 4007188:	8c7fff84 	addi	r17,r17,-2
 400718c:	b5bfffc4 	addi	r22,r22,-1
 4007190:	dd802615 	stw	r22,152(sp)
 4007194:	dc4022c5 	stb	r17,139(sp)
 4007198:	b000bf16 	blt	r22,zero,4007498 <___vfprintf_internal_r+0x21c0>
 400719c:	00800ac4 	movi	r2,43
 40071a0:	d8802305 	stb	r2,140(sp)
 40071a4:	00800244 	movi	r2,9
 40071a8:	15807016 	blt	r2,r22,400736c <___vfprintf_internal_r+0x2094>
 40071ac:	00800c04 	movi	r2,48
 40071b0:	b5800c04 	addi	r22,r22,48
 40071b4:	d8802345 	stb	r2,141(sp)
 40071b8:	dd802385 	stb	r22,142(sp)
 40071bc:	d88023c4 	addi	r2,sp,143
 40071c0:	df0022c4 	addi	fp,sp,139
 40071c4:	d8c03317 	ldw	r3,204(sp)
 40071c8:	1739c83a 	sub	fp,r2,fp
 40071cc:	d9003317 	ldw	r4,204(sp)
 40071d0:	e0c7883a 	add	r3,fp,r3
 40071d4:	df003a15 	stw	fp,232(sp)
 40071d8:	d8c02b15 	stw	r3,172(sp)
 40071dc:	00800044 	movi	r2,1
 40071e0:	1100b30e 	bge	r2,r4,40074b0 <___vfprintf_internal_r+0x21d8>
 40071e4:	d8c02b17 	ldw	r3,172(sp)
 40071e8:	18c00044 	addi	r3,r3,1
 40071ec:	d8c02b15 	stw	r3,172(sp)
 40071f0:	1805883a 	mov	r2,r3
 40071f4:	1800ac16 	blt	r3,zero,40074a8 <___vfprintf_internal_r+0x21d0>
 40071f8:	d8003215 	stw	zero,200(sp)
 40071fc:	003e5d06 	br	4006b74 <__alt_data_end+0xfc006b74>
 4007200:	d9002d17 	ldw	r4,180(sp)
 4007204:	d9801e04 	addi	r6,sp,120
 4007208:	b80b883a 	mov	r5,r23
 400720c:	400c1500 	call	400c150 <__sprint_r>
 4007210:	1039351e 	bne	r2,zero,40056e8 <__alt_data_end+0xfc0056e8>
 4007214:	dc402617 	ldw	r17,152(sp)
 4007218:	d8c02017 	ldw	r3,128(sp)
 400721c:	d8801f17 	ldw	r2,124(sp)
 4007220:	da000404 	addi	r8,sp,16
 4007224:	003ed606 	br	4006d80 <__alt_data_end+0xfc006d80>
 4007228:	182b883a 	mov	r21,r3
 400722c:	d8002a15 	stw	zero,168(sp)
 4007230:	00388c06 	br	4005464 <__alt_data_end+0xfc005464>
 4007234:	d8802a17 	ldw	r2,168(sp)
 4007238:	103e071e 	bne	r2,zero,4006a58 <__alt_data_end+0xfc006a58>
 400723c:	dc002a15 	stw	r16,168(sp)
 4007240:	003e0506 	br	4006a58 <__alt_data_end+0xfc006a58>
 4007244:	d9002a17 	ldw	r4,168(sp)
 4007248:	20c00044 	addi	r3,r4,1
 400724c:	003e0f06 	br	4006a8c <__alt_data_end+0xfc006a8c>
 4007250:	01400184 	movi	r5,6
 4007254:	d9402a15 	stw	r5,168(sp)
 4007258:	003dff06 	br	4006a58 <__alt_data_end+0xfc006a58>
 400725c:	d8802104 	addi	r2,sp,132
 4007260:	d8800315 	stw	r2,12(sp)
 4007264:	d8802504 	addi	r2,sp,148
 4007268:	d8800215 	stw	r2,8(sp)
 400726c:	d8802604 	addi	r2,sp,152
 4007270:	d8800115 	stw	r2,4(sp)
 4007274:	d8802a17 	ldw	r2,168(sp)
 4007278:	d9403617 	ldw	r5,216(sp)
 400727c:	d9002d17 	ldw	r4,180(sp)
 4007280:	d8800015 	stw	r2,0(sp)
 4007284:	01c000c4 	movi	r7,3
 4007288:	980d883a 	mov	r6,r19
 400728c:	da003d15 	stw	r8,244(sp)
 4007290:	4007a080 	call	4007a08 <_dtoa_r>
 4007294:	d8c02a17 	ldw	r3,168(sp)
 4007298:	da003d17 	ldw	r8,244(sp)
 400729c:	1021883a 	mov	r16,r2
 40072a0:	10f9883a 	add	fp,r2,r3
 40072a4:	81000007 	ldb	r4,0(r16)
 40072a8:	00800c04 	movi	r2,48
 40072ac:	20805e26 	beq	r4,r2,4007428 <___vfprintf_internal_r+0x2150>
 40072b0:	d8c02617 	ldw	r3,152(sp)
 40072b4:	e0f9883a 	add	fp,fp,r3
 40072b8:	003e0a06 	br	4006ae4 <__alt_data_end+0xfc006ae4>
 40072bc:	00c00b44 	movi	r3,45
 40072c0:	24e0003c 	xorhi	r19,r4,32768
 40072c4:	d8c02905 	stb	r3,164(sp)
 40072c8:	003de906 	br	4006a70 <__alt_data_end+0xfc006a70>
 40072cc:	d8c03217 	ldw	r3,200(sp)
 40072d0:	00c07a0e 	bge	zero,r3,40074bc <___vfprintf_internal_r+0x21e4>
 40072d4:	00800044 	movi	r2,1
 40072d8:	d9003317 	ldw	r4,204(sp)
 40072dc:	1105883a 	add	r2,r2,r4
 40072e0:	d8802b15 	stw	r2,172(sp)
 40072e4:	10004e16 	blt	r2,zero,4007420 <___vfprintf_internal_r+0x2148>
 40072e8:	044019c4 	movi	r17,103
 40072ec:	003e2106 	br	4006b74 <__alt_data_end+0xfc006b74>
 40072f0:	d9002a17 	ldw	r4,168(sp)
 40072f4:	d8802104 	addi	r2,sp,132
 40072f8:	d8800315 	stw	r2,12(sp)
 40072fc:	d9000015 	stw	r4,0(sp)
 4007300:	d8802504 	addi	r2,sp,148
 4007304:	d9403617 	ldw	r5,216(sp)
 4007308:	d9002d17 	ldw	r4,180(sp)
 400730c:	d8800215 	stw	r2,8(sp)
 4007310:	d8802604 	addi	r2,sp,152
 4007314:	d8800115 	stw	r2,4(sp)
 4007318:	01c000c4 	movi	r7,3
 400731c:	980d883a 	mov	r6,r19
 4007320:	da003d15 	stw	r8,244(sp)
 4007324:	4007a080 	call	4007a08 <_dtoa_r>
 4007328:	d8c02a17 	ldw	r3,168(sp)
 400732c:	da003d17 	ldw	r8,244(sp)
 4007330:	1021883a 	mov	r16,r2
 4007334:	00801184 	movi	r2,70
 4007338:	80f9883a 	add	fp,r16,r3
 400733c:	88bfd926 	beq	r17,r2,40072a4 <__alt_data_end+0xfc0072a4>
 4007340:	003de806 	br	4006ae4 <__alt_data_end+0xfc006ae4>
 4007344:	d9002a17 	ldw	r4,168(sp)
 4007348:	00c04d0e 	bge	zero,r3,4007480 <___vfprintf_internal_r+0x21a8>
 400734c:	2000441e 	bne	r4,zero,4007460 <___vfprintf_internal_r+0x2188>
 4007350:	9480004c 	andi	r18,r18,1
 4007354:	9000421e 	bne	r18,zero,4007460 <___vfprintf_internal_r+0x2188>
 4007358:	1805883a 	mov	r2,r3
 400735c:	18006f16 	blt	r3,zero,400751c <___vfprintf_internal_r+0x2244>
 4007360:	d8c03217 	ldw	r3,200(sp)
 4007364:	d8c02b15 	stw	r3,172(sp)
 4007368:	003e0206 	br	4006b74 <__alt_data_end+0xfc006b74>
 400736c:	df0022c4 	addi	fp,sp,139
 4007370:	dc002a15 	stw	r16,168(sp)
 4007374:	4027883a 	mov	r19,r8
 4007378:	e021883a 	mov	r16,fp
 400737c:	b009883a 	mov	r4,r22
 4007380:	01400284 	movi	r5,10
 4007384:	40043c40 	call	40043c4 <__modsi3>
 4007388:	10800c04 	addi	r2,r2,48
 400738c:	843fffc4 	addi	r16,r16,-1
 4007390:	b009883a 	mov	r4,r22
 4007394:	01400284 	movi	r5,10
 4007398:	80800005 	stb	r2,0(r16)
 400739c:	40043400 	call	4004340 <__divsi3>
 40073a0:	102d883a 	mov	r22,r2
 40073a4:	00800244 	movi	r2,9
 40073a8:	15bff416 	blt	r2,r22,400737c <__alt_data_end+0xfc00737c>
 40073ac:	9811883a 	mov	r8,r19
 40073b0:	b0800c04 	addi	r2,r22,48
 40073b4:	8027883a 	mov	r19,r16
 40073b8:	997fffc4 	addi	r5,r19,-1
 40073bc:	98bfffc5 	stb	r2,-1(r19)
 40073c0:	dc002a17 	ldw	r16,168(sp)
 40073c4:	2f006d2e 	bgeu	r5,fp,400757c <___vfprintf_internal_r+0x22a4>
 40073c8:	d9c02384 	addi	r7,sp,142
 40073cc:	3ccfc83a 	sub	r7,r7,r19
 40073d0:	d9002344 	addi	r4,sp,141
 40073d4:	e1cf883a 	add	r7,fp,r7
 40073d8:	00000106 	br	40073e0 <___vfprintf_internal_r+0x2108>
 40073dc:	28800003 	ldbu	r2,0(r5)
 40073e0:	20800005 	stb	r2,0(r4)
 40073e4:	21000044 	addi	r4,r4,1
 40073e8:	29400044 	addi	r5,r5,1
 40073ec:	393ffb1e 	bne	r7,r4,40073dc <__alt_data_end+0xfc0073dc>
 40073f0:	d8802304 	addi	r2,sp,140
 40073f4:	14c5c83a 	sub	r2,r2,r19
 40073f8:	d8c02344 	addi	r3,sp,141
 40073fc:	1885883a 	add	r2,r3,r2
 4007400:	003f7006 	br	40071c4 <__alt_data_end+0xfc0071c4>
 4007404:	0005883a 	mov	r2,zero
 4007408:	003f0f06 	br	4007048 <__alt_data_end+0xfc007048>
 400740c:	d8c03217 	ldw	r3,200(sp)
 4007410:	18c00044 	addi	r3,r3,1
 4007414:	d8c02b15 	stw	r3,172(sp)
 4007418:	1805883a 	mov	r2,r3
 400741c:	183fb20e 	bge	r3,zero,40072e8 <__alt_data_end+0xfc0072e8>
 4007420:	0005883a 	mov	r2,zero
 4007424:	003fb006 	br	40072e8 <__alt_data_end+0xfc0072e8>
 4007428:	d9003617 	ldw	r4,216(sp)
 400742c:	000d883a 	mov	r6,zero
 4007430:	000f883a 	mov	r7,zero
 4007434:	980b883a 	mov	r5,r19
 4007438:	d8c03c15 	stw	r3,240(sp)
 400743c:	da003d15 	stw	r8,244(sp)
 4007440:	400fdf80 	call	400fdf8 <__eqdf2>
 4007444:	d8c03c17 	ldw	r3,240(sp)
 4007448:	da003d17 	ldw	r8,244(sp)
 400744c:	103f9826 	beq	r2,zero,40072b0 <__alt_data_end+0xfc0072b0>
 4007450:	00800044 	movi	r2,1
 4007454:	10c7c83a 	sub	r3,r2,r3
 4007458:	d8c02615 	stw	r3,152(sp)
 400745c:	003f9506 	br	40072b4 <__alt_data_end+0xfc0072b4>
 4007460:	d9002a17 	ldw	r4,168(sp)
 4007464:	d8c03217 	ldw	r3,200(sp)
 4007468:	20800044 	addi	r2,r4,1
 400746c:	1885883a 	add	r2,r3,r2
 4007470:	d8802b15 	stw	r2,172(sp)
 4007474:	103dbf0e 	bge	r2,zero,4006b74 <__alt_data_end+0xfc006b74>
 4007478:	0005883a 	mov	r2,zero
 400747c:	003dbd06 	br	4006b74 <__alt_data_end+0xfc006b74>
 4007480:	2000201e 	bne	r4,zero,4007504 <___vfprintf_internal_r+0x222c>
 4007484:	9480004c 	andi	r18,r18,1
 4007488:	90001e1e 	bne	r18,zero,4007504 <___vfprintf_internal_r+0x222c>
 400748c:	00800044 	movi	r2,1
 4007490:	d8802b15 	stw	r2,172(sp)
 4007494:	003db706 	br	4006b74 <__alt_data_end+0xfc006b74>
 4007498:	00800b44 	movi	r2,45
 400749c:	05adc83a 	sub	r22,zero,r22
 40074a0:	d8802305 	stb	r2,140(sp)
 40074a4:	003f3f06 	br	40071a4 <__alt_data_end+0xfc0071a4>
 40074a8:	0005883a 	mov	r2,zero
 40074ac:	003f5206 	br	40071f8 <__alt_data_end+0xfc0071f8>
 40074b0:	90a4703a 	and	r18,r18,r2
 40074b4:	903f4e26 	beq	r18,zero,40071f0 <__alt_data_end+0xfc0071f0>
 40074b8:	003f4a06 	br	40071e4 <__alt_data_end+0xfc0071e4>
 40074bc:	00800084 	movi	r2,2
 40074c0:	10c5c83a 	sub	r2,r2,r3
 40074c4:	003f8406 	br	40072d8 <__alt_data_end+0xfc0072d8>
 40074c8:	d9402e17 	ldw	r5,184(sp)
 40074cc:	d9002e17 	ldw	r4,184(sp)
 40074d0:	ac400043 	ldbu	r17,1(r21)
 40074d4:	29400017 	ldw	r5,0(r5)
 40074d8:	20800104 	addi	r2,r4,4
 40074dc:	d8802e15 	stw	r2,184(sp)
 40074e0:	d9402a15 	stw	r5,168(sp)
 40074e4:	182b883a 	mov	r21,r3
 40074e8:	283e7b0e 	bge	r5,zero,4006ed8 <__alt_data_end+0xfc006ed8>
 40074ec:	8c403fcc 	andi	r17,r17,255
 40074f0:	017fffc4 	movi	r5,-1
 40074f4:	8c40201c 	xori	r17,r17,128
 40074f8:	d9402a15 	stw	r5,168(sp)
 40074fc:	8c7fe004 	addi	r17,r17,-128
 4007500:	0037d706 	br	4005460 <__alt_data_end+0xfc005460>
 4007504:	d8c02a17 	ldw	r3,168(sp)
 4007508:	18c00084 	addi	r3,r3,2
 400750c:	d8c02b15 	stw	r3,172(sp)
 4007510:	1805883a 	mov	r2,r3
 4007514:	183d970e 	bge	r3,zero,4006b74 <__alt_data_end+0xfc006b74>
 4007518:	003fd706 	br	4007478 <__alt_data_end+0xfc007478>
 400751c:	0005883a 	mov	r2,zero
 4007520:	003f8f06 	br	4007360 <__alt_data_end+0xfc007360>
 4007524:	9080004c 	andi	r2,r18,1
 4007528:	103f821e 	bne	r2,zero,4007334 <__alt_data_end+0xfc007334>
 400752c:	d8802117 	ldw	r2,132(sp)
 4007530:	1405c83a 	sub	r2,r2,r16
 4007534:	d8803315 	stw	r2,204(sp)
 4007538:	b47ef426 	beq	r22,r17,400710c <__alt_data_end+0xfc00710c>
 400753c:	dd802617 	ldw	r22,152(sp)
 4007540:	003f1206 	br	400718c <__alt_data_end+0xfc00718c>
 4007544:	d8c02b03 	ldbu	r3,172(sp)
 4007548:	d8c02785 	stb	r3,158(sp)
 400754c:	0038df06 	br	40058cc <__alt_data_end+0xfc0058cc>
 4007550:	d8c02b03 	ldbu	r3,172(sp)
 4007554:	d8c02785 	stb	r3,158(sp)
 4007558:	0038aa06 	br	4005804 <__alt_data_end+0xfc005804>
 400755c:	d8c02b03 	ldbu	r3,172(sp)
 4007560:	d8c02785 	stb	r3,158(sp)
 4007564:	003a4306 	br	4005e74 <__alt_data_end+0xfc005e74>
 4007568:	d8c02b03 	ldbu	r3,172(sp)
 400756c:	d8c02785 	stb	r3,158(sp)
 4007570:	003af506 	br	4006148 <__alt_data_end+0xfc006148>
 4007574:	0005883a 	mov	r2,zero
 4007578:	003d7b06 	br	4006b68 <__alt_data_end+0xfc006b68>
 400757c:	d8802344 	addi	r2,sp,141
 4007580:	003f1006 	br	40071c4 <__alt_data_end+0xfc0071c4>
 4007584:	d8c02b03 	ldbu	r3,172(sp)
 4007588:	d8c02785 	stb	r3,158(sp)
 400758c:	0038fd06 	br	4005984 <__alt_data_end+0xfc005984>
 4007590:	d8c02b03 	ldbu	r3,172(sp)
 4007594:	d8c02785 	stb	r3,158(sp)
 4007598:	003a9706 	br	4005ff8 <__alt_data_end+0xfc005ff8>
 400759c:	d8c02b03 	ldbu	r3,172(sp)
 40075a0:	d8c02785 	stb	r3,158(sp)
 40075a4:	003a1806 	br	4005e08 <__alt_data_end+0xfc005e08>
 40075a8:	d8c02b03 	ldbu	r3,172(sp)
 40075ac:	d8c02785 	stb	r3,158(sp)
 40075b0:	003abe06 	br	40060ac <__alt_data_end+0xfc0060ac>

040075b4 <__vfprintf_internal>:
 40075b4:	008100b4 	movhi	r2,1026
 40075b8:	10a16104 	addi	r2,r2,-31356
 40075bc:	300f883a 	mov	r7,r6
 40075c0:	280d883a 	mov	r6,r5
 40075c4:	200b883a 	mov	r5,r4
 40075c8:	11000017 	ldw	r4,0(r2)
 40075cc:	40052d81 	jmpi	40052d8 <___vfprintf_internal_r>

040075d0 <__sbprintf>:
 40075d0:	2880030b 	ldhu	r2,12(r5)
 40075d4:	2ac01917 	ldw	r11,100(r5)
 40075d8:	2a80038b 	ldhu	r10,14(r5)
 40075dc:	2a400717 	ldw	r9,28(r5)
 40075e0:	2a000917 	ldw	r8,36(r5)
 40075e4:	defee204 	addi	sp,sp,-1144
 40075e8:	00c10004 	movi	r3,1024
 40075ec:	dc011a15 	stw	r16,1128(sp)
 40075f0:	10bfff4c 	andi	r2,r2,65533
 40075f4:	2821883a 	mov	r16,r5
 40075f8:	d8cb883a 	add	r5,sp,r3
 40075fc:	dc811c15 	stw	r18,1136(sp)
 4007600:	dc411b15 	stw	r17,1132(sp)
 4007604:	dfc11d15 	stw	ra,1140(sp)
 4007608:	2025883a 	mov	r18,r4
 400760c:	d881030d 	sth	r2,1036(sp)
 4007610:	dac11915 	stw	r11,1124(sp)
 4007614:	da81038d 	sth	r10,1038(sp)
 4007618:	da410715 	stw	r9,1052(sp)
 400761c:	da010915 	stw	r8,1060(sp)
 4007620:	dec10015 	stw	sp,1024(sp)
 4007624:	dec10415 	stw	sp,1040(sp)
 4007628:	d8c10215 	stw	r3,1032(sp)
 400762c:	d8c10515 	stw	r3,1044(sp)
 4007630:	d8010615 	stw	zero,1048(sp)
 4007634:	40052d80 	call	40052d8 <___vfprintf_internal_r>
 4007638:	1023883a 	mov	r17,r2
 400763c:	10000416 	blt	r2,zero,4007650 <__sbprintf+0x80>
 4007640:	d9410004 	addi	r5,sp,1024
 4007644:	9009883a 	mov	r4,r18
 4007648:	40092ac0 	call	40092ac <_fflush_r>
 400764c:	10000d1e 	bne	r2,zero,4007684 <__sbprintf+0xb4>
 4007650:	d881030b 	ldhu	r2,1036(sp)
 4007654:	1080100c 	andi	r2,r2,64
 4007658:	10000326 	beq	r2,zero,4007668 <__sbprintf+0x98>
 400765c:	8080030b 	ldhu	r2,12(r16)
 4007660:	10801014 	ori	r2,r2,64
 4007664:	8080030d 	sth	r2,12(r16)
 4007668:	8805883a 	mov	r2,r17
 400766c:	dfc11d17 	ldw	ra,1140(sp)
 4007670:	dc811c17 	ldw	r18,1136(sp)
 4007674:	dc411b17 	ldw	r17,1132(sp)
 4007678:	dc011a17 	ldw	r16,1128(sp)
 400767c:	dec11e04 	addi	sp,sp,1144
 4007680:	f800283a 	ret
 4007684:	047fffc4 	movi	r17,-1
 4007688:	003ff106 	br	4007650 <__alt_data_end+0xfc007650>

0400768c <__swsetup_r>:
 400768c:	008100b4 	movhi	r2,1026
 4007690:	defffd04 	addi	sp,sp,-12
 4007694:	10a16104 	addi	r2,r2,-31356
 4007698:	dc400115 	stw	r17,4(sp)
 400769c:	2023883a 	mov	r17,r4
 40076a0:	11000017 	ldw	r4,0(r2)
 40076a4:	dc000015 	stw	r16,0(sp)
 40076a8:	dfc00215 	stw	ra,8(sp)
 40076ac:	2821883a 	mov	r16,r5
 40076b0:	20000226 	beq	r4,zero,40076bc <__swsetup_r+0x30>
 40076b4:	20800e17 	ldw	r2,56(r4)
 40076b8:	10003126 	beq	r2,zero,4007780 <__swsetup_r+0xf4>
 40076bc:	8080030b 	ldhu	r2,12(r16)
 40076c0:	10c0020c 	andi	r3,r2,8
 40076c4:	1009883a 	mov	r4,r2
 40076c8:	18000f26 	beq	r3,zero,4007708 <__swsetup_r+0x7c>
 40076cc:	80c00417 	ldw	r3,16(r16)
 40076d0:	18001526 	beq	r3,zero,4007728 <__swsetup_r+0x9c>
 40076d4:	1100004c 	andi	r4,r2,1
 40076d8:	20001c1e 	bne	r4,zero,400774c <__swsetup_r+0xc0>
 40076dc:	1080008c 	andi	r2,r2,2
 40076e0:	1000291e 	bne	r2,zero,4007788 <__swsetup_r+0xfc>
 40076e4:	80800517 	ldw	r2,20(r16)
 40076e8:	80800215 	stw	r2,8(r16)
 40076ec:	18001c26 	beq	r3,zero,4007760 <__swsetup_r+0xd4>
 40076f0:	0005883a 	mov	r2,zero
 40076f4:	dfc00217 	ldw	ra,8(sp)
 40076f8:	dc400117 	ldw	r17,4(sp)
 40076fc:	dc000017 	ldw	r16,0(sp)
 4007700:	dec00304 	addi	sp,sp,12
 4007704:	f800283a 	ret
 4007708:	2080040c 	andi	r2,r4,16
 400770c:	10002e26 	beq	r2,zero,40077c8 <__swsetup_r+0x13c>
 4007710:	2080010c 	andi	r2,r4,4
 4007714:	10001e1e 	bne	r2,zero,4007790 <__swsetup_r+0x104>
 4007718:	80c00417 	ldw	r3,16(r16)
 400771c:	20800214 	ori	r2,r4,8
 4007720:	8080030d 	sth	r2,12(r16)
 4007724:	183feb1e 	bne	r3,zero,40076d4 <__alt_data_end+0xfc0076d4>
 4007728:	1100a00c 	andi	r4,r2,640
 400772c:	01408004 	movi	r5,512
 4007730:	217fe826 	beq	r4,r5,40076d4 <__alt_data_end+0xfc0076d4>
 4007734:	800b883a 	mov	r5,r16
 4007738:	8809883a 	mov	r4,r17
 400773c:	400a2480 	call	400a248 <__smakebuf_r>
 4007740:	8080030b 	ldhu	r2,12(r16)
 4007744:	80c00417 	ldw	r3,16(r16)
 4007748:	003fe206 	br	40076d4 <__alt_data_end+0xfc0076d4>
 400774c:	80800517 	ldw	r2,20(r16)
 4007750:	80000215 	stw	zero,8(r16)
 4007754:	0085c83a 	sub	r2,zero,r2
 4007758:	80800615 	stw	r2,24(r16)
 400775c:	183fe41e 	bne	r3,zero,40076f0 <__alt_data_end+0xfc0076f0>
 4007760:	80c0030b 	ldhu	r3,12(r16)
 4007764:	0005883a 	mov	r2,zero
 4007768:	1900200c 	andi	r4,r3,128
 400776c:	203fe126 	beq	r4,zero,40076f4 <__alt_data_end+0xfc0076f4>
 4007770:	18c01014 	ori	r3,r3,64
 4007774:	80c0030d 	sth	r3,12(r16)
 4007778:	00bfffc4 	movi	r2,-1
 400777c:	003fdd06 	br	40076f4 <__alt_data_end+0xfc0076f4>
 4007780:	40096980 	call	4009698 <__sinit>
 4007784:	003fcd06 	br	40076bc <__alt_data_end+0xfc0076bc>
 4007788:	0005883a 	mov	r2,zero
 400778c:	003fd606 	br	40076e8 <__alt_data_end+0xfc0076e8>
 4007790:	81400c17 	ldw	r5,48(r16)
 4007794:	28000626 	beq	r5,zero,40077b0 <__swsetup_r+0x124>
 4007798:	80801004 	addi	r2,r16,64
 400779c:	28800326 	beq	r5,r2,40077ac <__swsetup_r+0x120>
 40077a0:	8809883a 	mov	r4,r17
 40077a4:	400980c0 	call	400980c <_free_r>
 40077a8:	8100030b 	ldhu	r4,12(r16)
 40077ac:	80000c15 	stw	zero,48(r16)
 40077b0:	80c00417 	ldw	r3,16(r16)
 40077b4:	00bff6c4 	movi	r2,-37
 40077b8:	1108703a 	and	r4,r2,r4
 40077bc:	80000115 	stw	zero,4(r16)
 40077c0:	80c00015 	stw	r3,0(r16)
 40077c4:	003fd506 	br	400771c <__alt_data_end+0xfc00771c>
 40077c8:	00800244 	movi	r2,9
 40077cc:	88800015 	stw	r2,0(r17)
 40077d0:	20801014 	ori	r2,r4,64
 40077d4:	8080030d 	sth	r2,12(r16)
 40077d8:	00bfffc4 	movi	r2,-1
 40077dc:	003fc506 	br	40076f4 <__alt_data_end+0xfc0076f4>

040077e0 <quorem>:
 40077e0:	defff204 	addi	sp,sp,-56
 40077e4:	ddc00b15 	stw	r23,44(sp)
 40077e8:	20800417 	ldw	r2,16(r4)
 40077ec:	2dc00417 	ldw	r23,16(r5)
 40077f0:	dfc00d15 	stw	ra,52(sp)
 40077f4:	df000c15 	stw	fp,48(sp)
 40077f8:	dd800a15 	stw	r22,40(sp)
 40077fc:	dd400915 	stw	r21,36(sp)
 4007800:	dd000815 	stw	r20,32(sp)
 4007804:	dcc00715 	stw	r19,28(sp)
 4007808:	dc800615 	stw	r18,24(sp)
 400780c:	dc400515 	stw	r17,20(sp)
 4007810:	dc000415 	stw	r16,16(sp)
 4007814:	15c07a16 	blt	r2,r23,4007a00 <quorem+0x220>
 4007818:	bdffffc4 	addi	r23,r23,-1
 400781c:	bde9883a 	add	r20,r23,r23
 4007820:	28c00504 	addi	r3,r5,20
 4007824:	a529883a 	add	r20,r20,r20
 4007828:	1d39883a 	add	fp,r3,r20
 400782c:	24c00504 	addi	r19,r4,20
 4007830:	d9400215 	stw	r5,8(sp)
 4007834:	9d29883a 	add	r20,r19,r20
 4007838:	e1400017 	ldw	r5,0(fp)
 400783c:	d9000015 	stw	r4,0(sp)
 4007840:	a1000017 	ldw	r4,0(r20)
 4007844:	29400044 	addi	r5,r5,1
 4007848:	d8c00115 	stw	r3,4(sp)
 400784c:	dd000315 	stw	r20,12(sp)
 4007850:	40044380 	call	4004438 <__udivsi3>
 4007854:	1025883a 	mov	r18,r2
 4007858:	10003026 	beq	r2,zero,400791c <quorem+0x13c>
 400785c:	dc400117 	ldw	r17,4(sp)
 4007860:	9829883a 	mov	r20,r19
 4007864:	002d883a 	mov	r22,zero
 4007868:	0021883a 	mov	r16,zero
 400786c:	8d400017 	ldw	r21,0(r17)
 4007870:	900b883a 	mov	r5,r18
 4007874:	8c400104 	addi	r17,r17,4
 4007878:	a93fffcc 	andi	r4,r21,65535
 400787c:	40044f40 	call	40044f4 <__mulsi3>
 4007880:	a808d43a 	srli	r4,r21,16
 4007884:	900b883a 	mov	r5,r18
 4007888:	15ad883a 	add	r22,r2,r22
 400788c:	40044f40 	call	40044f4 <__mulsi3>
 4007890:	a1000017 	ldw	r4,0(r20)
 4007894:	b00cd43a 	srli	r6,r22,16
 4007898:	b0ffffcc 	andi	r3,r22,65535
 400789c:	217fffcc 	andi	r5,r4,65535
 40078a0:	2c21883a 	add	r16,r5,r16
 40078a4:	80c7c83a 	sub	r3,r16,r3
 40078a8:	2008d43a 	srli	r4,r4,16
 40078ac:	1185883a 	add	r2,r2,r6
 40078b0:	1821d43a 	srai	r16,r3,16
 40078b4:	117fffcc 	andi	r5,r2,65535
 40078b8:	2149c83a 	sub	r4,r4,r5
 40078bc:	2421883a 	add	r16,r4,r16
 40078c0:	8008943a 	slli	r4,r16,16
 40078c4:	18ffffcc 	andi	r3,r3,65535
 40078c8:	102cd43a 	srli	r22,r2,16
 40078cc:	20c8b03a 	or	r4,r4,r3
 40078d0:	a1000015 	stw	r4,0(r20)
 40078d4:	8021d43a 	srai	r16,r16,16
 40078d8:	a5000104 	addi	r20,r20,4
 40078dc:	e47fe32e 	bgeu	fp,r17,400786c <__alt_data_end+0xfc00786c>
 40078e0:	d8c00317 	ldw	r3,12(sp)
 40078e4:	18800017 	ldw	r2,0(r3)
 40078e8:	10000c1e 	bne	r2,zero,400791c <quorem+0x13c>
 40078ec:	18bfff04 	addi	r2,r3,-4
 40078f0:	9880082e 	bgeu	r19,r2,4007914 <quorem+0x134>
 40078f4:	18ffff17 	ldw	r3,-4(r3)
 40078f8:	18000326 	beq	r3,zero,4007908 <quorem+0x128>
 40078fc:	00000506 	br	4007914 <quorem+0x134>
 4007900:	10c00017 	ldw	r3,0(r2)
 4007904:	1800031e 	bne	r3,zero,4007914 <quorem+0x134>
 4007908:	10bfff04 	addi	r2,r2,-4
 400790c:	bdffffc4 	addi	r23,r23,-1
 4007910:	98bffb36 	bltu	r19,r2,4007900 <__alt_data_end+0xfc007900>
 4007914:	d8c00017 	ldw	r3,0(sp)
 4007918:	1dc00415 	stw	r23,16(r3)
 400791c:	d9400217 	ldw	r5,8(sp)
 4007920:	d9000017 	ldw	r4,0(sp)
 4007924:	400afc80 	call	400afc8 <__mcmp>
 4007928:	10002816 	blt	r2,zero,40079cc <quorem+0x1ec>
 400792c:	dc400117 	ldw	r17,4(sp)
 4007930:	94800044 	addi	r18,r18,1
 4007934:	980d883a 	mov	r6,r19
 4007938:	0007883a 	mov	r3,zero
 400793c:	31000017 	ldw	r4,0(r6)
 4007940:	89400017 	ldw	r5,0(r17)
 4007944:	31800104 	addi	r6,r6,4
 4007948:	20bfffcc 	andi	r2,r4,65535
 400794c:	10c7883a 	add	r3,r2,r3
 4007950:	28bfffcc 	andi	r2,r5,65535
 4007954:	1885c83a 	sub	r2,r3,r2
 4007958:	280ad43a 	srli	r5,r5,16
 400795c:	2008d43a 	srli	r4,r4,16
 4007960:	1007d43a 	srai	r3,r2,16
 4007964:	10bfffcc 	andi	r2,r2,65535
 4007968:	2149c83a 	sub	r4,r4,r5
 400796c:	20c9883a 	add	r4,r4,r3
 4007970:	200a943a 	slli	r5,r4,16
 4007974:	8c400104 	addi	r17,r17,4
 4007978:	2007d43a 	srai	r3,r4,16
 400797c:	2884b03a 	or	r2,r5,r2
 4007980:	30bfff15 	stw	r2,-4(r6)
 4007984:	e47fed2e 	bgeu	fp,r17,400793c <__alt_data_end+0xfc00793c>
 4007988:	bdc5883a 	add	r2,r23,r23
 400798c:	1085883a 	add	r2,r2,r2
 4007990:	9887883a 	add	r3,r19,r2
 4007994:	18800017 	ldw	r2,0(r3)
 4007998:	10000c1e 	bne	r2,zero,40079cc <quorem+0x1ec>
 400799c:	18bfff04 	addi	r2,r3,-4
 40079a0:	9880082e 	bgeu	r19,r2,40079c4 <quorem+0x1e4>
 40079a4:	18ffff17 	ldw	r3,-4(r3)
 40079a8:	18000326 	beq	r3,zero,40079b8 <quorem+0x1d8>
 40079ac:	00000506 	br	40079c4 <quorem+0x1e4>
 40079b0:	10c00017 	ldw	r3,0(r2)
 40079b4:	1800031e 	bne	r3,zero,40079c4 <quorem+0x1e4>
 40079b8:	10bfff04 	addi	r2,r2,-4
 40079bc:	bdffffc4 	addi	r23,r23,-1
 40079c0:	98bffb36 	bltu	r19,r2,40079b0 <__alt_data_end+0xfc0079b0>
 40079c4:	d8c00017 	ldw	r3,0(sp)
 40079c8:	1dc00415 	stw	r23,16(r3)
 40079cc:	9005883a 	mov	r2,r18
 40079d0:	dfc00d17 	ldw	ra,52(sp)
 40079d4:	df000c17 	ldw	fp,48(sp)
 40079d8:	ddc00b17 	ldw	r23,44(sp)
 40079dc:	dd800a17 	ldw	r22,40(sp)
 40079e0:	dd400917 	ldw	r21,36(sp)
 40079e4:	dd000817 	ldw	r20,32(sp)
 40079e8:	dcc00717 	ldw	r19,28(sp)
 40079ec:	dc800617 	ldw	r18,24(sp)
 40079f0:	dc400517 	ldw	r17,20(sp)
 40079f4:	dc000417 	ldw	r16,16(sp)
 40079f8:	dec00e04 	addi	sp,sp,56
 40079fc:	f800283a 	ret
 4007a00:	0005883a 	mov	r2,zero
 4007a04:	003ff206 	br	40079d0 <__alt_data_end+0xfc0079d0>

04007a08 <_dtoa_r>:
 4007a08:	20801017 	ldw	r2,64(r4)
 4007a0c:	deffde04 	addi	sp,sp,-136
 4007a10:	df002015 	stw	fp,128(sp)
 4007a14:	dcc01b15 	stw	r19,108(sp)
 4007a18:	dc801a15 	stw	r18,104(sp)
 4007a1c:	dc401915 	stw	r17,100(sp)
 4007a20:	dc001815 	stw	r16,96(sp)
 4007a24:	dfc02115 	stw	ra,132(sp)
 4007a28:	ddc01f15 	stw	r23,124(sp)
 4007a2c:	dd801e15 	stw	r22,120(sp)
 4007a30:	dd401d15 	stw	r21,116(sp)
 4007a34:	dd001c15 	stw	r20,112(sp)
 4007a38:	d9c00315 	stw	r7,12(sp)
 4007a3c:	2039883a 	mov	fp,r4
 4007a40:	3023883a 	mov	r17,r6
 4007a44:	2825883a 	mov	r18,r5
 4007a48:	dc002417 	ldw	r16,144(sp)
 4007a4c:	3027883a 	mov	r19,r6
 4007a50:	10000826 	beq	r2,zero,4007a74 <_dtoa_r+0x6c>
 4007a54:	21801117 	ldw	r6,68(r4)
 4007a58:	00c00044 	movi	r3,1
 4007a5c:	100b883a 	mov	r5,r2
 4007a60:	1986983a 	sll	r3,r3,r6
 4007a64:	11800115 	stw	r6,4(r2)
 4007a68:	10c00215 	stw	r3,8(r2)
 4007a6c:	400a6ec0 	call	400a6ec <_Bfree>
 4007a70:	e0001015 	stw	zero,64(fp)
 4007a74:	88002e16 	blt	r17,zero,4007b30 <_dtoa_r+0x128>
 4007a78:	80000015 	stw	zero,0(r16)
 4007a7c:	889ffc2c 	andhi	r2,r17,32752
 4007a80:	00dffc34 	movhi	r3,32752
 4007a84:	10c01c26 	beq	r2,r3,4007af8 <_dtoa_r+0xf0>
 4007a88:	000d883a 	mov	r6,zero
 4007a8c:	000f883a 	mov	r7,zero
 4007a90:	9009883a 	mov	r4,r18
 4007a94:	980b883a 	mov	r5,r19
 4007a98:	400fdf80 	call	400fdf8 <__eqdf2>
 4007a9c:	10002b1e 	bne	r2,zero,4007b4c <_dtoa_r+0x144>
 4007aa0:	d9c02317 	ldw	r7,140(sp)
 4007aa4:	00800044 	movi	r2,1
 4007aa8:	38800015 	stw	r2,0(r7)
 4007aac:	d8802517 	ldw	r2,148(sp)
 4007ab0:	10019e26 	beq	r2,zero,400812c <_dtoa_r+0x724>
 4007ab4:	d8c02517 	ldw	r3,148(sp)
 4007ab8:	00810074 	movhi	r2,1025
 4007abc:	10994e44 	addi	r2,r2,25913
 4007ac0:	18800015 	stw	r2,0(r3)
 4007ac4:	10bfffc4 	addi	r2,r2,-1
 4007ac8:	dfc02117 	ldw	ra,132(sp)
 4007acc:	df002017 	ldw	fp,128(sp)
 4007ad0:	ddc01f17 	ldw	r23,124(sp)
 4007ad4:	dd801e17 	ldw	r22,120(sp)
 4007ad8:	dd401d17 	ldw	r21,116(sp)
 4007adc:	dd001c17 	ldw	r20,112(sp)
 4007ae0:	dcc01b17 	ldw	r19,108(sp)
 4007ae4:	dc801a17 	ldw	r18,104(sp)
 4007ae8:	dc401917 	ldw	r17,100(sp)
 4007aec:	dc001817 	ldw	r16,96(sp)
 4007af0:	dec02204 	addi	sp,sp,136
 4007af4:	f800283a 	ret
 4007af8:	d8c02317 	ldw	r3,140(sp)
 4007afc:	0089c3c4 	movi	r2,9999
 4007b00:	18800015 	stw	r2,0(r3)
 4007b04:	90017726 	beq	r18,zero,40080e4 <_dtoa_r+0x6dc>
 4007b08:	00810074 	movhi	r2,1025
 4007b0c:	10995a04 	addi	r2,r2,25960
 4007b10:	d9002517 	ldw	r4,148(sp)
 4007b14:	203fec26 	beq	r4,zero,4007ac8 <__alt_data_end+0xfc007ac8>
 4007b18:	10c000c7 	ldb	r3,3(r2)
 4007b1c:	1801781e 	bne	r3,zero,4008100 <_dtoa_r+0x6f8>
 4007b20:	10c000c4 	addi	r3,r2,3
 4007b24:	d9802517 	ldw	r6,148(sp)
 4007b28:	30c00015 	stw	r3,0(r6)
 4007b2c:	003fe606 	br	4007ac8 <__alt_data_end+0xfc007ac8>
 4007b30:	04e00034 	movhi	r19,32768
 4007b34:	9cffffc4 	addi	r19,r19,-1
 4007b38:	00800044 	movi	r2,1
 4007b3c:	8ce6703a 	and	r19,r17,r19
 4007b40:	80800015 	stw	r2,0(r16)
 4007b44:	9823883a 	mov	r17,r19
 4007b48:	003fcc06 	br	4007a7c <__alt_data_end+0xfc007a7c>
 4007b4c:	d8800204 	addi	r2,sp,8
 4007b50:	d8800015 	stw	r2,0(sp)
 4007b54:	d9c00104 	addi	r7,sp,4
 4007b58:	900b883a 	mov	r5,r18
 4007b5c:	980d883a 	mov	r6,r19
 4007b60:	e009883a 	mov	r4,fp
 4007b64:	8820d53a 	srli	r16,r17,20
 4007b68:	400b3940 	call	400b394 <__d2b>
 4007b6c:	d8800915 	stw	r2,36(sp)
 4007b70:	8001651e 	bne	r16,zero,4008108 <_dtoa_r+0x700>
 4007b74:	dd800217 	ldw	r22,8(sp)
 4007b78:	dc000117 	ldw	r16,4(sp)
 4007b7c:	00800804 	movi	r2,32
 4007b80:	b421883a 	add	r16,r22,r16
 4007b84:	80c10c84 	addi	r3,r16,1074
 4007b88:	10c2d10e 	bge	r2,r3,40086d0 <_dtoa_r+0xcc8>
 4007b8c:	00801004 	movi	r2,64
 4007b90:	81010484 	addi	r4,r16,1042
 4007b94:	10c7c83a 	sub	r3,r2,r3
 4007b98:	9108d83a 	srl	r4,r18,r4
 4007b9c:	88e2983a 	sll	r17,r17,r3
 4007ba0:	2448b03a 	or	r4,r4,r17
 4007ba4:	40113140 	call	4011314 <__floatunsidf>
 4007ba8:	017f8434 	movhi	r5,65040
 4007bac:	01800044 	movi	r6,1
 4007bb0:	1009883a 	mov	r4,r2
 4007bb4:	194b883a 	add	r5,r3,r5
 4007bb8:	843fffc4 	addi	r16,r16,-1
 4007bbc:	d9801115 	stw	r6,68(sp)
 4007bc0:	000d883a 	mov	r6,zero
 4007bc4:	01cffe34 	movhi	r7,16376
 4007bc8:	40108bc0 	call	40108bc <__subdf3>
 4007bcc:	0198dbf4 	movhi	r6,25455
 4007bd0:	01cff4f4 	movhi	r7,16339
 4007bd4:	3190d844 	addi	r6,r6,17249
 4007bd8:	39e1e9c4 	addi	r7,r7,-30809
 4007bdc:	1009883a 	mov	r4,r2
 4007be0:	180b883a 	mov	r5,r3
 4007be4:	40100500 	call	4010050 <__muldf3>
 4007be8:	01a2d874 	movhi	r6,35681
 4007bec:	01cff1f4 	movhi	r7,16327
 4007bf0:	31b22cc4 	addi	r6,r6,-14157
 4007bf4:	39e28a04 	addi	r7,r7,-30168
 4007bf8:	180b883a 	mov	r5,r3
 4007bfc:	1009883a 	mov	r4,r2
 4007c00:	400eb7c0 	call	400eb7c <__adddf3>
 4007c04:	8009883a 	mov	r4,r16
 4007c08:	1029883a 	mov	r20,r2
 4007c0c:	1823883a 	mov	r17,r3
 4007c10:	40112380 	call	4011238 <__floatsidf>
 4007c14:	019427f4 	movhi	r6,20639
 4007c18:	01cff4f4 	movhi	r7,16339
 4007c1c:	319e7ec4 	addi	r6,r6,31227
 4007c20:	39d104c4 	addi	r7,r7,17427
 4007c24:	1009883a 	mov	r4,r2
 4007c28:	180b883a 	mov	r5,r3
 4007c2c:	40100500 	call	4010050 <__muldf3>
 4007c30:	100d883a 	mov	r6,r2
 4007c34:	180f883a 	mov	r7,r3
 4007c38:	a009883a 	mov	r4,r20
 4007c3c:	880b883a 	mov	r5,r17
 4007c40:	400eb7c0 	call	400eb7c <__adddf3>
 4007c44:	1009883a 	mov	r4,r2
 4007c48:	180b883a 	mov	r5,r3
 4007c4c:	1029883a 	mov	r20,r2
 4007c50:	1823883a 	mov	r17,r3
 4007c54:	40111b80 	call	40111b8 <__fixdfsi>
 4007c58:	000d883a 	mov	r6,zero
 4007c5c:	000f883a 	mov	r7,zero
 4007c60:	a009883a 	mov	r4,r20
 4007c64:	880b883a 	mov	r5,r17
 4007c68:	d8800515 	stw	r2,20(sp)
 4007c6c:	400ff5c0 	call	400ff5c <__ledf2>
 4007c70:	10028716 	blt	r2,zero,4008690 <_dtoa_r+0xc88>
 4007c74:	d8c00517 	ldw	r3,20(sp)
 4007c78:	00800584 	movi	r2,22
 4007c7c:	10c27536 	bltu	r2,r3,4008654 <_dtoa_r+0xc4c>
 4007c80:	180490fa 	slli	r2,r3,3
 4007c84:	00c10074 	movhi	r3,1025
 4007c88:	18d97504 	addi	r3,r3,26068
 4007c8c:	1885883a 	add	r2,r3,r2
 4007c90:	11000017 	ldw	r4,0(r2)
 4007c94:	11400117 	ldw	r5,4(r2)
 4007c98:	900d883a 	mov	r6,r18
 4007c9c:	980f883a 	mov	r7,r19
 4007ca0:	400fe800 	call	400fe80 <__gedf2>
 4007ca4:	00828d0e 	bge	zero,r2,40086dc <_dtoa_r+0xcd4>
 4007ca8:	d9000517 	ldw	r4,20(sp)
 4007cac:	d8000e15 	stw	zero,56(sp)
 4007cb0:	213fffc4 	addi	r4,r4,-1
 4007cb4:	d9000515 	stw	r4,20(sp)
 4007cb8:	b42dc83a 	sub	r22,r22,r16
 4007cbc:	b5bfffc4 	addi	r22,r22,-1
 4007cc0:	b0026f16 	blt	r22,zero,4008680 <_dtoa_r+0xc78>
 4007cc4:	d8000815 	stw	zero,32(sp)
 4007cc8:	d9c00517 	ldw	r7,20(sp)
 4007ccc:	38026416 	blt	r7,zero,4008660 <_dtoa_r+0xc58>
 4007cd0:	b1ed883a 	add	r22,r22,r7
 4007cd4:	d9c00d15 	stw	r7,52(sp)
 4007cd8:	d8000a15 	stw	zero,40(sp)
 4007cdc:	d9800317 	ldw	r6,12(sp)
 4007ce0:	00800244 	movi	r2,9
 4007ce4:	11811436 	bltu	r2,r6,4008138 <_dtoa_r+0x730>
 4007ce8:	00800144 	movi	r2,5
 4007cec:	1184e10e 	bge	r2,r6,4009074 <_dtoa_r+0x166c>
 4007cf0:	31bfff04 	addi	r6,r6,-4
 4007cf4:	d9800315 	stw	r6,12(sp)
 4007cf8:	0023883a 	mov	r17,zero
 4007cfc:	d9800317 	ldw	r6,12(sp)
 4007d00:	008000c4 	movi	r2,3
 4007d04:	30836726 	beq	r6,r2,4008aa4 <_dtoa_r+0x109c>
 4007d08:	1183410e 	bge	r2,r6,4008a10 <_dtoa_r+0x1008>
 4007d0c:	d9c00317 	ldw	r7,12(sp)
 4007d10:	00800104 	movi	r2,4
 4007d14:	38827c26 	beq	r7,r2,4008708 <_dtoa_r+0xd00>
 4007d18:	00800144 	movi	r2,5
 4007d1c:	3884c41e 	bne	r7,r2,4009030 <_dtoa_r+0x1628>
 4007d20:	00800044 	movi	r2,1
 4007d24:	d8800b15 	stw	r2,44(sp)
 4007d28:	d8c00517 	ldw	r3,20(sp)
 4007d2c:	d9002217 	ldw	r4,136(sp)
 4007d30:	1907883a 	add	r3,r3,r4
 4007d34:	19800044 	addi	r6,r3,1
 4007d38:	d8c00c15 	stw	r3,48(sp)
 4007d3c:	d9800615 	stw	r6,24(sp)
 4007d40:	0183a40e 	bge	zero,r6,4008bd4 <_dtoa_r+0x11cc>
 4007d44:	d9800617 	ldw	r6,24(sp)
 4007d48:	3021883a 	mov	r16,r6
 4007d4c:	e0001115 	stw	zero,68(fp)
 4007d50:	008005c4 	movi	r2,23
 4007d54:	1184c92e 	bgeu	r2,r6,400907c <_dtoa_r+0x1674>
 4007d58:	00c00044 	movi	r3,1
 4007d5c:	00800104 	movi	r2,4
 4007d60:	1085883a 	add	r2,r2,r2
 4007d64:	11000504 	addi	r4,r2,20
 4007d68:	180b883a 	mov	r5,r3
 4007d6c:	18c00044 	addi	r3,r3,1
 4007d70:	313ffb2e 	bgeu	r6,r4,4007d60 <__alt_data_end+0xfc007d60>
 4007d74:	e1401115 	stw	r5,68(fp)
 4007d78:	e009883a 	mov	r4,fp
 4007d7c:	400a6440 	call	400a644 <_Balloc>
 4007d80:	d8800715 	stw	r2,28(sp)
 4007d84:	e0801015 	stw	r2,64(fp)
 4007d88:	00800384 	movi	r2,14
 4007d8c:	1400f736 	bltu	r2,r16,400816c <_dtoa_r+0x764>
 4007d90:	8800f626 	beq	r17,zero,400816c <_dtoa_r+0x764>
 4007d94:	d9c00517 	ldw	r7,20(sp)
 4007d98:	01c39a0e 	bge	zero,r7,4008c04 <_dtoa_r+0x11fc>
 4007d9c:	388003cc 	andi	r2,r7,15
 4007da0:	100490fa 	slli	r2,r2,3
 4007da4:	382bd13a 	srai	r21,r7,4
 4007da8:	00c10074 	movhi	r3,1025
 4007dac:	18d97504 	addi	r3,r3,26068
 4007db0:	1885883a 	add	r2,r3,r2
 4007db4:	a8c0040c 	andi	r3,r21,16
 4007db8:	12400017 	ldw	r9,0(r2)
 4007dbc:	12000117 	ldw	r8,4(r2)
 4007dc0:	18037926 	beq	r3,zero,4008ba8 <_dtoa_r+0x11a0>
 4007dc4:	00810074 	movhi	r2,1025
 4007dc8:	10996b04 	addi	r2,r2,26028
 4007dcc:	11800817 	ldw	r6,32(r2)
 4007dd0:	11c00917 	ldw	r7,36(r2)
 4007dd4:	9009883a 	mov	r4,r18
 4007dd8:	980b883a 	mov	r5,r19
 4007ddc:	da001715 	stw	r8,92(sp)
 4007de0:	da401615 	stw	r9,88(sp)
 4007de4:	400f4280 	call	400f428 <__divdf3>
 4007de8:	da001717 	ldw	r8,92(sp)
 4007dec:	da401617 	ldw	r9,88(sp)
 4007df0:	ad4003cc 	andi	r21,r21,15
 4007df4:	040000c4 	movi	r16,3
 4007df8:	1023883a 	mov	r17,r2
 4007dfc:	1829883a 	mov	r20,r3
 4007e00:	a8001126 	beq	r21,zero,4007e48 <_dtoa_r+0x440>
 4007e04:	05c10074 	movhi	r23,1025
 4007e08:	bdd96b04 	addi	r23,r23,26028
 4007e0c:	4805883a 	mov	r2,r9
 4007e10:	4007883a 	mov	r3,r8
 4007e14:	a980004c 	andi	r6,r21,1
 4007e18:	1009883a 	mov	r4,r2
 4007e1c:	a82bd07a 	srai	r21,r21,1
 4007e20:	180b883a 	mov	r5,r3
 4007e24:	30000426 	beq	r6,zero,4007e38 <_dtoa_r+0x430>
 4007e28:	b9800017 	ldw	r6,0(r23)
 4007e2c:	b9c00117 	ldw	r7,4(r23)
 4007e30:	84000044 	addi	r16,r16,1
 4007e34:	40100500 	call	4010050 <__muldf3>
 4007e38:	bdc00204 	addi	r23,r23,8
 4007e3c:	a83ff51e 	bne	r21,zero,4007e14 <__alt_data_end+0xfc007e14>
 4007e40:	1013883a 	mov	r9,r2
 4007e44:	1811883a 	mov	r8,r3
 4007e48:	480d883a 	mov	r6,r9
 4007e4c:	400f883a 	mov	r7,r8
 4007e50:	8809883a 	mov	r4,r17
 4007e54:	a00b883a 	mov	r5,r20
 4007e58:	400f4280 	call	400f428 <__divdf3>
 4007e5c:	d8800f15 	stw	r2,60(sp)
 4007e60:	d8c01015 	stw	r3,64(sp)
 4007e64:	d8c00e17 	ldw	r3,56(sp)
 4007e68:	18000626 	beq	r3,zero,4007e84 <_dtoa_r+0x47c>
 4007e6c:	d9000f17 	ldw	r4,60(sp)
 4007e70:	d9401017 	ldw	r5,64(sp)
 4007e74:	000d883a 	mov	r6,zero
 4007e78:	01cffc34 	movhi	r7,16368
 4007e7c:	400ff5c0 	call	400ff5c <__ledf2>
 4007e80:	10040b16 	blt	r2,zero,4008eb0 <_dtoa_r+0x14a8>
 4007e84:	8009883a 	mov	r4,r16
 4007e88:	40112380 	call	4011238 <__floatsidf>
 4007e8c:	d9800f17 	ldw	r6,60(sp)
 4007e90:	d9c01017 	ldw	r7,64(sp)
 4007e94:	1009883a 	mov	r4,r2
 4007e98:	180b883a 	mov	r5,r3
 4007e9c:	40100500 	call	4010050 <__muldf3>
 4007ea0:	000d883a 	mov	r6,zero
 4007ea4:	01d00734 	movhi	r7,16412
 4007ea8:	1009883a 	mov	r4,r2
 4007eac:	180b883a 	mov	r5,r3
 4007eb0:	400eb7c0 	call	400eb7c <__adddf3>
 4007eb4:	1021883a 	mov	r16,r2
 4007eb8:	d8800617 	ldw	r2,24(sp)
 4007ebc:	047f3034 	movhi	r17,64704
 4007ec0:	1c63883a 	add	r17,r3,r17
 4007ec4:	10031826 	beq	r2,zero,4008b28 <_dtoa_r+0x1120>
 4007ec8:	d8c00517 	ldw	r3,20(sp)
 4007ecc:	db000617 	ldw	r12,24(sp)
 4007ed0:	d8c01315 	stw	r3,76(sp)
 4007ed4:	d9000b17 	ldw	r4,44(sp)
 4007ed8:	20038f26 	beq	r4,zero,4008d18 <_dtoa_r+0x1310>
 4007edc:	60bfffc4 	addi	r2,r12,-1
 4007ee0:	100490fa 	slli	r2,r2,3
 4007ee4:	00c10074 	movhi	r3,1025
 4007ee8:	18d97504 	addi	r3,r3,26068
 4007eec:	1885883a 	add	r2,r3,r2
 4007ef0:	11800017 	ldw	r6,0(r2)
 4007ef4:	11c00117 	ldw	r7,4(r2)
 4007ef8:	d8800717 	ldw	r2,28(sp)
 4007efc:	0009883a 	mov	r4,zero
 4007f00:	014ff834 	movhi	r5,16352
 4007f04:	db001615 	stw	r12,88(sp)
 4007f08:	15c00044 	addi	r23,r2,1
 4007f0c:	400f4280 	call	400f428 <__divdf3>
 4007f10:	800d883a 	mov	r6,r16
 4007f14:	880f883a 	mov	r7,r17
 4007f18:	1009883a 	mov	r4,r2
 4007f1c:	180b883a 	mov	r5,r3
 4007f20:	40108bc0 	call	40108bc <__subdf3>
 4007f24:	d9401017 	ldw	r5,64(sp)
 4007f28:	d9000f17 	ldw	r4,60(sp)
 4007f2c:	102b883a 	mov	r21,r2
 4007f30:	d8c01215 	stw	r3,72(sp)
 4007f34:	40111b80 	call	40111b8 <__fixdfsi>
 4007f38:	1009883a 	mov	r4,r2
 4007f3c:	1029883a 	mov	r20,r2
 4007f40:	40112380 	call	4011238 <__floatsidf>
 4007f44:	d9000f17 	ldw	r4,60(sp)
 4007f48:	d9401017 	ldw	r5,64(sp)
 4007f4c:	100d883a 	mov	r6,r2
 4007f50:	180f883a 	mov	r7,r3
 4007f54:	40108bc0 	call	40108bc <__subdf3>
 4007f58:	1823883a 	mov	r17,r3
 4007f5c:	d8c00717 	ldw	r3,28(sp)
 4007f60:	d9401217 	ldw	r5,72(sp)
 4007f64:	a2000c04 	addi	r8,r20,48
 4007f68:	1021883a 	mov	r16,r2
 4007f6c:	1a000005 	stb	r8,0(r3)
 4007f70:	800d883a 	mov	r6,r16
 4007f74:	880f883a 	mov	r7,r17
 4007f78:	a809883a 	mov	r4,r21
 4007f7c:	4029883a 	mov	r20,r8
 4007f80:	400fe800 	call	400fe80 <__gedf2>
 4007f84:	00841d16 	blt	zero,r2,4008ffc <_dtoa_r+0x15f4>
 4007f88:	800d883a 	mov	r6,r16
 4007f8c:	880f883a 	mov	r7,r17
 4007f90:	0009883a 	mov	r4,zero
 4007f94:	014ffc34 	movhi	r5,16368
 4007f98:	40108bc0 	call	40108bc <__subdf3>
 4007f9c:	d9401217 	ldw	r5,72(sp)
 4007fa0:	100d883a 	mov	r6,r2
 4007fa4:	180f883a 	mov	r7,r3
 4007fa8:	a809883a 	mov	r4,r21
 4007fac:	400fe800 	call	400fe80 <__gedf2>
 4007fb0:	db001617 	ldw	r12,88(sp)
 4007fb4:	00840e16 	blt	zero,r2,4008ff0 <_dtoa_r+0x15e8>
 4007fb8:	00800044 	movi	r2,1
 4007fbc:	13006b0e 	bge	r2,r12,400816c <_dtoa_r+0x764>
 4007fc0:	d9000717 	ldw	r4,28(sp)
 4007fc4:	dd800f15 	stw	r22,60(sp)
 4007fc8:	dcc01015 	stw	r19,64(sp)
 4007fcc:	2319883a 	add	r12,r4,r12
 4007fd0:	dcc01217 	ldw	r19,72(sp)
 4007fd4:	602d883a 	mov	r22,r12
 4007fd8:	dc801215 	stw	r18,72(sp)
 4007fdc:	b825883a 	mov	r18,r23
 4007fe0:	00000906 	br	4008008 <_dtoa_r+0x600>
 4007fe4:	40108bc0 	call	40108bc <__subdf3>
 4007fe8:	a80d883a 	mov	r6,r21
 4007fec:	980f883a 	mov	r7,r19
 4007ff0:	1009883a 	mov	r4,r2
 4007ff4:	180b883a 	mov	r5,r3
 4007ff8:	400ff5c0 	call	400ff5c <__ledf2>
 4007ffc:	1003e816 	blt	r2,zero,4008fa0 <_dtoa_r+0x1598>
 4008000:	b825883a 	mov	r18,r23
 4008004:	bd83e926 	beq	r23,r22,4008fac <_dtoa_r+0x15a4>
 4008008:	a809883a 	mov	r4,r21
 400800c:	980b883a 	mov	r5,r19
 4008010:	000d883a 	mov	r6,zero
 4008014:	01d00934 	movhi	r7,16420
 4008018:	40100500 	call	4010050 <__muldf3>
 400801c:	000d883a 	mov	r6,zero
 4008020:	01d00934 	movhi	r7,16420
 4008024:	8009883a 	mov	r4,r16
 4008028:	880b883a 	mov	r5,r17
 400802c:	102b883a 	mov	r21,r2
 4008030:	1827883a 	mov	r19,r3
 4008034:	40100500 	call	4010050 <__muldf3>
 4008038:	180b883a 	mov	r5,r3
 400803c:	1009883a 	mov	r4,r2
 4008040:	1821883a 	mov	r16,r3
 4008044:	1023883a 	mov	r17,r2
 4008048:	40111b80 	call	40111b8 <__fixdfsi>
 400804c:	1009883a 	mov	r4,r2
 4008050:	1029883a 	mov	r20,r2
 4008054:	40112380 	call	4011238 <__floatsidf>
 4008058:	8809883a 	mov	r4,r17
 400805c:	800b883a 	mov	r5,r16
 4008060:	100d883a 	mov	r6,r2
 4008064:	180f883a 	mov	r7,r3
 4008068:	40108bc0 	call	40108bc <__subdf3>
 400806c:	a5000c04 	addi	r20,r20,48
 4008070:	a80d883a 	mov	r6,r21
 4008074:	980f883a 	mov	r7,r19
 4008078:	1009883a 	mov	r4,r2
 400807c:	180b883a 	mov	r5,r3
 4008080:	95000005 	stb	r20,0(r18)
 4008084:	1021883a 	mov	r16,r2
 4008088:	1823883a 	mov	r17,r3
 400808c:	400ff5c0 	call	400ff5c <__ledf2>
 4008090:	bdc00044 	addi	r23,r23,1
 4008094:	800d883a 	mov	r6,r16
 4008098:	880f883a 	mov	r7,r17
 400809c:	0009883a 	mov	r4,zero
 40080a0:	014ffc34 	movhi	r5,16368
 40080a4:	103fcf0e 	bge	r2,zero,4007fe4 <__alt_data_end+0xfc007fe4>
 40080a8:	d8c01317 	ldw	r3,76(sp)
 40080ac:	d8c00515 	stw	r3,20(sp)
 40080b0:	d9400917 	ldw	r5,36(sp)
 40080b4:	e009883a 	mov	r4,fp
 40080b8:	400a6ec0 	call	400a6ec <_Bfree>
 40080bc:	d9000517 	ldw	r4,20(sp)
 40080c0:	d9802317 	ldw	r6,140(sp)
 40080c4:	d9c02517 	ldw	r7,148(sp)
 40080c8:	b8000005 	stb	zero,0(r23)
 40080cc:	20800044 	addi	r2,r4,1
 40080d0:	30800015 	stw	r2,0(r6)
 40080d4:	3802aa26 	beq	r7,zero,4008b80 <_dtoa_r+0x1178>
 40080d8:	3dc00015 	stw	r23,0(r7)
 40080dc:	d8800717 	ldw	r2,28(sp)
 40080e0:	003e7906 	br	4007ac8 <__alt_data_end+0xfc007ac8>
 40080e4:	00800434 	movhi	r2,16
 40080e8:	10bfffc4 	addi	r2,r2,-1
 40080ec:	88a2703a 	and	r17,r17,r2
 40080f0:	883e851e 	bne	r17,zero,4007b08 <__alt_data_end+0xfc007b08>
 40080f4:	00810074 	movhi	r2,1025
 40080f8:	10995704 	addi	r2,r2,25948
 40080fc:	003e8406 	br	4007b10 <__alt_data_end+0xfc007b10>
 4008100:	10c00204 	addi	r3,r2,8
 4008104:	003e8706 	br	4007b24 <__alt_data_end+0xfc007b24>
 4008108:	01400434 	movhi	r5,16
 400810c:	297fffc4 	addi	r5,r5,-1
 4008110:	994a703a 	and	r5,r19,r5
 4008114:	9009883a 	mov	r4,r18
 4008118:	843f0044 	addi	r16,r16,-1023
 400811c:	294ffc34 	orhi	r5,r5,16368
 4008120:	dd800217 	ldw	r22,8(sp)
 4008124:	d8001115 	stw	zero,68(sp)
 4008128:	003ea506 	br	4007bc0 <__alt_data_end+0xfc007bc0>
 400812c:	00810074 	movhi	r2,1025
 4008130:	10994e04 	addi	r2,r2,25912
 4008134:	003e6406 	br	4007ac8 <__alt_data_end+0xfc007ac8>
 4008138:	e0001115 	stw	zero,68(fp)
 400813c:	000b883a 	mov	r5,zero
 4008140:	e009883a 	mov	r4,fp
 4008144:	400a6440 	call	400a644 <_Balloc>
 4008148:	01bfffc4 	movi	r6,-1
 400814c:	01c00044 	movi	r7,1
 4008150:	d8800715 	stw	r2,28(sp)
 4008154:	d9800c15 	stw	r6,48(sp)
 4008158:	e0801015 	stw	r2,64(fp)
 400815c:	d8000315 	stw	zero,12(sp)
 4008160:	d9c00b15 	stw	r7,44(sp)
 4008164:	d9800615 	stw	r6,24(sp)
 4008168:	d8002215 	stw	zero,136(sp)
 400816c:	d8800117 	ldw	r2,4(sp)
 4008170:	10008916 	blt	r2,zero,4008398 <_dtoa_r+0x990>
 4008174:	d9000517 	ldw	r4,20(sp)
 4008178:	00c00384 	movi	r3,14
 400817c:	19008616 	blt	r3,r4,4008398 <_dtoa_r+0x990>
 4008180:	200490fa 	slli	r2,r4,3
 4008184:	00c10074 	movhi	r3,1025
 4008188:	d9802217 	ldw	r6,136(sp)
 400818c:	18d97504 	addi	r3,r3,26068
 4008190:	1885883a 	add	r2,r3,r2
 4008194:	14000017 	ldw	r16,0(r2)
 4008198:	14400117 	ldw	r17,4(r2)
 400819c:	30016316 	blt	r6,zero,400872c <_dtoa_r+0xd24>
 40081a0:	800d883a 	mov	r6,r16
 40081a4:	880f883a 	mov	r7,r17
 40081a8:	9009883a 	mov	r4,r18
 40081ac:	980b883a 	mov	r5,r19
 40081b0:	400f4280 	call	400f428 <__divdf3>
 40081b4:	180b883a 	mov	r5,r3
 40081b8:	1009883a 	mov	r4,r2
 40081bc:	40111b80 	call	40111b8 <__fixdfsi>
 40081c0:	1009883a 	mov	r4,r2
 40081c4:	102b883a 	mov	r21,r2
 40081c8:	40112380 	call	4011238 <__floatsidf>
 40081cc:	800d883a 	mov	r6,r16
 40081d0:	880f883a 	mov	r7,r17
 40081d4:	1009883a 	mov	r4,r2
 40081d8:	180b883a 	mov	r5,r3
 40081dc:	40100500 	call	4010050 <__muldf3>
 40081e0:	100d883a 	mov	r6,r2
 40081e4:	180f883a 	mov	r7,r3
 40081e8:	9009883a 	mov	r4,r18
 40081ec:	980b883a 	mov	r5,r19
 40081f0:	40108bc0 	call	40108bc <__subdf3>
 40081f4:	d9c00717 	ldw	r7,28(sp)
 40081f8:	1009883a 	mov	r4,r2
 40081fc:	a8800c04 	addi	r2,r21,48
 4008200:	38800005 	stb	r2,0(r7)
 4008204:	3dc00044 	addi	r23,r7,1
 4008208:	d9c00617 	ldw	r7,24(sp)
 400820c:	01800044 	movi	r6,1
 4008210:	180b883a 	mov	r5,r3
 4008214:	2005883a 	mov	r2,r4
 4008218:	39803826 	beq	r7,r6,40082fc <_dtoa_r+0x8f4>
 400821c:	000d883a 	mov	r6,zero
 4008220:	01d00934 	movhi	r7,16420
 4008224:	40100500 	call	4010050 <__muldf3>
 4008228:	000d883a 	mov	r6,zero
 400822c:	000f883a 	mov	r7,zero
 4008230:	1009883a 	mov	r4,r2
 4008234:	180b883a 	mov	r5,r3
 4008238:	1025883a 	mov	r18,r2
 400823c:	1827883a 	mov	r19,r3
 4008240:	400fdf80 	call	400fdf8 <__eqdf2>
 4008244:	103f9a26 	beq	r2,zero,40080b0 <__alt_data_end+0xfc0080b0>
 4008248:	d9c00617 	ldw	r7,24(sp)
 400824c:	d8c00717 	ldw	r3,28(sp)
 4008250:	b829883a 	mov	r20,r23
 4008254:	38bfffc4 	addi	r2,r7,-1
 4008258:	18ad883a 	add	r22,r3,r2
 400825c:	00000a06 	br	4008288 <_dtoa_r+0x880>
 4008260:	40100500 	call	4010050 <__muldf3>
 4008264:	000d883a 	mov	r6,zero
 4008268:	000f883a 	mov	r7,zero
 400826c:	1009883a 	mov	r4,r2
 4008270:	180b883a 	mov	r5,r3
 4008274:	1025883a 	mov	r18,r2
 4008278:	1827883a 	mov	r19,r3
 400827c:	b829883a 	mov	r20,r23
 4008280:	400fdf80 	call	400fdf8 <__eqdf2>
 4008284:	103f8a26 	beq	r2,zero,40080b0 <__alt_data_end+0xfc0080b0>
 4008288:	800d883a 	mov	r6,r16
 400828c:	880f883a 	mov	r7,r17
 4008290:	9009883a 	mov	r4,r18
 4008294:	980b883a 	mov	r5,r19
 4008298:	400f4280 	call	400f428 <__divdf3>
 400829c:	180b883a 	mov	r5,r3
 40082a0:	1009883a 	mov	r4,r2
 40082a4:	40111b80 	call	40111b8 <__fixdfsi>
 40082a8:	1009883a 	mov	r4,r2
 40082ac:	102b883a 	mov	r21,r2
 40082b0:	40112380 	call	4011238 <__floatsidf>
 40082b4:	800d883a 	mov	r6,r16
 40082b8:	880f883a 	mov	r7,r17
 40082bc:	1009883a 	mov	r4,r2
 40082c0:	180b883a 	mov	r5,r3
 40082c4:	40100500 	call	4010050 <__muldf3>
 40082c8:	100d883a 	mov	r6,r2
 40082cc:	180f883a 	mov	r7,r3
 40082d0:	9009883a 	mov	r4,r18
 40082d4:	980b883a 	mov	r5,r19
 40082d8:	40108bc0 	call	40108bc <__subdf3>
 40082dc:	aa000c04 	addi	r8,r21,48
 40082e0:	a2000005 	stb	r8,0(r20)
 40082e4:	000d883a 	mov	r6,zero
 40082e8:	01d00934 	movhi	r7,16420
 40082ec:	1009883a 	mov	r4,r2
 40082f0:	180b883a 	mov	r5,r3
 40082f4:	a5c00044 	addi	r23,r20,1
 40082f8:	b53fd91e 	bne	r22,r20,4008260 <__alt_data_end+0xfc008260>
 40082fc:	100d883a 	mov	r6,r2
 4008300:	180f883a 	mov	r7,r3
 4008304:	1009883a 	mov	r4,r2
 4008308:	180b883a 	mov	r5,r3
 400830c:	400eb7c0 	call	400eb7c <__adddf3>
 4008310:	100d883a 	mov	r6,r2
 4008314:	180f883a 	mov	r7,r3
 4008318:	8009883a 	mov	r4,r16
 400831c:	880b883a 	mov	r5,r17
 4008320:	1027883a 	mov	r19,r2
 4008324:	1825883a 	mov	r18,r3
 4008328:	400ff5c0 	call	400ff5c <__ledf2>
 400832c:	10000816 	blt	r2,zero,4008350 <_dtoa_r+0x948>
 4008330:	980d883a 	mov	r6,r19
 4008334:	900f883a 	mov	r7,r18
 4008338:	8009883a 	mov	r4,r16
 400833c:	880b883a 	mov	r5,r17
 4008340:	400fdf80 	call	400fdf8 <__eqdf2>
 4008344:	103f5a1e 	bne	r2,zero,40080b0 <__alt_data_end+0xfc0080b0>
 4008348:	ad40004c 	andi	r21,r21,1
 400834c:	a83f5826 	beq	r21,zero,40080b0 <__alt_data_end+0xfc0080b0>
 4008350:	bd3fffc3 	ldbu	r20,-1(r23)
 4008354:	b8bfffc4 	addi	r2,r23,-1
 4008358:	1007883a 	mov	r3,r2
 400835c:	01400e44 	movi	r5,57
 4008360:	d9800717 	ldw	r6,28(sp)
 4008364:	00000506 	br	400837c <_dtoa_r+0x974>
 4008368:	18ffffc4 	addi	r3,r3,-1
 400836c:	11824726 	beq	r2,r6,4008c8c <_dtoa_r+0x1284>
 4008370:	1d000003 	ldbu	r20,0(r3)
 4008374:	102f883a 	mov	r23,r2
 4008378:	10bfffc4 	addi	r2,r2,-1
 400837c:	a1003fcc 	andi	r4,r20,255
 4008380:	2100201c 	xori	r4,r4,128
 4008384:	213fe004 	addi	r4,r4,-128
 4008388:	217ff726 	beq	r4,r5,4008368 <__alt_data_end+0xfc008368>
 400838c:	a2000044 	addi	r8,r20,1
 4008390:	12000005 	stb	r8,0(r2)
 4008394:	003f4606 	br	40080b0 <__alt_data_end+0xfc0080b0>
 4008398:	d9000b17 	ldw	r4,44(sp)
 400839c:	2000c826 	beq	r4,zero,40086c0 <_dtoa_r+0xcb8>
 40083a0:	d9800317 	ldw	r6,12(sp)
 40083a4:	00c00044 	movi	r3,1
 40083a8:	1980f90e 	bge	r3,r6,4008790 <_dtoa_r+0xd88>
 40083ac:	d8800617 	ldw	r2,24(sp)
 40083b0:	d8c00a17 	ldw	r3,40(sp)
 40083b4:	157fffc4 	addi	r21,r2,-1
 40083b8:	1d41f316 	blt	r3,r21,4008b88 <_dtoa_r+0x1180>
 40083bc:	1d6bc83a 	sub	r21,r3,r21
 40083c0:	d9c00617 	ldw	r7,24(sp)
 40083c4:	3802aa16 	blt	r7,zero,4008e70 <_dtoa_r+0x1468>
 40083c8:	dd000817 	ldw	r20,32(sp)
 40083cc:	d8800617 	ldw	r2,24(sp)
 40083d0:	d8c00817 	ldw	r3,32(sp)
 40083d4:	01400044 	movi	r5,1
 40083d8:	e009883a 	mov	r4,fp
 40083dc:	1887883a 	add	r3,r3,r2
 40083e0:	d8c00815 	stw	r3,32(sp)
 40083e4:	b0ad883a 	add	r22,r22,r2
 40083e8:	400aa780 	call	400aa78 <__i2b>
 40083ec:	1023883a 	mov	r17,r2
 40083f0:	a0000826 	beq	r20,zero,4008414 <_dtoa_r+0xa0c>
 40083f4:	0580070e 	bge	zero,r22,4008414 <_dtoa_r+0xa0c>
 40083f8:	a005883a 	mov	r2,r20
 40083fc:	b500b916 	blt	r22,r20,40086e4 <_dtoa_r+0xcdc>
 4008400:	d9000817 	ldw	r4,32(sp)
 4008404:	a0a9c83a 	sub	r20,r20,r2
 4008408:	b0adc83a 	sub	r22,r22,r2
 400840c:	2089c83a 	sub	r4,r4,r2
 4008410:	d9000815 	stw	r4,32(sp)
 4008414:	d9800a17 	ldw	r6,40(sp)
 4008418:	0181810e 	bge	zero,r6,4008a20 <_dtoa_r+0x1018>
 400841c:	d9c00b17 	ldw	r7,44(sp)
 4008420:	3800b326 	beq	r7,zero,40086f0 <_dtoa_r+0xce8>
 4008424:	a800b226 	beq	r21,zero,40086f0 <_dtoa_r+0xce8>
 4008428:	880b883a 	mov	r5,r17
 400842c:	a80d883a 	mov	r6,r21
 4008430:	e009883a 	mov	r4,fp
 4008434:	400ad400 	call	400ad40 <__pow5mult>
 4008438:	d9800917 	ldw	r6,36(sp)
 400843c:	100b883a 	mov	r5,r2
 4008440:	e009883a 	mov	r4,fp
 4008444:	1023883a 	mov	r17,r2
 4008448:	400aab40 	call	400aab4 <__multiply>
 400844c:	1021883a 	mov	r16,r2
 4008450:	d8800a17 	ldw	r2,40(sp)
 4008454:	d9400917 	ldw	r5,36(sp)
 4008458:	e009883a 	mov	r4,fp
 400845c:	1545c83a 	sub	r2,r2,r21
 4008460:	d8800a15 	stw	r2,40(sp)
 4008464:	400a6ec0 	call	400a6ec <_Bfree>
 4008468:	d8c00a17 	ldw	r3,40(sp)
 400846c:	18009f1e 	bne	r3,zero,40086ec <_dtoa_r+0xce4>
 4008470:	05c00044 	movi	r23,1
 4008474:	e009883a 	mov	r4,fp
 4008478:	b80b883a 	mov	r5,r23
 400847c:	400aa780 	call	400aa78 <__i2b>
 4008480:	d9000d17 	ldw	r4,52(sp)
 4008484:	102b883a 	mov	r21,r2
 4008488:	2000ce26 	beq	r4,zero,40087c4 <_dtoa_r+0xdbc>
 400848c:	200d883a 	mov	r6,r4
 4008490:	100b883a 	mov	r5,r2
 4008494:	e009883a 	mov	r4,fp
 4008498:	400ad400 	call	400ad40 <__pow5mult>
 400849c:	d9800317 	ldw	r6,12(sp)
 40084a0:	102b883a 	mov	r21,r2
 40084a4:	b981810e 	bge	r23,r6,4008aac <_dtoa_r+0x10a4>
 40084a8:	0027883a 	mov	r19,zero
 40084ac:	a8800417 	ldw	r2,16(r21)
 40084b0:	05c00804 	movi	r23,32
 40084b4:	10800104 	addi	r2,r2,4
 40084b8:	1085883a 	add	r2,r2,r2
 40084bc:	1085883a 	add	r2,r2,r2
 40084c0:	a885883a 	add	r2,r21,r2
 40084c4:	11000017 	ldw	r4,0(r2)
 40084c8:	400a9600 	call	400a960 <__hi0bits>
 40084cc:	b885c83a 	sub	r2,r23,r2
 40084d0:	1585883a 	add	r2,r2,r22
 40084d4:	108007cc 	andi	r2,r2,31
 40084d8:	1000b326 	beq	r2,zero,40087a8 <_dtoa_r+0xda0>
 40084dc:	00c00804 	movi	r3,32
 40084e0:	1887c83a 	sub	r3,r3,r2
 40084e4:	01000104 	movi	r4,4
 40084e8:	20c2cd0e 	bge	r4,r3,4009020 <_dtoa_r+0x1618>
 40084ec:	00c00704 	movi	r3,28
 40084f0:	1885c83a 	sub	r2,r3,r2
 40084f4:	d8c00817 	ldw	r3,32(sp)
 40084f8:	a0a9883a 	add	r20,r20,r2
 40084fc:	b0ad883a 	add	r22,r22,r2
 4008500:	1887883a 	add	r3,r3,r2
 4008504:	d8c00815 	stw	r3,32(sp)
 4008508:	d9800817 	ldw	r6,32(sp)
 400850c:	0180040e 	bge	zero,r6,4008520 <_dtoa_r+0xb18>
 4008510:	800b883a 	mov	r5,r16
 4008514:	e009883a 	mov	r4,fp
 4008518:	400ae800 	call	400ae80 <__lshift>
 400851c:	1021883a 	mov	r16,r2
 4008520:	0580050e 	bge	zero,r22,4008538 <_dtoa_r+0xb30>
 4008524:	a80b883a 	mov	r5,r21
 4008528:	b00d883a 	mov	r6,r22
 400852c:	e009883a 	mov	r4,fp
 4008530:	400ae800 	call	400ae80 <__lshift>
 4008534:	102b883a 	mov	r21,r2
 4008538:	d9c00e17 	ldw	r7,56(sp)
 400853c:	3801211e 	bne	r7,zero,40089c4 <_dtoa_r+0xfbc>
 4008540:	d9800617 	ldw	r6,24(sp)
 4008544:	0181380e 	bge	zero,r6,4008a28 <_dtoa_r+0x1020>
 4008548:	d8c00b17 	ldw	r3,44(sp)
 400854c:	1800ab1e 	bne	r3,zero,40087fc <_dtoa_r+0xdf4>
 4008550:	dc800717 	ldw	r18,28(sp)
 4008554:	dcc00617 	ldw	r19,24(sp)
 4008558:	9029883a 	mov	r20,r18
 400855c:	00000206 	br	4008568 <_dtoa_r+0xb60>
 4008560:	400a7140 	call	400a714 <__multadd>
 4008564:	1021883a 	mov	r16,r2
 4008568:	a80b883a 	mov	r5,r21
 400856c:	8009883a 	mov	r4,r16
 4008570:	40077e00 	call	40077e0 <quorem>
 4008574:	10800c04 	addi	r2,r2,48
 4008578:	90800005 	stb	r2,0(r18)
 400857c:	94800044 	addi	r18,r18,1
 4008580:	9507c83a 	sub	r3,r18,r20
 4008584:	000f883a 	mov	r7,zero
 4008588:	01800284 	movi	r6,10
 400858c:	800b883a 	mov	r5,r16
 4008590:	e009883a 	mov	r4,fp
 4008594:	1cfff216 	blt	r3,r19,4008560 <__alt_data_end+0xfc008560>
 4008598:	1011883a 	mov	r8,r2
 400859c:	d8800617 	ldw	r2,24(sp)
 40085a0:	0082370e 	bge	zero,r2,4008e80 <_dtoa_r+0x1478>
 40085a4:	d9000717 	ldw	r4,28(sp)
 40085a8:	0025883a 	mov	r18,zero
 40085ac:	20af883a 	add	r23,r4,r2
 40085b0:	01800044 	movi	r6,1
 40085b4:	800b883a 	mov	r5,r16
 40085b8:	e009883a 	mov	r4,fp
 40085bc:	da001715 	stw	r8,92(sp)
 40085c0:	400ae800 	call	400ae80 <__lshift>
 40085c4:	a80b883a 	mov	r5,r21
 40085c8:	1009883a 	mov	r4,r2
 40085cc:	d8800915 	stw	r2,36(sp)
 40085d0:	400afc80 	call	400afc8 <__mcmp>
 40085d4:	da001717 	ldw	r8,92(sp)
 40085d8:	0081800e 	bge	zero,r2,4008bdc <_dtoa_r+0x11d4>
 40085dc:	b93fffc3 	ldbu	r4,-1(r23)
 40085e0:	b8bfffc4 	addi	r2,r23,-1
 40085e4:	1007883a 	mov	r3,r2
 40085e8:	01800e44 	movi	r6,57
 40085ec:	d9c00717 	ldw	r7,28(sp)
 40085f0:	00000506 	br	4008608 <_dtoa_r+0xc00>
 40085f4:	18ffffc4 	addi	r3,r3,-1
 40085f8:	11c12326 	beq	r2,r7,4008a88 <_dtoa_r+0x1080>
 40085fc:	19000003 	ldbu	r4,0(r3)
 4008600:	102f883a 	mov	r23,r2
 4008604:	10bfffc4 	addi	r2,r2,-1
 4008608:	21403fcc 	andi	r5,r4,255
 400860c:	2940201c 	xori	r5,r5,128
 4008610:	297fe004 	addi	r5,r5,-128
 4008614:	29bff726 	beq	r5,r6,40085f4 <__alt_data_end+0xfc0085f4>
 4008618:	21000044 	addi	r4,r4,1
 400861c:	11000005 	stb	r4,0(r2)
 4008620:	a80b883a 	mov	r5,r21
 4008624:	e009883a 	mov	r4,fp
 4008628:	400a6ec0 	call	400a6ec <_Bfree>
 400862c:	883ea026 	beq	r17,zero,40080b0 <__alt_data_end+0xfc0080b0>
 4008630:	90000426 	beq	r18,zero,4008644 <_dtoa_r+0xc3c>
 4008634:	94400326 	beq	r18,r17,4008644 <_dtoa_r+0xc3c>
 4008638:	900b883a 	mov	r5,r18
 400863c:	e009883a 	mov	r4,fp
 4008640:	400a6ec0 	call	400a6ec <_Bfree>
 4008644:	880b883a 	mov	r5,r17
 4008648:	e009883a 	mov	r4,fp
 400864c:	400a6ec0 	call	400a6ec <_Bfree>
 4008650:	003e9706 	br	40080b0 <__alt_data_end+0xfc0080b0>
 4008654:	01800044 	movi	r6,1
 4008658:	d9800e15 	stw	r6,56(sp)
 400865c:	003d9606 	br	4007cb8 <__alt_data_end+0xfc007cb8>
 4008660:	d8800817 	ldw	r2,32(sp)
 4008664:	d8c00517 	ldw	r3,20(sp)
 4008668:	d8000d15 	stw	zero,52(sp)
 400866c:	10c5c83a 	sub	r2,r2,r3
 4008670:	00c9c83a 	sub	r4,zero,r3
 4008674:	d8800815 	stw	r2,32(sp)
 4008678:	d9000a15 	stw	r4,40(sp)
 400867c:	003d9706 	br	4007cdc <__alt_data_end+0xfc007cdc>
 4008680:	05adc83a 	sub	r22,zero,r22
 4008684:	dd800815 	stw	r22,32(sp)
 4008688:	002d883a 	mov	r22,zero
 400868c:	003d8e06 	br	4007cc8 <__alt_data_end+0xfc007cc8>
 4008690:	d9000517 	ldw	r4,20(sp)
 4008694:	40112380 	call	4011238 <__floatsidf>
 4008698:	100d883a 	mov	r6,r2
 400869c:	180f883a 	mov	r7,r3
 40086a0:	a009883a 	mov	r4,r20
 40086a4:	880b883a 	mov	r5,r17
 40086a8:	400fdf80 	call	400fdf8 <__eqdf2>
 40086ac:	103d7126 	beq	r2,zero,4007c74 <__alt_data_end+0xfc007c74>
 40086b0:	d9c00517 	ldw	r7,20(sp)
 40086b4:	39ffffc4 	addi	r7,r7,-1
 40086b8:	d9c00515 	stw	r7,20(sp)
 40086bc:	003d6d06 	br	4007c74 <__alt_data_end+0xfc007c74>
 40086c0:	dd400a17 	ldw	r21,40(sp)
 40086c4:	dd000817 	ldw	r20,32(sp)
 40086c8:	0023883a 	mov	r17,zero
 40086cc:	003f4806 	br	40083f0 <__alt_data_end+0xfc0083f0>
 40086d0:	10e3c83a 	sub	r17,r2,r3
 40086d4:	9448983a 	sll	r4,r18,r17
 40086d8:	003d3206 	br	4007ba4 <__alt_data_end+0xfc007ba4>
 40086dc:	d8000e15 	stw	zero,56(sp)
 40086e0:	003d7506 	br	4007cb8 <__alt_data_end+0xfc007cb8>
 40086e4:	b005883a 	mov	r2,r22
 40086e8:	003f4506 	br	4008400 <__alt_data_end+0xfc008400>
 40086ec:	dc000915 	stw	r16,36(sp)
 40086f0:	d9800a17 	ldw	r6,40(sp)
 40086f4:	d9400917 	ldw	r5,36(sp)
 40086f8:	e009883a 	mov	r4,fp
 40086fc:	400ad400 	call	400ad40 <__pow5mult>
 4008700:	1021883a 	mov	r16,r2
 4008704:	003f5a06 	br	4008470 <__alt_data_end+0xfc008470>
 4008708:	01c00044 	movi	r7,1
 400870c:	d9c00b15 	stw	r7,44(sp)
 4008710:	d8802217 	ldw	r2,136(sp)
 4008714:	0081280e 	bge	zero,r2,4008bb8 <_dtoa_r+0x11b0>
 4008718:	100d883a 	mov	r6,r2
 400871c:	1021883a 	mov	r16,r2
 4008720:	d8800c15 	stw	r2,48(sp)
 4008724:	d8800615 	stw	r2,24(sp)
 4008728:	003d8806 	br	4007d4c <__alt_data_end+0xfc007d4c>
 400872c:	d8800617 	ldw	r2,24(sp)
 4008730:	00be9b16 	blt	zero,r2,40081a0 <__alt_data_end+0xfc0081a0>
 4008734:	10010f1e 	bne	r2,zero,4008b74 <_dtoa_r+0x116c>
 4008738:	880b883a 	mov	r5,r17
 400873c:	000d883a 	mov	r6,zero
 4008740:	01d00534 	movhi	r7,16404
 4008744:	8009883a 	mov	r4,r16
 4008748:	40100500 	call	4010050 <__muldf3>
 400874c:	900d883a 	mov	r6,r18
 4008750:	980f883a 	mov	r7,r19
 4008754:	1009883a 	mov	r4,r2
 4008758:	180b883a 	mov	r5,r3
 400875c:	400fe800 	call	400fe80 <__gedf2>
 4008760:	002b883a 	mov	r21,zero
 4008764:	0023883a 	mov	r17,zero
 4008768:	1000bf16 	blt	r2,zero,4008a68 <_dtoa_r+0x1060>
 400876c:	d9802217 	ldw	r6,136(sp)
 4008770:	ddc00717 	ldw	r23,28(sp)
 4008774:	018c303a 	nor	r6,zero,r6
 4008778:	d9800515 	stw	r6,20(sp)
 400877c:	a80b883a 	mov	r5,r21
 4008780:	e009883a 	mov	r4,fp
 4008784:	400a6ec0 	call	400a6ec <_Bfree>
 4008788:	883e4926 	beq	r17,zero,40080b0 <__alt_data_end+0xfc0080b0>
 400878c:	003fad06 	br	4008644 <__alt_data_end+0xfc008644>
 4008790:	d9c01117 	ldw	r7,68(sp)
 4008794:	3801bc26 	beq	r7,zero,4008e88 <_dtoa_r+0x1480>
 4008798:	10810cc4 	addi	r2,r2,1075
 400879c:	dd400a17 	ldw	r21,40(sp)
 40087a0:	dd000817 	ldw	r20,32(sp)
 40087a4:	003f0a06 	br	40083d0 <__alt_data_end+0xfc0083d0>
 40087a8:	00800704 	movi	r2,28
 40087ac:	d9000817 	ldw	r4,32(sp)
 40087b0:	a0a9883a 	add	r20,r20,r2
 40087b4:	b0ad883a 	add	r22,r22,r2
 40087b8:	2089883a 	add	r4,r4,r2
 40087bc:	d9000815 	stw	r4,32(sp)
 40087c0:	003f5106 	br	4008508 <__alt_data_end+0xfc008508>
 40087c4:	d8c00317 	ldw	r3,12(sp)
 40087c8:	b8c1fc0e 	bge	r23,r3,4008fbc <_dtoa_r+0x15b4>
 40087cc:	0027883a 	mov	r19,zero
 40087d0:	b805883a 	mov	r2,r23
 40087d4:	003f3e06 	br	40084d0 <__alt_data_end+0xfc0084d0>
 40087d8:	880b883a 	mov	r5,r17
 40087dc:	e009883a 	mov	r4,fp
 40087e0:	000f883a 	mov	r7,zero
 40087e4:	01800284 	movi	r6,10
 40087e8:	400a7140 	call	400a714 <__multadd>
 40087ec:	d9000c17 	ldw	r4,48(sp)
 40087f0:	1023883a 	mov	r17,r2
 40087f4:	0102040e 	bge	zero,r4,4009008 <_dtoa_r+0x1600>
 40087f8:	d9000615 	stw	r4,24(sp)
 40087fc:	0500050e 	bge	zero,r20,4008814 <_dtoa_r+0xe0c>
 4008800:	880b883a 	mov	r5,r17
 4008804:	a00d883a 	mov	r6,r20
 4008808:	e009883a 	mov	r4,fp
 400880c:	400ae800 	call	400ae80 <__lshift>
 4008810:	1023883a 	mov	r17,r2
 4008814:	9801241e 	bne	r19,zero,4008ca8 <_dtoa_r+0x12a0>
 4008818:	8829883a 	mov	r20,r17
 400881c:	d9000617 	ldw	r4,24(sp)
 4008820:	dcc00717 	ldw	r19,28(sp)
 4008824:	9480004c 	andi	r18,r18,1
 4008828:	20bfffc4 	addi	r2,r4,-1
 400882c:	9885883a 	add	r2,r19,r2
 4008830:	d8800415 	stw	r2,16(sp)
 4008834:	dc800615 	stw	r18,24(sp)
 4008838:	a80b883a 	mov	r5,r21
 400883c:	8009883a 	mov	r4,r16
 4008840:	40077e00 	call	40077e0 <quorem>
 4008844:	880b883a 	mov	r5,r17
 4008848:	8009883a 	mov	r4,r16
 400884c:	102f883a 	mov	r23,r2
 4008850:	400afc80 	call	400afc8 <__mcmp>
 4008854:	a80b883a 	mov	r5,r21
 4008858:	a00d883a 	mov	r6,r20
 400885c:	e009883a 	mov	r4,fp
 4008860:	102d883a 	mov	r22,r2
 4008864:	400b0280 	call	400b028 <__mdiff>
 4008868:	1007883a 	mov	r3,r2
 400886c:	10800317 	ldw	r2,12(r2)
 4008870:	bc800c04 	addi	r18,r23,48
 4008874:	180b883a 	mov	r5,r3
 4008878:	10004e1e 	bne	r2,zero,40089b4 <_dtoa_r+0xfac>
 400887c:	8009883a 	mov	r4,r16
 4008880:	d8c01615 	stw	r3,88(sp)
 4008884:	400afc80 	call	400afc8 <__mcmp>
 4008888:	d8c01617 	ldw	r3,88(sp)
 400888c:	e009883a 	mov	r4,fp
 4008890:	d8801615 	stw	r2,88(sp)
 4008894:	180b883a 	mov	r5,r3
 4008898:	400a6ec0 	call	400a6ec <_Bfree>
 400889c:	d8801617 	ldw	r2,88(sp)
 40088a0:	1000041e 	bne	r2,zero,40088b4 <_dtoa_r+0xeac>
 40088a4:	d9800317 	ldw	r6,12(sp)
 40088a8:	3000021e 	bne	r6,zero,40088b4 <_dtoa_r+0xeac>
 40088ac:	d8c00617 	ldw	r3,24(sp)
 40088b0:	18003726 	beq	r3,zero,4008990 <_dtoa_r+0xf88>
 40088b4:	b0002016 	blt	r22,zero,4008938 <_dtoa_r+0xf30>
 40088b8:	b000041e 	bne	r22,zero,40088cc <_dtoa_r+0xec4>
 40088bc:	d9000317 	ldw	r4,12(sp)
 40088c0:	2000021e 	bne	r4,zero,40088cc <_dtoa_r+0xec4>
 40088c4:	d8c00617 	ldw	r3,24(sp)
 40088c8:	18001b26 	beq	r3,zero,4008938 <_dtoa_r+0xf30>
 40088cc:	00810716 	blt	zero,r2,4008cec <_dtoa_r+0x12e4>
 40088d0:	d8c00417 	ldw	r3,16(sp)
 40088d4:	9d800044 	addi	r22,r19,1
 40088d8:	9c800005 	stb	r18,0(r19)
 40088dc:	b02f883a 	mov	r23,r22
 40088e0:	98c10626 	beq	r19,r3,4008cfc <_dtoa_r+0x12f4>
 40088e4:	800b883a 	mov	r5,r16
 40088e8:	000f883a 	mov	r7,zero
 40088ec:	01800284 	movi	r6,10
 40088f0:	e009883a 	mov	r4,fp
 40088f4:	400a7140 	call	400a714 <__multadd>
 40088f8:	1021883a 	mov	r16,r2
 40088fc:	000f883a 	mov	r7,zero
 4008900:	01800284 	movi	r6,10
 4008904:	880b883a 	mov	r5,r17
 4008908:	e009883a 	mov	r4,fp
 400890c:	8d002526 	beq	r17,r20,40089a4 <_dtoa_r+0xf9c>
 4008910:	400a7140 	call	400a714 <__multadd>
 4008914:	a00b883a 	mov	r5,r20
 4008918:	000f883a 	mov	r7,zero
 400891c:	01800284 	movi	r6,10
 4008920:	e009883a 	mov	r4,fp
 4008924:	1023883a 	mov	r17,r2
 4008928:	400a7140 	call	400a714 <__multadd>
 400892c:	1029883a 	mov	r20,r2
 4008930:	b027883a 	mov	r19,r22
 4008934:	003fc006 	br	4008838 <__alt_data_end+0xfc008838>
 4008938:	9011883a 	mov	r8,r18
 400893c:	00800e0e 	bge	zero,r2,4008978 <_dtoa_r+0xf70>
 4008940:	800b883a 	mov	r5,r16
 4008944:	01800044 	movi	r6,1
 4008948:	e009883a 	mov	r4,fp
 400894c:	da001715 	stw	r8,92(sp)
 4008950:	400ae800 	call	400ae80 <__lshift>
 4008954:	a80b883a 	mov	r5,r21
 4008958:	1009883a 	mov	r4,r2
 400895c:	1021883a 	mov	r16,r2
 4008960:	400afc80 	call	400afc8 <__mcmp>
 4008964:	da001717 	ldw	r8,92(sp)
 4008968:	0081960e 	bge	zero,r2,4008fc4 <_dtoa_r+0x15bc>
 400896c:	00800e44 	movi	r2,57
 4008970:	40817026 	beq	r8,r2,4008f34 <_dtoa_r+0x152c>
 4008974:	ba000c44 	addi	r8,r23,49
 4008978:	8825883a 	mov	r18,r17
 400897c:	9dc00044 	addi	r23,r19,1
 4008980:	9a000005 	stb	r8,0(r19)
 4008984:	a023883a 	mov	r17,r20
 4008988:	dc000915 	stw	r16,36(sp)
 400898c:	003f2406 	br	4008620 <__alt_data_end+0xfc008620>
 4008990:	00800e44 	movi	r2,57
 4008994:	9011883a 	mov	r8,r18
 4008998:	90816626 	beq	r18,r2,4008f34 <_dtoa_r+0x152c>
 400899c:	05bff516 	blt	zero,r22,4008974 <__alt_data_end+0xfc008974>
 40089a0:	003ff506 	br	4008978 <__alt_data_end+0xfc008978>
 40089a4:	400a7140 	call	400a714 <__multadd>
 40089a8:	1023883a 	mov	r17,r2
 40089ac:	1029883a 	mov	r20,r2
 40089b0:	003fdf06 	br	4008930 <__alt_data_end+0xfc008930>
 40089b4:	e009883a 	mov	r4,fp
 40089b8:	400a6ec0 	call	400a6ec <_Bfree>
 40089bc:	00800044 	movi	r2,1
 40089c0:	003fbc06 	br	40088b4 <__alt_data_end+0xfc0088b4>
 40089c4:	a80b883a 	mov	r5,r21
 40089c8:	8009883a 	mov	r4,r16
 40089cc:	400afc80 	call	400afc8 <__mcmp>
 40089d0:	103edb0e 	bge	r2,zero,4008540 <__alt_data_end+0xfc008540>
 40089d4:	800b883a 	mov	r5,r16
 40089d8:	000f883a 	mov	r7,zero
 40089dc:	01800284 	movi	r6,10
 40089e0:	e009883a 	mov	r4,fp
 40089e4:	400a7140 	call	400a714 <__multadd>
 40089e8:	1021883a 	mov	r16,r2
 40089ec:	d8800517 	ldw	r2,20(sp)
 40089f0:	d8c00b17 	ldw	r3,44(sp)
 40089f4:	10bfffc4 	addi	r2,r2,-1
 40089f8:	d8800515 	stw	r2,20(sp)
 40089fc:	183f761e 	bne	r3,zero,40087d8 <__alt_data_end+0xfc0087d8>
 4008a00:	d9000c17 	ldw	r4,48(sp)
 4008a04:	0101730e 	bge	zero,r4,4008fd4 <_dtoa_r+0x15cc>
 4008a08:	d9000615 	stw	r4,24(sp)
 4008a0c:	003ed006 	br	4008550 <__alt_data_end+0xfc008550>
 4008a10:	00800084 	movi	r2,2
 4008a14:	3081861e 	bne	r6,r2,4009030 <_dtoa_r+0x1628>
 4008a18:	d8000b15 	stw	zero,44(sp)
 4008a1c:	003f3c06 	br	4008710 <__alt_data_end+0xfc008710>
 4008a20:	dc000917 	ldw	r16,36(sp)
 4008a24:	003e9206 	br	4008470 <__alt_data_end+0xfc008470>
 4008a28:	d9c00317 	ldw	r7,12(sp)
 4008a2c:	00800084 	movi	r2,2
 4008a30:	11fec50e 	bge	r2,r7,4008548 <__alt_data_end+0xfc008548>
 4008a34:	d9000617 	ldw	r4,24(sp)
 4008a38:	20013c1e 	bne	r4,zero,4008f2c <_dtoa_r+0x1524>
 4008a3c:	a80b883a 	mov	r5,r21
 4008a40:	000f883a 	mov	r7,zero
 4008a44:	01800144 	movi	r6,5
 4008a48:	e009883a 	mov	r4,fp
 4008a4c:	400a7140 	call	400a714 <__multadd>
 4008a50:	100b883a 	mov	r5,r2
 4008a54:	8009883a 	mov	r4,r16
 4008a58:	102b883a 	mov	r21,r2
 4008a5c:	400afc80 	call	400afc8 <__mcmp>
 4008a60:	dc000915 	stw	r16,36(sp)
 4008a64:	00bf410e 	bge	zero,r2,400876c <__alt_data_end+0xfc00876c>
 4008a68:	d9c00717 	ldw	r7,28(sp)
 4008a6c:	00800c44 	movi	r2,49
 4008a70:	38800005 	stb	r2,0(r7)
 4008a74:	d8800517 	ldw	r2,20(sp)
 4008a78:	3dc00044 	addi	r23,r7,1
 4008a7c:	10800044 	addi	r2,r2,1
 4008a80:	d8800515 	stw	r2,20(sp)
 4008a84:	003f3d06 	br	400877c <__alt_data_end+0xfc00877c>
 4008a88:	d9800517 	ldw	r6,20(sp)
 4008a8c:	d9c00717 	ldw	r7,28(sp)
 4008a90:	00800c44 	movi	r2,49
 4008a94:	31800044 	addi	r6,r6,1
 4008a98:	d9800515 	stw	r6,20(sp)
 4008a9c:	38800005 	stb	r2,0(r7)
 4008aa0:	003edf06 	br	4008620 <__alt_data_end+0xfc008620>
 4008aa4:	d8000b15 	stw	zero,44(sp)
 4008aa8:	003c9f06 	br	4007d28 <__alt_data_end+0xfc007d28>
 4008aac:	903e7e1e 	bne	r18,zero,40084a8 <__alt_data_end+0xfc0084a8>
 4008ab0:	00800434 	movhi	r2,16
 4008ab4:	10bfffc4 	addi	r2,r2,-1
 4008ab8:	9884703a 	and	r2,r19,r2
 4008abc:	1000ea1e 	bne	r2,zero,4008e68 <_dtoa_r+0x1460>
 4008ac0:	9cdffc2c 	andhi	r19,r19,32752
 4008ac4:	9800e826 	beq	r19,zero,4008e68 <_dtoa_r+0x1460>
 4008ac8:	d9c00817 	ldw	r7,32(sp)
 4008acc:	b5800044 	addi	r22,r22,1
 4008ad0:	04c00044 	movi	r19,1
 4008ad4:	39c00044 	addi	r7,r7,1
 4008ad8:	d9c00815 	stw	r7,32(sp)
 4008adc:	d8800d17 	ldw	r2,52(sp)
 4008ae0:	103e721e 	bne	r2,zero,40084ac <__alt_data_end+0xfc0084ac>
 4008ae4:	00800044 	movi	r2,1
 4008ae8:	003e7906 	br	40084d0 <__alt_data_end+0xfc0084d0>
 4008aec:	8009883a 	mov	r4,r16
 4008af0:	40112380 	call	4011238 <__floatsidf>
 4008af4:	d9800f17 	ldw	r6,60(sp)
 4008af8:	d9c01017 	ldw	r7,64(sp)
 4008afc:	1009883a 	mov	r4,r2
 4008b00:	180b883a 	mov	r5,r3
 4008b04:	40100500 	call	4010050 <__muldf3>
 4008b08:	000d883a 	mov	r6,zero
 4008b0c:	01d00734 	movhi	r7,16412
 4008b10:	1009883a 	mov	r4,r2
 4008b14:	180b883a 	mov	r5,r3
 4008b18:	400eb7c0 	call	400eb7c <__adddf3>
 4008b1c:	047f3034 	movhi	r17,64704
 4008b20:	1021883a 	mov	r16,r2
 4008b24:	1c63883a 	add	r17,r3,r17
 4008b28:	d9000f17 	ldw	r4,60(sp)
 4008b2c:	d9401017 	ldw	r5,64(sp)
 4008b30:	000d883a 	mov	r6,zero
 4008b34:	01d00534 	movhi	r7,16404
 4008b38:	40108bc0 	call	40108bc <__subdf3>
 4008b3c:	800d883a 	mov	r6,r16
 4008b40:	880f883a 	mov	r7,r17
 4008b44:	1009883a 	mov	r4,r2
 4008b48:	180b883a 	mov	r5,r3
 4008b4c:	102b883a 	mov	r21,r2
 4008b50:	1829883a 	mov	r20,r3
 4008b54:	400fe800 	call	400fe80 <__gedf2>
 4008b58:	00806c16 	blt	zero,r2,4008d0c <_dtoa_r+0x1304>
 4008b5c:	89e0003c 	xorhi	r7,r17,32768
 4008b60:	800d883a 	mov	r6,r16
 4008b64:	a809883a 	mov	r4,r21
 4008b68:	a00b883a 	mov	r5,r20
 4008b6c:	400ff5c0 	call	400ff5c <__ledf2>
 4008b70:	103d7e0e 	bge	r2,zero,400816c <__alt_data_end+0xfc00816c>
 4008b74:	002b883a 	mov	r21,zero
 4008b78:	0023883a 	mov	r17,zero
 4008b7c:	003efb06 	br	400876c <__alt_data_end+0xfc00876c>
 4008b80:	d8800717 	ldw	r2,28(sp)
 4008b84:	003bd006 	br	4007ac8 <__alt_data_end+0xfc007ac8>
 4008b88:	d9000a17 	ldw	r4,40(sp)
 4008b8c:	d9800d17 	ldw	r6,52(sp)
 4008b90:	dd400a15 	stw	r21,40(sp)
 4008b94:	a905c83a 	sub	r2,r21,r4
 4008b98:	308d883a 	add	r6,r6,r2
 4008b9c:	d9800d15 	stw	r6,52(sp)
 4008ba0:	002b883a 	mov	r21,zero
 4008ba4:	003e0606 	br	40083c0 <__alt_data_end+0xfc0083c0>
 4008ba8:	9023883a 	mov	r17,r18
 4008bac:	9829883a 	mov	r20,r19
 4008bb0:	04000084 	movi	r16,2
 4008bb4:	003c9206 	br	4007e00 <__alt_data_end+0xfc007e00>
 4008bb8:	04000044 	movi	r16,1
 4008bbc:	dc000c15 	stw	r16,48(sp)
 4008bc0:	dc000615 	stw	r16,24(sp)
 4008bc4:	dc002215 	stw	r16,136(sp)
 4008bc8:	e0001115 	stw	zero,68(fp)
 4008bcc:	000b883a 	mov	r5,zero
 4008bd0:	003c6906 	br	4007d78 <__alt_data_end+0xfc007d78>
 4008bd4:	3021883a 	mov	r16,r6
 4008bd8:	003ffb06 	br	4008bc8 <__alt_data_end+0xfc008bc8>
 4008bdc:	1000021e 	bne	r2,zero,4008be8 <_dtoa_r+0x11e0>
 4008be0:	4200004c 	andi	r8,r8,1
 4008be4:	403e7d1e 	bne	r8,zero,40085dc <__alt_data_end+0xfc0085dc>
 4008be8:	01000c04 	movi	r4,48
 4008bec:	00000106 	br	4008bf4 <_dtoa_r+0x11ec>
 4008bf0:	102f883a 	mov	r23,r2
 4008bf4:	b8bfffc4 	addi	r2,r23,-1
 4008bf8:	10c00007 	ldb	r3,0(r2)
 4008bfc:	193ffc26 	beq	r3,r4,4008bf0 <__alt_data_end+0xfc008bf0>
 4008c00:	003e8706 	br	4008620 <__alt_data_end+0xfc008620>
 4008c04:	d8800517 	ldw	r2,20(sp)
 4008c08:	00a3c83a 	sub	r17,zero,r2
 4008c0c:	8800a426 	beq	r17,zero,4008ea0 <_dtoa_r+0x1498>
 4008c10:	888003cc 	andi	r2,r17,15
 4008c14:	100490fa 	slli	r2,r2,3
 4008c18:	00c10074 	movhi	r3,1025
 4008c1c:	18d97504 	addi	r3,r3,26068
 4008c20:	1885883a 	add	r2,r3,r2
 4008c24:	11800017 	ldw	r6,0(r2)
 4008c28:	11c00117 	ldw	r7,4(r2)
 4008c2c:	9009883a 	mov	r4,r18
 4008c30:	980b883a 	mov	r5,r19
 4008c34:	8823d13a 	srai	r17,r17,4
 4008c38:	40100500 	call	4010050 <__muldf3>
 4008c3c:	d8800f15 	stw	r2,60(sp)
 4008c40:	d8c01015 	stw	r3,64(sp)
 4008c44:	8800e826 	beq	r17,zero,4008fe8 <_dtoa_r+0x15e0>
 4008c48:	05010074 	movhi	r20,1025
 4008c4c:	a5196b04 	addi	r20,r20,26028
 4008c50:	04000084 	movi	r16,2
 4008c54:	8980004c 	andi	r6,r17,1
 4008c58:	1009883a 	mov	r4,r2
 4008c5c:	8823d07a 	srai	r17,r17,1
 4008c60:	180b883a 	mov	r5,r3
 4008c64:	30000426 	beq	r6,zero,4008c78 <_dtoa_r+0x1270>
 4008c68:	a1800017 	ldw	r6,0(r20)
 4008c6c:	a1c00117 	ldw	r7,4(r20)
 4008c70:	84000044 	addi	r16,r16,1
 4008c74:	40100500 	call	4010050 <__muldf3>
 4008c78:	a5000204 	addi	r20,r20,8
 4008c7c:	883ff51e 	bne	r17,zero,4008c54 <__alt_data_end+0xfc008c54>
 4008c80:	d8800f15 	stw	r2,60(sp)
 4008c84:	d8c01015 	stw	r3,64(sp)
 4008c88:	003c7606 	br	4007e64 <__alt_data_end+0xfc007e64>
 4008c8c:	00c00c04 	movi	r3,48
 4008c90:	10c00005 	stb	r3,0(r2)
 4008c94:	d8c00517 	ldw	r3,20(sp)
 4008c98:	bd3fffc3 	ldbu	r20,-1(r23)
 4008c9c:	18c00044 	addi	r3,r3,1
 4008ca0:	d8c00515 	stw	r3,20(sp)
 4008ca4:	003db906 	br	400838c <__alt_data_end+0xfc00838c>
 4008ca8:	89400117 	ldw	r5,4(r17)
 4008cac:	e009883a 	mov	r4,fp
 4008cb0:	400a6440 	call	400a644 <_Balloc>
 4008cb4:	89800417 	ldw	r6,16(r17)
 4008cb8:	89400304 	addi	r5,r17,12
 4008cbc:	11000304 	addi	r4,r2,12
 4008cc0:	31800084 	addi	r6,r6,2
 4008cc4:	318d883a 	add	r6,r6,r6
 4008cc8:	318d883a 	add	r6,r6,r6
 4008ccc:	1027883a 	mov	r19,r2
 4008cd0:	4004e1c0 	call	4004e1c <memcpy>
 4008cd4:	01800044 	movi	r6,1
 4008cd8:	980b883a 	mov	r5,r19
 4008cdc:	e009883a 	mov	r4,fp
 4008ce0:	400ae800 	call	400ae80 <__lshift>
 4008ce4:	1029883a 	mov	r20,r2
 4008ce8:	003ecc06 	br	400881c <__alt_data_end+0xfc00881c>
 4008cec:	00800e44 	movi	r2,57
 4008cf0:	90809026 	beq	r18,r2,4008f34 <_dtoa_r+0x152c>
 4008cf4:	92000044 	addi	r8,r18,1
 4008cf8:	003f1f06 	br	4008978 <__alt_data_end+0xfc008978>
 4008cfc:	9011883a 	mov	r8,r18
 4008d00:	8825883a 	mov	r18,r17
 4008d04:	a023883a 	mov	r17,r20
 4008d08:	003e2906 	br	40085b0 <__alt_data_end+0xfc0085b0>
 4008d0c:	002b883a 	mov	r21,zero
 4008d10:	0023883a 	mov	r17,zero
 4008d14:	003f5406 	br	4008a68 <__alt_data_end+0xfc008a68>
 4008d18:	61bfffc4 	addi	r6,r12,-1
 4008d1c:	300490fa 	slli	r2,r6,3
 4008d20:	00c10074 	movhi	r3,1025
 4008d24:	18d97504 	addi	r3,r3,26068
 4008d28:	1885883a 	add	r2,r3,r2
 4008d2c:	11000017 	ldw	r4,0(r2)
 4008d30:	11400117 	ldw	r5,4(r2)
 4008d34:	d8800717 	ldw	r2,28(sp)
 4008d38:	880f883a 	mov	r7,r17
 4008d3c:	d9801215 	stw	r6,72(sp)
 4008d40:	800d883a 	mov	r6,r16
 4008d44:	db001615 	stw	r12,88(sp)
 4008d48:	15c00044 	addi	r23,r2,1
 4008d4c:	40100500 	call	4010050 <__muldf3>
 4008d50:	d9401017 	ldw	r5,64(sp)
 4008d54:	d9000f17 	ldw	r4,60(sp)
 4008d58:	d8c01515 	stw	r3,84(sp)
 4008d5c:	d8801415 	stw	r2,80(sp)
 4008d60:	40111b80 	call	40111b8 <__fixdfsi>
 4008d64:	1009883a 	mov	r4,r2
 4008d68:	1021883a 	mov	r16,r2
 4008d6c:	40112380 	call	4011238 <__floatsidf>
 4008d70:	d9000f17 	ldw	r4,60(sp)
 4008d74:	d9401017 	ldw	r5,64(sp)
 4008d78:	100d883a 	mov	r6,r2
 4008d7c:	180f883a 	mov	r7,r3
 4008d80:	40108bc0 	call	40108bc <__subdf3>
 4008d84:	1829883a 	mov	r20,r3
 4008d88:	d8c00717 	ldw	r3,28(sp)
 4008d8c:	84000c04 	addi	r16,r16,48
 4008d90:	1023883a 	mov	r17,r2
 4008d94:	1c000005 	stb	r16,0(r3)
 4008d98:	db001617 	ldw	r12,88(sp)
 4008d9c:	00800044 	movi	r2,1
 4008da0:	60802226 	beq	r12,r2,4008e2c <_dtoa_r+0x1424>
 4008da4:	d9c00717 	ldw	r7,28(sp)
 4008da8:	8805883a 	mov	r2,r17
 4008dac:	b82b883a 	mov	r21,r23
 4008db0:	3b19883a 	add	r12,r7,r12
 4008db4:	6023883a 	mov	r17,r12
 4008db8:	a007883a 	mov	r3,r20
 4008dbc:	dc800f15 	stw	r18,60(sp)
 4008dc0:	000d883a 	mov	r6,zero
 4008dc4:	01d00934 	movhi	r7,16420
 4008dc8:	1009883a 	mov	r4,r2
 4008dcc:	180b883a 	mov	r5,r3
 4008dd0:	40100500 	call	4010050 <__muldf3>
 4008dd4:	180b883a 	mov	r5,r3
 4008dd8:	1009883a 	mov	r4,r2
 4008ddc:	1829883a 	mov	r20,r3
 4008de0:	1025883a 	mov	r18,r2
 4008de4:	40111b80 	call	40111b8 <__fixdfsi>
 4008de8:	1009883a 	mov	r4,r2
 4008dec:	1021883a 	mov	r16,r2
 4008df0:	40112380 	call	4011238 <__floatsidf>
 4008df4:	100d883a 	mov	r6,r2
 4008df8:	180f883a 	mov	r7,r3
 4008dfc:	9009883a 	mov	r4,r18
 4008e00:	a00b883a 	mov	r5,r20
 4008e04:	84000c04 	addi	r16,r16,48
 4008e08:	40108bc0 	call	40108bc <__subdf3>
 4008e0c:	ad400044 	addi	r21,r21,1
 4008e10:	ac3fffc5 	stb	r16,-1(r21)
 4008e14:	ac7fea1e 	bne	r21,r17,4008dc0 <__alt_data_end+0xfc008dc0>
 4008e18:	1023883a 	mov	r17,r2
 4008e1c:	d8801217 	ldw	r2,72(sp)
 4008e20:	dc800f17 	ldw	r18,60(sp)
 4008e24:	1829883a 	mov	r20,r3
 4008e28:	b8af883a 	add	r23,r23,r2
 4008e2c:	d9001417 	ldw	r4,80(sp)
 4008e30:	d9401517 	ldw	r5,84(sp)
 4008e34:	000d883a 	mov	r6,zero
 4008e38:	01cff834 	movhi	r7,16352
 4008e3c:	400eb7c0 	call	400eb7c <__adddf3>
 4008e40:	880d883a 	mov	r6,r17
 4008e44:	a00f883a 	mov	r7,r20
 4008e48:	1009883a 	mov	r4,r2
 4008e4c:	180b883a 	mov	r5,r3
 4008e50:	400ff5c0 	call	400ff5c <__ledf2>
 4008e54:	10003e0e 	bge	r2,zero,4008f50 <_dtoa_r+0x1548>
 4008e58:	d9001317 	ldw	r4,76(sp)
 4008e5c:	bd3fffc3 	ldbu	r20,-1(r23)
 4008e60:	d9000515 	stw	r4,20(sp)
 4008e64:	003d3b06 	br	4008354 <__alt_data_end+0xfc008354>
 4008e68:	0027883a 	mov	r19,zero
 4008e6c:	003f1b06 	br	4008adc <__alt_data_end+0xfc008adc>
 4008e70:	d8800817 	ldw	r2,32(sp)
 4008e74:	11e9c83a 	sub	r20,r2,r7
 4008e78:	0005883a 	mov	r2,zero
 4008e7c:	003d5406 	br	40083d0 <__alt_data_end+0xfc0083d0>
 4008e80:	00800044 	movi	r2,1
 4008e84:	003dc706 	br	40085a4 <__alt_data_end+0xfc0085a4>
 4008e88:	d8c00217 	ldw	r3,8(sp)
 4008e8c:	00800d84 	movi	r2,54
 4008e90:	dd400a17 	ldw	r21,40(sp)
 4008e94:	10c5c83a 	sub	r2,r2,r3
 4008e98:	dd000817 	ldw	r20,32(sp)
 4008e9c:	003d4c06 	br	40083d0 <__alt_data_end+0xfc0083d0>
 4008ea0:	dc800f15 	stw	r18,60(sp)
 4008ea4:	dcc01015 	stw	r19,64(sp)
 4008ea8:	04000084 	movi	r16,2
 4008eac:	003bed06 	br	4007e64 <__alt_data_end+0xfc007e64>
 4008eb0:	d9000617 	ldw	r4,24(sp)
 4008eb4:	203f0d26 	beq	r4,zero,4008aec <__alt_data_end+0xfc008aec>
 4008eb8:	d9800c17 	ldw	r6,48(sp)
 4008ebc:	01bcab0e 	bge	zero,r6,400816c <__alt_data_end+0xfc00816c>
 4008ec0:	d9401017 	ldw	r5,64(sp)
 4008ec4:	d9000f17 	ldw	r4,60(sp)
 4008ec8:	000d883a 	mov	r6,zero
 4008ecc:	01d00934 	movhi	r7,16420
 4008ed0:	40100500 	call	4010050 <__muldf3>
 4008ed4:	81000044 	addi	r4,r16,1
 4008ed8:	d8800f15 	stw	r2,60(sp)
 4008edc:	d8c01015 	stw	r3,64(sp)
 4008ee0:	40112380 	call	4011238 <__floatsidf>
 4008ee4:	d9800f17 	ldw	r6,60(sp)
 4008ee8:	d9c01017 	ldw	r7,64(sp)
 4008eec:	1009883a 	mov	r4,r2
 4008ef0:	180b883a 	mov	r5,r3
 4008ef4:	40100500 	call	4010050 <__muldf3>
 4008ef8:	01d00734 	movhi	r7,16412
 4008efc:	000d883a 	mov	r6,zero
 4008f00:	1009883a 	mov	r4,r2
 4008f04:	180b883a 	mov	r5,r3
 4008f08:	400eb7c0 	call	400eb7c <__adddf3>
 4008f0c:	d9c00517 	ldw	r7,20(sp)
 4008f10:	047f3034 	movhi	r17,64704
 4008f14:	1021883a 	mov	r16,r2
 4008f18:	39ffffc4 	addi	r7,r7,-1
 4008f1c:	d9c01315 	stw	r7,76(sp)
 4008f20:	1c63883a 	add	r17,r3,r17
 4008f24:	db000c17 	ldw	r12,48(sp)
 4008f28:	003bea06 	br	4007ed4 <__alt_data_end+0xfc007ed4>
 4008f2c:	dc000915 	stw	r16,36(sp)
 4008f30:	003e0e06 	br	400876c <__alt_data_end+0xfc00876c>
 4008f34:	01000e44 	movi	r4,57
 4008f38:	8825883a 	mov	r18,r17
 4008f3c:	9dc00044 	addi	r23,r19,1
 4008f40:	99000005 	stb	r4,0(r19)
 4008f44:	a023883a 	mov	r17,r20
 4008f48:	dc000915 	stw	r16,36(sp)
 4008f4c:	003da406 	br	40085e0 <__alt_data_end+0xfc0085e0>
 4008f50:	d9801417 	ldw	r6,80(sp)
 4008f54:	d9c01517 	ldw	r7,84(sp)
 4008f58:	0009883a 	mov	r4,zero
 4008f5c:	014ff834 	movhi	r5,16352
 4008f60:	40108bc0 	call	40108bc <__subdf3>
 4008f64:	880d883a 	mov	r6,r17
 4008f68:	a00f883a 	mov	r7,r20
 4008f6c:	1009883a 	mov	r4,r2
 4008f70:	180b883a 	mov	r5,r3
 4008f74:	400fe800 	call	400fe80 <__gedf2>
 4008f78:	00bc7c0e 	bge	zero,r2,400816c <__alt_data_end+0xfc00816c>
 4008f7c:	01000c04 	movi	r4,48
 4008f80:	00000106 	br	4008f88 <_dtoa_r+0x1580>
 4008f84:	102f883a 	mov	r23,r2
 4008f88:	b8bfffc4 	addi	r2,r23,-1
 4008f8c:	10c00007 	ldb	r3,0(r2)
 4008f90:	193ffc26 	beq	r3,r4,4008f84 <__alt_data_end+0xfc008f84>
 4008f94:	d9801317 	ldw	r6,76(sp)
 4008f98:	d9800515 	stw	r6,20(sp)
 4008f9c:	003c4406 	br	40080b0 <__alt_data_end+0xfc0080b0>
 4008fa0:	d9801317 	ldw	r6,76(sp)
 4008fa4:	d9800515 	stw	r6,20(sp)
 4008fa8:	003cea06 	br	4008354 <__alt_data_end+0xfc008354>
 4008fac:	dd800f17 	ldw	r22,60(sp)
 4008fb0:	dcc01017 	ldw	r19,64(sp)
 4008fb4:	dc801217 	ldw	r18,72(sp)
 4008fb8:	003c6c06 	br	400816c <__alt_data_end+0xfc00816c>
 4008fbc:	903e031e 	bne	r18,zero,40087cc <__alt_data_end+0xfc0087cc>
 4008fc0:	003ebb06 	br	4008ab0 <__alt_data_end+0xfc008ab0>
 4008fc4:	103e6c1e 	bne	r2,zero,4008978 <__alt_data_end+0xfc008978>
 4008fc8:	4080004c 	andi	r2,r8,1
 4008fcc:	103e6a26 	beq	r2,zero,4008978 <__alt_data_end+0xfc008978>
 4008fd0:	003e6606 	br	400896c <__alt_data_end+0xfc00896c>
 4008fd4:	d8c00317 	ldw	r3,12(sp)
 4008fd8:	00800084 	movi	r2,2
 4008fdc:	10c02916 	blt	r2,r3,4009084 <_dtoa_r+0x167c>
 4008fe0:	d9000c17 	ldw	r4,48(sp)
 4008fe4:	003e8806 	br	4008a08 <__alt_data_end+0xfc008a08>
 4008fe8:	04000084 	movi	r16,2
 4008fec:	003b9d06 	br	4007e64 <__alt_data_end+0xfc007e64>
 4008ff0:	d9001317 	ldw	r4,76(sp)
 4008ff4:	d9000515 	stw	r4,20(sp)
 4008ff8:	003cd606 	br	4008354 <__alt_data_end+0xfc008354>
 4008ffc:	d8801317 	ldw	r2,76(sp)
 4009000:	d8800515 	stw	r2,20(sp)
 4009004:	003c2a06 	br	40080b0 <__alt_data_end+0xfc0080b0>
 4009008:	d9800317 	ldw	r6,12(sp)
 400900c:	00800084 	movi	r2,2
 4009010:	11801516 	blt	r2,r6,4009068 <_dtoa_r+0x1660>
 4009014:	d9c00c17 	ldw	r7,48(sp)
 4009018:	d9c00615 	stw	r7,24(sp)
 400901c:	003df706 	br	40087fc <__alt_data_end+0xfc0087fc>
 4009020:	193d3926 	beq	r3,r4,4008508 <__alt_data_end+0xfc008508>
 4009024:	00c00f04 	movi	r3,60
 4009028:	1885c83a 	sub	r2,r3,r2
 400902c:	003ddf06 	br	40087ac <__alt_data_end+0xfc0087ac>
 4009030:	e009883a 	mov	r4,fp
 4009034:	e0001115 	stw	zero,68(fp)
 4009038:	000b883a 	mov	r5,zero
 400903c:	400a6440 	call	400a644 <_Balloc>
 4009040:	d8800715 	stw	r2,28(sp)
 4009044:	d8c00717 	ldw	r3,28(sp)
 4009048:	00bfffc4 	movi	r2,-1
 400904c:	01000044 	movi	r4,1
 4009050:	d8800c15 	stw	r2,48(sp)
 4009054:	e0c01015 	stw	r3,64(fp)
 4009058:	d9000b15 	stw	r4,44(sp)
 400905c:	d8800615 	stw	r2,24(sp)
 4009060:	d8002215 	stw	zero,136(sp)
 4009064:	003c4106 	br	400816c <__alt_data_end+0xfc00816c>
 4009068:	d8c00c17 	ldw	r3,48(sp)
 400906c:	d8c00615 	stw	r3,24(sp)
 4009070:	003e7006 	br	4008a34 <__alt_data_end+0xfc008a34>
 4009074:	04400044 	movi	r17,1
 4009078:	003b2006 	br	4007cfc <__alt_data_end+0xfc007cfc>
 400907c:	000b883a 	mov	r5,zero
 4009080:	003b3d06 	br	4007d78 <__alt_data_end+0xfc007d78>
 4009084:	d8800c17 	ldw	r2,48(sp)
 4009088:	d8800615 	stw	r2,24(sp)
 400908c:	003e6906 	br	4008a34 <__alt_data_end+0xfc008a34>

04009090 <__sflush_r>:
 4009090:	2880030b 	ldhu	r2,12(r5)
 4009094:	defffb04 	addi	sp,sp,-20
 4009098:	dcc00315 	stw	r19,12(sp)
 400909c:	dc400115 	stw	r17,4(sp)
 40090a0:	dfc00415 	stw	ra,16(sp)
 40090a4:	dc800215 	stw	r18,8(sp)
 40090a8:	dc000015 	stw	r16,0(sp)
 40090ac:	10c0020c 	andi	r3,r2,8
 40090b0:	2823883a 	mov	r17,r5
 40090b4:	2027883a 	mov	r19,r4
 40090b8:	1800311e 	bne	r3,zero,4009180 <__sflush_r+0xf0>
 40090bc:	28c00117 	ldw	r3,4(r5)
 40090c0:	10820014 	ori	r2,r2,2048
 40090c4:	2880030d 	sth	r2,12(r5)
 40090c8:	00c04b0e 	bge	zero,r3,40091f8 <__sflush_r+0x168>
 40090cc:	8a000a17 	ldw	r8,40(r17)
 40090d0:	40002326 	beq	r8,zero,4009160 <__sflush_r+0xd0>
 40090d4:	9c000017 	ldw	r16,0(r19)
 40090d8:	10c4000c 	andi	r3,r2,4096
 40090dc:	98000015 	stw	zero,0(r19)
 40090e0:	18004826 	beq	r3,zero,4009204 <__sflush_r+0x174>
 40090e4:	89801417 	ldw	r6,80(r17)
 40090e8:	10c0010c 	andi	r3,r2,4
 40090ec:	18000626 	beq	r3,zero,4009108 <__sflush_r+0x78>
 40090f0:	88c00117 	ldw	r3,4(r17)
 40090f4:	88800c17 	ldw	r2,48(r17)
 40090f8:	30cdc83a 	sub	r6,r6,r3
 40090fc:	10000226 	beq	r2,zero,4009108 <__sflush_r+0x78>
 4009100:	88800f17 	ldw	r2,60(r17)
 4009104:	308dc83a 	sub	r6,r6,r2
 4009108:	89400717 	ldw	r5,28(r17)
 400910c:	000f883a 	mov	r7,zero
 4009110:	9809883a 	mov	r4,r19
 4009114:	403ee83a 	callr	r8
 4009118:	00ffffc4 	movi	r3,-1
 400911c:	10c04426 	beq	r2,r3,4009230 <__sflush_r+0x1a0>
 4009120:	88c0030b 	ldhu	r3,12(r17)
 4009124:	89000417 	ldw	r4,16(r17)
 4009128:	88000115 	stw	zero,4(r17)
 400912c:	197dffcc 	andi	r5,r3,63487
 4009130:	8940030d 	sth	r5,12(r17)
 4009134:	89000015 	stw	r4,0(r17)
 4009138:	18c4000c 	andi	r3,r3,4096
 400913c:	18002c1e 	bne	r3,zero,40091f0 <__sflush_r+0x160>
 4009140:	89400c17 	ldw	r5,48(r17)
 4009144:	9c000015 	stw	r16,0(r19)
 4009148:	28000526 	beq	r5,zero,4009160 <__sflush_r+0xd0>
 400914c:	88801004 	addi	r2,r17,64
 4009150:	28800226 	beq	r5,r2,400915c <__sflush_r+0xcc>
 4009154:	9809883a 	mov	r4,r19
 4009158:	400980c0 	call	400980c <_free_r>
 400915c:	88000c15 	stw	zero,48(r17)
 4009160:	0005883a 	mov	r2,zero
 4009164:	dfc00417 	ldw	ra,16(sp)
 4009168:	dcc00317 	ldw	r19,12(sp)
 400916c:	dc800217 	ldw	r18,8(sp)
 4009170:	dc400117 	ldw	r17,4(sp)
 4009174:	dc000017 	ldw	r16,0(sp)
 4009178:	dec00504 	addi	sp,sp,20
 400917c:	f800283a 	ret
 4009180:	2c800417 	ldw	r18,16(r5)
 4009184:	903ff626 	beq	r18,zero,4009160 <__alt_data_end+0xfc009160>
 4009188:	2c000017 	ldw	r16,0(r5)
 400918c:	108000cc 	andi	r2,r2,3
 4009190:	2c800015 	stw	r18,0(r5)
 4009194:	84a1c83a 	sub	r16,r16,r18
 4009198:	1000131e 	bne	r2,zero,40091e8 <__sflush_r+0x158>
 400919c:	28800517 	ldw	r2,20(r5)
 40091a0:	88800215 	stw	r2,8(r17)
 40091a4:	04000316 	blt	zero,r16,40091b4 <__sflush_r+0x124>
 40091a8:	003fed06 	br	4009160 <__alt_data_end+0xfc009160>
 40091ac:	90a5883a 	add	r18,r18,r2
 40091b0:	043feb0e 	bge	zero,r16,4009160 <__alt_data_end+0xfc009160>
 40091b4:	88800917 	ldw	r2,36(r17)
 40091b8:	89400717 	ldw	r5,28(r17)
 40091bc:	800f883a 	mov	r7,r16
 40091c0:	900d883a 	mov	r6,r18
 40091c4:	9809883a 	mov	r4,r19
 40091c8:	103ee83a 	callr	r2
 40091cc:	80a1c83a 	sub	r16,r16,r2
 40091d0:	00bff616 	blt	zero,r2,40091ac <__alt_data_end+0xfc0091ac>
 40091d4:	88c0030b 	ldhu	r3,12(r17)
 40091d8:	00bfffc4 	movi	r2,-1
 40091dc:	18c01014 	ori	r3,r3,64
 40091e0:	88c0030d 	sth	r3,12(r17)
 40091e4:	003fdf06 	br	4009164 <__alt_data_end+0xfc009164>
 40091e8:	0005883a 	mov	r2,zero
 40091ec:	003fec06 	br	40091a0 <__alt_data_end+0xfc0091a0>
 40091f0:	88801415 	stw	r2,80(r17)
 40091f4:	003fd206 	br	4009140 <__alt_data_end+0xfc009140>
 40091f8:	28c00f17 	ldw	r3,60(r5)
 40091fc:	00ffb316 	blt	zero,r3,40090cc <__alt_data_end+0xfc0090cc>
 4009200:	003fd706 	br	4009160 <__alt_data_end+0xfc009160>
 4009204:	89400717 	ldw	r5,28(r17)
 4009208:	000d883a 	mov	r6,zero
 400920c:	01c00044 	movi	r7,1
 4009210:	9809883a 	mov	r4,r19
 4009214:	403ee83a 	callr	r8
 4009218:	100d883a 	mov	r6,r2
 400921c:	00bfffc4 	movi	r2,-1
 4009220:	30801426 	beq	r6,r2,4009274 <__sflush_r+0x1e4>
 4009224:	8880030b 	ldhu	r2,12(r17)
 4009228:	8a000a17 	ldw	r8,40(r17)
 400922c:	003fae06 	br	40090e8 <__alt_data_end+0xfc0090e8>
 4009230:	98c00017 	ldw	r3,0(r19)
 4009234:	183fba26 	beq	r3,zero,4009120 <__alt_data_end+0xfc009120>
 4009238:	01000744 	movi	r4,29
 400923c:	19000626 	beq	r3,r4,4009258 <__sflush_r+0x1c8>
 4009240:	01000584 	movi	r4,22
 4009244:	19000426 	beq	r3,r4,4009258 <__sflush_r+0x1c8>
 4009248:	88c0030b 	ldhu	r3,12(r17)
 400924c:	18c01014 	ori	r3,r3,64
 4009250:	88c0030d 	sth	r3,12(r17)
 4009254:	003fc306 	br	4009164 <__alt_data_end+0xfc009164>
 4009258:	8880030b 	ldhu	r2,12(r17)
 400925c:	88c00417 	ldw	r3,16(r17)
 4009260:	88000115 	stw	zero,4(r17)
 4009264:	10bdffcc 	andi	r2,r2,63487
 4009268:	8880030d 	sth	r2,12(r17)
 400926c:	88c00015 	stw	r3,0(r17)
 4009270:	003fb306 	br	4009140 <__alt_data_end+0xfc009140>
 4009274:	98800017 	ldw	r2,0(r19)
 4009278:	103fea26 	beq	r2,zero,4009224 <__alt_data_end+0xfc009224>
 400927c:	00c00744 	movi	r3,29
 4009280:	10c00226 	beq	r2,r3,400928c <__sflush_r+0x1fc>
 4009284:	00c00584 	movi	r3,22
 4009288:	10c0031e 	bne	r2,r3,4009298 <__sflush_r+0x208>
 400928c:	9c000015 	stw	r16,0(r19)
 4009290:	0005883a 	mov	r2,zero
 4009294:	003fb306 	br	4009164 <__alt_data_end+0xfc009164>
 4009298:	88c0030b 	ldhu	r3,12(r17)
 400929c:	3005883a 	mov	r2,r6
 40092a0:	18c01014 	ori	r3,r3,64
 40092a4:	88c0030d 	sth	r3,12(r17)
 40092a8:	003fae06 	br	4009164 <__alt_data_end+0xfc009164>

040092ac <_fflush_r>:
 40092ac:	defffd04 	addi	sp,sp,-12
 40092b0:	dc000115 	stw	r16,4(sp)
 40092b4:	dfc00215 	stw	ra,8(sp)
 40092b8:	2021883a 	mov	r16,r4
 40092bc:	20000226 	beq	r4,zero,40092c8 <_fflush_r+0x1c>
 40092c0:	20800e17 	ldw	r2,56(r4)
 40092c4:	10000c26 	beq	r2,zero,40092f8 <_fflush_r+0x4c>
 40092c8:	2880030f 	ldh	r2,12(r5)
 40092cc:	1000051e 	bne	r2,zero,40092e4 <_fflush_r+0x38>
 40092d0:	0005883a 	mov	r2,zero
 40092d4:	dfc00217 	ldw	ra,8(sp)
 40092d8:	dc000117 	ldw	r16,4(sp)
 40092dc:	dec00304 	addi	sp,sp,12
 40092e0:	f800283a 	ret
 40092e4:	8009883a 	mov	r4,r16
 40092e8:	dfc00217 	ldw	ra,8(sp)
 40092ec:	dc000117 	ldw	r16,4(sp)
 40092f0:	dec00304 	addi	sp,sp,12
 40092f4:	40090901 	jmpi	4009090 <__sflush_r>
 40092f8:	d9400015 	stw	r5,0(sp)
 40092fc:	40096980 	call	4009698 <__sinit>
 4009300:	d9400017 	ldw	r5,0(sp)
 4009304:	003ff006 	br	40092c8 <__alt_data_end+0xfc0092c8>

04009308 <fflush>:
 4009308:	20000526 	beq	r4,zero,4009320 <fflush+0x18>
 400930c:	008100b4 	movhi	r2,1026
 4009310:	10a16104 	addi	r2,r2,-31356
 4009314:	200b883a 	mov	r5,r4
 4009318:	11000017 	ldw	r4,0(r2)
 400931c:	40092ac1 	jmpi	40092ac <_fflush_r>
 4009320:	008100b4 	movhi	r2,1026
 4009324:	10a16004 	addi	r2,r2,-31360
 4009328:	11000017 	ldw	r4,0(r2)
 400932c:	01410074 	movhi	r5,1025
 4009330:	2964ab04 	addi	r5,r5,-27988
 4009334:	400a0a81 	jmpi	400a0a8 <_fwalk_reent>

04009338 <__fp_unlock>:
 4009338:	0005883a 	mov	r2,zero
 400933c:	f800283a 	ret

04009340 <_cleanup_r>:
 4009340:	01410074 	movhi	r5,1025
 4009344:	29765604 	addi	r5,r5,-9896
 4009348:	400a0a81 	jmpi	400a0a8 <_fwalk_reent>

0400934c <__sinit.part.1>:
 400934c:	defff704 	addi	sp,sp,-36
 4009350:	00c10074 	movhi	r3,1025
 4009354:	dfc00815 	stw	ra,32(sp)
 4009358:	ddc00715 	stw	r23,28(sp)
 400935c:	dd800615 	stw	r22,24(sp)
 4009360:	dd400515 	stw	r21,20(sp)
 4009364:	dd000415 	stw	r20,16(sp)
 4009368:	dcc00315 	stw	r19,12(sp)
 400936c:	dc800215 	stw	r18,8(sp)
 4009370:	dc400115 	stw	r17,4(sp)
 4009374:	dc000015 	stw	r16,0(sp)
 4009378:	18e4d004 	addi	r3,r3,-27840
 400937c:	24000117 	ldw	r16,4(r4)
 4009380:	20c00f15 	stw	r3,60(r4)
 4009384:	2080bb04 	addi	r2,r4,748
 4009388:	00c000c4 	movi	r3,3
 400938c:	20c0b915 	stw	r3,740(r4)
 4009390:	2080ba15 	stw	r2,744(r4)
 4009394:	2000b815 	stw	zero,736(r4)
 4009398:	05c00204 	movi	r23,8
 400939c:	00800104 	movi	r2,4
 40093a0:	2025883a 	mov	r18,r4
 40093a4:	b80d883a 	mov	r6,r23
 40093a8:	81001704 	addi	r4,r16,92
 40093ac:	000b883a 	mov	r5,zero
 40093b0:	80000015 	stw	zero,0(r16)
 40093b4:	80000115 	stw	zero,4(r16)
 40093b8:	80000215 	stw	zero,8(r16)
 40093bc:	8080030d 	sth	r2,12(r16)
 40093c0:	80001915 	stw	zero,100(r16)
 40093c4:	8000038d 	sth	zero,14(r16)
 40093c8:	80000415 	stw	zero,16(r16)
 40093cc:	80000515 	stw	zero,20(r16)
 40093d0:	80000615 	stw	zero,24(r16)
 40093d4:	4004f640 	call	4004f64 <memset>
 40093d8:	05810074 	movhi	r22,1025
 40093dc:	94400217 	ldw	r17,8(r18)
 40093e0:	05410074 	movhi	r21,1025
 40093e4:	05010074 	movhi	r20,1025
 40093e8:	04c10074 	movhi	r19,1025
 40093ec:	b5af8f04 	addi	r22,r22,-16836
 40093f0:	ad6fa604 	addi	r21,r21,-16744
 40093f4:	a52fc504 	addi	r20,r20,-16620
 40093f8:	9cefdc04 	addi	r19,r19,-16528
 40093fc:	85800815 	stw	r22,32(r16)
 4009400:	85400915 	stw	r21,36(r16)
 4009404:	85000a15 	stw	r20,40(r16)
 4009408:	84c00b15 	stw	r19,44(r16)
 400940c:	84000715 	stw	r16,28(r16)
 4009410:	00800284 	movi	r2,10
 4009414:	8880030d 	sth	r2,12(r17)
 4009418:	00800044 	movi	r2,1
 400941c:	b80d883a 	mov	r6,r23
 4009420:	89001704 	addi	r4,r17,92
 4009424:	000b883a 	mov	r5,zero
 4009428:	88000015 	stw	zero,0(r17)
 400942c:	88000115 	stw	zero,4(r17)
 4009430:	88000215 	stw	zero,8(r17)
 4009434:	88001915 	stw	zero,100(r17)
 4009438:	8880038d 	sth	r2,14(r17)
 400943c:	88000415 	stw	zero,16(r17)
 4009440:	88000515 	stw	zero,20(r17)
 4009444:	88000615 	stw	zero,24(r17)
 4009448:	4004f640 	call	4004f64 <memset>
 400944c:	94000317 	ldw	r16,12(r18)
 4009450:	00800484 	movi	r2,18
 4009454:	8c400715 	stw	r17,28(r17)
 4009458:	8d800815 	stw	r22,32(r17)
 400945c:	8d400915 	stw	r21,36(r17)
 4009460:	8d000a15 	stw	r20,40(r17)
 4009464:	8cc00b15 	stw	r19,44(r17)
 4009468:	8080030d 	sth	r2,12(r16)
 400946c:	00800084 	movi	r2,2
 4009470:	80000015 	stw	zero,0(r16)
 4009474:	80000115 	stw	zero,4(r16)
 4009478:	80000215 	stw	zero,8(r16)
 400947c:	80001915 	stw	zero,100(r16)
 4009480:	8080038d 	sth	r2,14(r16)
 4009484:	80000415 	stw	zero,16(r16)
 4009488:	80000515 	stw	zero,20(r16)
 400948c:	80000615 	stw	zero,24(r16)
 4009490:	b80d883a 	mov	r6,r23
 4009494:	000b883a 	mov	r5,zero
 4009498:	81001704 	addi	r4,r16,92
 400949c:	4004f640 	call	4004f64 <memset>
 40094a0:	00800044 	movi	r2,1
 40094a4:	84000715 	stw	r16,28(r16)
 40094a8:	85800815 	stw	r22,32(r16)
 40094ac:	85400915 	stw	r21,36(r16)
 40094b0:	85000a15 	stw	r20,40(r16)
 40094b4:	84c00b15 	stw	r19,44(r16)
 40094b8:	90800e15 	stw	r2,56(r18)
 40094bc:	dfc00817 	ldw	ra,32(sp)
 40094c0:	ddc00717 	ldw	r23,28(sp)
 40094c4:	dd800617 	ldw	r22,24(sp)
 40094c8:	dd400517 	ldw	r21,20(sp)
 40094cc:	dd000417 	ldw	r20,16(sp)
 40094d0:	dcc00317 	ldw	r19,12(sp)
 40094d4:	dc800217 	ldw	r18,8(sp)
 40094d8:	dc400117 	ldw	r17,4(sp)
 40094dc:	dc000017 	ldw	r16,0(sp)
 40094e0:	dec00904 	addi	sp,sp,36
 40094e4:	f800283a 	ret

040094e8 <__fp_lock>:
 40094e8:	0005883a 	mov	r2,zero
 40094ec:	f800283a 	ret

040094f0 <__sfmoreglue>:
 40094f0:	defffc04 	addi	sp,sp,-16
 40094f4:	dc800215 	stw	r18,8(sp)
 40094f8:	2825883a 	mov	r18,r5
 40094fc:	dc000015 	stw	r16,0(sp)
 4009500:	01401a04 	movi	r5,104
 4009504:	2021883a 	mov	r16,r4
 4009508:	913fffc4 	addi	r4,r18,-1
 400950c:	dfc00315 	stw	ra,12(sp)
 4009510:	dc400115 	stw	r17,4(sp)
 4009514:	40044f40 	call	40044f4 <__mulsi3>
 4009518:	8009883a 	mov	r4,r16
 400951c:	11401d04 	addi	r5,r2,116
 4009520:	1023883a 	mov	r17,r2
 4009524:	40046100 	call	4004610 <_malloc_r>
 4009528:	1021883a 	mov	r16,r2
 400952c:	10000726 	beq	r2,zero,400954c <__sfmoreglue+0x5c>
 4009530:	11000304 	addi	r4,r2,12
 4009534:	10000015 	stw	zero,0(r2)
 4009538:	14800115 	stw	r18,4(r2)
 400953c:	11000215 	stw	r4,8(r2)
 4009540:	89801a04 	addi	r6,r17,104
 4009544:	000b883a 	mov	r5,zero
 4009548:	4004f640 	call	4004f64 <memset>
 400954c:	8005883a 	mov	r2,r16
 4009550:	dfc00317 	ldw	ra,12(sp)
 4009554:	dc800217 	ldw	r18,8(sp)
 4009558:	dc400117 	ldw	r17,4(sp)
 400955c:	dc000017 	ldw	r16,0(sp)
 4009560:	dec00404 	addi	sp,sp,16
 4009564:	f800283a 	ret

04009568 <__sfp>:
 4009568:	defffb04 	addi	sp,sp,-20
 400956c:	dc000015 	stw	r16,0(sp)
 4009570:	040100b4 	movhi	r16,1026
 4009574:	84216004 	addi	r16,r16,-31360
 4009578:	dcc00315 	stw	r19,12(sp)
 400957c:	2027883a 	mov	r19,r4
 4009580:	81000017 	ldw	r4,0(r16)
 4009584:	dfc00415 	stw	ra,16(sp)
 4009588:	dc800215 	stw	r18,8(sp)
 400958c:	20800e17 	ldw	r2,56(r4)
 4009590:	dc400115 	stw	r17,4(sp)
 4009594:	1000021e 	bne	r2,zero,40095a0 <__sfp+0x38>
 4009598:	400934c0 	call	400934c <__sinit.part.1>
 400959c:	81000017 	ldw	r4,0(r16)
 40095a0:	2480b804 	addi	r18,r4,736
 40095a4:	047fffc4 	movi	r17,-1
 40095a8:	91000117 	ldw	r4,4(r18)
 40095ac:	94000217 	ldw	r16,8(r18)
 40095b0:	213fffc4 	addi	r4,r4,-1
 40095b4:	20000a16 	blt	r4,zero,40095e0 <__sfp+0x78>
 40095b8:	8080030f 	ldh	r2,12(r16)
 40095bc:	10000c26 	beq	r2,zero,40095f0 <__sfp+0x88>
 40095c0:	80c01d04 	addi	r3,r16,116
 40095c4:	00000206 	br	40095d0 <__sfp+0x68>
 40095c8:	18bfe60f 	ldh	r2,-104(r3)
 40095cc:	10000826 	beq	r2,zero,40095f0 <__sfp+0x88>
 40095d0:	213fffc4 	addi	r4,r4,-1
 40095d4:	1c3ffd04 	addi	r16,r3,-12
 40095d8:	18c01a04 	addi	r3,r3,104
 40095dc:	247ffa1e 	bne	r4,r17,40095c8 <__alt_data_end+0xfc0095c8>
 40095e0:	90800017 	ldw	r2,0(r18)
 40095e4:	10001d26 	beq	r2,zero,400965c <__sfp+0xf4>
 40095e8:	1025883a 	mov	r18,r2
 40095ec:	003fee06 	br	40095a8 <__alt_data_end+0xfc0095a8>
 40095f0:	00bfffc4 	movi	r2,-1
 40095f4:	8080038d 	sth	r2,14(r16)
 40095f8:	00800044 	movi	r2,1
 40095fc:	8080030d 	sth	r2,12(r16)
 4009600:	80001915 	stw	zero,100(r16)
 4009604:	80000015 	stw	zero,0(r16)
 4009608:	80000215 	stw	zero,8(r16)
 400960c:	80000115 	stw	zero,4(r16)
 4009610:	80000415 	stw	zero,16(r16)
 4009614:	80000515 	stw	zero,20(r16)
 4009618:	80000615 	stw	zero,24(r16)
 400961c:	01800204 	movi	r6,8
 4009620:	000b883a 	mov	r5,zero
 4009624:	81001704 	addi	r4,r16,92
 4009628:	4004f640 	call	4004f64 <memset>
 400962c:	8005883a 	mov	r2,r16
 4009630:	80000c15 	stw	zero,48(r16)
 4009634:	80000d15 	stw	zero,52(r16)
 4009638:	80001115 	stw	zero,68(r16)
 400963c:	80001215 	stw	zero,72(r16)
 4009640:	dfc00417 	ldw	ra,16(sp)
 4009644:	dcc00317 	ldw	r19,12(sp)
 4009648:	dc800217 	ldw	r18,8(sp)
 400964c:	dc400117 	ldw	r17,4(sp)
 4009650:	dc000017 	ldw	r16,0(sp)
 4009654:	dec00504 	addi	sp,sp,20
 4009658:	f800283a 	ret
 400965c:	01400104 	movi	r5,4
 4009660:	9809883a 	mov	r4,r19
 4009664:	40094f00 	call	40094f0 <__sfmoreglue>
 4009668:	90800015 	stw	r2,0(r18)
 400966c:	103fde1e 	bne	r2,zero,40095e8 <__alt_data_end+0xfc0095e8>
 4009670:	00800304 	movi	r2,12
 4009674:	98800015 	stw	r2,0(r19)
 4009678:	0005883a 	mov	r2,zero
 400967c:	003ff006 	br	4009640 <__alt_data_end+0xfc009640>

04009680 <_cleanup>:
 4009680:	008100b4 	movhi	r2,1026
 4009684:	10a16004 	addi	r2,r2,-31360
 4009688:	11000017 	ldw	r4,0(r2)
 400968c:	01410074 	movhi	r5,1025
 4009690:	29765604 	addi	r5,r5,-9896
 4009694:	400a0a81 	jmpi	400a0a8 <_fwalk_reent>

04009698 <__sinit>:
 4009698:	20800e17 	ldw	r2,56(r4)
 400969c:	10000126 	beq	r2,zero,40096a4 <__sinit+0xc>
 40096a0:	f800283a 	ret
 40096a4:	400934c1 	jmpi	400934c <__sinit.part.1>

040096a8 <__sfp_lock_acquire>:
 40096a8:	f800283a 	ret

040096ac <__sfp_lock_release>:
 40096ac:	f800283a 	ret

040096b0 <__sinit_lock_acquire>:
 40096b0:	f800283a 	ret

040096b4 <__sinit_lock_release>:
 40096b4:	f800283a 	ret

040096b8 <__fp_lock_all>:
 40096b8:	008100b4 	movhi	r2,1026
 40096bc:	10a16104 	addi	r2,r2,-31356
 40096c0:	11000017 	ldw	r4,0(r2)
 40096c4:	01410074 	movhi	r5,1025
 40096c8:	29653a04 	addi	r5,r5,-27416
 40096cc:	4009fe41 	jmpi	4009fe4 <_fwalk>

040096d0 <__fp_unlock_all>:
 40096d0:	008100b4 	movhi	r2,1026
 40096d4:	10a16104 	addi	r2,r2,-31356
 40096d8:	11000017 	ldw	r4,0(r2)
 40096dc:	01410074 	movhi	r5,1025
 40096e0:	2964ce04 	addi	r5,r5,-27848
 40096e4:	4009fe41 	jmpi	4009fe4 <_fwalk>

040096e8 <_malloc_trim_r>:
 40096e8:	defffb04 	addi	sp,sp,-20
 40096ec:	dcc00315 	stw	r19,12(sp)
 40096f0:	04c10074 	movhi	r19,1025
 40096f4:	dc800215 	stw	r18,8(sp)
 40096f8:	dc400115 	stw	r17,4(sp)
 40096fc:	dc000015 	stw	r16,0(sp)
 4009700:	dfc00415 	stw	ra,16(sp)
 4009704:	2821883a 	mov	r16,r5
 4009708:	9cdb9704 	addi	r19,r19,28252
 400970c:	2025883a 	mov	r18,r4
 4009710:	40119bc0 	call	40119bc <__malloc_lock>
 4009714:	98800217 	ldw	r2,8(r19)
 4009718:	14400117 	ldw	r17,4(r2)
 400971c:	00bfff04 	movi	r2,-4
 4009720:	88a2703a 	and	r17,r17,r2
 4009724:	8c21c83a 	sub	r16,r17,r16
 4009728:	8403fbc4 	addi	r16,r16,4079
 400972c:	8020d33a 	srli	r16,r16,12
 4009730:	0083ffc4 	movi	r2,4095
 4009734:	843fffc4 	addi	r16,r16,-1
 4009738:	8020933a 	slli	r16,r16,12
 400973c:	1400060e 	bge	r2,r16,4009758 <_malloc_trim_r+0x70>
 4009740:	000b883a 	mov	r5,zero
 4009744:	9009883a 	mov	r4,r18
 4009748:	40051ec0 	call	40051ec <_sbrk_r>
 400974c:	98c00217 	ldw	r3,8(r19)
 4009750:	1c47883a 	add	r3,r3,r17
 4009754:	10c00a26 	beq	r2,r3,4009780 <_malloc_trim_r+0x98>
 4009758:	9009883a 	mov	r4,r18
 400975c:	40119e00 	call	40119e0 <__malloc_unlock>
 4009760:	0005883a 	mov	r2,zero
 4009764:	dfc00417 	ldw	ra,16(sp)
 4009768:	dcc00317 	ldw	r19,12(sp)
 400976c:	dc800217 	ldw	r18,8(sp)
 4009770:	dc400117 	ldw	r17,4(sp)
 4009774:	dc000017 	ldw	r16,0(sp)
 4009778:	dec00504 	addi	sp,sp,20
 400977c:	f800283a 	ret
 4009780:	040bc83a 	sub	r5,zero,r16
 4009784:	9009883a 	mov	r4,r18
 4009788:	40051ec0 	call	40051ec <_sbrk_r>
 400978c:	00ffffc4 	movi	r3,-1
 4009790:	10c00d26 	beq	r2,r3,40097c8 <_malloc_trim_r+0xe0>
 4009794:	00c100b4 	movhi	r3,1026
 4009798:	18e88804 	addi	r3,r3,-24032
 400979c:	18800017 	ldw	r2,0(r3)
 40097a0:	99000217 	ldw	r4,8(r19)
 40097a4:	8c23c83a 	sub	r17,r17,r16
 40097a8:	8c400054 	ori	r17,r17,1
 40097ac:	1421c83a 	sub	r16,r2,r16
 40097b0:	24400115 	stw	r17,4(r4)
 40097b4:	9009883a 	mov	r4,r18
 40097b8:	1c000015 	stw	r16,0(r3)
 40097bc:	40119e00 	call	40119e0 <__malloc_unlock>
 40097c0:	00800044 	movi	r2,1
 40097c4:	003fe706 	br	4009764 <__alt_data_end+0xfc009764>
 40097c8:	000b883a 	mov	r5,zero
 40097cc:	9009883a 	mov	r4,r18
 40097d0:	40051ec0 	call	40051ec <_sbrk_r>
 40097d4:	99000217 	ldw	r4,8(r19)
 40097d8:	014003c4 	movi	r5,15
 40097dc:	1107c83a 	sub	r3,r2,r4
 40097e0:	28ffdd0e 	bge	r5,r3,4009758 <__alt_data_end+0xfc009758>
 40097e4:	014100b4 	movhi	r5,1026
 40097e8:	29616204 	addi	r5,r5,-31352
 40097ec:	29400017 	ldw	r5,0(r5)
 40097f0:	18c00054 	ori	r3,r3,1
 40097f4:	20c00115 	stw	r3,4(r4)
 40097f8:	00c100b4 	movhi	r3,1026
 40097fc:	1145c83a 	sub	r2,r2,r5
 4009800:	18e88804 	addi	r3,r3,-24032
 4009804:	18800015 	stw	r2,0(r3)
 4009808:	003fd306 	br	4009758 <__alt_data_end+0xfc009758>

0400980c <_free_r>:
 400980c:	28004126 	beq	r5,zero,4009914 <_free_r+0x108>
 4009810:	defffd04 	addi	sp,sp,-12
 4009814:	dc400115 	stw	r17,4(sp)
 4009818:	dc000015 	stw	r16,0(sp)
 400981c:	2023883a 	mov	r17,r4
 4009820:	2821883a 	mov	r16,r5
 4009824:	dfc00215 	stw	ra,8(sp)
 4009828:	40119bc0 	call	40119bc <__malloc_lock>
 400982c:	81ffff17 	ldw	r7,-4(r16)
 4009830:	00bfff84 	movi	r2,-2
 4009834:	01010074 	movhi	r4,1025
 4009838:	81bffe04 	addi	r6,r16,-8
 400983c:	3884703a 	and	r2,r7,r2
 4009840:	211b9704 	addi	r4,r4,28252
 4009844:	308b883a 	add	r5,r6,r2
 4009848:	2a400117 	ldw	r9,4(r5)
 400984c:	22000217 	ldw	r8,8(r4)
 4009850:	00ffff04 	movi	r3,-4
 4009854:	48c6703a 	and	r3,r9,r3
 4009858:	2a005726 	beq	r5,r8,40099b8 <_free_r+0x1ac>
 400985c:	28c00115 	stw	r3,4(r5)
 4009860:	39c0004c 	andi	r7,r7,1
 4009864:	3800091e 	bne	r7,zero,400988c <_free_r+0x80>
 4009868:	823ffe17 	ldw	r8,-8(r16)
 400986c:	22400204 	addi	r9,r4,8
 4009870:	320dc83a 	sub	r6,r6,r8
 4009874:	31c00217 	ldw	r7,8(r6)
 4009878:	1205883a 	add	r2,r2,r8
 400987c:	3a406526 	beq	r7,r9,4009a14 <_free_r+0x208>
 4009880:	32000317 	ldw	r8,12(r6)
 4009884:	3a000315 	stw	r8,12(r7)
 4009888:	41c00215 	stw	r7,8(r8)
 400988c:	28cf883a 	add	r7,r5,r3
 4009890:	39c00117 	ldw	r7,4(r7)
 4009894:	39c0004c 	andi	r7,r7,1
 4009898:	38003a26 	beq	r7,zero,4009984 <_free_r+0x178>
 400989c:	10c00054 	ori	r3,r2,1
 40098a0:	30c00115 	stw	r3,4(r6)
 40098a4:	3087883a 	add	r3,r6,r2
 40098a8:	18800015 	stw	r2,0(r3)
 40098ac:	00c07fc4 	movi	r3,511
 40098b0:	18801936 	bltu	r3,r2,4009918 <_free_r+0x10c>
 40098b4:	1004d0fa 	srli	r2,r2,3
 40098b8:	01c00044 	movi	r7,1
 40098bc:	21400117 	ldw	r5,4(r4)
 40098c0:	10c00044 	addi	r3,r2,1
 40098c4:	18c7883a 	add	r3,r3,r3
 40098c8:	1005d0ba 	srai	r2,r2,2
 40098cc:	18c7883a 	add	r3,r3,r3
 40098d0:	18c7883a 	add	r3,r3,r3
 40098d4:	1907883a 	add	r3,r3,r4
 40098d8:	3884983a 	sll	r2,r7,r2
 40098dc:	19c00017 	ldw	r7,0(r3)
 40098e0:	1a3ffe04 	addi	r8,r3,-8
 40098e4:	1144b03a 	or	r2,r2,r5
 40098e8:	32000315 	stw	r8,12(r6)
 40098ec:	31c00215 	stw	r7,8(r6)
 40098f0:	20800115 	stw	r2,4(r4)
 40098f4:	19800015 	stw	r6,0(r3)
 40098f8:	39800315 	stw	r6,12(r7)
 40098fc:	8809883a 	mov	r4,r17
 4009900:	dfc00217 	ldw	ra,8(sp)
 4009904:	dc400117 	ldw	r17,4(sp)
 4009908:	dc000017 	ldw	r16,0(sp)
 400990c:	dec00304 	addi	sp,sp,12
 4009910:	40119e01 	jmpi	40119e0 <__malloc_unlock>
 4009914:	f800283a 	ret
 4009918:	100ad27a 	srli	r5,r2,9
 400991c:	00c00104 	movi	r3,4
 4009920:	19404a36 	bltu	r3,r5,4009a4c <_free_r+0x240>
 4009924:	100ad1ba 	srli	r5,r2,6
 4009928:	28c00e44 	addi	r3,r5,57
 400992c:	18c7883a 	add	r3,r3,r3
 4009930:	29400e04 	addi	r5,r5,56
 4009934:	18c7883a 	add	r3,r3,r3
 4009938:	18c7883a 	add	r3,r3,r3
 400993c:	1909883a 	add	r4,r3,r4
 4009940:	20c00017 	ldw	r3,0(r4)
 4009944:	01c10074 	movhi	r7,1025
 4009948:	213ffe04 	addi	r4,r4,-8
 400994c:	39db9704 	addi	r7,r7,28252
 4009950:	20c04426 	beq	r4,r3,4009a64 <_free_r+0x258>
 4009954:	01ffff04 	movi	r7,-4
 4009958:	19400117 	ldw	r5,4(r3)
 400995c:	29ca703a 	and	r5,r5,r7
 4009960:	1140022e 	bgeu	r2,r5,400996c <_free_r+0x160>
 4009964:	18c00217 	ldw	r3,8(r3)
 4009968:	20fffb1e 	bne	r4,r3,4009958 <__alt_data_end+0xfc009958>
 400996c:	19000317 	ldw	r4,12(r3)
 4009970:	31000315 	stw	r4,12(r6)
 4009974:	30c00215 	stw	r3,8(r6)
 4009978:	21800215 	stw	r6,8(r4)
 400997c:	19800315 	stw	r6,12(r3)
 4009980:	003fde06 	br	40098fc <__alt_data_end+0xfc0098fc>
 4009984:	29c00217 	ldw	r7,8(r5)
 4009988:	10c5883a 	add	r2,r2,r3
 400998c:	00c10074 	movhi	r3,1025
 4009990:	18db9904 	addi	r3,r3,28260
 4009994:	38c03b26 	beq	r7,r3,4009a84 <_free_r+0x278>
 4009998:	2a000317 	ldw	r8,12(r5)
 400999c:	11400054 	ori	r5,r2,1
 40099a0:	3087883a 	add	r3,r6,r2
 40099a4:	3a000315 	stw	r8,12(r7)
 40099a8:	41c00215 	stw	r7,8(r8)
 40099ac:	31400115 	stw	r5,4(r6)
 40099b0:	18800015 	stw	r2,0(r3)
 40099b4:	003fbd06 	br	40098ac <__alt_data_end+0xfc0098ac>
 40099b8:	39c0004c 	andi	r7,r7,1
 40099bc:	10c5883a 	add	r2,r2,r3
 40099c0:	3800071e 	bne	r7,zero,40099e0 <_free_r+0x1d4>
 40099c4:	81fffe17 	ldw	r7,-8(r16)
 40099c8:	31cdc83a 	sub	r6,r6,r7
 40099cc:	30c00317 	ldw	r3,12(r6)
 40099d0:	31400217 	ldw	r5,8(r6)
 40099d4:	11c5883a 	add	r2,r2,r7
 40099d8:	28c00315 	stw	r3,12(r5)
 40099dc:	19400215 	stw	r5,8(r3)
 40099e0:	10c00054 	ori	r3,r2,1
 40099e4:	30c00115 	stw	r3,4(r6)
 40099e8:	00c100b4 	movhi	r3,1026
 40099ec:	18e16304 	addi	r3,r3,-31348
 40099f0:	18c00017 	ldw	r3,0(r3)
 40099f4:	21800215 	stw	r6,8(r4)
 40099f8:	10ffc036 	bltu	r2,r3,40098fc <__alt_data_end+0xfc0098fc>
 40099fc:	008100b4 	movhi	r2,1026
 4009a00:	10a87c04 	addi	r2,r2,-24080
 4009a04:	11400017 	ldw	r5,0(r2)
 4009a08:	8809883a 	mov	r4,r17
 4009a0c:	40096e80 	call	40096e8 <_malloc_trim_r>
 4009a10:	003fba06 	br	40098fc <__alt_data_end+0xfc0098fc>
 4009a14:	28c9883a 	add	r4,r5,r3
 4009a18:	21000117 	ldw	r4,4(r4)
 4009a1c:	2100004c 	andi	r4,r4,1
 4009a20:	2000391e 	bne	r4,zero,4009b08 <_free_r+0x2fc>
 4009a24:	29c00217 	ldw	r7,8(r5)
 4009a28:	29000317 	ldw	r4,12(r5)
 4009a2c:	1885883a 	add	r2,r3,r2
 4009a30:	10c00054 	ori	r3,r2,1
 4009a34:	39000315 	stw	r4,12(r7)
 4009a38:	21c00215 	stw	r7,8(r4)
 4009a3c:	30c00115 	stw	r3,4(r6)
 4009a40:	308d883a 	add	r6,r6,r2
 4009a44:	30800015 	stw	r2,0(r6)
 4009a48:	003fac06 	br	40098fc <__alt_data_end+0xfc0098fc>
 4009a4c:	00c00504 	movi	r3,20
 4009a50:	19401536 	bltu	r3,r5,4009aa8 <_free_r+0x29c>
 4009a54:	28c01704 	addi	r3,r5,92
 4009a58:	18c7883a 	add	r3,r3,r3
 4009a5c:	294016c4 	addi	r5,r5,91
 4009a60:	003fb406 	br	4009934 <__alt_data_end+0xfc009934>
 4009a64:	280bd0ba 	srai	r5,r5,2
 4009a68:	00c00044 	movi	r3,1
 4009a6c:	38800117 	ldw	r2,4(r7)
 4009a70:	194a983a 	sll	r5,r3,r5
 4009a74:	2007883a 	mov	r3,r4
 4009a78:	2884b03a 	or	r2,r5,r2
 4009a7c:	38800115 	stw	r2,4(r7)
 4009a80:	003fbb06 	br	4009970 <__alt_data_end+0xfc009970>
 4009a84:	21800515 	stw	r6,20(r4)
 4009a88:	21800415 	stw	r6,16(r4)
 4009a8c:	10c00054 	ori	r3,r2,1
 4009a90:	31c00315 	stw	r7,12(r6)
 4009a94:	31c00215 	stw	r7,8(r6)
 4009a98:	30c00115 	stw	r3,4(r6)
 4009a9c:	308d883a 	add	r6,r6,r2
 4009aa0:	30800015 	stw	r2,0(r6)
 4009aa4:	003f9506 	br	40098fc <__alt_data_end+0xfc0098fc>
 4009aa8:	00c01504 	movi	r3,84
 4009aac:	19400536 	bltu	r3,r5,4009ac4 <_free_r+0x2b8>
 4009ab0:	100ad33a 	srli	r5,r2,12
 4009ab4:	28c01bc4 	addi	r3,r5,111
 4009ab8:	18c7883a 	add	r3,r3,r3
 4009abc:	29401b84 	addi	r5,r5,110
 4009ac0:	003f9c06 	br	4009934 <__alt_data_end+0xfc009934>
 4009ac4:	00c05504 	movi	r3,340
 4009ac8:	19400536 	bltu	r3,r5,4009ae0 <_free_r+0x2d4>
 4009acc:	100ad3fa 	srli	r5,r2,15
 4009ad0:	28c01e04 	addi	r3,r5,120
 4009ad4:	18c7883a 	add	r3,r3,r3
 4009ad8:	29401dc4 	addi	r5,r5,119
 4009adc:	003f9506 	br	4009934 <__alt_data_end+0xfc009934>
 4009ae0:	00c15504 	movi	r3,1364
 4009ae4:	19400536 	bltu	r3,r5,4009afc <_free_r+0x2f0>
 4009ae8:	100ad4ba 	srli	r5,r2,18
 4009aec:	28c01f44 	addi	r3,r5,125
 4009af0:	18c7883a 	add	r3,r3,r3
 4009af4:	29401f04 	addi	r5,r5,124
 4009af8:	003f8e06 	br	4009934 <__alt_data_end+0xfc009934>
 4009afc:	00c03f84 	movi	r3,254
 4009b00:	01401f84 	movi	r5,126
 4009b04:	003f8b06 	br	4009934 <__alt_data_end+0xfc009934>
 4009b08:	10c00054 	ori	r3,r2,1
 4009b0c:	30c00115 	stw	r3,4(r6)
 4009b10:	308d883a 	add	r6,r6,r2
 4009b14:	30800015 	stw	r2,0(r6)
 4009b18:	003f7806 	br	40098fc <__alt_data_end+0xfc0098fc>

04009b1c <__sfvwrite_r>:
 4009b1c:	30800217 	ldw	r2,8(r6)
 4009b20:	10006726 	beq	r2,zero,4009cc0 <__sfvwrite_r+0x1a4>
 4009b24:	28c0030b 	ldhu	r3,12(r5)
 4009b28:	defff404 	addi	sp,sp,-48
 4009b2c:	dd400715 	stw	r21,28(sp)
 4009b30:	dd000615 	stw	r20,24(sp)
 4009b34:	dc000215 	stw	r16,8(sp)
 4009b38:	dfc00b15 	stw	ra,44(sp)
 4009b3c:	df000a15 	stw	fp,40(sp)
 4009b40:	ddc00915 	stw	r23,36(sp)
 4009b44:	dd800815 	stw	r22,32(sp)
 4009b48:	dcc00515 	stw	r19,20(sp)
 4009b4c:	dc800415 	stw	r18,16(sp)
 4009b50:	dc400315 	stw	r17,12(sp)
 4009b54:	1880020c 	andi	r2,r3,8
 4009b58:	2821883a 	mov	r16,r5
 4009b5c:	202b883a 	mov	r21,r4
 4009b60:	3029883a 	mov	r20,r6
 4009b64:	10002726 	beq	r2,zero,4009c04 <__sfvwrite_r+0xe8>
 4009b68:	28800417 	ldw	r2,16(r5)
 4009b6c:	10002526 	beq	r2,zero,4009c04 <__sfvwrite_r+0xe8>
 4009b70:	1880008c 	andi	r2,r3,2
 4009b74:	a4400017 	ldw	r17,0(r20)
 4009b78:	10002a26 	beq	r2,zero,4009c24 <__sfvwrite_r+0x108>
 4009b7c:	05a00034 	movhi	r22,32768
 4009b80:	0027883a 	mov	r19,zero
 4009b84:	0025883a 	mov	r18,zero
 4009b88:	b5bf0004 	addi	r22,r22,-1024
 4009b8c:	980d883a 	mov	r6,r19
 4009b90:	a809883a 	mov	r4,r21
 4009b94:	90004626 	beq	r18,zero,4009cb0 <__sfvwrite_r+0x194>
 4009b98:	900f883a 	mov	r7,r18
 4009b9c:	b480022e 	bgeu	r22,r18,4009ba8 <__sfvwrite_r+0x8c>
 4009ba0:	01e00034 	movhi	r7,32768
 4009ba4:	39ff0004 	addi	r7,r7,-1024
 4009ba8:	80800917 	ldw	r2,36(r16)
 4009bac:	81400717 	ldw	r5,28(r16)
 4009bb0:	103ee83a 	callr	r2
 4009bb4:	00805a0e 	bge	zero,r2,4009d20 <__sfvwrite_r+0x204>
 4009bb8:	a0c00217 	ldw	r3,8(r20)
 4009bbc:	98a7883a 	add	r19,r19,r2
 4009bc0:	90a5c83a 	sub	r18,r18,r2
 4009bc4:	1885c83a 	sub	r2,r3,r2
 4009bc8:	a0800215 	stw	r2,8(r20)
 4009bcc:	103fef1e 	bne	r2,zero,4009b8c <__alt_data_end+0xfc009b8c>
 4009bd0:	0005883a 	mov	r2,zero
 4009bd4:	dfc00b17 	ldw	ra,44(sp)
 4009bd8:	df000a17 	ldw	fp,40(sp)
 4009bdc:	ddc00917 	ldw	r23,36(sp)
 4009be0:	dd800817 	ldw	r22,32(sp)
 4009be4:	dd400717 	ldw	r21,28(sp)
 4009be8:	dd000617 	ldw	r20,24(sp)
 4009bec:	dcc00517 	ldw	r19,20(sp)
 4009bf0:	dc800417 	ldw	r18,16(sp)
 4009bf4:	dc400317 	ldw	r17,12(sp)
 4009bf8:	dc000217 	ldw	r16,8(sp)
 4009bfc:	dec00c04 	addi	sp,sp,48
 4009c00:	f800283a 	ret
 4009c04:	800b883a 	mov	r5,r16
 4009c08:	a809883a 	mov	r4,r21
 4009c0c:	400768c0 	call	400768c <__swsetup_r>
 4009c10:	1000ee1e 	bne	r2,zero,4009fcc <__sfvwrite_r+0x4b0>
 4009c14:	80c0030b 	ldhu	r3,12(r16)
 4009c18:	a4400017 	ldw	r17,0(r20)
 4009c1c:	1880008c 	andi	r2,r3,2
 4009c20:	103fd61e 	bne	r2,zero,4009b7c <__alt_data_end+0xfc009b7c>
 4009c24:	1880004c 	andi	r2,r3,1
 4009c28:	1000421e 	bne	r2,zero,4009d34 <__sfvwrite_r+0x218>
 4009c2c:	0039883a 	mov	fp,zero
 4009c30:	0025883a 	mov	r18,zero
 4009c34:	90001a26 	beq	r18,zero,4009ca0 <__sfvwrite_r+0x184>
 4009c38:	1880800c 	andi	r2,r3,512
 4009c3c:	84c00217 	ldw	r19,8(r16)
 4009c40:	10002126 	beq	r2,zero,4009cc8 <__sfvwrite_r+0x1ac>
 4009c44:	982f883a 	mov	r23,r19
 4009c48:	94c09636 	bltu	r18,r19,4009ea4 <__sfvwrite_r+0x388>
 4009c4c:	1881200c 	andi	r2,r3,1152
 4009c50:	1000a11e 	bne	r2,zero,4009ed8 <__sfvwrite_r+0x3bc>
 4009c54:	81000017 	ldw	r4,0(r16)
 4009c58:	b80d883a 	mov	r6,r23
 4009c5c:	e00b883a 	mov	r5,fp
 4009c60:	400a4e80 	call	400a4e8 <memmove>
 4009c64:	80c00217 	ldw	r3,8(r16)
 4009c68:	81000017 	ldw	r4,0(r16)
 4009c6c:	9005883a 	mov	r2,r18
 4009c70:	1ce7c83a 	sub	r19,r3,r19
 4009c74:	25cf883a 	add	r7,r4,r23
 4009c78:	84c00215 	stw	r19,8(r16)
 4009c7c:	81c00015 	stw	r7,0(r16)
 4009c80:	a0c00217 	ldw	r3,8(r20)
 4009c84:	e0b9883a 	add	fp,fp,r2
 4009c88:	90a5c83a 	sub	r18,r18,r2
 4009c8c:	18a7c83a 	sub	r19,r3,r2
 4009c90:	a4c00215 	stw	r19,8(r20)
 4009c94:	983fce26 	beq	r19,zero,4009bd0 <__alt_data_end+0xfc009bd0>
 4009c98:	80c0030b 	ldhu	r3,12(r16)
 4009c9c:	903fe61e 	bne	r18,zero,4009c38 <__alt_data_end+0xfc009c38>
 4009ca0:	8f000017 	ldw	fp,0(r17)
 4009ca4:	8c800117 	ldw	r18,4(r17)
 4009ca8:	8c400204 	addi	r17,r17,8
 4009cac:	003fe106 	br	4009c34 <__alt_data_end+0xfc009c34>
 4009cb0:	8cc00017 	ldw	r19,0(r17)
 4009cb4:	8c800117 	ldw	r18,4(r17)
 4009cb8:	8c400204 	addi	r17,r17,8
 4009cbc:	003fb306 	br	4009b8c <__alt_data_end+0xfc009b8c>
 4009cc0:	0005883a 	mov	r2,zero
 4009cc4:	f800283a 	ret
 4009cc8:	81000017 	ldw	r4,0(r16)
 4009ccc:	80800417 	ldw	r2,16(r16)
 4009cd0:	11005a36 	bltu	r2,r4,4009e3c <__sfvwrite_r+0x320>
 4009cd4:	85c00517 	ldw	r23,20(r16)
 4009cd8:	95c05836 	bltu	r18,r23,4009e3c <__sfvwrite_r+0x320>
 4009cdc:	00a00034 	movhi	r2,32768
 4009ce0:	10bfffc4 	addi	r2,r2,-1
 4009ce4:	9009883a 	mov	r4,r18
 4009ce8:	1480012e 	bgeu	r2,r18,4009cf0 <__sfvwrite_r+0x1d4>
 4009cec:	1009883a 	mov	r4,r2
 4009cf0:	b80b883a 	mov	r5,r23
 4009cf4:	40043400 	call	4004340 <__divsi3>
 4009cf8:	b80b883a 	mov	r5,r23
 4009cfc:	1009883a 	mov	r4,r2
 4009d00:	40044f40 	call	40044f4 <__mulsi3>
 4009d04:	81400717 	ldw	r5,28(r16)
 4009d08:	80c00917 	ldw	r3,36(r16)
 4009d0c:	100f883a 	mov	r7,r2
 4009d10:	e00d883a 	mov	r6,fp
 4009d14:	a809883a 	mov	r4,r21
 4009d18:	183ee83a 	callr	r3
 4009d1c:	00bfd816 	blt	zero,r2,4009c80 <__alt_data_end+0xfc009c80>
 4009d20:	8080030b 	ldhu	r2,12(r16)
 4009d24:	10801014 	ori	r2,r2,64
 4009d28:	8080030d 	sth	r2,12(r16)
 4009d2c:	00bfffc4 	movi	r2,-1
 4009d30:	003fa806 	br	4009bd4 <__alt_data_end+0xfc009bd4>
 4009d34:	0027883a 	mov	r19,zero
 4009d38:	0011883a 	mov	r8,zero
 4009d3c:	0039883a 	mov	fp,zero
 4009d40:	0025883a 	mov	r18,zero
 4009d44:	90001f26 	beq	r18,zero,4009dc4 <__sfvwrite_r+0x2a8>
 4009d48:	40005a26 	beq	r8,zero,4009eb4 <__sfvwrite_r+0x398>
 4009d4c:	982d883a 	mov	r22,r19
 4009d50:	94c0012e 	bgeu	r18,r19,4009d58 <__sfvwrite_r+0x23c>
 4009d54:	902d883a 	mov	r22,r18
 4009d58:	81000017 	ldw	r4,0(r16)
 4009d5c:	80800417 	ldw	r2,16(r16)
 4009d60:	b02f883a 	mov	r23,r22
 4009d64:	81c00517 	ldw	r7,20(r16)
 4009d68:	1100032e 	bgeu	r2,r4,4009d78 <__sfvwrite_r+0x25c>
 4009d6c:	80c00217 	ldw	r3,8(r16)
 4009d70:	38c7883a 	add	r3,r7,r3
 4009d74:	1d801816 	blt	r3,r22,4009dd8 <__sfvwrite_r+0x2bc>
 4009d78:	b1c03e16 	blt	r22,r7,4009e74 <__sfvwrite_r+0x358>
 4009d7c:	80800917 	ldw	r2,36(r16)
 4009d80:	81400717 	ldw	r5,28(r16)
 4009d84:	e00d883a 	mov	r6,fp
 4009d88:	da000115 	stw	r8,4(sp)
 4009d8c:	a809883a 	mov	r4,r21
 4009d90:	103ee83a 	callr	r2
 4009d94:	102f883a 	mov	r23,r2
 4009d98:	da000117 	ldw	r8,4(sp)
 4009d9c:	00bfe00e 	bge	zero,r2,4009d20 <__alt_data_end+0xfc009d20>
 4009da0:	9de7c83a 	sub	r19,r19,r23
 4009da4:	98001f26 	beq	r19,zero,4009e24 <__sfvwrite_r+0x308>
 4009da8:	a0800217 	ldw	r2,8(r20)
 4009dac:	e5f9883a 	add	fp,fp,r23
 4009db0:	95e5c83a 	sub	r18,r18,r23
 4009db4:	15efc83a 	sub	r23,r2,r23
 4009db8:	a5c00215 	stw	r23,8(r20)
 4009dbc:	b83f8426 	beq	r23,zero,4009bd0 <__alt_data_end+0xfc009bd0>
 4009dc0:	903fe11e 	bne	r18,zero,4009d48 <__alt_data_end+0xfc009d48>
 4009dc4:	8f000017 	ldw	fp,0(r17)
 4009dc8:	8c800117 	ldw	r18,4(r17)
 4009dcc:	0011883a 	mov	r8,zero
 4009dd0:	8c400204 	addi	r17,r17,8
 4009dd4:	003fdb06 	br	4009d44 <__alt_data_end+0xfc009d44>
 4009dd8:	180d883a 	mov	r6,r3
 4009ddc:	e00b883a 	mov	r5,fp
 4009de0:	da000115 	stw	r8,4(sp)
 4009de4:	d8c00015 	stw	r3,0(sp)
 4009de8:	400a4e80 	call	400a4e8 <memmove>
 4009dec:	d8c00017 	ldw	r3,0(sp)
 4009df0:	80800017 	ldw	r2,0(r16)
 4009df4:	800b883a 	mov	r5,r16
 4009df8:	a809883a 	mov	r4,r21
 4009dfc:	10c5883a 	add	r2,r2,r3
 4009e00:	80800015 	stw	r2,0(r16)
 4009e04:	d8c00015 	stw	r3,0(sp)
 4009e08:	40092ac0 	call	40092ac <_fflush_r>
 4009e0c:	d8c00017 	ldw	r3,0(sp)
 4009e10:	da000117 	ldw	r8,4(sp)
 4009e14:	103fc21e 	bne	r2,zero,4009d20 <__alt_data_end+0xfc009d20>
 4009e18:	182f883a 	mov	r23,r3
 4009e1c:	9de7c83a 	sub	r19,r19,r23
 4009e20:	983fe11e 	bne	r19,zero,4009da8 <__alt_data_end+0xfc009da8>
 4009e24:	800b883a 	mov	r5,r16
 4009e28:	a809883a 	mov	r4,r21
 4009e2c:	40092ac0 	call	40092ac <_fflush_r>
 4009e30:	103fbb1e 	bne	r2,zero,4009d20 <__alt_data_end+0xfc009d20>
 4009e34:	0011883a 	mov	r8,zero
 4009e38:	003fdb06 	br	4009da8 <__alt_data_end+0xfc009da8>
 4009e3c:	94c0012e 	bgeu	r18,r19,4009e44 <__sfvwrite_r+0x328>
 4009e40:	9027883a 	mov	r19,r18
 4009e44:	980d883a 	mov	r6,r19
 4009e48:	e00b883a 	mov	r5,fp
 4009e4c:	400a4e80 	call	400a4e8 <memmove>
 4009e50:	80800217 	ldw	r2,8(r16)
 4009e54:	80c00017 	ldw	r3,0(r16)
 4009e58:	14c5c83a 	sub	r2,r2,r19
 4009e5c:	1cc7883a 	add	r3,r3,r19
 4009e60:	80800215 	stw	r2,8(r16)
 4009e64:	80c00015 	stw	r3,0(r16)
 4009e68:	10004326 	beq	r2,zero,4009f78 <__sfvwrite_r+0x45c>
 4009e6c:	9805883a 	mov	r2,r19
 4009e70:	003f8306 	br	4009c80 <__alt_data_end+0xfc009c80>
 4009e74:	b00d883a 	mov	r6,r22
 4009e78:	e00b883a 	mov	r5,fp
 4009e7c:	da000115 	stw	r8,4(sp)
 4009e80:	400a4e80 	call	400a4e8 <memmove>
 4009e84:	80800217 	ldw	r2,8(r16)
 4009e88:	80c00017 	ldw	r3,0(r16)
 4009e8c:	da000117 	ldw	r8,4(sp)
 4009e90:	1585c83a 	sub	r2,r2,r22
 4009e94:	1dad883a 	add	r22,r3,r22
 4009e98:	80800215 	stw	r2,8(r16)
 4009e9c:	85800015 	stw	r22,0(r16)
 4009ea0:	003fbf06 	br	4009da0 <__alt_data_end+0xfc009da0>
 4009ea4:	81000017 	ldw	r4,0(r16)
 4009ea8:	9027883a 	mov	r19,r18
 4009eac:	902f883a 	mov	r23,r18
 4009eb0:	003f6906 	br	4009c58 <__alt_data_end+0xfc009c58>
 4009eb4:	900d883a 	mov	r6,r18
 4009eb8:	01400284 	movi	r5,10
 4009ebc:	e009883a 	mov	r4,fp
 4009ec0:	400a4040 	call	400a404 <memchr>
 4009ec4:	10003e26 	beq	r2,zero,4009fc0 <__sfvwrite_r+0x4a4>
 4009ec8:	10800044 	addi	r2,r2,1
 4009ecc:	1727c83a 	sub	r19,r2,fp
 4009ed0:	02000044 	movi	r8,1
 4009ed4:	003f9d06 	br	4009d4c <__alt_data_end+0xfc009d4c>
 4009ed8:	80800517 	ldw	r2,20(r16)
 4009edc:	81400417 	ldw	r5,16(r16)
 4009ee0:	81c00017 	ldw	r7,0(r16)
 4009ee4:	10a7883a 	add	r19,r2,r2
 4009ee8:	9885883a 	add	r2,r19,r2
 4009eec:	1026d7fa 	srli	r19,r2,31
 4009ef0:	396dc83a 	sub	r22,r7,r5
 4009ef4:	b1000044 	addi	r4,r22,1
 4009ef8:	9885883a 	add	r2,r19,r2
 4009efc:	1027d07a 	srai	r19,r2,1
 4009f00:	2485883a 	add	r2,r4,r18
 4009f04:	980d883a 	mov	r6,r19
 4009f08:	9880022e 	bgeu	r19,r2,4009f14 <__sfvwrite_r+0x3f8>
 4009f0c:	1027883a 	mov	r19,r2
 4009f10:	100d883a 	mov	r6,r2
 4009f14:	18c1000c 	andi	r3,r3,1024
 4009f18:	18001c26 	beq	r3,zero,4009f8c <__sfvwrite_r+0x470>
 4009f1c:	300b883a 	mov	r5,r6
 4009f20:	a809883a 	mov	r4,r21
 4009f24:	40046100 	call	4004610 <_malloc_r>
 4009f28:	102f883a 	mov	r23,r2
 4009f2c:	10002926 	beq	r2,zero,4009fd4 <__sfvwrite_r+0x4b8>
 4009f30:	81400417 	ldw	r5,16(r16)
 4009f34:	b00d883a 	mov	r6,r22
 4009f38:	1009883a 	mov	r4,r2
 4009f3c:	4004e1c0 	call	4004e1c <memcpy>
 4009f40:	8080030b 	ldhu	r2,12(r16)
 4009f44:	00fedfc4 	movi	r3,-1153
 4009f48:	10c4703a 	and	r2,r2,r3
 4009f4c:	10802014 	ori	r2,r2,128
 4009f50:	8080030d 	sth	r2,12(r16)
 4009f54:	bd89883a 	add	r4,r23,r22
 4009f58:	9d8fc83a 	sub	r7,r19,r22
 4009f5c:	85c00415 	stw	r23,16(r16)
 4009f60:	84c00515 	stw	r19,20(r16)
 4009f64:	81000015 	stw	r4,0(r16)
 4009f68:	9027883a 	mov	r19,r18
 4009f6c:	81c00215 	stw	r7,8(r16)
 4009f70:	902f883a 	mov	r23,r18
 4009f74:	003f3806 	br	4009c58 <__alt_data_end+0xfc009c58>
 4009f78:	800b883a 	mov	r5,r16
 4009f7c:	a809883a 	mov	r4,r21
 4009f80:	40092ac0 	call	40092ac <_fflush_r>
 4009f84:	103fb926 	beq	r2,zero,4009e6c <__alt_data_end+0xfc009e6c>
 4009f88:	003f6506 	br	4009d20 <__alt_data_end+0xfc009d20>
 4009f8c:	a809883a 	mov	r4,r21
 4009f90:	400b8640 	call	400b864 <_realloc_r>
 4009f94:	102f883a 	mov	r23,r2
 4009f98:	103fee1e 	bne	r2,zero,4009f54 <__alt_data_end+0xfc009f54>
 4009f9c:	81400417 	ldw	r5,16(r16)
 4009fa0:	a809883a 	mov	r4,r21
 4009fa4:	400980c0 	call	400980c <_free_r>
 4009fa8:	8080030b 	ldhu	r2,12(r16)
 4009fac:	00ffdfc4 	movi	r3,-129
 4009fb0:	1884703a 	and	r2,r3,r2
 4009fb4:	00c00304 	movi	r3,12
 4009fb8:	a8c00015 	stw	r3,0(r21)
 4009fbc:	003f5906 	br	4009d24 <__alt_data_end+0xfc009d24>
 4009fc0:	94c00044 	addi	r19,r18,1
 4009fc4:	02000044 	movi	r8,1
 4009fc8:	003f6006 	br	4009d4c <__alt_data_end+0xfc009d4c>
 4009fcc:	00bfffc4 	movi	r2,-1
 4009fd0:	003f0006 	br	4009bd4 <__alt_data_end+0xfc009bd4>
 4009fd4:	00800304 	movi	r2,12
 4009fd8:	a8800015 	stw	r2,0(r21)
 4009fdc:	8080030b 	ldhu	r2,12(r16)
 4009fe0:	003f5006 	br	4009d24 <__alt_data_end+0xfc009d24>

04009fe4 <_fwalk>:
 4009fe4:	defff704 	addi	sp,sp,-36
 4009fe8:	dd000415 	stw	r20,16(sp)
 4009fec:	dfc00815 	stw	ra,32(sp)
 4009ff0:	ddc00715 	stw	r23,28(sp)
 4009ff4:	dd800615 	stw	r22,24(sp)
 4009ff8:	dd400515 	stw	r21,20(sp)
 4009ffc:	dcc00315 	stw	r19,12(sp)
 400a000:	dc800215 	stw	r18,8(sp)
 400a004:	dc400115 	stw	r17,4(sp)
 400a008:	dc000015 	stw	r16,0(sp)
 400a00c:	2500b804 	addi	r20,r4,736
 400a010:	a0002326 	beq	r20,zero,400a0a0 <_fwalk+0xbc>
 400a014:	282b883a 	mov	r21,r5
 400a018:	002f883a 	mov	r23,zero
 400a01c:	05800044 	movi	r22,1
 400a020:	04ffffc4 	movi	r19,-1
 400a024:	a4400117 	ldw	r17,4(r20)
 400a028:	a4800217 	ldw	r18,8(r20)
 400a02c:	8c7fffc4 	addi	r17,r17,-1
 400a030:	88000d16 	blt	r17,zero,400a068 <_fwalk+0x84>
 400a034:	94000304 	addi	r16,r18,12
 400a038:	94800384 	addi	r18,r18,14
 400a03c:	8080000b 	ldhu	r2,0(r16)
 400a040:	8c7fffc4 	addi	r17,r17,-1
 400a044:	813ffd04 	addi	r4,r16,-12
 400a048:	b080042e 	bgeu	r22,r2,400a05c <_fwalk+0x78>
 400a04c:	9080000f 	ldh	r2,0(r18)
 400a050:	14c00226 	beq	r2,r19,400a05c <_fwalk+0x78>
 400a054:	a83ee83a 	callr	r21
 400a058:	b8aeb03a 	or	r23,r23,r2
 400a05c:	84001a04 	addi	r16,r16,104
 400a060:	94801a04 	addi	r18,r18,104
 400a064:	8cfff51e 	bne	r17,r19,400a03c <__alt_data_end+0xfc00a03c>
 400a068:	a5000017 	ldw	r20,0(r20)
 400a06c:	a03fed1e 	bne	r20,zero,400a024 <__alt_data_end+0xfc00a024>
 400a070:	b805883a 	mov	r2,r23
 400a074:	dfc00817 	ldw	ra,32(sp)
 400a078:	ddc00717 	ldw	r23,28(sp)
 400a07c:	dd800617 	ldw	r22,24(sp)
 400a080:	dd400517 	ldw	r21,20(sp)
 400a084:	dd000417 	ldw	r20,16(sp)
 400a088:	dcc00317 	ldw	r19,12(sp)
 400a08c:	dc800217 	ldw	r18,8(sp)
 400a090:	dc400117 	ldw	r17,4(sp)
 400a094:	dc000017 	ldw	r16,0(sp)
 400a098:	dec00904 	addi	sp,sp,36
 400a09c:	f800283a 	ret
 400a0a0:	002f883a 	mov	r23,zero
 400a0a4:	003ff206 	br	400a070 <__alt_data_end+0xfc00a070>

0400a0a8 <_fwalk_reent>:
 400a0a8:	defff704 	addi	sp,sp,-36
 400a0ac:	dd000415 	stw	r20,16(sp)
 400a0b0:	dfc00815 	stw	ra,32(sp)
 400a0b4:	ddc00715 	stw	r23,28(sp)
 400a0b8:	dd800615 	stw	r22,24(sp)
 400a0bc:	dd400515 	stw	r21,20(sp)
 400a0c0:	dcc00315 	stw	r19,12(sp)
 400a0c4:	dc800215 	stw	r18,8(sp)
 400a0c8:	dc400115 	stw	r17,4(sp)
 400a0cc:	dc000015 	stw	r16,0(sp)
 400a0d0:	2500b804 	addi	r20,r4,736
 400a0d4:	a0002326 	beq	r20,zero,400a164 <_fwalk_reent+0xbc>
 400a0d8:	282b883a 	mov	r21,r5
 400a0dc:	2027883a 	mov	r19,r4
 400a0e0:	002f883a 	mov	r23,zero
 400a0e4:	05800044 	movi	r22,1
 400a0e8:	04bfffc4 	movi	r18,-1
 400a0ec:	a4400117 	ldw	r17,4(r20)
 400a0f0:	a4000217 	ldw	r16,8(r20)
 400a0f4:	8c7fffc4 	addi	r17,r17,-1
 400a0f8:	88000c16 	blt	r17,zero,400a12c <_fwalk_reent+0x84>
 400a0fc:	84000304 	addi	r16,r16,12
 400a100:	8080000b 	ldhu	r2,0(r16)
 400a104:	8c7fffc4 	addi	r17,r17,-1
 400a108:	817ffd04 	addi	r5,r16,-12
 400a10c:	b080052e 	bgeu	r22,r2,400a124 <_fwalk_reent+0x7c>
 400a110:	8080008f 	ldh	r2,2(r16)
 400a114:	9809883a 	mov	r4,r19
 400a118:	14800226 	beq	r2,r18,400a124 <_fwalk_reent+0x7c>
 400a11c:	a83ee83a 	callr	r21
 400a120:	b8aeb03a 	or	r23,r23,r2
 400a124:	84001a04 	addi	r16,r16,104
 400a128:	8cbff51e 	bne	r17,r18,400a100 <__alt_data_end+0xfc00a100>
 400a12c:	a5000017 	ldw	r20,0(r20)
 400a130:	a03fee1e 	bne	r20,zero,400a0ec <__alt_data_end+0xfc00a0ec>
 400a134:	b805883a 	mov	r2,r23
 400a138:	dfc00817 	ldw	ra,32(sp)
 400a13c:	ddc00717 	ldw	r23,28(sp)
 400a140:	dd800617 	ldw	r22,24(sp)
 400a144:	dd400517 	ldw	r21,20(sp)
 400a148:	dd000417 	ldw	r20,16(sp)
 400a14c:	dcc00317 	ldw	r19,12(sp)
 400a150:	dc800217 	ldw	r18,8(sp)
 400a154:	dc400117 	ldw	r17,4(sp)
 400a158:	dc000017 	ldw	r16,0(sp)
 400a15c:	dec00904 	addi	sp,sp,36
 400a160:	f800283a 	ret
 400a164:	002f883a 	mov	r23,zero
 400a168:	003ff206 	br	400a134 <__alt_data_end+0xfc00a134>

0400a16c <_setlocale_r>:
 400a16c:	30001b26 	beq	r6,zero,400a1dc <_setlocale_r+0x70>
 400a170:	01410074 	movhi	r5,1025
 400a174:	defffe04 	addi	sp,sp,-8
 400a178:	29595b04 	addi	r5,r5,25964
 400a17c:	3009883a 	mov	r4,r6
 400a180:	dc000015 	stw	r16,0(sp)
 400a184:	dfc00115 	stw	ra,4(sp)
 400a188:	3021883a 	mov	r16,r6
 400a18c:	400bf780 	call	400bf78 <strcmp>
 400a190:	1000061e 	bne	r2,zero,400a1ac <_setlocale_r+0x40>
 400a194:	00810074 	movhi	r2,1025
 400a198:	10993c04 	addi	r2,r2,25840
 400a19c:	dfc00117 	ldw	ra,4(sp)
 400a1a0:	dc000017 	ldw	r16,0(sp)
 400a1a4:	dec00204 	addi	sp,sp,8
 400a1a8:	f800283a 	ret
 400a1ac:	01410074 	movhi	r5,1025
 400a1b0:	29593c04 	addi	r5,r5,25840
 400a1b4:	8009883a 	mov	r4,r16
 400a1b8:	400bf780 	call	400bf78 <strcmp>
 400a1bc:	103ff526 	beq	r2,zero,400a194 <__alt_data_end+0xfc00a194>
 400a1c0:	01410074 	movhi	r5,1025
 400a1c4:	29594604 	addi	r5,r5,25880
 400a1c8:	8009883a 	mov	r4,r16
 400a1cc:	400bf780 	call	400bf78 <strcmp>
 400a1d0:	103ff026 	beq	r2,zero,400a194 <__alt_data_end+0xfc00a194>
 400a1d4:	0005883a 	mov	r2,zero
 400a1d8:	003ff006 	br	400a19c <__alt_data_end+0xfc00a19c>
 400a1dc:	00810074 	movhi	r2,1025
 400a1e0:	10993c04 	addi	r2,r2,25840
 400a1e4:	f800283a 	ret

0400a1e8 <__locale_charset>:
 400a1e8:	00810074 	movhi	r2,1025
 400a1ec:	109ca104 	addi	r2,r2,29316
 400a1f0:	f800283a 	ret

0400a1f4 <__locale_mb_cur_max>:
 400a1f4:	008100b4 	movhi	r2,1026
 400a1f8:	10a16404 	addi	r2,r2,-31344
 400a1fc:	10800017 	ldw	r2,0(r2)
 400a200:	f800283a 	ret

0400a204 <__locale_msgcharset>:
 400a204:	00810074 	movhi	r2,1025
 400a208:	109c9904 	addi	r2,r2,29284
 400a20c:	f800283a 	ret

0400a210 <__locale_cjk_lang>:
 400a210:	0005883a 	mov	r2,zero
 400a214:	f800283a 	ret

0400a218 <_localeconv_r>:
 400a218:	00810074 	movhi	r2,1025
 400a21c:	109ca904 	addi	r2,r2,29348
 400a220:	f800283a 	ret

0400a224 <setlocale>:
 400a224:	008100b4 	movhi	r2,1026
 400a228:	10a16104 	addi	r2,r2,-31356
 400a22c:	280d883a 	mov	r6,r5
 400a230:	200b883a 	mov	r5,r4
 400a234:	11000017 	ldw	r4,0(r2)
 400a238:	400a16c1 	jmpi	400a16c <_setlocale_r>

0400a23c <localeconv>:
 400a23c:	00810074 	movhi	r2,1025
 400a240:	109ca904 	addi	r2,r2,29348
 400a244:	f800283a 	ret

0400a248 <__smakebuf_r>:
 400a248:	2880030b 	ldhu	r2,12(r5)
 400a24c:	10c0008c 	andi	r3,r2,2
 400a250:	1800411e 	bne	r3,zero,400a358 <__smakebuf_r+0x110>
 400a254:	deffec04 	addi	sp,sp,-80
 400a258:	dc000f15 	stw	r16,60(sp)
 400a25c:	2821883a 	mov	r16,r5
 400a260:	2940038f 	ldh	r5,14(r5)
 400a264:	dc401015 	stw	r17,64(sp)
 400a268:	dfc01315 	stw	ra,76(sp)
 400a26c:	dcc01215 	stw	r19,72(sp)
 400a270:	dc801115 	stw	r18,68(sp)
 400a274:	2023883a 	mov	r17,r4
 400a278:	28001c16 	blt	r5,zero,400a2ec <__smakebuf_r+0xa4>
 400a27c:	d80d883a 	mov	r6,sp
 400a280:	400dc640 	call	400dc64 <_fstat_r>
 400a284:	10001816 	blt	r2,zero,400a2e8 <__smakebuf_r+0xa0>
 400a288:	d8800117 	ldw	r2,4(sp)
 400a28c:	00e00014 	movui	r3,32768
 400a290:	10bc000c 	andi	r2,r2,61440
 400a294:	14c80020 	cmpeqi	r19,r2,8192
 400a298:	10c03726 	beq	r2,r3,400a378 <__smakebuf_r+0x130>
 400a29c:	80c0030b 	ldhu	r3,12(r16)
 400a2a0:	18c20014 	ori	r3,r3,2048
 400a2a4:	80c0030d 	sth	r3,12(r16)
 400a2a8:	00c80004 	movi	r3,8192
 400a2ac:	10c0521e 	bne	r2,r3,400a3f8 <__smakebuf_r+0x1b0>
 400a2b0:	8140038f 	ldh	r5,14(r16)
 400a2b4:	8809883a 	mov	r4,r17
 400a2b8:	400dcc00 	call	400dcc0 <_isatty_r>
 400a2bc:	10004c26 	beq	r2,zero,400a3f0 <__smakebuf_r+0x1a8>
 400a2c0:	8080030b 	ldhu	r2,12(r16)
 400a2c4:	80c010c4 	addi	r3,r16,67
 400a2c8:	80c00015 	stw	r3,0(r16)
 400a2cc:	10800054 	ori	r2,r2,1
 400a2d0:	8080030d 	sth	r2,12(r16)
 400a2d4:	00800044 	movi	r2,1
 400a2d8:	80c00415 	stw	r3,16(r16)
 400a2dc:	80800515 	stw	r2,20(r16)
 400a2e0:	04810004 	movi	r18,1024
 400a2e4:	00000706 	br	400a304 <__smakebuf_r+0xbc>
 400a2e8:	8080030b 	ldhu	r2,12(r16)
 400a2ec:	10c0200c 	andi	r3,r2,128
 400a2f0:	18001f1e 	bne	r3,zero,400a370 <__smakebuf_r+0x128>
 400a2f4:	04810004 	movi	r18,1024
 400a2f8:	10820014 	ori	r2,r2,2048
 400a2fc:	8080030d 	sth	r2,12(r16)
 400a300:	0027883a 	mov	r19,zero
 400a304:	900b883a 	mov	r5,r18
 400a308:	8809883a 	mov	r4,r17
 400a30c:	40046100 	call	4004610 <_malloc_r>
 400a310:	10002c26 	beq	r2,zero,400a3c4 <__smakebuf_r+0x17c>
 400a314:	80c0030b 	ldhu	r3,12(r16)
 400a318:	01010074 	movhi	r4,1025
 400a31c:	2124d004 	addi	r4,r4,-27840
 400a320:	89000f15 	stw	r4,60(r17)
 400a324:	18c02014 	ori	r3,r3,128
 400a328:	80c0030d 	sth	r3,12(r16)
 400a32c:	80800015 	stw	r2,0(r16)
 400a330:	80800415 	stw	r2,16(r16)
 400a334:	84800515 	stw	r18,20(r16)
 400a338:	98001a1e 	bne	r19,zero,400a3a4 <__smakebuf_r+0x15c>
 400a33c:	dfc01317 	ldw	ra,76(sp)
 400a340:	dcc01217 	ldw	r19,72(sp)
 400a344:	dc801117 	ldw	r18,68(sp)
 400a348:	dc401017 	ldw	r17,64(sp)
 400a34c:	dc000f17 	ldw	r16,60(sp)
 400a350:	dec01404 	addi	sp,sp,80
 400a354:	f800283a 	ret
 400a358:	288010c4 	addi	r2,r5,67
 400a35c:	28800015 	stw	r2,0(r5)
 400a360:	28800415 	stw	r2,16(r5)
 400a364:	00800044 	movi	r2,1
 400a368:	28800515 	stw	r2,20(r5)
 400a36c:	f800283a 	ret
 400a370:	04801004 	movi	r18,64
 400a374:	003fe006 	br	400a2f8 <__alt_data_end+0xfc00a2f8>
 400a378:	81000a17 	ldw	r4,40(r16)
 400a37c:	00c10074 	movhi	r3,1025
 400a380:	18efc504 	addi	r3,r3,-16620
 400a384:	20ffc51e 	bne	r4,r3,400a29c <__alt_data_end+0xfc00a29c>
 400a388:	8080030b 	ldhu	r2,12(r16)
 400a38c:	04810004 	movi	r18,1024
 400a390:	84801315 	stw	r18,76(r16)
 400a394:	1484b03a 	or	r2,r2,r18
 400a398:	8080030d 	sth	r2,12(r16)
 400a39c:	0027883a 	mov	r19,zero
 400a3a0:	003fd806 	br	400a304 <__alt_data_end+0xfc00a304>
 400a3a4:	8140038f 	ldh	r5,14(r16)
 400a3a8:	8809883a 	mov	r4,r17
 400a3ac:	400dcc00 	call	400dcc0 <_isatty_r>
 400a3b0:	103fe226 	beq	r2,zero,400a33c <__alt_data_end+0xfc00a33c>
 400a3b4:	8080030b 	ldhu	r2,12(r16)
 400a3b8:	10800054 	ori	r2,r2,1
 400a3bc:	8080030d 	sth	r2,12(r16)
 400a3c0:	003fde06 	br	400a33c <__alt_data_end+0xfc00a33c>
 400a3c4:	8080030b 	ldhu	r2,12(r16)
 400a3c8:	10c0800c 	andi	r3,r2,512
 400a3cc:	183fdb1e 	bne	r3,zero,400a33c <__alt_data_end+0xfc00a33c>
 400a3d0:	10800094 	ori	r2,r2,2
 400a3d4:	80c010c4 	addi	r3,r16,67
 400a3d8:	8080030d 	sth	r2,12(r16)
 400a3dc:	00800044 	movi	r2,1
 400a3e0:	80c00015 	stw	r3,0(r16)
 400a3e4:	80c00415 	stw	r3,16(r16)
 400a3e8:	80800515 	stw	r2,20(r16)
 400a3ec:	003fd306 	br	400a33c <__alt_data_end+0xfc00a33c>
 400a3f0:	04810004 	movi	r18,1024
 400a3f4:	003fc306 	br	400a304 <__alt_data_end+0xfc00a304>
 400a3f8:	0027883a 	mov	r19,zero
 400a3fc:	04810004 	movi	r18,1024
 400a400:	003fc006 	br	400a304 <__alt_data_end+0xfc00a304>

0400a404 <memchr>:
 400a404:	208000cc 	andi	r2,r4,3
 400a408:	280f883a 	mov	r7,r5
 400a40c:	10003426 	beq	r2,zero,400a4e0 <memchr+0xdc>
 400a410:	30bfffc4 	addi	r2,r6,-1
 400a414:	30001a26 	beq	r6,zero,400a480 <memchr+0x7c>
 400a418:	20c00003 	ldbu	r3,0(r4)
 400a41c:	29803fcc 	andi	r6,r5,255
 400a420:	30c0051e 	bne	r6,r3,400a438 <memchr+0x34>
 400a424:	00001806 	br	400a488 <memchr+0x84>
 400a428:	10001526 	beq	r2,zero,400a480 <memchr+0x7c>
 400a42c:	20c00003 	ldbu	r3,0(r4)
 400a430:	10bfffc4 	addi	r2,r2,-1
 400a434:	30c01426 	beq	r6,r3,400a488 <memchr+0x84>
 400a438:	21000044 	addi	r4,r4,1
 400a43c:	20c000cc 	andi	r3,r4,3
 400a440:	183ff91e 	bne	r3,zero,400a428 <__alt_data_end+0xfc00a428>
 400a444:	020000c4 	movi	r8,3
 400a448:	40801136 	bltu	r8,r2,400a490 <memchr+0x8c>
 400a44c:	10000c26 	beq	r2,zero,400a480 <memchr+0x7c>
 400a450:	20c00003 	ldbu	r3,0(r4)
 400a454:	29403fcc 	andi	r5,r5,255
 400a458:	28c00b26 	beq	r5,r3,400a488 <memchr+0x84>
 400a45c:	20c00044 	addi	r3,r4,1
 400a460:	39803fcc 	andi	r6,r7,255
 400a464:	2089883a 	add	r4,r4,r2
 400a468:	00000306 	br	400a478 <memchr+0x74>
 400a46c:	18c00044 	addi	r3,r3,1
 400a470:	197fffc3 	ldbu	r5,-1(r3)
 400a474:	31400526 	beq	r6,r5,400a48c <memchr+0x88>
 400a478:	1805883a 	mov	r2,r3
 400a47c:	20fffb1e 	bne	r4,r3,400a46c <__alt_data_end+0xfc00a46c>
 400a480:	0005883a 	mov	r2,zero
 400a484:	f800283a 	ret
 400a488:	2005883a 	mov	r2,r4
 400a48c:	f800283a 	ret
 400a490:	28c03fcc 	andi	r3,r5,255
 400a494:	1812923a 	slli	r9,r3,8
 400a498:	02ffbff4 	movhi	r11,65279
 400a49c:	02a02074 	movhi	r10,32897
 400a4a0:	48d2b03a 	or	r9,r9,r3
 400a4a4:	4806943a 	slli	r3,r9,16
 400a4a8:	5affbfc4 	addi	r11,r11,-257
 400a4ac:	52a02004 	addi	r10,r10,-32640
 400a4b0:	48d2b03a 	or	r9,r9,r3
 400a4b4:	20c00017 	ldw	r3,0(r4)
 400a4b8:	48c6f03a 	xor	r3,r9,r3
 400a4bc:	1acd883a 	add	r6,r3,r11
 400a4c0:	00c6303a 	nor	r3,zero,r3
 400a4c4:	30c6703a 	and	r3,r6,r3
 400a4c8:	1a86703a 	and	r3,r3,r10
 400a4cc:	183fe01e 	bne	r3,zero,400a450 <__alt_data_end+0xfc00a450>
 400a4d0:	10bfff04 	addi	r2,r2,-4
 400a4d4:	21000104 	addi	r4,r4,4
 400a4d8:	40bff636 	bltu	r8,r2,400a4b4 <__alt_data_end+0xfc00a4b4>
 400a4dc:	003fdb06 	br	400a44c <__alt_data_end+0xfc00a44c>
 400a4e0:	3005883a 	mov	r2,r6
 400a4e4:	003fd706 	br	400a444 <__alt_data_end+0xfc00a444>

0400a4e8 <memmove>:
 400a4e8:	2005883a 	mov	r2,r4
 400a4ec:	29000b2e 	bgeu	r5,r4,400a51c <memmove+0x34>
 400a4f0:	298f883a 	add	r7,r5,r6
 400a4f4:	21c0092e 	bgeu	r4,r7,400a51c <memmove+0x34>
 400a4f8:	2187883a 	add	r3,r4,r6
 400a4fc:	198bc83a 	sub	r5,r3,r6
 400a500:	30004826 	beq	r6,zero,400a624 <memmove+0x13c>
 400a504:	39ffffc4 	addi	r7,r7,-1
 400a508:	39000003 	ldbu	r4,0(r7)
 400a50c:	18ffffc4 	addi	r3,r3,-1
 400a510:	19000005 	stb	r4,0(r3)
 400a514:	28fffb1e 	bne	r5,r3,400a504 <__alt_data_end+0xfc00a504>
 400a518:	f800283a 	ret
 400a51c:	00c003c4 	movi	r3,15
 400a520:	1980412e 	bgeu	r3,r6,400a628 <memmove+0x140>
 400a524:	2886b03a 	or	r3,r5,r2
 400a528:	18c000cc 	andi	r3,r3,3
 400a52c:	1800401e 	bne	r3,zero,400a630 <memmove+0x148>
 400a530:	33fffc04 	addi	r15,r6,-16
 400a534:	781ed13a 	srli	r15,r15,4
 400a538:	28c00104 	addi	r3,r5,4
 400a53c:	13400104 	addi	r13,r2,4
 400a540:	781c913a 	slli	r14,r15,4
 400a544:	2b000204 	addi	r12,r5,8
 400a548:	12c00204 	addi	r11,r2,8
 400a54c:	73800504 	addi	r14,r14,20
 400a550:	2a800304 	addi	r10,r5,12
 400a554:	12400304 	addi	r9,r2,12
 400a558:	2b9d883a 	add	r14,r5,r14
 400a55c:	2811883a 	mov	r8,r5
 400a560:	100f883a 	mov	r7,r2
 400a564:	41000017 	ldw	r4,0(r8)
 400a568:	39c00404 	addi	r7,r7,16
 400a56c:	18c00404 	addi	r3,r3,16
 400a570:	393ffc15 	stw	r4,-16(r7)
 400a574:	193ffc17 	ldw	r4,-16(r3)
 400a578:	6b400404 	addi	r13,r13,16
 400a57c:	5ac00404 	addi	r11,r11,16
 400a580:	693ffc15 	stw	r4,-16(r13)
 400a584:	61000017 	ldw	r4,0(r12)
 400a588:	4a400404 	addi	r9,r9,16
 400a58c:	42000404 	addi	r8,r8,16
 400a590:	593ffc15 	stw	r4,-16(r11)
 400a594:	51000017 	ldw	r4,0(r10)
 400a598:	63000404 	addi	r12,r12,16
 400a59c:	52800404 	addi	r10,r10,16
 400a5a0:	493ffc15 	stw	r4,-16(r9)
 400a5a4:	1bbfef1e 	bne	r3,r14,400a564 <__alt_data_end+0xfc00a564>
 400a5a8:	79000044 	addi	r4,r15,1
 400a5ac:	2008913a 	slli	r4,r4,4
 400a5b0:	328003cc 	andi	r10,r6,15
 400a5b4:	02c000c4 	movi	r11,3
 400a5b8:	1107883a 	add	r3,r2,r4
 400a5bc:	290b883a 	add	r5,r5,r4
 400a5c0:	5a801e2e 	bgeu	r11,r10,400a63c <memmove+0x154>
 400a5c4:	1813883a 	mov	r9,r3
 400a5c8:	2811883a 	mov	r8,r5
 400a5cc:	500f883a 	mov	r7,r10
 400a5d0:	41000017 	ldw	r4,0(r8)
 400a5d4:	4a400104 	addi	r9,r9,4
 400a5d8:	39ffff04 	addi	r7,r7,-4
 400a5dc:	493fff15 	stw	r4,-4(r9)
 400a5e0:	42000104 	addi	r8,r8,4
 400a5e4:	59fffa36 	bltu	r11,r7,400a5d0 <__alt_data_end+0xfc00a5d0>
 400a5e8:	513fff04 	addi	r4,r10,-4
 400a5ec:	2008d0ba 	srli	r4,r4,2
 400a5f0:	318000cc 	andi	r6,r6,3
 400a5f4:	21000044 	addi	r4,r4,1
 400a5f8:	2109883a 	add	r4,r4,r4
 400a5fc:	2109883a 	add	r4,r4,r4
 400a600:	1907883a 	add	r3,r3,r4
 400a604:	290b883a 	add	r5,r5,r4
 400a608:	30000b26 	beq	r6,zero,400a638 <memmove+0x150>
 400a60c:	198d883a 	add	r6,r3,r6
 400a610:	29c00003 	ldbu	r7,0(r5)
 400a614:	18c00044 	addi	r3,r3,1
 400a618:	29400044 	addi	r5,r5,1
 400a61c:	19ffffc5 	stb	r7,-1(r3)
 400a620:	19bffb1e 	bne	r3,r6,400a610 <__alt_data_end+0xfc00a610>
 400a624:	f800283a 	ret
 400a628:	1007883a 	mov	r3,r2
 400a62c:	003ff606 	br	400a608 <__alt_data_end+0xfc00a608>
 400a630:	1007883a 	mov	r3,r2
 400a634:	003ff506 	br	400a60c <__alt_data_end+0xfc00a60c>
 400a638:	f800283a 	ret
 400a63c:	500d883a 	mov	r6,r10
 400a640:	003ff106 	br	400a608 <__alt_data_end+0xfc00a608>

0400a644 <_Balloc>:
 400a644:	20801317 	ldw	r2,76(r4)
 400a648:	defffc04 	addi	sp,sp,-16
 400a64c:	dc400115 	stw	r17,4(sp)
 400a650:	dc000015 	stw	r16,0(sp)
 400a654:	dfc00315 	stw	ra,12(sp)
 400a658:	dc800215 	stw	r18,8(sp)
 400a65c:	2023883a 	mov	r17,r4
 400a660:	2821883a 	mov	r16,r5
 400a664:	10000f26 	beq	r2,zero,400a6a4 <_Balloc+0x60>
 400a668:	8407883a 	add	r3,r16,r16
 400a66c:	18c7883a 	add	r3,r3,r3
 400a670:	10c7883a 	add	r3,r2,r3
 400a674:	18800017 	ldw	r2,0(r3)
 400a678:	10001126 	beq	r2,zero,400a6c0 <_Balloc+0x7c>
 400a67c:	11000017 	ldw	r4,0(r2)
 400a680:	19000015 	stw	r4,0(r3)
 400a684:	10000415 	stw	zero,16(r2)
 400a688:	10000315 	stw	zero,12(r2)
 400a68c:	dfc00317 	ldw	ra,12(sp)
 400a690:	dc800217 	ldw	r18,8(sp)
 400a694:	dc400117 	ldw	r17,4(sp)
 400a698:	dc000017 	ldw	r16,0(sp)
 400a69c:	dec00404 	addi	sp,sp,16
 400a6a0:	f800283a 	ret
 400a6a4:	01800844 	movi	r6,33
 400a6a8:	01400104 	movi	r5,4
 400a6ac:	40045340 	call	4004534 <_calloc_r>
 400a6b0:	88801315 	stw	r2,76(r17)
 400a6b4:	103fec1e 	bne	r2,zero,400a668 <__alt_data_end+0xfc00a668>
 400a6b8:	0005883a 	mov	r2,zero
 400a6bc:	003ff306 	br	400a68c <__alt_data_end+0xfc00a68c>
 400a6c0:	01400044 	movi	r5,1
 400a6c4:	2c24983a 	sll	r18,r5,r16
 400a6c8:	8809883a 	mov	r4,r17
 400a6cc:	91800144 	addi	r6,r18,5
 400a6d0:	318d883a 	add	r6,r6,r6
 400a6d4:	318d883a 	add	r6,r6,r6
 400a6d8:	40045340 	call	4004534 <_calloc_r>
 400a6dc:	103ff626 	beq	r2,zero,400a6b8 <__alt_data_end+0xfc00a6b8>
 400a6e0:	14000115 	stw	r16,4(r2)
 400a6e4:	14800215 	stw	r18,8(r2)
 400a6e8:	003fe606 	br	400a684 <__alt_data_end+0xfc00a684>

0400a6ec <_Bfree>:
 400a6ec:	28000826 	beq	r5,zero,400a710 <_Bfree+0x24>
 400a6f0:	28c00117 	ldw	r3,4(r5)
 400a6f4:	20801317 	ldw	r2,76(r4)
 400a6f8:	18c7883a 	add	r3,r3,r3
 400a6fc:	18c7883a 	add	r3,r3,r3
 400a700:	10c5883a 	add	r2,r2,r3
 400a704:	10c00017 	ldw	r3,0(r2)
 400a708:	28c00015 	stw	r3,0(r5)
 400a70c:	11400015 	stw	r5,0(r2)
 400a710:	f800283a 	ret

0400a714 <__multadd>:
 400a714:	defff704 	addi	sp,sp,-36
 400a718:	dc800215 	stw	r18,8(sp)
 400a71c:	2c800417 	ldw	r18,16(r5)
 400a720:	dd800615 	stw	r22,24(sp)
 400a724:	dd400515 	stw	r21,20(sp)
 400a728:	dd000415 	stw	r20,16(sp)
 400a72c:	dcc00315 	stw	r19,12(sp)
 400a730:	dc400115 	stw	r17,4(sp)
 400a734:	dc000015 	stw	r16,0(sp)
 400a738:	dfc00815 	stw	ra,32(sp)
 400a73c:	ddc00715 	stw	r23,28(sp)
 400a740:	2827883a 	mov	r19,r5
 400a744:	2029883a 	mov	r20,r4
 400a748:	3023883a 	mov	r17,r6
 400a74c:	3821883a 	mov	r16,r7
 400a750:	2d400504 	addi	r21,r5,20
 400a754:	002d883a 	mov	r22,zero
 400a758:	adc00017 	ldw	r23,0(r21)
 400a75c:	880b883a 	mov	r5,r17
 400a760:	ad400104 	addi	r21,r21,4
 400a764:	b93fffcc 	andi	r4,r23,65535
 400a768:	40044f40 	call	40044f4 <__mulsi3>
 400a76c:	b808d43a 	srli	r4,r23,16
 400a770:	880b883a 	mov	r5,r17
 400a774:	1421883a 	add	r16,r2,r16
 400a778:	40044f40 	call	40044f4 <__mulsi3>
 400a77c:	800ed43a 	srli	r7,r16,16
 400a780:	80ffffcc 	andi	r3,r16,65535
 400a784:	b5800044 	addi	r22,r22,1
 400a788:	11c5883a 	add	r2,r2,r7
 400a78c:	100e943a 	slli	r7,r2,16
 400a790:	1020d43a 	srli	r16,r2,16
 400a794:	38c7883a 	add	r3,r7,r3
 400a798:	a8ffff15 	stw	r3,-4(r21)
 400a79c:	b4bfee16 	blt	r22,r18,400a758 <__alt_data_end+0xfc00a758>
 400a7a0:	80000926 	beq	r16,zero,400a7c8 <__multadd+0xb4>
 400a7a4:	98800217 	ldw	r2,8(r19)
 400a7a8:	9080130e 	bge	r18,r2,400a7f8 <__multadd+0xe4>
 400a7ac:	90800144 	addi	r2,r18,5
 400a7b0:	1085883a 	add	r2,r2,r2
 400a7b4:	1085883a 	add	r2,r2,r2
 400a7b8:	9885883a 	add	r2,r19,r2
 400a7bc:	14000015 	stw	r16,0(r2)
 400a7c0:	94800044 	addi	r18,r18,1
 400a7c4:	9c800415 	stw	r18,16(r19)
 400a7c8:	9805883a 	mov	r2,r19
 400a7cc:	dfc00817 	ldw	ra,32(sp)
 400a7d0:	ddc00717 	ldw	r23,28(sp)
 400a7d4:	dd800617 	ldw	r22,24(sp)
 400a7d8:	dd400517 	ldw	r21,20(sp)
 400a7dc:	dd000417 	ldw	r20,16(sp)
 400a7e0:	dcc00317 	ldw	r19,12(sp)
 400a7e4:	dc800217 	ldw	r18,8(sp)
 400a7e8:	dc400117 	ldw	r17,4(sp)
 400a7ec:	dc000017 	ldw	r16,0(sp)
 400a7f0:	dec00904 	addi	sp,sp,36
 400a7f4:	f800283a 	ret
 400a7f8:	99400117 	ldw	r5,4(r19)
 400a7fc:	a009883a 	mov	r4,r20
 400a800:	29400044 	addi	r5,r5,1
 400a804:	400a6440 	call	400a644 <_Balloc>
 400a808:	99800417 	ldw	r6,16(r19)
 400a80c:	99400304 	addi	r5,r19,12
 400a810:	11000304 	addi	r4,r2,12
 400a814:	31800084 	addi	r6,r6,2
 400a818:	318d883a 	add	r6,r6,r6
 400a81c:	318d883a 	add	r6,r6,r6
 400a820:	1023883a 	mov	r17,r2
 400a824:	4004e1c0 	call	4004e1c <memcpy>
 400a828:	98000a26 	beq	r19,zero,400a854 <__multadd+0x140>
 400a82c:	98c00117 	ldw	r3,4(r19)
 400a830:	a0801317 	ldw	r2,76(r20)
 400a834:	18c7883a 	add	r3,r3,r3
 400a838:	18c7883a 	add	r3,r3,r3
 400a83c:	10c5883a 	add	r2,r2,r3
 400a840:	10c00017 	ldw	r3,0(r2)
 400a844:	98c00015 	stw	r3,0(r19)
 400a848:	14c00015 	stw	r19,0(r2)
 400a84c:	8827883a 	mov	r19,r17
 400a850:	003fd606 	br	400a7ac <__alt_data_end+0xfc00a7ac>
 400a854:	8827883a 	mov	r19,r17
 400a858:	003fd406 	br	400a7ac <__alt_data_end+0xfc00a7ac>

0400a85c <__s2b>:
 400a85c:	defff904 	addi	sp,sp,-28
 400a860:	dc400115 	stw	r17,4(sp)
 400a864:	dc000015 	stw	r16,0(sp)
 400a868:	2023883a 	mov	r17,r4
 400a86c:	2821883a 	mov	r16,r5
 400a870:	39000204 	addi	r4,r7,8
 400a874:	01400244 	movi	r5,9
 400a878:	dcc00315 	stw	r19,12(sp)
 400a87c:	dc800215 	stw	r18,8(sp)
 400a880:	dfc00615 	stw	ra,24(sp)
 400a884:	dd400515 	stw	r21,20(sp)
 400a888:	dd000415 	stw	r20,16(sp)
 400a88c:	3825883a 	mov	r18,r7
 400a890:	3027883a 	mov	r19,r6
 400a894:	40043400 	call	4004340 <__divsi3>
 400a898:	00c00044 	movi	r3,1
 400a89c:	000b883a 	mov	r5,zero
 400a8a0:	1880030e 	bge	r3,r2,400a8b0 <__s2b+0x54>
 400a8a4:	18c7883a 	add	r3,r3,r3
 400a8a8:	29400044 	addi	r5,r5,1
 400a8ac:	18bffd16 	blt	r3,r2,400a8a4 <__alt_data_end+0xfc00a8a4>
 400a8b0:	8809883a 	mov	r4,r17
 400a8b4:	400a6440 	call	400a644 <_Balloc>
 400a8b8:	d8c00717 	ldw	r3,28(sp)
 400a8bc:	10c00515 	stw	r3,20(r2)
 400a8c0:	00c00044 	movi	r3,1
 400a8c4:	10c00415 	stw	r3,16(r2)
 400a8c8:	00c00244 	movi	r3,9
 400a8cc:	1cc0210e 	bge	r3,r19,400a954 <__s2b+0xf8>
 400a8d0:	80eb883a 	add	r21,r16,r3
 400a8d4:	a829883a 	mov	r20,r21
 400a8d8:	84e1883a 	add	r16,r16,r19
 400a8dc:	a1c00007 	ldb	r7,0(r20)
 400a8e0:	01800284 	movi	r6,10
 400a8e4:	a5000044 	addi	r20,r20,1
 400a8e8:	100b883a 	mov	r5,r2
 400a8ec:	39fff404 	addi	r7,r7,-48
 400a8f0:	8809883a 	mov	r4,r17
 400a8f4:	400a7140 	call	400a714 <__multadd>
 400a8f8:	a43ff81e 	bne	r20,r16,400a8dc <__alt_data_end+0xfc00a8dc>
 400a8fc:	ace1883a 	add	r16,r21,r19
 400a900:	843ffe04 	addi	r16,r16,-8
 400a904:	9c800a0e 	bge	r19,r18,400a930 <__s2b+0xd4>
 400a908:	94e5c83a 	sub	r18,r18,r19
 400a90c:	84a5883a 	add	r18,r16,r18
 400a910:	81c00007 	ldb	r7,0(r16)
 400a914:	01800284 	movi	r6,10
 400a918:	84000044 	addi	r16,r16,1
 400a91c:	100b883a 	mov	r5,r2
 400a920:	39fff404 	addi	r7,r7,-48
 400a924:	8809883a 	mov	r4,r17
 400a928:	400a7140 	call	400a714 <__multadd>
 400a92c:	84bff81e 	bne	r16,r18,400a910 <__alt_data_end+0xfc00a910>
 400a930:	dfc00617 	ldw	ra,24(sp)
 400a934:	dd400517 	ldw	r21,20(sp)
 400a938:	dd000417 	ldw	r20,16(sp)
 400a93c:	dcc00317 	ldw	r19,12(sp)
 400a940:	dc800217 	ldw	r18,8(sp)
 400a944:	dc400117 	ldw	r17,4(sp)
 400a948:	dc000017 	ldw	r16,0(sp)
 400a94c:	dec00704 	addi	sp,sp,28
 400a950:	f800283a 	ret
 400a954:	84000284 	addi	r16,r16,10
 400a958:	1827883a 	mov	r19,r3
 400a95c:	003fe906 	br	400a904 <__alt_data_end+0xfc00a904>

0400a960 <__hi0bits>:
 400a960:	20bfffec 	andhi	r2,r4,65535
 400a964:	1000141e 	bne	r2,zero,400a9b8 <__hi0bits+0x58>
 400a968:	2008943a 	slli	r4,r4,16
 400a96c:	00800404 	movi	r2,16
 400a970:	20ffc02c 	andhi	r3,r4,65280
 400a974:	1800021e 	bne	r3,zero,400a980 <__hi0bits+0x20>
 400a978:	2008923a 	slli	r4,r4,8
 400a97c:	10800204 	addi	r2,r2,8
 400a980:	20fc002c 	andhi	r3,r4,61440
 400a984:	1800021e 	bne	r3,zero,400a990 <__hi0bits+0x30>
 400a988:	2008913a 	slli	r4,r4,4
 400a98c:	10800104 	addi	r2,r2,4
 400a990:	20f0002c 	andhi	r3,r4,49152
 400a994:	1800031e 	bne	r3,zero,400a9a4 <__hi0bits+0x44>
 400a998:	2109883a 	add	r4,r4,r4
 400a99c:	10800084 	addi	r2,r2,2
 400a9a0:	2109883a 	add	r4,r4,r4
 400a9a4:	20000316 	blt	r4,zero,400a9b4 <__hi0bits+0x54>
 400a9a8:	2110002c 	andhi	r4,r4,16384
 400a9ac:	2000041e 	bne	r4,zero,400a9c0 <__hi0bits+0x60>
 400a9b0:	00800804 	movi	r2,32
 400a9b4:	f800283a 	ret
 400a9b8:	0005883a 	mov	r2,zero
 400a9bc:	003fec06 	br	400a970 <__alt_data_end+0xfc00a970>
 400a9c0:	10800044 	addi	r2,r2,1
 400a9c4:	f800283a 	ret

0400a9c8 <__lo0bits>:
 400a9c8:	20c00017 	ldw	r3,0(r4)
 400a9cc:	188001cc 	andi	r2,r3,7
 400a9d0:	10000826 	beq	r2,zero,400a9f4 <__lo0bits+0x2c>
 400a9d4:	1880004c 	andi	r2,r3,1
 400a9d8:	1000211e 	bne	r2,zero,400aa60 <__lo0bits+0x98>
 400a9dc:	1880008c 	andi	r2,r3,2
 400a9e0:	1000211e 	bne	r2,zero,400aa68 <__lo0bits+0xa0>
 400a9e4:	1806d0ba 	srli	r3,r3,2
 400a9e8:	00800084 	movi	r2,2
 400a9ec:	20c00015 	stw	r3,0(r4)
 400a9f0:	f800283a 	ret
 400a9f4:	18bfffcc 	andi	r2,r3,65535
 400a9f8:	10001326 	beq	r2,zero,400aa48 <__lo0bits+0x80>
 400a9fc:	0005883a 	mov	r2,zero
 400aa00:	19403fcc 	andi	r5,r3,255
 400aa04:	2800021e 	bne	r5,zero,400aa10 <__lo0bits+0x48>
 400aa08:	1806d23a 	srli	r3,r3,8
 400aa0c:	10800204 	addi	r2,r2,8
 400aa10:	194003cc 	andi	r5,r3,15
 400aa14:	2800021e 	bne	r5,zero,400aa20 <__lo0bits+0x58>
 400aa18:	1806d13a 	srli	r3,r3,4
 400aa1c:	10800104 	addi	r2,r2,4
 400aa20:	194000cc 	andi	r5,r3,3
 400aa24:	2800021e 	bne	r5,zero,400aa30 <__lo0bits+0x68>
 400aa28:	1806d0ba 	srli	r3,r3,2
 400aa2c:	10800084 	addi	r2,r2,2
 400aa30:	1940004c 	andi	r5,r3,1
 400aa34:	2800081e 	bne	r5,zero,400aa58 <__lo0bits+0x90>
 400aa38:	1806d07a 	srli	r3,r3,1
 400aa3c:	1800051e 	bne	r3,zero,400aa54 <__lo0bits+0x8c>
 400aa40:	00800804 	movi	r2,32
 400aa44:	f800283a 	ret
 400aa48:	1806d43a 	srli	r3,r3,16
 400aa4c:	00800404 	movi	r2,16
 400aa50:	003feb06 	br	400aa00 <__alt_data_end+0xfc00aa00>
 400aa54:	10800044 	addi	r2,r2,1
 400aa58:	20c00015 	stw	r3,0(r4)
 400aa5c:	f800283a 	ret
 400aa60:	0005883a 	mov	r2,zero
 400aa64:	f800283a 	ret
 400aa68:	1806d07a 	srli	r3,r3,1
 400aa6c:	00800044 	movi	r2,1
 400aa70:	20c00015 	stw	r3,0(r4)
 400aa74:	f800283a 	ret

0400aa78 <__i2b>:
 400aa78:	defffd04 	addi	sp,sp,-12
 400aa7c:	dc000015 	stw	r16,0(sp)
 400aa80:	04000044 	movi	r16,1
 400aa84:	dc400115 	stw	r17,4(sp)
 400aa88:	2823883a 	mov	r17,r5
 400aa8c:	800b883a 	mov	r5,r16
 400aa90:	dfc00215 	stw	ra,8(sp)
 400aa94:	400a6440 	call	400a644 <_Balloc>
 400aa98:	14400515 	stw	r17,20(r2)
 400aa9c:	14000415 	stw	r16,16(r2)
 400aaa0:	dfc00217 	ldw	ra,8(sp)
 400aaa4:	dc400117 	ldw	r17,4(sp)
 400aaa8:	dc000017 	ldw	r16,0(sp)
 400aaac:	dec00304 	addi	sp,sp,12
 400aab0:	f800283a 	ret

0400aab4 <__multiply>:
 400aab4:	deffef04 	addi	sp,sp,-68
 400aab8:	dc400815 	stw	r17,32(sp)
 400aabc:	dc000715 	stw	r16,28(sp)
 400aac0:	34400417 	ldw	r17,16(r6)
 400aac4:	2c000417 	ldw	r16,16(r5)
 400aac8:	dd800d15 	stw	r22,52(sp)
 400aacc:	dc800915 	stw	r18,36(sp)
 400aad0:	dfc01015 	stw	ra,64(sp)
 400aad4:	df000f15 	stw	fp,60(sp)
 400aad8:	ddc00e15 	stw	r23,56(sp)
 400aadc:	dd400c15 	stw	r21,48(sp)
 400aae0:	dd000b15 	stw	r20,44(sp)
 400aae4:	dcc00a15 	stw	r19,40(sp)
 400aae8:	2825883a 	mov	r18,r5
 400aaec:	302d883a 	mov	r22,r6
 400aaf0:	8440050e 	bge	r16,r17,400ab08 <__multiply+0x54>
 400aaf4:	8007883a 	mov	r3,r16
 400aaf8:	3025883a 	mov	r18,r6
 400aafc:	8821883a 	mov	r16,r17
 400ab00:	282d883a 	mov	r22,r5
 400ab04:	1823883a 	mov	r17,r3
 400ab08:	90800217 	ldw	r2,8(r18)
 400ab0c:	8447883a 	add	r3,r16,r17
 400ab10:	d8c00215 	stw	r3,8(sp)
 400ab14:	91400117 	ldw	r5,4(r18)
 400ab18:	10c0010e 	bge	r2,r3,400ab20 <__multiply+0x6c>
 400ab1c:	29400044 	addi	r5,r5,1
 400ab20:	400a6440 	call	400a644 <_Balloc>
 400ab24:	d8c00217 	ldw	r3,8(sp)
 400ab28:	d8800615 	stw	r2,24(sp)
 400ab2c:	18eb883a 	add	r21,r3,r3
 400ab30:	ad6b883a 	add	r21,r21,r21
 400ab34:	10c00504 	addi	r3,r2,20
 400ab38:	1d6b883a 	add	r21,r3,r21
 400ab3c:	d8c00115 	stw	r3,4(sp)
 400ab40:	dd400315 	stw	r21,12(sp)
 400ab44:	1805883a 	mov	r2,r3
 400ab48:	1d40042e 	bgeu	r3,r21,400ab5c <__multiply+0xa8>
 400ab4c:	d8c00317 	ldw	r3,12(sp)
 400ab50:	10000015 	stw	zero,0(r2)
 400ab54:	10800104 	addi	r2,r2,4
 400ab58:	10fffc36 	bltu	r2,r3,400ab4c <__alt_data_end+0xfc00ab4c>
 400ab5c:	8c63883a 	add	r17,r17,r17
 400ab60:	b5800504 	addi	r22,r22,20
 400ab64:	8c63883a 	add	r17,r17,r17
 400ab68:	94800504 	addi	r18,r18,20
 400ab6c:	8421883a 	add	r16,r16,r16
 400ab70:	b463883a 	add	r17,r22,r17
 400ab74:	8421883a 	add	r16,r16,r16
 400ab78:	dd800015 	stw	r22,0(sp)
 400ab7c:	dc800415 	stw	r18,16(sp)
 400ab80:	dc400515 	stw	r17,20(sp)
 400ab84:	9429883a 	add	r20,r18,r16
 400ab88:	b4404f2e 	bgeu	r22,r17,400acc8 <__multiply+0x214>
 400ab8c:	d8c00017 	ldw	r3,0(sp)
 400ab90:	1c800017 	ldw	r18,0(r3)
 400ab94:	947fffcc 	andi	r17,r18,65535
 400ab98:	88001e26 	beq	r17,zero,400ac14 <__multiply+0x160>
 400ab9c:	dd800117 	ldw	r22,4(sp)
 400aba0:	dd400417 	ldw	r21,16(sp)
 400aba4:	0027883a 	mov	r19,zero
 400aba8:	ac800017 	ldw	r18,0(r21)
 400abac:	b4000017 	ldw	r16,0(r22)
 400abb0:	880b883a 	mov	r5,r17
 400abb4:	913fffcc 	andi	r4,r18,65535
 400abb8:	40044f40 	call	40044f4 <__mulsi3>
 400abbc:	9008d43a 	srli	r4,r18,16
 400abc0:	84bfffcc 	andi	r18,r16,65535
 400abc4:	1485883a 	add	r2,r2,r18
 400abc8:	14e5883a 	add	r18,r2,r19
 400abcc:	8020d43a 	srli	r16,r16,16
 400abd0:	9026d43a 	srli	r19,r18,16
 400abd4:	880b883a 	mov	r5,r17
 400abd8:	40044f40 	call	40044f4 <__mulsi3>
 400abdc:	1405883a 	add	r2,r2,r16
 400abe0:	14e1883a 	add	r16,r2,r19
 400abe4:	90ffffcc 	andi	r3,r18,65535
 400abe8:	8024943a 	slli	r18,r16,16
 400abec:	ad400104 	addi	r21,r21,4
 400abf0:	b005883a 	mov	r2,r22
 400abf4:	90c6b03a 	or	r3,r18,r3
 400abf8:	b0c00015 	stw	r3,0(r22)
 400abfc:	8026d43a 	srli	r19,r16,16
 400ac00:	b5800104 	addi	r22,r22,4
 400ac04:	ad3fe836 	bltu	r21,r20,400aba8 <__alt_data_end+0xfc00aba8>
 400ac08:	d8c00017 	ldw	r3,0(sp)
 400ac0c:	14c00115 	stw	r19,4(r2)
 400ac10:	1c800017 	ldw	r18,0(r3)
 400ac14:	9024d43a 	srli	r18,r18,16
 400ac18:	90002226 	beq	r18,zero,400aca4 <__multiply+0x1f0>
 400ac1c:	d8c00117 	ldw	r3,4(sp)
 400ac20:	dd800417 	ldw	r22,16(sp)
 400ac24:	002f883a 	mov	r23,zero
 400ac28:	1f000017 	ldw	fp,0(r3)
 400ac2c:	1823883a 	mov	r17,r3
 400ac30:	182b883a 	mov	r21,r3
 400ac34:	e021883a 	mov	r16,fp
 400ac38:	00000106 	br	400ac40 <__multiply+0x18c>
 400ac3c:	982b883a 	mov	r21,r19
 400ac40:	b100000b 	ldhu	r4,0(r22)
 400ac44:	8020d43a 	srli	r16,r16,16
 400ac48:	900b883a 	mov	r5,r18
 400ac4c:	40044f40 	call	40044f4 <__mulsi3>
 400ac50:	1405883a 	add	r2,r2,r16
 400ac54:	15ef883a 	add	r23,r2,r23
 400ac58:	b804943a 	slli	r2,r23,16
 400ac5c:	e0ffffcc 	andi	r3,fp,65535
 400ac60:	8c400104 	addi	r17,r17,4
 400ac64:	10c6b03a 	or	r3,r2,r3
 400ac68:	88ffff15 	stw	r3,-4(r17)
 400ac6c:	b5800104 	addi	r22,r22,4
 400ac70:	b13fff17 	ldw	r4,-4(r22)
 400ac74:	acc00104 	addi	r19,r21,4
 400ac78:	900b883a 	mov	r5,r18
 400ac7c:	2008d43a 	srli	r4,r4,16
 400ac80:	9c000017 	ldw	r16,0(r19)
 400ac84:	40044f40 	call	40044f4 <__mulsi3>
 400ac88:	b806d43a 	srli	r3,r23,16
 400ac8c:	813fffcc 	andi	r4,r16,65535
 400ac90:	1105883a 	add	r2,r2,r4
 400ac94:	10f9883a 	add	fp,r2,r3
 400ac98:	e02ed43a 	srli	r23,fp,16
 400ac9c:	b53fe736 	bltu	r22,r20,400ac3c <__alt_data_end+0xfc00ac3c>
 400aca0:	af000115 	stw	fp,4(r21)
 400aca4:	d8c00017 	ldw	r3,0(sp)
 400aca8:	d9000517 	ldw	r4,20(sp)
 400acac:	18c00104 	addi	r3,r3,4
 400acb0:	d8c00015 	stw	r3,0(sp)
 400acb4:	d8c00117 	ldw	r3,4(sp)
 400acb8:	18c00104 	addi	r3,r3,4
 400acbc:	d8c00115 	stw	r3,4(sp)
 400acc0:	d8c00017 	ldw	r3,0(sp)
 400acc4:	193fb136 	bltu	r3,r4,400ab8c <__alt_data_end+0xfc00ab8c>
 400acc8:	d8c00217 	ldw	r3,8(sp)
 400accc:	00c00c0e 	bge	zero,r3,400ad00 <__multiply+0x24c>
 400acd0:	d8c00317 	ldw	r3,12(sp)
 400acd4:	18bfff17 	ldw	r2,-4(r3)
 400acd8:	1d7fff04 	addi	r21,r3,-4
 400acdc:	10000326 	beq	r2,zero,400acec <__multiply+0x238>
 400ace0:	00000706 	br	400ad00 <__multiply+0x24c>
 400ace4:	a8800017 	ldw	r2,0(r21)
 400ace8:	1000051e 	bne	r2,zero,400ad00 <__multiply+0x24c>
 400acec:	d8c00217 	ldw	r3,8(sp)
 400acf0:	ad7fff04 	addi	r21,r21,-4
 400acf4:	18ffffc4 	addi	r3,r3,-1
 400acf8:	d8c00215 	stw	r3,8(sp)
 400acfc:	183ff91e 	bne	r3,zero,400ace4 <__alt_data_end+0xfc00ace4>
 400ad00:	d8c00617 	ldw	r3,24(sp)
 400ad04:	d9000217 	ldw	r4,8(sp)
 400ad08:	1805883a 	mov	r2,r3
 400ad0c:	19000415 	stw	r4,16(r3)
 400ad10:	dfc01017 	ldw	ra,64(sp)
 400ad14:	df000f17 	ldw	fp,60(sp)
 400ad18:	ddc00e17 	ldw	r23,56(sp)
 400ad1c:	dd800d17 	ldw	r22,52(sp)
 400ad20:	dd400c17 	ldw	r21,48(sp)
 400ad24:	dd000b17 	ldw	r20,44(sp)
 400ad28:	dcc00a17 	ldw	r19,40(sp)
 400ad2c:	dc800917 	ldw	r18,36(sp)
 400ad30:	dc400817 	ldw	r17,32(sp)
 400ad34:	dc000717 	ldw	r16,28(sp)
 400ad38:	dec01104 	addi	sp,sp,68
 400ad3c:	f800283a 	ret

0400ad40 <__pow5mult>:
 400ad40:	defffa04 	addi	sp,sp,-24
 400ad44:	dcc00315 	stw	r19,12(sp)
 400ad48:	dc000015 	stw	r16,0(sp)
 400ad4c:	dfc00515 	stw	ra,20(sp)
 400ad50:	dd000415 	stw	r20,16(sp)
 400ad54:	dc800215 	stw	r18,8(sp)
 400ad58:	dc400115 	stw	r17,4(sp)
 400ad5c:	308000cc 	andi	r2,r6,3
 400ad60:	3021883a 	mov	r16,r6
 400ad64:	2027883a 	mov	r19,r4
 400ad68:	10002f1e 	bne	r2,zero,400ae28 <__pow5mult+0xe8>
 400ad6c:	2825883a 	mov	r18,r5
 400ad70:	8021d0ba 	srai	r16,r16,2
 400ad74:	80001a26 	beq	r16,zero,400ade0 <__pow5mult+0xa0>
 400ad78:	9c401217 	ldw	r17,72(r19)
 400ad7c:	8800061e 	bne	r17,zero,400ad98 <__pow5mult+0x58>
 400ad80:	00003406 	br	400ae54 <__pow5mult+0x114>
 400ad84:	8021d07a 	srai	r16,r16,1
 400ad88:	80001526 	beq	r16,zero,400ade0 <__pow5mult+0xa0>
 400ad8c:	88800017 	ldw	r2,0(r17)
 400ad90:	10001c26 	beq	r2,zero,400ae04 <__pow5mult+0xc4>
 400ad94:	1023883a 	mov	r17,r2
 400ad98:	8080004c 	andi	r2,r16,1
 400ad9c:	103ff926 	beq	r2,zero,400ad84 <__alt_data_end+0xfc00ad84>
 400ada0:	880d883a 	mov	r6,r17
 400ada4:	900b883a 	mov	r5,r18
 400ada8:	9809883a 	mov	r4,r19
 400adac:	400aab40 	call	400aab4 <__multiply>
 400adb0:	90001b26 	beq	r18,zero,400ae20 <__pow5mult+0xe0>
 400adb4:	91000117 	ldw	r4,4(r18)
 400adb8:	98c01317 	ldw	r3,76(r19)
 400adbc:	8021d07a 	srai	r16,r16,1
 400adc0:	2109883a 	add	r4,r4,r4
 400adc4:	2109883a 	add	r4,r4,r4
 400adc8:	1907883a 	add	r3,r3,r4
 400adcc:	19000017 	ldw	r4,0(r3)
 400add0:	91000015 	stw	r4,0(r18)
 400add4:	1c800015 	stw	r18,0(r3)
 400add8:	1025883a 	mov	r18,r2
 400addc:	803feb1e 	bne	r16,zero,400ad8c <__alt_data_end+0xfc00ad8c>
 400ade0:	9005883a 	mov	r2,r18
 400ade4:	dfc00517 	ldw	ra,20(sp)
 400ade8:	dd000417 	ldw	r20,16(sp)
 400adec:	dcc00317 	ldw	r19,12(sp)
 400adf0:	dc800217 	ldw	r18,8(sp)
 400adf4:	dc400117 	ldw	r17,4(sp)
 400adf8:	dc000017 	ldw	r16,0(sp)
 400adfc:	dec00604 	addi	sp,sp,24
 400ae00:	f800283a 	ret
 400ae04:	880d883a 	mov	r6,r17
 400ae08:	880b883a 	mov	r5,r17
 400ae0c:	9809883a 	mov	r4,r19
 400ae10:	400aab40 	call	400aab4 <__multiply>
 400ae14:	88800015 	stw	r2,0(r17)
 400ae18:	10000015 	stw	zero,0(r2)
 400ae1c:	003fdd06 	br	400ad94 <__alt_data_end+0xfc00ad94>
 400ae20:	1025883a 	mov	r18,r2
 400ae24:	003fd706 	br	400ad84 <__alt_data_end+0xfc00ad84>
 400ae28:	10bfffc4 	addi	r2,r2,-1
 400ae2c:	1085883a 	add	r2,r2,r2
 400ae30:	00c10074 	movhi	r3,1025
 400ae34:	18d95e04 	addi	r3,r3,25976
 400ae38:	1085883a 	add	r2,r2,r2
 400ae3c:	1885883a 	add	r2,r3,r2
 400ae40:	11800017 	ldw	r6,0(r2)
 400ae44:	000f883a 	mov	r7,zero
 400ae48:	400a7140 	call	400a714 <__multadd>
 400ae4c:	1025883a 	mov	r18,r2
 400ae50:	003fc706 	br	400ad70 <__alt_data_end+0xfc00ad70>
 400ae54:	05000044 	movi	r20,1
 400ae58:	a00b883a 	mov	r5,r20
 400ae5c:	9809883a 	mov	r4,r19
 400ae60:	400a6440 	call	400a644 <_Balloc>
 400ae64:	1023883a 	mov	r17,r2
 400ae68:	00809c44 	movi	r2,625
 400ae6c:	88800515 	stw	r2,20(r17)
 400ae70:	8d000415 	stw	r20,16(r17)
 400ae74:	9c401215 	stw	r17,72(r19)
 400ae78:	88000015 	stw	zero,0(r17)
 400ae7c:	003fc606 	br	400ad98 <__alt_data_end+0xfc00ad98>

0400ae80 <__lshift>:
 400ae80:	defff904 	addi	sp,sp,-28
 400ae84:	dd400515 	stw	r21,20(sp)
 400ae88:	dcc00315 	stw	r19,12(sp)
 400ae8c:	302bd17a 	srai	r21,r6,5
 400ae90:	2cc00417 	ldw	r19,16(r5)
 400ae94:	28800217 	ldw	r2,8(r5)
 400ae98:	dd000415 	stw	r20,16(sp)
 400ae9c:	ace7883a 	add	r19,r21,r19
 400aea0:	dc800215 	stw	r18,8(sp)
 400aea4:	dc400115 	stw	r17,4(sp)
 400aea8:	dc000015 	stw	r16,0(sp)
 400aeac:	dfc00615 	stw	ra,24(sp)
 400aeb0:	9c000044 	addi	r16,r19,1
 400aeb4:	2823883a 	mov	r17,r5
 400aeb8:	3029883a 	mov	r20,r6
 400aebc:	2025883a 	mov	r18,r4
 400aec0:	29400117 	ldw	r5,4(r5)
 400aec4:	1400030e 	bge	r2,r16,400aed4 <__lshift+0x54>
 400aec8:	1085883a 	add	r2,r2,r2
 400aecc:	29400044 	addi	r5,r5,1
 400aed0:	143ffd16 	blt	r2,r16,400aec8 <__alt_data_end+0xfc00aec8>
 400aed4:	9009883a 	mov	r4,r18
 400aed8:	400a6440 	call	400a644 <_Balloc>
 400aedc:	10c00504 	addi	r3,r2,20
 400aee0:	0540070e 	bge	zero,r21,400af00 <__lshift+0x80>
 400aee4:	ad6b883a 	add	r21,r21,r21
 400aee8:	ad6b883a 	add	r21,r21,r21
 400aeec:	1809883a 	mov	r4,r3
 400aef0:	1d47883a 	add	r3,r3,r21
 400aef4:	20000015 	stw	zero,0(r4)
 400aef8:	21000104 	addi	r4,r4,4
 400aefc:	193ffd1e 	bne	r3,r4,400aef4 <__alt_data_end+0xfc00aef4>
 400af00:	8a000417 	ldw	r8,16(r17)
 400af04:	89000504 	addi	r4,r17,20
 400af08:	a18007cc 	andi	r6,r20,31
 400af0c:	4211883a 	add	r8,r8,r8
 400af10:	4211883a 	add	r8,r8,r8
 400af14:	2211883a 	add	r8,r4,r8
 400af18:	30002326 	beq	r6,zero,400afa8 <__lshift+0x128>
 400af1c:	02400804 	movi	r9,32
 400af20:	4993c83a 	sub	r9,r9,r6
 400af24:	000b883a 	mov	r5,zero
 400af28:	21c00017 	ldw	r7,0(r4)
 400af2c:	1815883a 	mov	r10,r3
 400af30:	18c00104 	addi	r3,r3,4
 400af34:	398e983a 	sll	r7,r7,r6
 400af38:	21000104 	addi	r4,r4,4
 400af3c:	394ab03a 	or	r5,r7,r5
 400af40:	197fff15 	stw	r5,-4(r3)
 400af44:	217fff17 	ldw	r5,-4(r4)
 400af48:	2a4ad83a 	srl	r5,r5,r9
 400af4c:	223ff636 	bltu	r4,r8,400af28 <__alt_data_end+0xfc00af28>
 400af50:	51400115 	stw	r5,4(r10)
 400af54:	28001a1e 	bne	r5,zero,400afc0 <__lshift+0x140>
 400af58:	843fffc4 	addi	r16,r16,-1
 400af5c:	14000415 	stw	r16,16(r2)
 400af60:	88000826 	beq	r17,zero,400af84 <__lshift+0x104>
 400af64:	89000117 	ldw	r4,4(r17)
 400af68:	90c01317 	ldw	r3,76(r18)
 400af6c:	2109883a 	add	r4,r4,r4
 400af70:	2109883a 	add	r4,r4,r4
 400af74:	1907883a 	add	r3,r3,r4
 400af78:	19000017 	ldw	r4,0(r3)
 400af7c:	89000015 	stw	r4,0(r17)
 400af80:	1c400015 	stw	r17,0(r3)
 400af84:	dfc00617 	ldw	ra,24(sp)
 400af88:	dd400517 	ldw	r21,20(sp)
 400af8c:	dd000417 	ldw	r20,16(sp)
 400af90:	dcc00317 	ldw	r19,12(sp)
 400af94:	dc800217 	ldw	r18,8(sp)
 400af98:	dc400117 	ldw	r17,4(sp)
 400af9c:	dc000017 	ldw	r16,0(sp)
 400afa0:	dec00704 	addi	sp,sp,28
 400afa4:	f800283a 	ret
 400afa8:	21400017 	ldw	r5,0(r4)
 400afac:	18c00104 	addi	r3,r3,4
 400afb0:	21000104 	addi	r4,r4,4
 400afb4:	197fff15 	stw	r5,-4(r3)
 400afb8:	223ffb36 	bltu	r4,r8,400afa8 <__alt_data_end+0xfc00afa8>
 400afbc:	003fe606 	br	400af58 <__alt_data_end+0xfc00af58>
 400afc0:	9c000084 	addi	r16,r19,2
 400afc4:	003fe406 	br	400af58 <__alt_data_end+0xfc00af58>

0400afc8 <__mcmp>:
 400afc8:	20800417 	ldw	r2,16(r4)
 400afcc:	28c00417 	ldw	r3,16(r5)
 400afd0:	10c5c83a 	sub	r2,r2,r3
 400afd4:	1000111e 	bne	r2,zero,400b01c <__mcmp+0x54>
 400afd8:	18c7883a 	add	r3,r3,r3
 400afdc:	18c7883a 	add	r3,r3,r3
 400afe0:	21000504 	addi	r4,r4,20
 400afe4:	29400504 	addi	r5,r5,20
 400afe8:	20c5883a 	add	r2,r4,r3
 400afec:	28cb883a 	add	r5,r5,r3
 400aff0:	00000106 	br	400aff8 <__mcmp+0x30>
 400aff4:	20800a2e 	bgeu	r4,r2,400b020 <__mcmp+0x58>
 400aff8:	10bfff04 	addi	r2,r2,-4
 400affc:	297fff04 	addi	r5,r5,-4
 400b000:	11800017 	ldw	r6,0(r2)
 400b004:	28c00017 	ldw	r3,0(r5)
 400b008:	30fffa26 	beq	r6,r3,400aff4 <__alt_data_end+0xfc00aff4>
 400b00c:	30c00236 	bltu	r6,r3,400b018 <__mcmp+0x50>
 400b010:	00800044 	movi	r2,1
 400b014:	f800283a 	ret
 400b018:	00bfffc4 	movi	r2,-1
 400b01c:	f800283a 	ret
 400b020:	0005883a 	mov	r2,zero
 400b024:	f800283a 	ret

0400b028 <__mdiff>:
 400b028:	28c00417 	ldw	r3,16(r5)
 400b02c:	30800417 	ldw	r2,16(r6)
 400b030:	defffa04 	addi	sp,sp,-24
 400b034:	dcc00315 	stw	r19,12(sp)
 400b038:	dc800215 	stw	r18,8(sp)
 400b03c:	dfc00515 	stw	ra,20(sp)
 400b040:	dd000415 	stw	r20,16(sp)
 400b044:	dc400115 	stw	r17,4(sp)
 400b048:	dc000015 	stw	r16,0(sp)
 400b04c:	1887c83a 	sub	r3,r3,r2
 400b050:	2825883a 	mov	r18,r5
 400b054:	3027883a 	mov	r19,r6
 400b058:	1800141e 	bne	r3,zero,400b0ac <__mdiff+0x84>
 400b05c:	1085883a 	add	r2,r2,r2
 400b060:	1085883a 	add	r2,r2,r2
 400b064:	2a000504 	addi	r8,r5,20
 400b068:	34000504 	addi	r16,r6,20
 400b06c:	4087883a 	add	r3,r8,r2
 400b070:	8085883a 	add	r2,r16,r2
 400b074:	00000106 	br	400b07c <__mdiff+0x54>
 400b078:	40c0592e 	bgeu	r8,r3,400b1e0 <__mdiff+0x1b8>
 400b07c:	18ffff04 	addi	r3,r3,-4
 400b080:	10bfff04 	addi	r2,r2,-4
 400b084:	19c00017 	ldw	r7,0(r3)
 400b088:	11400017 	ldw	r5,0(r2)
 400b08c:	397ffa26 	beq	r7,r5,400b078 <__alt_data_end+0xfc00b078>
 400b090:	3940592e 	bgeu	r7,r5,400b1f8 <__mdiff+0x1d0>
 400b094:	9005883a 	mov	r2,r18
 400b098:	4023883a 	mov	r17,r8
 400b09c:	9825883a 	mov	r18,r19
 400b0a0:	05000044 	movi	r20,1
 400b0a4:	1027883a 	mov	r19,r2
 400b0a8:	00000406 	br	400b0bc <__mdiff+0x94>
 400b0ac:	18005616 	blt	r3,zero,400b208 <__mdiff+0x1e0>
 400b0b0:	34400504 	addi	r17,r6,20
 400b0b4:	2c000504 	addi	r16,r5,20
 400b0b8:	0029883a 	mov	r20,zero
 400b0bc:	91400117 	ldw	r5,4(r18)
 400b0c0:	400a6440 	call	400a644 <_Balloc>
 400b0c4:	92400417 	ldw	r9,16(r18)
 400b0c8:	9b000417 	ldw	r12,16(r19)
 400b0cc:	12c00504 	addi	r11,r2,20
 400b0d0:	4a51883a 	add	r8,r9,r9
 400b0d4:	6319883a 	add	r12,r12,r12
 400b0d8:	4211883a 	add	r8,r8,r8
 400b0dc:	6319883a 	add	r12,r12,r12
 400b0e0:	15000315 	stw	r20,12(r2)
 400b0e4:	8211883a 	add	r8,r16,r8
 400b0e8:	8b19883a 	add	r12,r17,r12
 400b0ec:	0007883a 	mov	r3,zero
 400b0f0:	81400017 	ldw	r5,0(r16)
 400b0f4:	89c00017 	ldw	r7,0(r17)
 400b0f8:	59800104 	addi	r6,r11,4
 400b0fc:	293fffcc 	andi	r4,r5,65535
 400b100:	20c7883a 	add	r3,r4,r3
 400b104:	393fffcc 	andi	r4,r7,65535
 400b108:	1909c83a 	sub	r4,r3,r4
 400b10c:	280ad43a 	srli	r5,r5,16
 400b110:	380ed43a 	srli	r7,r7,16
 400b114:	2007d43a 	srai	r3,r4,16
 400b118:	213fffcc 	andi	r4,r4,65535
 400b11c:	29cbc83a 	sub	r5,r5,r7
 400b120:	28c7883a 	add	r3,r5,r3
 400b124:	180a943a 	slli	r5,r3,16
 400b128:	8c400104 	addi	r17,r17,4
 400b12c:	84000104 	addi	r16,r16,4
 400b130:	2908b03a 	or	r4,r5,r4
 400b134:	59000015 	stw	r4,0(r11)
 400b138:	1807d43a 	srai	r3,r3,16
 400b13c:	3015883a 	mov	r10,r6
 400b140:	3017883a 	mov	r11,r6
 400b144:	8b3fea36 	bltu	r17,r12,400b0f0 <__alt_data_end+0xfc00b0f0>
 400b148:	8200162e 	bgeu	r16,r8,400b1a4 <__mdiff+0x17c>
 400b14c:	8017883a 	mov	r11,r16
 400b150:	59400017 	ldw	r5,0(r11)
 400b154:	31800104 	addi	r6,r6,4
 400b158:	5ac00104 	addi	r11,r11,4
 400b15c:	293fffcc 	andi	r4,r5,65535
 400b160:	20c7883a 	add	r3,r4,r3
 400b164:	280ed43a 	srli	r7,r5,16
 400b168:	180bd43a 	srai	r5,r3,16
 400b16c:	193fffcc 	andi	r4,r3,65535
 400b170:	3947883a 	add	r3,r7,r5
 400b174:	180a943a 	slli	r5,r3,16
 400b178:	1807d43a 	srai	r3,r3,16
 400b17c:	2908b03a 	or	r4,r5,r4
 400b180:	313fff15 	stw	r4,-4(r6)
 400b184:	5a3ff236 	bltu	r11,r8,400b150 <__alt_data_end+0xfc00b150>
 400b188:	0406303a 	nor	r3,zero,r16
 400b18c:	1a07883a 	add	r3,r3,r8
 400b190:	1806d0ba 	srli	r3,r3,2
 400b194:	18c00044 	addi	r3,r3,1
 400b198:	18c7883a 	add	r3,r3,r3
 400b19c:	18c7883a 	add	r3,r3,r3
 400b1a0:	50d5883a 	add	r10,r10,r3
 400b1a4:	50ffff04 	addi	r3,r10,-4
 400b1a8:	2000041e 	bne	r4,zero,400b1bc <__mdiff+0x194>
 400b1ac:	18ffff04 	addi	r3,r3,-4
 400b1b0:	19000017 	ldw	r4,0(r3)
 400b1b4:	4a7fffc4 	addi	r9,r9,-1
 400b1b8:	203ffc26 	beq	r4,zero,400b1ac <__alt_data_end+0xfc00b1ac>
 400b1bc:	12400415 	stw	r9,16(r2)
 400b1c0:	dfc00517 	ldw	ra,20(sp)
 400b1c4:	dd000417 	ldw	r20,16(sp)
 400b1c8:	dcc00317 	ldw	r19,12(sp)
 400b1cc:	dc800217 	ldw	r18,8(sp)
 400b1d0:	dc400117 	ldw	r17,4(sp)
 400b1d4:	dc000017 	ldw	r16,0(sp)
 400b1d8:	dec00604 	addi	sp,sp,24
 400b1dc:	f800283a 	ret
 400b1e0:	000b883a 	mov	r5,zero
 400b1e4:	400a6440 	call	400a644 <_Balloc>
 400b1e8:	00c00044 	movi	r3,1
 400b1ec:	10c00415 	stw	r3,16(r2)
 400b1f0:	10000515 	stw	zero,20(r2)
 400b1f4:	003ff206 	br	400b1c0 <__alt_data_end+0xfc00b1c0>
 400b1f8:	8023883a 	mov	r17,r16
 400b1fc:	0029883a 	mov	r20,zero
 400b200:	4021883a 	mov	r16,r8
 400b204:	003fad06 	br	400b0bc <__alt_data_end+0xfc00b0bc>
 400b208:	9005883a 	mov	r2,r18
 400b20c:	94400504 	addi	r17,r18,20
 400b210:	9c000504 	addi	r16,r19,20
 400b214:	9825883a 	mov	r18,r19
 400b218:	05000044 	movi	r20,1
 400b21c:	1027883a 	mov	r19,r2
 400b220:	003fa606 	br	400b0bc <__alt_data_end+0xfc00b0bc>

0400b224 <__ulp>:
 400b224:	295ffc2c 	andhi	r5,r5,32752
 400b228:	00bf3034 	movhi	r2,64704
 400b22c:	2887883a 	add	r3,r5,r2
 400b230:	00c0020e 	bge	zero,r3,400b23c <__ulp+0x18>
 400b234:	0005883a 	mov	r2,zero
 400b238:	f800283a 	ret
 400b23c:	00c7c83a 	sub	r3,zero,r3
 400b240:	1807d53a 	srai	r3,r3,20
 400b244:	008004c4 	movi	r2,19
 400b248:	10c00b0e 	bge	r2,r3,400b278 <__ulp+0x54>
 400b24c:	18bffb04 	addi	r2,r3,-20
 400b250:	01000784 	movi	r4,30
 400b254:	0007883a 	mov	r3,zero
 400b258:	20800516 	blt	r4,r2,400b270 <__ulp+0x4c>
 400b25c:	010007c4 	movi	r4,31
 400b260:	2089c83a 	sub	r4,r4,r2
 400b264:	00800044 	movi	r2,1
 400b268:	1104983a 	sll	r2,r2,r4
 400b26c:	f800283a 	ret
 400b270:	00800044 	movi	r2,1
 400b274:	f800283a 	ret
 400b278:	01400234 	movhi	r5,8
 400b27c:	28c7d83a 	sra	r3,r5,r3
 400b280:	0005883a 	mov	r2,zero
 400b284:	f800283a 	ret

0400b288 <__b2d>:
 400b288:	defffa04 	addi	sp,sp,-24
 400b28c:	dc000015 	stw	r16,0(sp)
 400b290:	24000417 	ldw	r16,16(r4)
 400b294:	dc400115 	stw	r17,4(sp)
 400b298:	24400504 	addi	r17,r4,20
 400b29c:	8421883a 	add	r16,r16,r16
 400b2a0:	8421883a 	add	r16,r16,r16
 400b2a4:	8c21883a 	add	r16,r17,r16
 400b2a8:	dc800215 	stw	r18,8(sp)
 400b2ac:	84bfff17 	ldw	r18,-4(r16)
 400b2b0:	dd000415 	stw	r20,16(sp)
 400b2b4:	dcc00315 	stw	r19,12(sp)
 400b2b8:	9009883a 	mov	r4,r18
 400b2bc:	2829883a 	mov	r20,r5
 400b2c0:	dfc00515 	stw	ra,20(sp)
 400b2c4:	400a9600 	call	400a960 <__hi0bits>
 400b2c8:	00c00804 	movi	r3,32
 400b2cc:	1889c83a 	sub	r4,r3,r2
 400b2d0:	a1000015 	stw	r4,0(r20)
 400b2d4:	01000284 	movi	r4,10
 400b2d8:	84ffff04 	addi	r19,r16,-4
 400b2dc:	20801216 	blt	r4,r2,400b328 <__b2d+0xa0>
 400b2e0:	018002c4 	movi	r6,11
 400b2e4:	308dc83a 	sub	r6,r6,r2
 400b2e8:	9186d83a 	srl	r3,r18,r6
 400b2ec:	18cffc34 	orhi	r3,r3,16368
 400b2f0:	8cc0212e 	bgeu	r17,r19,400b378 <__b2d+0xf0>
 400b2f4:	813ffe17 	ldw	r4,-8(r16)
 400b2f8:	218cd83a 	srl	r6,r4,r6
 400b2fc:	10800544 	addi	r2,r2,21
 400b300:	9084983a 	sll	r2,r18,r2
 400b304:	1184b03a 	or	r2,r2,r6
 400b308:	dfc00517 	ldw	ra,20(sp)
 400b30c:	dd000417 	ldw	r20,16(sp)
 400b310:	dcc00317 	ldw	r19,12(sp)
 400b314:	dc800217 	ldw	r18,8(sp)
 400b318:	dc400117 	ldw	r17,4(sp)
 400b31c:	dc000017 	ldw	r16,0(sp)
 400b320:	dec00604 	addi	sp,sp,24
 400b324:	f800283a 	ret
 400b328:	8cc00f2e 	bgeu	r17,r19,400b368 <__b2d+0xe0>
 400b32c:	117ffd44 	addi	r5,r2,-11
 400b330:	80bffe17 	ldw	r2,-8(r16)
 400b334:	28000e26 	beq	r5,zero,400b370 <__b2d+0xe8>
 400b338:	1949c83a 	sub	r4,r3,r5
 400b33c:	9164983a 	sll	r18,r18,r5
 400b340:	1106d83a 	srl	r3,r2,r4
 400b344:	81bffe04 	addi	r6,r16,-8
 400b348:	948ffc34 	orhi	r18,r18,16368
 400b34c:	90c6b03a 	or	r3,r18,r3
 400b350:	89800e2e 	bgeu	r17,r6,400b38c <__b2d+0x104>
 400b354:	81bffd17 	ldw	r6,-12(r16)
 400b358:	1144983a 	sll	r2,r2,r5
 400b35c:	310ad83a 	srl	r5,r6,r4
 400b360:	2884b03a 	or	r2,r5,r2
 400b364:	003fe806 	br	400b308 <__alt_data_end+0xfc00b308>
 400b368:	10bffd44 	addi	r2,r2,-11
 400b36c:	1000041e 	bne	r2,zero,400b380 <__b2d+0xf8>
 400b370:	90cffc34 	orhi	r3,r18,16368
 400b374:	003fe406 	br	400b308 <__alt_data_end+0xfc00b308>
 400b378:	000d883a 	mov	r6,zero
 400b37c:	003fdf06 	br	400b2fc <__alt_data_end+0xfc00b2fc>
 400b380:	90a4983a 	sll	r18,r18,r2
 400b384:	0005883a 	mov	r2,zero
 400b388:	003ff906 	br	400b370 <__alt_data_end+0xfc00b370>
 400b38c:	1144983a 	sll	r2,r2,r5
 400b390:	003fdd06 	br	400b308 <__alt_data_end+0xfc00b308>

0400b394 <__d2b>:
 400b394:	defff804 	addi	sp,sp,-32
 400b398:	dc000215 	stw	r16,8(sp)
 400b39c:	3021883a 	mov	r16,r6
 400b3a0:	dc400315 	stw	r17,12(sp)
 400b3a4:	8022907a 	slli	r17,r16,1
 400b3a8:	dd000615 	stw	r20,24(sp)
 400b3ac:	2829883a 	mov	r20,r5
 400b3b0:	01400044 	movi	r5,1
 400b3b4:	dcc00515 	stw	r19,20(sp)
 400b3b8:	dc800415 	stw	r18,16(sp)
 400b3bc:	dfc00715 	stw	ra,28(sp)
 400b3c0:	3825883a 	mov	r18,r7
 400b3c4:	8822d57a 	srli	r17,r17,21
 400b3c8:	400a6440 	call	400a644 <_Balloc>
 400b3cc:	1027883a 	mov	r19,r2
 400b3d0:	00800434 	movhi	r2,16
 400b3d4:	10bfffc4 	addi	r2,r2,-1
 400b3d8:	808c703a 	and	r6,r16,r2
 400b3dc:	88000126 	beq	r17,zero,400b3e4 <__d2b+0x50>
 400b3e0:	31800434 	orhi	r6,r6,16
 400b3e4:	d9800015 	stw	r6,0(sp)
 400b3e8:	a0002426 	beq	r20,zero,400b47c <__d2b+0xe8>
 400b3ec:	d9000104 	addi	r4,sp,4
 400b3f0:	dd000115 	stw	r20,4(sp)
 400b3f4:	400a9c80 	call	400a9c8 <__lo0bits>
 400b3f8:	d8c00017 	ldw	r3,0(sp)
 400b3fc:	10002f1e 	bne	r2,zero,400b4bc <__d2b+0x128>
 400b400:	d9000117 	ldw	r4,4(sp)
 400b404:	99000515 	stw	r4,20(r19)
 400b408:	1821003a 	cmpeq	r16,r3,zero
 400b40c:	01000084 	movi	r4,2
 400b410:	2421c83a 	sub	r16,r4,r16
 400b414:	98c00615 	stw	r3,24(r19)
 400b418:	9c000415 	stw	r16,16(r19)
 400b41c:	88001f1e 	bne	r17,zero,400b49c <__d2b+0x108>
 400b420:	10bef384 	addi	r2,r2,-1074
 400b424:	90800015 	stw	r2,0(r18)
 400b428:	00900034 	movhi	r2,16384
 400b42c:	10bfffc4 	addi	r2,r2,-1
 400b430:	8085883a 	add	r2,r16,r2
 400b434:	1085883a 	add	r2,r2,r2
 400b438:	1085883a 	add	r2,r2,r2
 400b43c:	9885883a 	add	r2,r19,r2
 400b440:	11000517 	ldw	r4,20(r2)
 400b444:	8020917a 	slli	r16,r16,5
 400b448:	400a9600 	call	400a960 <__hi0bits>
 400b44c:	d8c00817 	ldw	r3,32(sp)
 400b450:	8085c83a 	sub	r2,r16,r2
 400b454:	18800015 	stw	r2,0(r3)
 400b458:	9805883a 	mov	r2,r19
 400b45c:	dfc00717 	ldw	ra,28(sp)
 400b460:	dd000617 	ldw	r20,24(sp)
 400b464:	dcc00517 	ldw	r19,20(sp)
 400b468:	dc800417 	ldw	r18,16(sp)
 400b46c:	dc400317 	ldw	r17,12(sp)
 400b470:	dc000217 	ldw	r16,8(sp)
 400b474:	dec00804 	addi	sp,sp,32
 400b478:	f800283a 	ret
 400b47c:	d809883a 	mov	r4,sp
 400b480:	400a9c80 	call	400a9c8 <__lo0bits>
 400b484:	d8c00017 	ldw	r3,0(sp)
 400b488:	04000044 	movi	r16,1
 400b48c:	9c000415 	stw	r16,16(r19)
 400b490:	98c00515 	stw	r3,20(r19)
 400b494:	10800804 	addi	r2,r2,32
 400b498:	883fe126 	beq	r17,zero,400b420 <__alt_data_end+0xfc00b420>
 400b49c:	00c00d44 	movi	r3,53
 400b4a0:	8c7ef344 	addi	r17,r17,-1075
 400b4a4:	88a3883a 	add	r17,r17,r2
 400b4a8:	1885c83a 	sub	r2,r3,r2
 400b4ac:	d8c00817 	ldw	r3,32(sp)
 400b4b0:	94400015 	stw	r17,0(r18)
 400b4b4:	18800015 	stw	r2,0(r3)
 400b4b8:	003fe706 	br	400b458 <__alt_data_end+0xfc00b458>
 400b4bc:	01000804 	movi	r4,32
 400b4c0:	2089c83a 	sub	r4,r4,r2
 400b4c4:	1908983a 	sll	r4,r3,r4
 400b4c8:	d9400117 	ldw	r5,4(sp)
 400b4cc:	1886d83a 	srl	r3,r3,r2
 400b4d0:	2148b03a 	or	r4,r4,r5
 400b4d4:	99000515 	stw	r4,20(r19)
 400b4d8:	d8c00015 	stw	r3,0(sp)
 400b4dc:	003fca06 	br	400b408 <__alt_data_end+0xfc00b408>

0400b4e0 <__ratio>:
 400b4e0:	defff904 	addi	sp,sp,-28
 400b4e4:	dc400315 	stw	r17,12(sp)
 400b4e8:	2823883a 	mov	r17,r5
 400b4ec:	d9400104 	addi	r5,sp,4
 400b4f0:	dfc00615 	stw	ra,24(sp)
 400b4f4:	dcc00515 	stw	r19,20(sp)
 400b4f8:	dc800415 	stw	r18,16(sp)
 400b4fc:	2027883a 	mov	r19,r4
 400b500:	dc000215 	stw	r16,8(sp)
 400b504:	400b2880 	call	400b288 <__b2d>
 400b508:	d80b883a 	mov	r5,sp
 400b50c:	8809883a 	mov	r4,r17
 400b510:	1025883a 	mov	r18,r2
 400b514:	1821883a 	mov	r16,r3
 400b518:	400b2880 	call	400b288 <__b2d>
 400b51c:	8a000417 	ldw	r8,16(r17)
 400b520:	99000417 	ldw	r4,16(r19)
 400b524:	d9400117 	ldw	r5,4(sp)
 400b528:	2209c83a 	sub	r4,r4,r8
 400b52c:	2010917a 	slli	r8,r4,5
 400b530:	d9000017 	ldw	r4,0(sp)
 400b534:	2909c83a 	sub	r4,r5,r4
 400b538:	4109883a 	add	r4,r8,r4
 400b53c:	01000e0e 	bge	zero,r4,400b578 <__ratio+0x98>
 400b540:	2008953a 	slli	r4,r4,20
 400b544:	2421883a 	add	r16,r4,r16
 400b548:	100d883a 	mov	r6,r2
 400b54c:	180f883a 	mov	r7,r3
 400b550:	9009883a 	mov	r4,r18
 400b554:	800b883a 	mov	r5,r16
 400b558:	400f4280 	call	400f428 <__divdf3>
 400b55c:	dfc00617 	ldw	ra,24(sp)
 400b560:	dcc00517 	ldw	r19,20(sp)
 400b564:	dc800417 	ldw	r18,16(sp)
 400b568:	dc400317 	ldw	r17,12(sp)
 400b56c:	dc000217 	ldw	r16,8(sp)
 400b570:	dec00704 	addi	sp,sp,28
 400b574:	f800283a 	ret
 400b578:	2008953a 	slli	r4,r4,20
 400b57c:	1907c83a 	sub	r3,r3,r4
 400b580:	003ff106 	br	400b548 <__alt_data_end+0xfc00b548>

0400b584 <_mprec_log10>:
 400b584:	defffe04 	addi	sp,sp,-8
 400b588:	dc000015 	stw	r16,0(sp)
 400b58c:	dfc00115 	stw	ra,4(sp)
 400b590:	008005c4 	movi	r2,23
 400b594:	2021883a 	mov	r16,r4
 400b598:	11000d0e 	bge	r2,r4,400b5d0 <_mprec_log10+0x4c>
 400b59c:	0005883a 	mov	r2,zero
 400b5a0:	00cffc34 	movhi	r3,16368
 400b5a4:	843fffc4 	addi	r16,r16,-1
 400b5a8:	000d883a 	mov	r6,zero
 400b5ac:	01d00934 	movhi	r7,16420
 400b5b0:	1009883a 	mov	r4,r2
 400b5b4:	180b883a 	mov	r5,r3
 400b5b8:	40100500 	call	4010050 <__muldf3>
 400b5bc:	803ff91e 	bne	r16,zero,400b5a4 <__alt_data_end+0xfc00b5a4>
 400b5c0:	dfc00117 	ldw	ra,4(sp)
 400b5c4:	dc000017 	ldw	r16,0(sp)
 400b5c8:	dec00204 	addi	sp,sp,8
 400b5cc:	f800283a 	ret
 400b5d0:	202090fa 	slli	r16,r4,3
 400b5d4:	00810074 	movhi	r2,1025
 400b5d8:	10997504 	addi	r2,r2,26068
 400b5dc:	1421883a 	add	r16,r2,r16
 400b5e0:	80800017 	ldw	r2,0(r16)
 400b5e4:	80c00117 	ldw	r3,4(r16)
 400b5e8:	dfc00117 	ldw	ra,4(sp)
 400b5ec:	dc000017 	ldw	r16,0(sp)
 400b5f0:	dec00204 	addi	sp,sp,8
 400b5f4:	f800283a 	ret

0400b5f8 <__copybits>:
 400b5f8:	297fffc4 	addi	r5,r5,-1
 400b5fc:	280fd17a 	srai	r7,r5,5
 400b600:	30c00417 	ldw	r3,16(r6)
 400b604:	30800504 	addi	r2,r6,20
 400b608:	39c00044 	addi	r7,r7,1
 400b60c:	18c7883a 	add	r3,r3,r3
 400b610:	39cf883a 	add	r7,r7,r7
 400b614:	18c7883a 	add	r3,r3,r3
 400b618:	39cf883a 	add	r7,r7,r7
 400b61c:	10c7883a 	add	r3,r2,r3
 400b620:	21cf883a 	add	r7,r4,r7
 400b624:	10c00d2e 	bgeu	r2,r3,400b65c <__copybits+0x64>
 400b628:	200b883a 	mov	r5,r4
 400b62c:	12000017 	ldw	r8,0(r2)
 400b630:	29400104 	addi	r5,r5,4
 400b634:	10800104 	addi	r2,r2,4
 400b638:	2a3fff15 	stw	r8,-4(r5)
 400b63c:	10fffb36 	bltu	r2,r3,400b62c <__alt_data_end+0xfc00b62c>
 400b640:	1985c83a 	sub	r2,r3,r6
 400b644:	10bffac4 	addi	r2,r2,-21
 400b648:	1004d0ba 	srli	r2,r2,2
 400b64c:	10800044 	addi	r2,r2,1
 400b650:	1085883a 	add	r2,r2,r2
 400b654:	1085883a 	add	r2,r2,r2
 400b658:	2089883a 	add	r4,r4,r2
 400b65c:	21c0032e 	bgeu	r4,r7,400b66c <__copybits+0x74>
 400b660:	20000015 	stw	zero,0(r4)
 400b664:	21000104 	addi	r4,r4,4
 400b668:	21fffd36 	bltu	r4,r7,400b660 <__alt_data_end+0xfc00b660>
 400b66c:	f800283a 	ret

0400b670 <__any_on>:
 400b670:	20c00417 	ldw	r3,16(r4)
 400b674:	2805d17a 	srai	r2,r5,5
 400b678:	21000504 	addi	r4,r4,20
 400b67c:	18800d0e 	bge	r3,r2,400b6b4 <__any_on+0x44>
 400b680:	18c7883a 	add	r3,r3,r3
 400b684:	18c7883a 	add	r3,r3,r3
 400b688:	20c7883a 	add	r3,r4,r3
 400b68c:	20c0192e 	bgeu	r4,r3,400b6f4 <__any_on+0x84>
 400b690:	18bfff17 	ldw	r2,-4(r3)
 400b694:	18ffff04 	addi	r3,r3,-4
 400b698:	1000041e 	bne	r2,zero,400b6ac <__any_on+0x3c>
 400b69c:	20c0142e 	bgeu	r4,r3,400b6f0 <__any_on+0x80>
 400b6a0:	18ffff04 	addi	r3,r3,-4
 400b6a4:	19400017 	ldw	r5,0(r3)
 400b6a8:	283ffc26 	beq	r5,zero,400b69c <__alt_data_end+0xfc00b69c>
 400b6ac:	00800044 	movi	r2,1
 400b6b0:	f800283a 	ret
 400b6b4:	10c00a0e 	bge	r2,r3,400b6e0 <__any_on+0x70>
 400b6b8:	1085883a 	add	r2,r2,r2
 400b6bc:	1085883a 	add	r2,r2,r2
 400b6c0:	294007cc 	andi	r5,r5,31
 400b6c4:	2087883a 	add	r3,r4,r2
 400b6c8:	283ff026 	beq	r5,zero,400b68c <__alt_data_end+0xfc00b68c>
 400b6cc:	19800017 	ldw	r6,0(r3)
 400b6d0:	3144d83a 	srl	r2,r6,r5
 400b6d4:	114a983a 	sll	r5,r2,r5
 400b6d8:	317ff41e 	bne	r6,r5,400b6ac <__alt_data_end+0xfc00b6ac>
 400b6dc:	003feb06 	br	400b68c <__alt_data_end+0xfc00b68c>
 400b6e0:	1085883a 	add	r2,r2,r2
 400b6e4:	1085883a 	add	r2,r2,r2
 400b6e8:	2087883a 	add	r3,r4,r2
 400b6ec:	003fe706 	br	400b68c <__alt_data_end+0xfc00b68c>
 400b6f0:	f800283a 	ret
 400b6f4:	0005883a 	mov	r2,zero
 400b6f8:	f800283a 	ret

0400b6fc <_putc_r>:
 400b6fc:	defffc04 	addi	sp,sp,-16
 400b700:	dc000215 	stw	r16,8(sp)
 400b704:	dfc00315 	stw	ra,12(sp)
 400b708:	2021883a 	mov	r16,r4
 400b70c:	20000226 	beq	r4,zero,400b718 <_putc_r+0x1c>
 400b710:	20800e17 	ldw	r2,56(r4)
 400b714:	10001b26 	beq	r2,zero,400b784 <_putc_r+0x88>
 400b718:	30800217 	ldw	r2,8(r6)
 400b71c:	10bfffc4 	addi	r2,r2,-1
 400b720:	30800215 	stw	r2,8(r6)
 400b724:	10000a16 	blt	r2,zero,400b750 <_putc_r+0x54>
 400b728:	30800017 	ldw	r2,0(r6)
 400b72c:	11400005 	stb	r5,0(r2)
 400b730:	30800017 	ldw	r2,0(r6)
 400b734:	10c00044 	addi	r3,r2,1
 400b738:	30c00015 	stw	r3,0(r6)
 400b73c:	10800003 	ldbu	r2,0(r2)
 400b740:	dfc00317 	ldw	ra,12(sp)
 400b744:	dc000217 	ldw	r16,8(sp)
 400b748:	dec00404 	addi	sp,sp,16
 400b74c:	f800283a 	ret
 400b750:	30c00617 	ldw	r3,24(r6)
 400b754:	10c00616 	blt	r2,r3,400b770 <_putc_r+0x74>
 400b758:	30800017 	ldw	r2,0(r6)
 400b75c:	00c00284 	movi	r3,10
 400b760:	11400005 	stb	r5,0(r2)
 400b764:	30800017 	ldw	r2,0(r6)
 400b768:	11400003 	ldbu	r5,0(r2)
 400b76c:	28fff11e 	bne	r5,r3,400b734 <__alt_data_end+0xfc00b734>
 400b770:	8009883a 	mov	r4,r16
 400b774:	dfc00317 	ldw	ra,12(sp)
 400b778:	dc000217 	ldw	r16,8(sp)
 400b77c:	dec00404 	addi	sp,sp,16
 400b780:	400d74c1 	jmpi	400d74c <__swbuf_r>
 400b784:	d9400015 	stw	r5,0(sp)
 400b788:	d9800115 	stw	r6,4(sp)
 400b78c:	40096980 	call	4009698 <__sinit>
 400b790:	d9800117 	ldw	r6,4(sp)
 400b794:	d9400017 	ldw	r5,0(sp)
 400b798:	003fdf06 	br	400b718 <__alt_data_end+0xfc00b718>

0400b79c <putc>:
 400b79c:	008100b4 	movhi	r2,1026
 400b7a0:	defffc04 	addi	sp,sp,-16
 400b7a4:	10a16104 	addi	r2,r2,-31356
 400b7a8:	dc000115 	stw	r16,4(sp)
 400b7ac:	14000017 	ldw	r16,0(r2)
 400b7b0:	dc400215 	stw	r17,8(sp)
 400b7b4:	dfc00315 	stw	ra,12(sp)
 400b7b8:	2023883a 	mov	r17,r4
 400b7bc:	80000226 	beq	r16,zero,400b7c8 <putc+0x2c>
 400b7c0:	80800e17 	ldw	r2,56(r16)
 400b7c4:	10001a26 	beq	r2,zero,400b830 <putc+0x94>
 400b7c8:	28800217 	ldw	r2,8(r5)
 400b7cc:	10bfffc4 	addi	r2,r2,-1
 400b7d0:	28800215 	stw	r2,8(r5)
 400b7d4:	10000b16 	blt	r2,zero,400b804 <putc+0x68>
 400b7d8:	28800017 	ldw	r2,0(r5)
 400b7dc:	14400005 	stb	r17,0(r2)
 400b7e0:	28800017 	ldw	r2,0(r5)
 400b7e4:	10c00044 	addi	r3,r2,1
 400b7e8:	28c00015 	stw	r3,0(r5)
 400b7ec:	10800003 	ldbu	r2,0(r2)
 400b7f0:	dfc00317 	ldw	ra,12(sp)
 400b7f4:	dc400217 	ldw	r17,8(sp)
 400b7f8:	dc000117 	ldw	r16,4(sp)
 400b7fc:	dec00404 	addi	sp,sp,16
 400b800:	f800283a 	ret
 400b804:	28c00617 	ldw	r3,24(r5)
 400b808:	10c00e16 	blt	r2,r3,400b844 <putc+0xa8>
 400b80c:	28800017 	ldw	r2,0(r5)
 400b810:	01000284 	movi	r4,10
 400b814:	14400005 	stb	r17,0(r2)
 400b818:	28800017 	ldw	r2,0(r5)
 400b81c:	10c00003 	ldbu	r3,0(r2)
 400b820:	193ff01e 	bne	r3,r4,400b7e4 <__alt_data_end+0xfc00b7e4>
 400b824:	280d883a 	mov	r6,r5
 400b828:	180b883a 	mov	r5,r3
 400b82c:	00000706 	br	400b84c <putc+0xb0>
 400b830:	8009883a 	mov	r4,r16
 400b834:	d9400015 	stw	r5,0(sp)
 400b838:	40096980 	call	4009698 <__sinit>
 400b83c:	d9400017 	ldw	r5,0(sp)
 400b840:	003fe106 	br	400b7c8 <__alt_data_end+0xfc00b7c8>
 400b844:	280d883a 	mov	r6,r5
 400b848:	880b883a 	mov	r5,r17
 400b84c:	8009883a 	mov	r4,r16
 400b850:	dfc00317 	ldw	ra,12(sp)
 400b854:	dc400217 	ldw	r17,8(sp)
 400b858:	dc000117 	ldw	r16,4(sp)
 400b85c:	dec00404 	addi	sp,sp,16
 400b860:	400d74c1 	jmpi	400d74c <__swbuf_r>

0400b864 <_realloc_r>:
 400b864:	defff604 	addi	sp,sp,-40
 400b868:	dc800215 	stw	r18,8(sp)
 400b86c:	dfc00915 	stw	ra,36(sp)
 400b870:	df000815 	stw	fp,32(sp)
 400b874:	ddc00715 	stw	r23,28(sp)
 400b878:	dd800615 	stw	r22,24(sp)
 400b87c:	dd400515 	stw	r21,20(sp)
 400b880:	dd000415 	stw	r20,16(sp)
 400b884:	dcc00315 	stw	r19,12(sp)
 400b888:	dc400115 	stw	r17,4(sp)
 400b88c:	dc000015 	stw	r16,0(sp)
 400b890:	3025883a 	mov	r18,r6
 400b894:	2800b726 	beq	r5,zero,400bb74 <_realloc_r+0x310>
 400b898:	282b883a 	mov	r21,r5
 400b89c:	2029883a 	mov	r20,r4
 400b8a0:	40119bc0 	call	40119bc <__malloc_lock>
 400b8a4:	a8bfff17 	ldw	r2,-4(r21)
 400b8a8:	043fff04 	movi	r16,-4
 400b8ac:	90c002c4 	addi	r3,r18,11
 400b8b0:	01000584 	movi	r4,22
 400b8b4:	acfffe04 	addi	r19,r21,-8
 400b8b8:	1420703a 	and	r16,r2,r16
 400b8bc:	20c0332e 	bgeu	r4,r3,400b98c <_realloc_r+0x128>
 400b8c0:	047ffe04 	movi	r17,-8
 400b8c4:	1c62703a 	and	r17,r3,r17
 400b8c8:	8807883a 	mov	r3,r17
 400b8cc:	88005816 	blt	r17,zero,400ba30 <_realloc_r+0x1cc>
 400b8d0:	8c805736 	bltu	r17,r18,400ba30 <_realloc_r+0x1cc>
 400b8d4:	80c0300e 	bge	r16,r3,400b998 <_realloc_r+0x134>
 400b8d8:	07010074 	movhi	fp,1025
 400b8dc:	e71b9704 	addi	fp,fp,28252
 400b8e0:	e1c00217 	ldw	r7,8(fp)
 400b8e4:	9c09883a 	add	r4,r19,r16
 400b8e8:	22000117 	ldw	r8,4(r4)
 400b8ec:	21c06326 	beq	r4,r7,400ba7c <_realloc_r+0x218>
 400b8f0:	017fff84 	movi	r5,-2
 400b8f4:	414a703a 	and	r5,r8,r5
 400b8f8:	214b883a 	add	r5,r4,r5
 400b8fc:	29800117 	ldw	r6,4(r5)
 400b900:	3180004c 	andi	r6,r6,1
 400b904:	30003f26 	beq	r6,zero,400ba04 <_realloc_r+0x1a0>
 400b908:	1080004c 	andi	r2,r2,1
 400b90c:	10008326 	beq	r2,zero,400bb1c <_realloc_r+0x2b8>
 400b910:	900b883a 	mov	r5,r18
 400b914:	a009883a 	mov	r4,r20
 400b918:	40046100 	call	4004610 <_malloc_r>
 400b91c:	1025883a 	mov	r18,r2
 400b920:	10011e26 	beq	r2,zero,400bd9c <_realloc_r+0x538>
 400b924:	a93fff17 	ldw	r4,-4(r21)
 400b928:	10fffe04 	addi	r3,r2,-8
 400b92c:	00bfff84 	movi	r2,-2
 400b930:	2084703a 	and	r2,r4,r2
 400b934:	9885883a 	add	r2,r19,r2
 400b938:	1880ee26 	beq	r3,r2,400bcf4 <_realloc_r+0x490>
 400b93c:	81bfff04 	addi	r6,r16,-4
 400b940:	00800904 	movi	r2,36
 400b944:	1180b836 	bltu	r2,r6,400bc28 <_realloc_r+0x3c4>
 400b948:	00c004c4 	movi	r3,19
 400b94c:	19809636 	bltu	r3,r6,400bba8 <_realloc_r+0x344>
 400b950:	9005883a 	mov	r2,r18
 400b954:	a807883a 	mov	r3,r21
 400b958:	19000017 	ldw	r4,0(r3)
 400b95c:	11000015 	stw	r4,0(r2)
 400b960:	19000117 	ldw	r4,4(r3)
 400b964:	11000115 	stw	r4,4(r2)
 400b968:	18c00217 	ldw	r3,8(r3)
 400b96c:	10c00215 	stw	r3,8(r2)
 400b970:	a80b883a 	mov	r5,r21
 400b974:	a009883a 	mov	r4,r20
 400b978:	400980c0 	call	400980c <_free_r>
 400b97c:	a009883a 	mov	r4,r20
 400b980:	40119e00 	call	40119e0 <__malloc_unlock>
 400b984:	9005883a 	mov	r2,r18
 400b988:	00001206 	br	400b9d4 <_realloc_r+0x170>
 400b98c:	00c00404 	movi	r3,16
 400b990:	1823883a 	mov	r17,r3
 400b994:	003fce06 	br	400b8d0 <__alt_data_end+0xfc00b8d0>
 400b998:	a825883a 	mov	r18,r21
 400b99c:	8445c83a 	sub	r2,r16,r17
 400b9a0:	00c003c4 	movi	r3,15
 400b9a4:	18802636 	bltu	r3,r2,400ba40 <_realloc_r+0x1dc>
 400b9a8:	99800117 	ldw	r6,4(r19)
 400b9ac:	9c07883a 	add	r3,r19,r16
 400b9b0:	3180004c 	andi	r6,r6,1
 400b9b4:	3420b03a 	or	r16,r6,r16
 400b9b8:	9c000115 	stw	r16,4(r19)
 400b9bc:	18800117 	ldw	r2,4(r3)
 400b9c0:	10800054 	ori	r2,r2,1
 400b9c4:	18800115 	stw	r2,4(r3)
 400b9c8:	a009883a 	mov	r4,r20
 400b9cc:	40119e00 	call	40119e0 <__malloc_unlock>
 400b9d0:	9005883a 	mov	r2,r18
 400b9d4:	dfc00917 	ldw	ra,36(sp)
 400b9d8:	df000817 	ldw	fp,32(sp)
 400b9dc:	ddc00717 	ldw	r23,28(sp)
 400b9e0:	dd800617 	ldw	r22,24(sp)
 400b9e4:	dd400517 	ldw	r21,20(sp)
 400b9e8:	dd000417 	ldw	r20,16(sp)
 400b9ec:	dcc00317 	ldw	r19,12(sp)
 400b9f0:	dc800217 	ldw	r18,8(sp)
 400b9f4:	dc400117 	ldw	r17,4(sp)
 400b9f8:	dc000017 	ldw	r16,0(sp)
 400b9fc:	dec00a04 	addi	sp,sp,40
 400ba00:	f800283a 	ret
 400ba04:	017fff04 	movi	r5,-4
 400ba08:	414a703a 	and	r5,r8,r5
 400ba0c:	814d883a 	add	r6,r16,r5
 400ba10:	30c01f16 	blt	r6,r3,400ba90 <_realloc_r+0x22c>
 400ba14:	20800317 	ldw	r2,12(r4)
 400ba18:	20c00217 	ldw	r3,8(r4)
 400ba1c:	a825883a 	mov	r18,r21
 400ba20:	3021883a 	mov	r16,r6
 400ba24:	18800315 	stw	r2,12(r3)
 400ba28:	10c00215 	stw	r3,8(r2)
 400ba2c:	003fdb06 	br	400b99c <__alt_data_end+0xfc00b99c>
 400ba30:	00800304 	movi	r2,12
 400ba34:	a0800015 	stw	r2,0(r20)
 400ba38:	0005883a 	mov	r2,zero
 400ba3c:	003fe506 	br	400b9d4 <__alt_data_end+0xfc00b9d4>
 400ba40:	98c00117 	ldw	r3,4(r19)
 400ba44:	9c4b883a 	add	r5,r19,r17
 400ba48:	11000054 	ori	r4,r2,1
 400ba4c:	18c0004c 	andi	r3,r3,1
 400ba50:	1c62b03a 	or	r17,r3,r17
 400ba54:	9c400115 	stw	r17,4(r19)
 400ba58:	29000115 	stw	r4,4(r5)
 400ba5c:	2885883a 	add	r2,r5,r2
 400ba60:	10c00117 	ldw	r3,4(r2)
 400ba64:	29400204 	addi	r5,r5,8
 400ba68:	a009883a 	mov	r4,r20
 400ba6c:	18c00054 	ori	r3,r3,1
 400ba70:	10c00115 	stw	r3,4(r2)
 400ba74:	400980c0 	call	400980c <_free_r>
 400ba78:	003fd306 	br	400b9c8 <__alt_data_end+0xfc00b9c8>
 400ba7c:	017fff04 	movi	r5,-4
 400ba80:	414a703a 	and	r5,r8,r5
 400ba84:	89800404 	addi	r6,r17,16
 400ba88:	8151883a 	add	r8,r16,r5
 400ba8c:	4180590e 	bge	r8,r6,400bbf4 <_realloc_r+0x390>
 400ba90:	1080004c 	andi	r2,r2,1
 400ba94:	103f9e1e 	bne	r2,zero,400b910 <__alt_data_end+0xfc00b910>
 400ba98:	adbffe17 	ldw	r22,-8(r21)
 400ba9c:	00bfff04 	movi	r2,-4
 400baa0:	9dadc83a 	sub	r22,r19,r22
 400baa4:	b1800117 	ldw	r6,4(r22)
 400baa8:	3084703a 	and	r2,r6,r2
 400baac:	20002026 	beq	r4,zero,400bb30 <_realloc_r+0x2cc>
 400bab0:	80af883a 	add	r23,r16,r2
 400bab4:	b96f883a 	add	r23,r23,r5
 400bab8:	21c05f26 	beq	r4,r7,400bc38 <_realloc_r+0x3d4>
 400babc:	b8c01c16 	blt	r23,r3,400bb30 <_realloc_r+0x2cc>
 400bac0:	20800317 	ldw	r2,12(r4)
 400bac4:	20c00217 	ldw	r3,8(r4)
 400bac8:	81bfff04 	addi	r6,r16,-4
 400bacc:	01000904 	movi	r4,36
 400bad0:	18800315 	stw	r2,12(r3)
 400bad4:	10c00215 	stw	r3,8(r2)
 400bad8:	b0c00217 	ldw	r3,8(r22)
 400badc:	b0800317 	ldw	r2,12(r22)
 400bae0:	b4800204 	addi	r18,r22,8
 400bae4:	18800315 	stw	r2,12(r3)
 400bae8:	10c00215 	stw	r3,8(r2)
 400baec:	21801b36 	bltu	r4,r6,400bb5c <_realloc_r+0x2f8>
 400baf0:	008004c4 	movi	r2,19
 400baf4:	1180352e 	bgeu	r2,r6,400bbcc <_realloc_r+0x368>
 400baf8:	a8800017 	ldw	r2,0(r21)
 400bafc:	b0800215 	stw	r2,8(r22)
 400bb00:	a8800117 	ldw	r2,4(r21)
 400bb04:	b0800315 	stw	r2,12(r22)
 400bb08:	008006c4 	movi	r2,27
 400bb0c:	11807f36 	bltu	r2,r6,400bd0c <_realloc_r+0x4a8>
 400bb10:	b0800404 	addi	r2,r22,16
 400bb14:	ad400204 	addi	r21,r21,8
 400bb18:	00002d06 	br	400bbd0 <_realloc_r+0x36c>
 400bb1c:	adbffe17 	ldw	r22,-8(r21)
 400bb20:	00bfff04 	movi	r2,-4
 400bb24:	9dadc83a 	sub	r22,r19,r22
 400bb28:	b1000117 	ldw	r4,4(r22)
 400bb2c:	2084703a 	and	r2,r4,r2
 400bb30:	b03f7726 	beq	r22,zero,400b910 <__alt_data_end+0xfc00b910>
 400bb34:	80af883a 	add	r23,r16,r2
 400bb38:	b8ff7516 	blt	r23,r3,400b910 <__alt_data_end+0xfc00b910>
 400bb3c:	b0800317 	ldw	r2,12(r22)
 400bb40:	b0c00217 	ldw	r3,8(r22)
 400bb44:	81bfff04 	addi	r6,r16,-4
 400bb48:	01000904 	movi	r4,36
 400bb4c:	18800315 	stw	r2,12(r3)
 400bb50:	10c00215 	stw	r3,8(r2)
 400bb54:	b4800204 	addi	r18,r22,8
 400bb58:	21bfe52e 	bgeu	r4,r6,400baf0 <__alt_data_end+0xfc00baf0>
 400bb5c:	a80b883a 	mov	r5,r21
 400bb60:	9009883a 	mov	r4,r18
 400bb64:	400a4e80 	call	400a4e8 <memmove>
 400bb68:	b821883a 	mov	r16,r23
 400bb6c:	b027883a 	mov	r19,r22
 400bb70:	003f8a06 	br	400b99c <__alt_data_end+0xfc00b99c>
 400bb74:	300b883a 	mov	r5,r6
 400bb78:	dfc00917 	ldw	ra,36(sp)
 400bb7c:	df000817 	ldw	fp,32(sp)
 400bb80:	ddc00717 	ldw	r23,28(sp)
 400bb84:	dd800617 	ldw	r22,24(sp)
 400bb88:	dd400517 	ldw	r21,20(sp)
 400bb8c:	dd000417 	ldw	r20,16(sp)
 400bb90:	dcc00317 	ldw	r19,12(sp)
 400bb94:	dc800217 	ldw	r18,8(sp)
 400bb98:	dc400117 	ldw	r17,4(sp)
 400bb9c:	dc000017 	ldw	r16,0(sp)
 400bba0:	dec00a04 	addi	sp,sp,40
 400bba4:	40046101 	jmpi	4004610 <_malloc_r>
 400bba8:	a8c00017 	ldw	r3,0(r21)
 400bbac:	90c00015 	stw	r3,0(r18)
 400bbb0:	a8c00117 	ldw	r3,4(r21)
 400bbb4:	90c00115 	stw	r3,4(r18)
 400bbb8:	00c006c4 	movi	r3,27
 400bbbc:	19804536 	bltu	r3,r6,400bcd4 <_realloc_r+0x470>
 400bbc0:	90800204 	addi	r2,r18,8
 400bbc4:	a8c00204 	addi	r3,r21,8
 400bbc8:	003f6306 	br	400b958 <__alt_data_end+0xfc00b958>
 400bbcc:	9005883a 	mov	r2,r18
 400bbd0:	a8c00017 	ldw	r3,0(r21)
 400bbd4:	b821883a 	mov	r16,r23
 400bbd8:	b027883a 	mov	r19,r22
 400bbdc:	10c00015 	stw	r3,0(r2)
 400bbe0:	a8c00117 	ldw	r3,4(r21)
 400bbe4:	10c00115 	stw	r3,4(r2)
 400bbe8:	a8c00217 	ldw	r3,8(r21)
 400bbec:	10c00215 	stw	r3,8(r2)
 400bbf0:	003f6a06 	br	400b99c <__alt_data_end+0xfc00b99c>
 400bbf4:	9c67883a 	add	r19,r19,r17
 400bbf8:	4445c83a 	sub	r2,r8,r17
 400bbfc:	e4c00215 	stw	r19,8(fp)
 400bc00:	10800054 	ori	r2,r2,1
 400bc04:	98800115 	stw	r2,4(r19)
 400bc08:	a8bfff17 	ldw	r2,-4(r21)
 400bc0c:	a009883a 	mov	r4,r20
 400bc10:	1080004c 	andi	r2,r2,1
 400bc14:	1462b03a 	or	r17,r2,r17
 400bc18:	ac7fff15 	stw	r17,-4(r21)
 400bc1c:	40119e00 	call	40119e0 <__malloc_unlock>
 400bc20:	a805883a 	mov	r2,r21
 400bc24:	003f6b06 	br	400b9d4 <__alt_data_end+0xfc00b9d4>
 400bc28:	a80b883a 	mov	r5,r21
 400bc2c:	9009883a 	mov	r4,r18
 400bc30:	400a4e80 	call	400a4e8 <memmove>
 400bc34:	003f4e06 	br	400b970 <__alt_data_end+0xfc00b970>
 400bc38:	89000404 	addi	r4,r17,16
 400bc3c:	b93fbc16 	blt	r23,r4,400bb30 <__alt_data_end+0xfc00bb30>
 400bc40:	b0800317 	ldw	r2,12(r22)
 400bc44:	b0c00217 	ldw	r3,8(r22)
 400bc48:	81bfff04 	addi	r6,r16,-4
 400bc4c:	01000904 	movi	r4,36
 400bc50:	18800315 	stw	r2,12(r3)
 400bc54:	10c00215 	stw	r3,8(r2)
 400bc58:	b4800204 	addi	r18,r22,8
 400bc5c:	21804336 	bltu	r4,r6,400bd6c <_realloc_r+0x508>
 400bc60:	008004c4 	movi	r2,19
 400bc64:	11803f2e 	bgeu	r2,r6,400bd64 <_realloc_r+0x500>
 400bc68:	a8800017 	ldw	r2,0(r21)
 400bc6c:	b0800215 	stw	r2,8(r22)
 400bc70:	a8800117 	ldw	r2,4(r21)
 400bc74:	b0800315 	stw	r2,12(r22)
 400bc78:	008006c4 	movi	r2,27
 400bc7c:	11803f36 	bltu	r2,r6,400bd7c <_realloc_r+0x518>
 400bc80:	b0800404 	addi	r2,r22,16
 400bc84:	ad400204 	addi	r21,r21,8
 400bc88:	a8c00017 	ldw	r3,0(r21)
 400bc8c:	10c00015 	stw	r3,0(r2)
 400bc90:	a8c00117 	ldw	r3,4(r21)
 400bc94:	10c00115 	stw	r3,4(r2)
 400bc98:	a8c00217 	ldw	r3,8(r21)
 400bc9c:	10c00215 	stw	r3,8(r2)
 400bca0:	b447883a 	add	r3,r22,r17
 400bca4:	bc45c83a 	sub	r2,r23,r17
 400bca8:	e0c00215 	stw	r3,8(fp)
 400bcac:	10800054 	ori	r2,r2,1
 400bcb0:	18800115 	stw	r2,4(r3)
 400bcb4:	b0800117 	ldw	r2,4(r22)
 400bcb8:	a009883a 	mov	r4,r20
 400bcbc:	1080004c 	andi	r2,r2,1
 400bcc0:	1462b03a 	or	r17,r2,r17
 400bcc4:	b4400115 	stw	r17,4(r22)
 400bcc8:	40119e00 	call	40119e0 <__malloc_unlock>
 400bccc:	9005883a 	mov	r2,r18
 400bcd0:	003f4006 	br	400b9d4 <__alt_data_end+0xfc00b9d4>
 400bcd4:	a8c00217 	ldw	r3,8(r21)
 400bcd8:	90c00215 	stw	r3,8(r18)
 400bcdc:	a8c00317 	ldw	r3,12(r21)
 400bce0:	90c00315 	stw	r3,12(r18)
 400bce4:	30801126 	beq	r6,r2,400bd2c <_realloc_r+0x4c8>
 400bce8:	90800404 	addi	r2,r18,16
 400bcec:	a8c00404 	addi	r3,r21,16
 400bcf0:	003f1906 	br	400b958 <__alt_data_end+0xfc00b958>
 400bcf4:	90ffff17 	ldw	r3,-4(r18)
 400bcf8:	00bfff04 	movi	r2,-4
 400bcfc:	a825883a 	mov	r18,r21
 400bd00:	1884703a 	and	r2,r3,r2
 400bd04:	80a1883a 	add	r16,r16,r2
 400bd08:	003f2406 	br	400b99c <__alt_data_end+0xfc00b99c>
 400bd0c:	a8800217 	ldw	r2,8(r21)
 400bd10:	b0800415 	stw	r2,16(r22)
 400bd14:	a8800317 	ldw	r2,12(r21)
 400bd18:	b0800515 	stw	r2,20(r22)
 400bd1c:	31000a26 	beq	r6,r4,400bd48 <_realloc_r+0x4e4>
 400bd20:	b0800604 	addi	r2,r22,24
 400bd24:	ad400404 	addi	r21,r21,16
 400bd28:	003fa906 	br	400bbd0 <__alt_data_end+0xfc00bbd0>
 400bd2c:	a9000417 	ldw	r4,16(r21)
 400bd30:	90800604 	addi	r2,r18,24
 400bd34:	a8c00604 	addi	r3,r21,24
 400bd38:	91000415 	stw	r4,16(r18)
 400bd3c:	a9000517 	ldw	r4,20(r21)
 400bd40:	91000515 	stw	r4,20(r18)
 400bd44:	003f0406 	br	400b958 <__alt_data_end+0xfc00b958>
 400bd48:	a8c00417 	ldw	r3,16(r21)
 400bd4c:	ad400604 	addi	r21,r21,24
 400bd50:	b0800804 	addi	r2,r22,32
 400bd54:	b0c00615 	stw	r3,24(r22)
 400bd58:	a8ffff17 	ldw	r3,-4(r21)
 400bd5c:	b0c00715 	stw	r3,28(r22)
 400bd60:	003f9b06 	br	400bbd0 <__alt_data_end+0xfc00bbd0>
 400bd64:	9005883a 	mov	r2,r18
 400bd68:	003fc706 	br	400bc88 <__alt_data_end+0xfc00bc88>
 400bd6c:	a80b883a 	mov	r5,r21
 400bd70:	9009883a 	mov	r4,r18
 400bd74:	400a4e80 	call	400a4e8 <memmove>
 400bd78:	003fc906 	br	400bca0 <__alt_data_end+0xfc00bca0>
 400bd7c:	a8800217 	ldw	r2,8(r21)
 400bd80:	b0800415 	stw	r2,16(r22)
 400bd84:	a8800317 	ldw	r2,12(r21)
 400bd88:	b0800515 	stw	r2,20(r22)
 400bd8c:	31000726 	beq	r6,r4,400bdac <_realloc_r+0x548>
 400bd90:	b0800604 	addi	r2,r22,24
 400bd94:	ad400404 	addi	r21,r21,16
 400bd98:	003fbb06 	br	400bc88 <__alt_data_end+0xfc00bc88>
 400bd9c:	a009883a 	mov	r4,r20
 400bda0:	40119e00 	call	40119e0 <__malloc_unlock>
 400bda4:	0005883a 	mov	r2,zero
 400bda8:	003f0a06 	br	400b9d4 <__alt_data_end+0xfc00b9d4>
 400bdac:	a8c00417 	ldw	r3,16(r21)
 400bdb0:	ad400604 	addi	r21,r21,24
 400bdb4:	b0800804 	addi	r2,r22,32
 400bdb8:	b0c00615 	stw	r3,24(r22)
 400bdbc:	a8ffff17 	ldw	r3,-4(r21)
 400bdc0:	b0c00715 	stw	r3,28(r22)
 400bdc4:	003fb006 	br	400bc88 <__alt_data_end+0xfc00bc88>

0400bdc8 <__fpclassifyd>:
 400bdc8:	00a00034 	movhi	r2,32768
 400bdcc:	10bfffc4 	addi	r2,r2,-1
 400bdd0:	2884703a 	and	r2,r5,r2
 400bdd4:	10000726 	beq	r2,zero,400bdf4 <__fpclassifyd+0x2c>
 400bdd8:	00fffc34 	movhi	r3,65520
 400bddc:	019ff834 	movhi	r6,32736
 400bde0:	28c7883a 	add	r3,r5,r3
 400bde4:	31bfffc4 	addi	r6,r6,-1
 400bde8:	30c00536 	bltu	r6,r3,400be00 <__fpclassifyd+0x38>
 400bdec:	00800104 	movi	r2,4
 400bdf0:	f800283a 	ret
 400bdf4:	2000021e 	bne	r4,zero,400be00 <__fpclassifyd+0x38>
 400bdf8:	00800084 	movi	r2,2
 400bdfc:	f800283a 	ret
 400be00:	00dffc34 	movhi	r3,32752
 400be04:	019ff834 	movhi	r6,32736
 400be08:	28cb883a 	add	r5,r5,r3
 400be0c:	31bfffc4 	addi	r6,r6,-1
 400be10:	317ff62e 	bgeu	r6,r5,400bdec <__alt_data_end+0xfc00bdec>
 400be14:	01400434 	movhi	r5,16
 400be18:	297fffc4 	addi	r5,r5,-1
 400be1c:	28800236 	bltu	r5,r2,400be28 <__fpclassifyd+0x60>
 400be20:	008000c4 	movi	r2,3
 400be24:	f800283a 	ret
 400be28:	10c00226 	beq	r2,r3,400be34 <__fpclassifyd+0x6c>
 400be2c:	0005883a 	mov	r2,zero
 400be30:	f800283a 	ret
 400be34:	2005003a 	cmpeq	r2,r4,zero
 400be38:	f800283a 	ret

0400be3c <__sread>:
 400be3c:	defffe04 	addi	sp,sp,-8
 400be40:	dc000015 	stw	r16,0(sp)
 400be44:	2821883a 	mov	r16,r5
 400be48:	2940038f 	ldh	r5,14(r5)
 400be4c:	dfc00115 	stw	ra,4(sp)
 400be50:	400dd740 	call	400dd74 <_read_r>
 400be54:	10000716 	blt	r2,zero,400be74 <__sread+0x38>
 400be58:	80c01417 	ldw	r3,80(r16)
 400be5c:	1887883a 	add	r3,r3,r2
 400be60:	80c01415 	stw	r3,80(r16)
 400be64:	dfc00117 	ldw	ra,4(sp)
 400be68:	dc000017 	ldw	r16,0(sp)
 400be6c:	dec00204 	addi	sp,sp,8
 400be70:	f800283a 	ret
 400be74:	80c0030b 	ldhu	r3,12(r16)
 400be78:	18fbffcc 	andi	r3,r3,61439
 400be7c:	80c0030d 	sth	r3,12(r16)
 400be80:	dfc00117 	ldw	ra,4(sp)
 400be84:	dc000017 	ldw	r16,0(sp)
 400be88:	dec00204 	addi	sp,sp,8
 400be8c:	f800283a 	ret

0400be90 <__seofread>:
 400be90:	0005883a 	mov	r2,zero
 400be94:	f800283a 	ret

0400be98 <__swrite>:
 400be98:	2880030b 	ldhu	r2,12(r5)
 400be9c:	defffb04 	addi	sp,sp,-20
 400bea0:	dcc00315 	stw	r19,12(sp)
 400bea4:	dc800215 	stw	r18,8(sp)
 400bea8:	dc400115 	stw	r17,4(sp)
 400beac:	dc000015 	stw	r16,0(sp)
 400beb0:	dfc00415 	stw	ra,16(sp)
 400beb4:	10c0400c 	andi	r3,r2,256
 400beb8:	2821883a 	mov	r16,r5
 400bebc:	2023883a 	mov	r17,r4
 400bec0:	3025883a 	mov	r18,r6
 400bec4:	3827883a 	mov	r19,r7
 400bec8:	18000526 	beq	r3,zero,400bee0 <__swrite+0x48>
 400becc:	2940038f 	ldh	r5,14(r5)
 400bed0:	01c00084 	movi	r7,2
 400bed4:	000d883a 	mov	r6,zero
 400bed8:	400dd140 	call	400dd14 <_lseek_r>
 400bedc:	8080030b 	ldhu	r2,12(r16)
 400bee0:	8140038f 	ldh	r5,14(r16)
 400bee4:	10bbffcc 	andi	r2,r2,61439
 400bee8:	980f883a 	mov	r7,r19
 400beec:	900d883a 	mov	r6,r18
 400bef0:	8809883a 	mov	r4,r17
 400bef4:	8080030d 	sth	r2,12(r16)
 400bef8:	dfc00417 	ldw	ra,16(sp)
 400befc:	dcc00317 	ldw	r19,12(sp)
 400bf00:	dc800217 	ldw	r18,8(sp)
 400bf04:	dc400117 	ldw	r17,4(sp)
 400bf08:	dc000017 	ldw	r16,0(sp)
 400bf0c:	dec00504 	addi	sp,sp,20
 400bf10:	400d8a41 	jmpi	400d8a4 <_write_r>

0400bf14 <__sseek>:
 400bf14:	defffe04 	addi	sp,sp,-8
 400bf18:	dc000015 	stw	r16,0(sp)
 400bf1c:	2821883a 	mov	r16,r5
 400bf20:	2940038f 	ldh	r5,14(r5)
 400bf24:	dfc00115 	stw	ra,4(sp)
 400bf28:	400dd140 	call	400dd14 <_lseek_r>
 400bf2c:	00ffffc4 	movi	r3,-1
 400bf30:	10c00826 	beq	r2,r3,400bf54 <__sseek+0x40>
 400bf34:	80c0030b 	ldhu	r3,12(r16)
 400bf38:	80801415 	stw	r2,80(r16)
 400bf3c:	18c40014 	ori	r3,r3,4096
 400bf40:	80c0030d 	sth	r3,12(r16)
 400bf44:	dfc00117 	ldw	ra,4(sp)
 400bf48:	dc000017 	ldw	r16,0(sp)
 400bf4c:	dec00204 	addi	sp,sp,8
 400bf50:	f800283a 	ret
 400bf54:	80c0030b 	ldhu	r3,12(r16)
 400bf58:	18fbffcc 	andi	r3,r3,61439
 400bf5c:	80c0030d 	sth	r3,12(r16)
 400bf60:	dfc00117 	ldw	ra,4(sp)
 400bf64:	dc000017 	ldw	r16,0(sp)
 400bf68:	dec00204 	addi	sp,sp,8
 400bf6c:	f800283a 	ret

0400bf70 <__sclose>:
 400bf70:	2940038f 	ldh	r5,14(r5)
 400bf74:	400d9041 	jmpi	400d904 <_close_r>

0400bf78 <strcmp>:
 400bf78:	2144b03a 	or	r2,r4,r5
 400bf7c:	108000cc 	andi	r2,r2,3
 400bf80:	1000171e 	bne	r2,zero,400bfe0 <strcmp+0x68>
 400bf84:	20800017 	ldw	r2,0(r4)
 400bf88:	28c00017 	ldw	r3,0(r5)
 400bf8c:	10c0141e 	bne	r2,r3,400bfe0 <strcmp+0x68>
 400bf90:	027fbff4 	movhi	r9,65279
 400bf94:	4a7fbfc4 	addi	r9,r9,-257
 400bf98:	0086303a 	nor	r3,zero,r2
 400bf9c:	02202074 	movhi	r8,32897
 400bfa0:	1245883a 	add	r2,r2,r9
 400bfa4:	42202004 	addi	r8,r8,-32640
 400bfa8:	10c4703a 	and	r2,r2,r3
 400bfac:	1204703a 	and	r2,r2,r8
 400bfb0:	10000226 	beq	r2,zero,400bfbc <strcmp+0x44>
 400bfb4:	00002306 	br	400c044 <strcmp+0xcc>
 400bfb8:	1000221e 	bne	r2,zero,400c044 <strcmp+0xcc>
 400bfbc:	21000104 	addi	r4,r4,4
 400bfc0:	20c00017 	ldw	r3,0(r4)
 400bfc4:	29400104 	addi	r5,r5,4
 400bfc8:	29800017 	ldw	r6,0(r5)
 400bfcc:	1a4f883a 	add	r7,r3,r9
 400bfd0:	00c4303a 	nor	r2,zero,r3
 400bfd4:	3884703a 	and	r2,r7,r2
 400bfd8:	1204703a 	and	r2,r2,r8
 400bfdc:	19bff626 	beq	r3,r6,400bfb8 <__alt_data_end+0xfc00bfb8>
 400bfe0:	20800003 	ldbu	r2,0(r4)
 400bfe4:	10c03fcc 	andi	r3,r2,255
 400bfe8:	18c0201c 	xori	r3,r3,128
 400bfec:	18ffe004 	addi	r3,r3,-128
 400bff0:	18000c26 	beq	r3,zero,400c024 <strcmp+0xac>
 400bff4:	29800007 	ldb	r6,0(r5)
 400bff8:	19800326 	beq	r3,r6,400c008 <strcmp+0x90>
 400bffc:	00001306 	br	400c04c <strcmp+0xd4>
 400c000:	29800007 	ldb	r6,0(r5)
 400c004:	11800b1e 	bne	r2,r6,400c034 <strcmp+0xbc>
 400c008:	21000044 	addi	r4,r4,1
 400c00c:	20c00003 	ldbu	r3,0(r4)
 400c010:	29400044 	addi	r5,r5,1
 400c014:	18803fcc 	andi	r2,r3,255
 400c018:	1080201c 	xori	r2,r2,128
 400c01c:	10bfe004 	addi	r2,r2,-128
 400c020:	103ff71e 	bne	r2,zero,400c000 <__alt_data_end+0xfc00c000>
 400c024:	0007883a 	mov	r3,zero
 400c028:	28800003 	ldbu	r2,0(r5)
 400c02c:	1885c83a 	sub	r2,r3,r2
 400c030:	f800283a 	ret
 400c034:	28800003 	ldbu	r2,0(r5)
 400c038:	18c03fcc 	andi	r3,r3,255
 400c03c:	1885c83a 	sub	r2,r3,r2
 400c040:	f800283a 	ret
 400c044:	0005883a 	mov	r2,zero
 400c048:	f800283a 	ret
 400c04c:	10c03fcc 	andi	r3,r2,255
 400c050:	003ff506 	br	400c028 <__alt_data_end+0xfc00c028>

0400c054 <__sprint_r.part.0>:
 400c054:	28801917 	ldw	r2,100(r5)
 400c058:	defff604 	addi	sp,sp,-40
 400c05c:	dd400515 	stw	r21,20(sp)
 400c060:	dfc00915 	stw	ra,36(sp)
 400c064:	df000815 	stw	fp,32(sp)
 400c068:	ddc00715 	stw	r23,28(sp)
 400c06c:	dd800615 	stw	r22,24(sp)
 400c070:	dd000415 	stw	r20,16(sp)
 400c074:	dcc00315 	stw	r19,12(sp)
 400c078:	dc800215 	stw	r18,8(sp)
 400c07c:	dc400115 	stw	r17,4(sp)
 400c080:	dc000015 	stw	r16,0(sp)
 400c084:	1088000c 	andi	r2,r2,8192
 400c088:	302b883a 	mov	r21,r6
 400c08c:	10002e26 	beq	r2,zero,400c148 <__sprint_r.part.0+0xf4>
 400c090:	30800217 	ldw	r2,8(r6)
 400c094:	35800017 	ldw	r22,0(r6)
 400c098:	10002926 	beq	r2,zero,400c140 <__sprint_r.part.0+0xec>
 400c09c:	2827883a 	mov	r19,r5
 400c0a0:	2029883a 	mov	r20,r4
 400c0a4:	b5c00104 	addi	r23,r22,4
 400c0a8:	04bfffc4 	movi	r18,-1
 400c0ac:	bc400017 	ldw	r17,0(r23)
 400c0b0:	b4000017 	ldw	r16,0(r22)
 400c0b4:	0039883a 	mov	fp,zero
 400c0b8:	8822d0ba 	srli	r17,r17,2
 400c0bc:	8800031e 	bne	r17,zero,400c0cc <__sprint_r.part.0+0x78>
 400c0c0:	00001806 	br	400c124 <__sprint_r.part.0+0xd0>
 400c0c4:	84000104 	addi	r16,r16,4
 400c0c8:	8f001526 	beq	r17,fp,400c120 <__sprint_r.part.0+0xcc>
 400c0cc:	81400017 	ldw	r5,0(r16)
 400c0d0:	980d883a 	mov	r6,r19
 400c0d4:	a009883a 	mov	r4,r20
 400c0d8:	400dbc00 	call	400dbc0 <_fputwc_r>
 400c0dc:	e7000044 	addi	fp,fp,1
 400c0e0:	14bff81e 	bne	r2,r18,400c0c4 <__alt_data_end+0xfc00c0c4>
 400c0e4:	9005883a 	mov	r2,r18
 400c0e8:	a8000215 	stw	zero,8(r21)
 400c0ec:	a8000115 	stw	zero,4(r21)
 400c0f0:	dfc00917 	ldw	ra,36(sp)
 400c0f4:	df000817 	ldw	fp,32(sp)
 400c0f8:	ddc00717 	ldw	r23,28(sp)
 400c0fc:	dd800617 	ldw	r22,24(sp)
 400c100:	dd400517 	ldw	r21,20(sp)
 400c104:	dd000417 	ldw	r20,16(sp)
 400c108:	dcc00317 	ldw	r19,12(sp)
 400c10c:	dc800217 	ldw	r18,8(sp)
 400c110:	dc400117 	ldw	r17,4(sp)
 400c114:	dc000017 	ldw	r16,0(sp)
 400c118:	dec00a04 	addi	sp,sp,40
 400c11c:	f800283a 	ret
 400c120:	a8800217 	ldw	r2,8(r21)
 400c124:	8c63883a 	add	r17,r17,r17
 400c128:	8c63883a 	add	r17,r17,r17
 400c12c:	1445c83a 	sub	r2,r2,r17
 400c130:	a8800215 	stw	r2,8(r21)
 400c134:	b5800204 	addi	r22,r22,8
 400c138:	bdc00204 	addi	r23,r23,8
 400c13c:	103fdb1e 	bne	r2,zero,400c0ac <__alt_data_end+0xfc00c0ac>
 400c140:	0005883a 	mov	r2,zero
 400c144:	003fe806 	br	400c0e8 <__alt_data_end+0xfc00c0e8>
 400c148:	4009b1c0 	call	4009b1c <__sfvwrite_r>
 400c14c:	003fe606 	br	400c0e8 <__alt_data_end+0xfc00c0e8>

0400c150 <__sprint_r>:
 400c150:	30c00217 	ldw	r3,8(r6)
 400c154:	18000126 	beq	r3,zero,400c15c <__sprint_r+0xc>
 400c158:	400c0541 	jmpi	400c054 <__sprint_r.part.0>
 400c15c:	30000115 	stw	zero,4(r6)
 400c160:	0005883a 	mov	r2,zero
 400c164:	f800283a 	ret

0400c168 <___vfiprintf_internal_r>:
 400c168:	deffca04 	addi	sp,sp,-216
 400c16c:	dd403115 	stw	r21,196(sp)
 400c170:	dfc03515 	stw	ra,212(sp)
 400c174:	df003415 	stw	fp,208(sp)
 400c178:	ddc03315 	stw	r23,204(sp)
 400c17c:	dd803215 	stw	r22,200(sp)
 400c180:	dd003015 	stw	r20,192(sp)
 400c184:	dcc02f15 	stw	r19,188(sp)
 400c188:	dc802e15 	stw	r18,184(sp)
 400c18c:	dc402d15 	stw	r17,180(sp)
 400c190:	dc002c15 	stw	r16,176(sp)
 400c194:	d9002115 	stw	r4,132(sp)
 400c198:	d9402015 	stw	r5,128(sp)
 400c19c:	d9c02215 	stw	r7,136(sp)
 400c1a0:	302b883a 	mov	r21,r6
 400c1a4:	20000226 	beq	r4,zero,400c1b0 <___vfiprintf_internal_r+0x48>
 400c1a8:	20800e17 	ldw	r2,56(r4)
 400c1ac:	1000cf26 	beq	r2,zero,400c4ec <___vfiprintf_internal_r+0x384>
 400c1b0:	d8c02017 	ldw	r3,128(sp)
 400c1b4:	1880030b 	ldhu	r2,12(r3)
 400c1b8:	10c8000c 	andi	r3,r2,8192
 400c1bc:	1800071e 	bne	r3,zero,400c1dc <___vfiprintf_internal_r+0x74>
 400c1c0:	d9402017 	ldw	r5,128(sp)
 400c1c4:	00f7ffc4 	movi	r3,-8193
 400c1c8:	10880014 	ori	r2,r2,8192
 400c1cc:	29001917 	ldw	r4,100(r5)
 400c1d0:	2880030d 	sth	r2,12(r5)
 400c1d4:	20c6703a 	and	r3,r4,r3
 400c1d8:	28c01915 	stw	r3,100(r5)
 400c1dc:	10c0020c 	andi	r3,r2,8
 400c1e0:	1800a526 	beq	r3,zero,400c478 <___vfiprintf_internal_r+0x310>
 400c1e4:	d9002017 	ldw	r4,128(sp)
 400c1e8:	20c00417 	ldw	r3,16(r4)
 400c1ec:	1800a226 	beq	r3,zero,400c478 <___vfiprintf_internal_r+0x310>
 400c1f0:	1080068c 	andi	r2,r2,26
 400c1f4:	00c00284 	movi	r3,10
 400c1f8:	10c0a826 	beq	r2,r3,400c49c <___vfiprintf_internal_r+0x334>
 400c1fc:	d9001a04 	addi	r4,sp,104
 400c200:	d94019c4 	addi	r5,sp,103
 400c204:	04810074 	movhi	r18,1025
 400c208:	2145c83a 	sub	r2,r4,r5
 400c20c:	9499a704 	addi	r18,r18,26268
 400c210:	d9001e15 	stw	r4,120(sp)
 400c214:	d9401f15 	stw	r5,124(sp)
 400c218:	dec01a15 	stw	sp,104(sp)
 400c21c:	d8001c15 	stw	zero,112(sp)
 400c220:	d8001b15 	stw	zero,108(sp)
 400c224:	d811883a 	mov	r8,sp
 400c228:	d8002615 	stw	zero,152(sp)
 400c22c:	d8002415 	stw	zero,144(sp)
 400c230:	d8802815 	stw	r2,160(sp)
 400c234:	a82d883a 	mov	r22,r21
 400c238:	b0800007 	ldb	r2,0(r22)
 400c23c:	10040d26 	beq	r2,zero,400d274 <___vfiprintf_internal_r+0x110c>
 400c240:	00c00944 	movi	r3,37
 400c244:	b029883a 	mov	r20,r22
 400c248:	10c0021e 	bne	r2,r3,400c254 <___vfiprintf_internal_r+0xec>
 400c24c:	00001606 	br	400c2a8 <___vfiprintf_internal_r+0x140>
 400c250:	10c00326 	beq	r2,r3,400c260 <___vfiprintf_internal_r+0xf8>
 400c254:	a5000044 	addi	r20,r20,1
 400c258:	a0800007 	ldb	r2,0(r20)
 400c25c:	103ffc1e 	bne	r2,zero,400c250 <__alt_data_end+0xfc00c250>
 400c260:	a5a1c83a 	sub	r16,r20,r22
 400c264:	80001026 	beq	r16,zero,400c2a8 <___vfiprintf_internal_r+0x140>
 400c268:	d8c01c17 	ldw	r3,112(sp)
 400c26c:	d8801b17 	ldw	r2,108(sp)
 400c270:	45800015 	stw	r22,0(r8)
 400c274:	80c7883a 	add	r3,r16,r3
 400c278:	10800044 	addi	r2,r2,1
 400c27c:	44000115 	stw	r16,4(r8)
 400c280:	d8c01c15 	stw	r3,112(sp)
 400c284:	d8801b15 	stw	r2,108(sp)
 400c288:	010001c4 	movi	r4,7
 400c28c:	2080750e 	bge	r4,r2,400c464 <___vfiprintf_internal_r+0x2fc>
 400c290:	1803951e 	bne	r3,zero,400d0e8 <___vfiprintf_internal_r+0xf80>
 400c294:	d8c02417 	ldw	r3,144(sp)
 400c298:	d8001b15 	stw	zero,108(sp)
 400c29c:	d811883a 	mov	r8,sp
 400c2a0:	1c07883a 	add	r3,r3,r16
 400c2a4:	d8c02415 	stw	r3,144(sp)
 400c2a8:	a0800007 	ldb	r2,0(r20)
 400c2ac:	1002e026 	beq	r2,zero,400ce30 <___vfiprintf_internal_r+0xcc8>
 400c2b0:	a5800044 	addi	r22,r20,1
 400c2b4:	a0c00047 	ldb	r3,1(r20)
 400c2b8:	d8001d85 	stb	zero,118(sp)
 400c2bc:	0027883a 	mov	r19,zero
 400c2c0:	d8002305 	stb	zero,140(sp)
 400c2c4:	043fffc4 	movi	r16,-1
 400c2c8:	d8002515 	stw	zero,148(sp)
 400c2cc:	0023883a 	mov	r17,zero
 400c2d0:	05001604 	movi	r20,88
 400c2d4:	05400244 	movi	r21,9
 400c2d8:	402f883a 	mov	r23,r8
 400c2dc:	b5800044 	addi	r22,r22,1
 400c2e0:	18bff804 	addi	r2,r3,-32
 400c2e4:	a0827736 	bltu	r20,r2,400ccc4 <___vfiprintf_internal_r+0xb5c>
 400c2e8:	100490ba 	slli	r2,r2,2
 400c2ec:	01010074 	movhi	r4,1025
 400c2f0:	2130c004 	addi	r4,r4,-15616
 400c2f4:	1105883a 	add	r2,r2,r4
 400c2f8:	10800017 	ldw	r2,0(r2)
 400c2fc:	1000683a 	jmp	r2
 400c300:	0400c9c4 	movi	r16,807
 400c304:	0400ccc4 	movi	r16,819
 400c308:	0400ccc4 	movi	r16,819
 400c30c:	0400c9e0 	cmpeqi	r16,zero,807
 400c310:	0400ccc4 	movi	r16,819
 400c314:	0400ccc4 	movi	r16,819
 400c318:	0400ccc4 	movi	r16,819
 400c31c:	0400ccc4 	movi	r16,819
 400c320:	0400ccc4 	movi	r16,819
 400c324:	0400ccc4 	movi	r16,819
 400c328:	0400cbe8 	cmpgeui	r16,zero,815
 400c32c:	0400cc0c 	andi	r16,zero,816
 400c330:	0400ccc4 	movi	r16,819
 400c334:	0400c504 	movi	r16,788
 400c338:	0400cc20 	cmpeqi	r16,zero,816
 400c33c:	0400ccc4 	movi	r16,819
 400c340:	0400c9ec 	andhi	r16,zero,807
 400c344:	0400c9f8 	rdprs	r16,zero,807
 400c348:	0400c9f8 	rdprs	r16,zero,807
 400c34c:	0400c9f8 	rdprs	r16,zero,807
 400c350:	0400c9f8 	rdprs	r16,zero,807
 400c354:	0400c9f8 	rdprs	r16,zero,807
 400c358:	0400c9f8 	rdprs	r16,zero,807
 400c35c:	0400c9f8 	rdprs	r16,zero,807
 400c360:	0400c9f8 	rdprs	r16,zero,807
 400c364:	0400c9f8 	rdprs	r16,zero,807
 400c368:	0400ccc4 	movi	r16,819
 400c36c:	0400ccc4 	movi	r16,819
 400c370:	0400ccc4 	movi	r16,819
 400c374:	0400ccc4 	movi	r16,819
 400c378:	0400ccc4 	movi	r16,819
 400c37c:	0400ccc4 	movi	r16,819
 400c380:	0400ccc4 	movi	r16,819
 400c384:	0400ccc4 	movi	r16,819
 400c388:	0400ccc4 	movi	r16,819
 400c38c:	0400ccc4 	movi	r16,819
 400c390:	0400ca38 	rdprs	r16,zero,808
 400c394:	0400ccc4 	movi	r16,819
 400c398:	0400ccc4 	movi	r16,819
 400c39c:	0400ccc4 	movi	r16,819
 400c3a0:	0400ccc4 	movi	r16,819
 400c3a4:	0400ccc4 	movi	r16,819
 400c3a8:	0400ccc4 	movi	r16,819
 400c3ac:	0400ccc4 	movi	r16,819
 400c3b0:	0400ccc4 	movi	r16,819
 400c3b4:	0400ccc4 	movi	r16,819
 400c3b8:	0400ccc4 	movi	r16,819
 400c3bc:	0400ca74 	movhi	r16,809
 400c3c0:	0400ccc4 	movi	r16,819
 400c3c4:	0400ccc4 	movi	r16,819
 400c3c8:	0400ccc4 	movi	r16,819
 400c3cc:	0400ccc4 	movi	r16,819
 400c3d0:	0400ccc4 	movi	r16,819
 400c3d4:	0400cad0 	cmplti	r16,zero,811
 400c3d8:	0400ccc4 	movi	r16,819
 400c3dc:	0400ccc4 	movi	r16,819
 400c3e0:	0400cb44 	movi	r16,813
 400c3e4:	0400ccc4 	movi	r16,819
 400c3e8:	0400ccc4 	movi	r16,819
 400c3ec:	0400ccc4 	movi	r16,819
 400c3f0:	0400ccc4 	movi	r16,819
 400c3f4:	0400ccc4 	movi	r16,819
 400c3f8:	0400ccc4 	movi	r16,819
 400c3fc:	0400ccc4 	movi	r16,819
 400c400:	0400ccc4 	movi	r16,819
 400c404:	0400ccc4 	movi	r16,819
 400c408:	0400ccc4 	movi	r16,819
 400c40c:	0400c8ec 	andhi	r16,zero,803
 400c410:	0400c91c 	xori	r16,zero,804
 400c414:	0400ccc4 	movi	r16,819
 400c418:	0400ccc4 	movi	r16,819
 400c41c:	0400ccc4 	movi	r16,819
 400c420:	0400cc6c 	andhi	r16,zero,817
 400c424:	0400c91c 	xori	r16,zero,804
 400c428:	0400ccc4 	movi	r16,819
 400c42c:	0400ccc4 	movi	r16,819
 400c430:	0400c7c4 	movi	r16,799
 400c434:	0400ccc4 	movi	r16,819
 400c438:	0400c7d8 	cmpnei	r16,zero,799
 400c43c:	0400c810 	cmplti	r16,zero,800
 400c440:	0400c510 	cmplti	r16,zero,788
 400c444:	0400c7b8 	rdprs	r16,zero,798
 400c448:	0400ccc4 	movi	r16,819
 400c44c:	0400cb84 	movi	r16,814
 400c450:	0400ccc4 	movi	r16,819
 400c454:	0400cbd0 	cmplti	r16,zero,815
 400c458:	0400ccc4 	movi	r16,819
 400c45c:	0400ccc4 	movi	r16,819
 400c460:	0400c894 	movui	r16,802
 400c464:	42000204 	addi	r8,r8,8
 400c468:	d8c02417 	ldw	r3,144(sp)
 400c46c:	1c07883a 	add	r3,r3,r16
 400c470:	d8c02415 	stw	r3,144(sp)
 400c474:	003f8c06 	br	400c2a8 <__alt_data_end+0xfc00c2a8>
 400c478:	d9402017 	ldw	r5,128(sp)
 400c47c:	d9002117 	ldw	r4,132(sp)
 400c480:	400768c0 	call	400768c <__swsetup_r>
 400c484:	1003c11e 	bne	r2,zero,400d38c <___vfiprintf_internal_r+0x1224>
 400c488:	d9402017 	ldw	r5,128(sp)
 400c48c:	00c00284 	movi	r3,10
 400c490:	2880030b 	ldhu	r2,12(r5)
 400c494:	1080068c 	andi	r2,r2,26
 400c498:	10ff581e 	bne	r2,r3,400c1fc <__alt_data_end+0xfc00c1fc>
 400c49c:	d8c02017 	ldw	r3,128(sp)
 400c4a0:	1880038f 	ldh	r2,14(r3)
 400c4a4:	103f5516 	blt	r2,zero,400c1fc <__alt_data_end+0xfc00c1fc>
 400c4a8:	d9c02217 	ldw	r7,136(sp)
 400c4ac:	d9002117 	ldw	r4,132(sp)
 400c4b0:	a80d883a 	mov	r6,r21
 400c4b4:	180b883a 	mov	r5,r3
 400c4b8:	400d6900 	call	400d690 <__sbprintf>
 400c4bc:	dfc03517 	ldw	ra,212(sp)
 400c4c0:	df003417 	ldw	fp,208(sp)
 400c4c4:	ddc03317 	ldw	r23,204(sp)
 400c4c8:	dd803217 	ldw	r22,200(sp)
 400c4cc:	dd403117 	ldw	r21,196(sp)
 400c4d0:	dd003017 	ldw	r20,192(sp)
 400c4d4:	dcc02f17 	ldw	r19,188(sp)
 400c4d8:	dc802e17 	ldw	r18,184(sp)
 400c4dc:	dc402d17 	ldw	r17,180(sp)
 400c4e0:	dc002c17 	ldw	r16,176(sp)
 400c4e4:	dec03604 	addi	sp,sp,216
 400c4e8:	f800283a 	ret
 400c4ec:	40096980 	call	4009698 <__sinit>
 400c4f0:	003f2f06 	br	400c1b0 <__alt_data_end+0xfc00c1b0>
 400c4f4:	d8c02517 	ldw	r3,148(sp)
 400c4f8:	d8802215 	stw	r2,136(sp)
 400c4fc:	00c7c83a 	sub	r3,zero,r3
 400c500:	d8c02515 	stw	r3,148(sp)
 400c504:	8c400114 	ori	r17,r17,4
 400c508:	b0c00007 	ldb	r3,0(r22)
 400c50c:	003f7306 	br	400c2dc <__alt_data_end+0xfc00c2dc>
 400c510:	00800c04 	movi	r2,48
 400c514:	d9402217 	ldw	r5,136(sp)
 400c518:	d8801d05 	stb	r2,116(sp)
 400c51c:	00801e04 	movi	r2,120
 400c520:	d8801d45 	stb	r2,117(sp)
 400c524:	d8001d85 	stb	zero,118(sp)
 400c528:	b811883a 	mov	r8,r23
 400c52c:	28c00104 	addi	r3,r5,4
 400c530:	2cc00017 	ldw	r19,0(r5)
 400c534:	0029883a 	mov	r20,zero
 400c538:	88800094 	ori	r2,r17,2
 400c53c:	80032516 	blt	r16,zero,400d1d4 <___vfiprintf_internal_r+0x106c>
 400c540:	00bfdfc4 	movi	r2,-129
 400c544:	88a2703a 	and	r17,r17,r2
 400c548:	d8c02215 	stw	r3,136(sp)
 400c54c:	8c400094 	ori	r17,r17,2
 400c550:	98032a1e 	bne	r19,zero,400d1fc <___vfiprintf_internal_r+0x1094>
 400c554:	00810074 	movhi	r2,1025
 400c558:	10994704 	addi	r2,r2,25884
 400c55c:	d8802615 	stw	r2,152(sp)
 400c560:	002b883a 	mov	r21,zero
 400c564:	8001741e 	bne	r16,zero,400cb38 <___vfiprintf_internal_r+0x9d0>
 400c568:	0021883a 	mov	r16,zero
 400c56c:	0029883a 	mov	r20,zero
 400c570:	ddc01a04 	addi	r23,sp,104
 400c574:	8027883a 	mov	r19,r16
 400c578:	8500010e 	bge	r16,r20,400c580 <___vfiprintf_internal_r+0x418>
 400c57c:	a027883a 	mov	r19,r20
 400c580:	ad403fcc 	andi	r21,r21,255
 400c584:	ad40201c 	xori	r21,r21,128
 400c588:	ad7fe004 	addi	r21,r21,-128
 400c58c:	a8000126 	beq	r21,zero,400c594 <___vfiprintf_internal_r+0x42c>
 400c590:	9cc00044 	addi	r19,r19,1
 400c594:	89c0008c 	andi	r7,r17,2
 400c598:	38000126 	beq	r7,zero,400c5a0 <___vfiprintf_internal_r+0x438>
 400c59c:	9cc00084 	addi	r19,r19,2
 400c5a0:	88c0210c 	andi	r3,r17,132
 400c5a4:	1801dd1e 	bne	r3,zero,400cd1c <___vfiprintf_internal_r+0xbb4>
 400c5a8:	d9402517 	ldw	r5,148(sp)
 400c5ac:	2cebc83a 	sub	r21,r5,r19
 400c5b0:	0541da0e 	bge	zero,r21,400cd1c <___vfiprintf_internal_r+0xbb4>
 400c5b4:	07000404 	movi	fp,16
 400c5b8:	d8801c17 	ldw	r2,112(sp)
 400c5bc:	e543be0e 	bge	fp,r21,400d4b8 <___vfiprintf_internal_r+0x1350>
 400c5c0:	01410074 	movhi	r5,1025
 400c5c4:	2959ab04 	addi	r5,r5,26284
 400c5c8:	dc002715 	stw	r16,156(sp)
 400c5cc:	d9801b17 	ldw	r6,108(sp)
 400c5d0:	a821883a 	mov	r16,r21
 400c5d4:	d9402315 	stw	r5,140(sp)
 400c5d8:	028001c4 	movi	r10,7
 400c5dc:	d9c02915 	stw	r7,164(sp)
 400c5e0:	182b883a 	mov	r21,r3
 400c5e4:	00000506 	br	400c5fc <___vfiprintf_internal_r+0x494>
 400c5e8:	31000084 	addi	r4,r6,2
 400c5ec:	42000204 	addi	r8,r8,8
 400c5f0:	180d883a 	mov	r6,r3
 400c5f4:	843ffc04 	addi	r16,r16,-16
 400c5f8:	e4000f0e 	bge	fp,r16,400c638 <___vfiprintf_internal_r+0x4d0>
 400c5fc:	01010074 	movhi	r4,1025
 400c600:	10800404 	addi	r2,r2,16
 400c604:	30c00044 	addi	r3,r6,1
 400c608:	2119ab04 	addi	r4,r4,26284
 400c60c:	41000015 	stw	r4,0(r8)
 400c610:	47000115 	stw	fp,4(r8)
 400c614:	d8801c15 	stw	r2,112(sp)
 400c618:	d8c01b15 	stw	r3,108(sp)
 400c61c:	50fff20e 	bge	r10,r3,400c5e8 <__alt_data_end+0xfc00c5e8>
 400c620:	1001b21e 	bne	r2,zero,400ccec <___vfiprintf_internal_r+0xb84>
 400c624:	843ffc04 	addi	r16,r16,-16
 400c628:	000d883a 	mov	r6,zero
 400c62c:	01000044 	movi	r4,1
 400c630:	d811883a 	mov	r8,sp
 400c634:	e43ff116 	blt	fp,r16,400c5fc <__alt_data_end+0xfc00c5fc>
 400c638:	a807883a 	mov	r3,r21
 400c63c:	d9c02917 	ldw	r7,164(sp)
 400c640:	802b883a 	mov	r21,r16
 400c644:	dc002717 	ldw	r16,156(sp)
 400c648:	d9402317 	ldw	r5,140(sp)
 400c64c:	a885883a 	add	r2,r21,r2
 400c650:	45400115 	stw	r21,4(r8)
 400c654:	41400015 	stw	r5,0(r8)
 400c658:	d8801c15 	stw	r2,112(sp)
 400c65c:	d9001b15 	stw	r4,108(sp)
 400c660:	014001c4 	movi	r5,7
 400c664:	29026216 	blt	r5,r4,400cff0 <___vfiprintf_internal_r+0xe88>
 400c668:	d9801d87 	ldb	r6,118(sp)
 400c66c:	42000204 	addi	r8,r8,8
 400c670:	21400044 	addi	r5,r4,1
 400c674:	3001ae1e 	bne	r6,zero,400cd30 <___vfiprintf_internal_r+0xbc8>
 400c678:	3801bb26 	beq	r7,zero,400cd68 <___vfiprintf_internal_r+0xc00>
 400c67c:	d9001d04 	addi	r4,sp,116
 400c680:	10800084 	addi	r2,r2,2
 400c684:	41000015 	stw	r4,0(r8)
 400c688:	01000084 	movi	r4,2
 400c68c:	41000115 	stw	r4,4(r8)
 400c690:	d8801c15 	stw	r2,112(sp)
 400c694:	d9401b15 	stw	r5,108(sp)
 400c698:	010001c4 	movi	r4,7
 400c69c:	2142680e 	bge	r4,r5,400d040 <___vfiprintf_internal_r+0xed8>
 400c6a0:	1002b11e 	bne	r2,zero,400d168 <___vfiprintf_internal_r+0x1000>
 400c6a4:	01802004 	movi	r6,128
 400c6a8:	01400044 	movi	r5,1
 400c6ac:	0009883a 	mov	r4,zero
 400c6b0:	d811883a 	mov	r8,sp
 400c6b4:	1981ae1e 	bne	r3,r6,400cd70 <___vfiprintf_internal_r+0xc08>
 400c6b8:	d8c02517 	ldw	r3,148(sp)
 400c6bc:	1cf9c83a 	sub	fp,r3,r19
 400c6c0:	0701ab0e 	bge	zero,fp,400cd70 <___vfiprintf_internal_r+0xc08>
 400c6c4:	05400404 	movi	r21,16
 400c6c8:	af03a90e 	bge	r21,fp,400d570 <___vfiprintf_internal_r+0x1408>
 400c6cc:	01410074 	movhi	r5,1025
 400c6d0:	2959a704 	addi	r5,r5,26268
 400c6d4:	d9402315 	stw	r5,140(sp)
 400c6d8:	01c001c4 	movi	r7,7
 400c6dc:	00000506 	br	400c6f4 <___vfiprintf_internal_r+0x58c>
 400c6e0:	21800084 	addi	r6,r4,2
 400c6e4:	42000204 	addi	r8,r8,8
 400c6e8:	1809883a 	mov	r4,r3
 400c6ec:	e73ffc04 	addi	fp,fp,-16
 400c6f0:	af000d0e 	bge	r21,fp,400c728 <___vfiprintf_internal_r+0x5c0>
 400c6f4:	10800404 	addi	r2,r2,16
 400c6f8:	20c00044 	addi	r3,r4,1
 400c6fc:	44800015 	stw	r18,0(r8)
 400c700:	45400115 	stw	r21,4(r8)
 400c704:	d8801c15 	stw	r2,112(sp)
 400c708:	d8c01b15 	stw	r3,108(sp)
 400c70c:	38fff40e 	bge	r7,r3,400c6e0 <__alt_data_end+0xfc00c6e0>
 400c710:	10022b1e 	bne	r2,zero,400cfc0 <___vfiprintf_internal_r+0xe58>
 400c714:	e73ffc04 	addi	fp,fp,-16
 400c718:	01800044 	movi	r6,1
 400c71c:	0009883a 	mov	r4,zero
 400c720:	d811883a 	mov	r8,sp
 400c724:	af3ff316 	blt	r21,fp,400c6f4 <__alt_data_end+0xfc00c6f4>
 400c728:	d8c02317 	ldw	r3,140(sp)
 400c72c:	1705883a 	add	r2,r2,fp
 400c730:	47000115 	stw	fp,4(r8)
 400c734:	40c00015 	stw	r3,0(r8)
 400c738:	d8801c15 	stw	r2,112(sp)
 400c73c:	d9801b15 	stw	r6,108(sp)
 400c740:	00c001c4 	movi	r3,7
 400c744:	19829416 	blt	r3,r6,400d198 <___vfiprintf_internal_r+0x1030>
 400c748:	8521c83a 	sub	r16,r16,r20
 400c74c:	42000204 	addi	r8,r8,8
 400c750:	31400044 	addi	r5,r6,1
 400c754:	3009883a 	mov	r4,r6
 400c758:	04018716 	blt	zero,r16,400cd78 <___vfiprintf_internal_r+0xc10>
 400c75c:	a085883a 	add	r2,r20,r2
 400c760:	45c00015 	stw	r23,0(r8)
 400c764:	45000115 	stw	r20,4(r8)
 400c768:	d8801c15 	stw	r2,112(sp)
 400c76c:	d9401b15 	stw	r5,108(sp)
 400c770:	00c001c4 	movi	r3,7
 400c774:	1941c20e 	bge	r3,r5,400ce80 <___vfiprintf_internal_r+0xd18>
 400c778:	1002531e 	bne	r2,zero,400d0c8 <___vfiprintf_internal_r+0xf60>
 400c77c:	d8001b15 	stw	zero,108(sp)
 400c780:	8c40010c 	andi	r17,r17,4
 400c784:	88023226 	beq	r17,zero,400d050 <___vfiprintf_internal_r+0xee8>
 400c788:	d9002517 	ldw	r4,148(sp)
 400c78c:	24e3c83a 	sub	r17,r4,r19
 400c790:	04432916 	blt	zero,r17,400d438 <___vfiprintf_internal_r+0x12d0>
 400c794:	d8802517 	ldw	r2,148(sp)
 400c798:	14c0010e 	bge	r2,r19,400c7a0 <___vfiprintf_internal_r+0x638>
 400c79c:	9805883a 	mov	r2,r19
 400c7a0:	d8c02417 	ldw	r3,144(sp)
 400c7a4:	1887883a 	add	r3,r3,r2
 400c7a8:	d8c02415 	stw	r3,144(sp)
 400c7ac:	d8001b15 	stw	zero,108(sp)
 400c7b0:	d811883a 	mov	r8,sp
 400c7b4:	003ea006 	br	400c238 <__alt_data_end+0xfc00c238>
 400c7b8:	8c400814 	ori	r17,r17,32
 400c7bc:	b0c00007 	ldb	r3,0(r22)
 400c7c0:	003ec606 	br	400c2dc <__alt_data_end+0xfc00c2dc>
 400c7c4:	b0c00007 	ldb	r3,0(r22)
 400c7c8:	00801b04 	movi	r2,108
 400c7cc:	18832026 	beq	r3,r2,400d450 <___vfiprintf_internal_r+0x12e8>
 400c7d0:	8c400414 	ori	r17,r17,16
 400c7d4:	003ec106 	br	400c2dc <__alt_data_end+0xfc00c2dc>
 400c7d8:	9cc03fcc 	andi	r19,r19,255
 400c7dc:	b811883a 	mov	r8,r23
 400c7e0:	9803981e 	bne	r19,zero,400d644 <___vfiprintf_internal_r+0x14dc>
 400c7e4:	8880080c 	andi	r2,r17,32
 400c7e8:	1002be26 	beq	r2,zero,400d2e4 <___vfiprintf_internal_r+0x117c>
 400c7ec:	d9002217 	ldw	r4,136(sp)
 400c7f0:	d9402417 	ldw	r5,144(sp)
 400c7f4:	20800017 	ldw	r2,0(r4)
 400c7f8:	2807d7fa 	srai	r3,r5,31
 400c7fc:	21000104 	addi	r4,r4,4
 400c800:	d9002215 	stw	r4,136(sp)
 400c804:	11400015 	stw	r5,0(r2)
 400c808:	10c00115 	stw	r3,4(r2)
 400c80c:	003e8a06 	br	400c238 <__alt_data_end+0xfc00c238>
 400c810:	9cc03fcc 	andi	r19,r19,255
 400c814:	b811883a 	mov	r8,r23
 400c818:	9803871e 	bne	r19,zero,400d638 <___vfiprintf_internal_r+0x14d0>
 400c81c:	8880080c 	andi	r2,r17,32
 400c820:	10009a26 	beq	r2,zero,400ca8c <___vfiprintf_internal_r+0x924>
 400c824:	d9002217 	ldw	r4,136(sp)
 400c828:	d8001d85 	stb	zero,118(sp)
 400c82c:	20800204 	addi	r2,r4,8
 400c830:	24c00017 	ldw	r19,0(r4)
 400c834:	25000117 	ldw	r20,4(r4)
 400c838:	8002a416 	blt	r16,zero,400d2cc <___vfiprintf_internal_r+0x1164>
 400c83c:	013fdfc4 	movi	r4,-129
 400c840:	9d06b03a 	or	r3,r19,r20
 400c844:	d8802215 	stw	r2,136(sp)
 400c848:	8922703a 	and	r17,r17,r4
 400c84c:	18009b26 	beq	r3,zero,400cabc <___vfiprintf_internal_r+0x954>
 400c850:	002b883a 	mov	r21,zero
 400c854:	ddc01a04 	addi	r23,sp,104
 400c858:	9806d0fa 	srli	r3,r19,3
 400c85c:	a008977a 	slli	r4,r20,29
 400c860:	a028d0fa 	srli	r20,r20,3
 400c864:	9cc001cc 	andi	r19,r19,7
 400c868:	98800c04 	addi	r2,r19,48
 400c86c:	bdffffc4 	addi	r23,r23,-1
 400c870:	20e6b03a 	or	r19,r4,r3
 400c874:	b8800005 	stb	r2,0(r23)
 400c878:	9d06b03a 	or	r3,r19,r20
 400c87c:	183ff61e 	bne	r3,zero,400c858 <__alt_data_end+0xfc00c858>
 400c880:	88c0004c 	andi	r3,r17,1
 400c884:	18021f1e 	bne	r3,zero,400d104 <___vfiprintf_internal_r+0xf9c>
 400c888:	d9401e17 	ldw	r5,120(sp)
 400c88c:	2de9c83a 	sub	r20,r5,r23
 400c890:	003f3806 	br	400c574 <__alt_data_end+0xfc00c574>
 400c894:	9cc03fcc 	andi	r19,r19,255
 400c898:	b811883a 	mov	r8,r23
 400c89c:	98034f1e 	bne	r19,zero,400d5dc <___vfiprintf_internal_r+0x1474>
 400c8a0:	00810074 	movhi	r2,1025
 400c8a4:	10994704 	addi	r2,r2,25884
 400c8a8:	d8802615 	stw	r2,152(sp)
 400c8ac:	8880080c 	andi	r2,r17,32
 400c8b0:	1000ac26 	beq	r2,zero,400cb64 <___vfiprintf_internal_r+0x9fc>
 400c8b4:	d9002217 	ldw	r4,136(sp)
 400c8b8:	24c00017 	ldw	r19,0(r4)
 400c8bc:	25000117 	ldw	r20,4(r4)
 400c8c0:	21000204 	addi	r4,r4,8
 400c8c4:	d9002215 	stw	r4,136(sp)
 400c8c8:	8880004c 	andi	r2,r17,1
 400c8cc:	1001e726 	beq	r2,zero,400d06c <___vfiprintf_internal_r+0xf04>
 400c8d0:	9d04b03a 	or	r2,r19,r20
 400c8d4:	10025c1e 	bne	r2,zero,400d248 <___vfiprintf_internal_r+0x10e0>
 400c8d8:	d8001d85 	stb	zero,118(sp)
 400c8dc:	80024416 	blt	r16,zero,400d1f0 <___vfiprintf_internal_r+0x1088>
 400c8e0:	00bfdfc4 	movi	r2,-129
 400c8e4:	88a2703a 	and	r17,r17,r2
 400c8e8:	003f1d06 	br	400c560 <__alt_data_end+0xfc00c560>
 400c8ec:	d8c02217 	ldw	r3,136(sp)
 400c8f0:	04c00044 	movi	r19,1
 400c8f4:	b811883a 	mov	r8,r23
 400c8f8:	18800017 	ldw	r2,0(r3)
 400c8fc:	18c00104 	addi	r3,r3,4
 400c900:	d8001d85 	stb	zero,118(sp)
 400c904:	d8801005 	stb	r2,64(sp)
 400c908:	d8c02215 	stw	r3,136(sp)
 400c90c:	9829883a 	mov	r20,r19
 400c910:	ddc01004 	addi	r23,sp,64
 400c914:	0021883a 	mov	r16,zero
 400c918:	003f1e06 	br	400c594 <__alt_data_end+0xfc00c594>
 400c91c:	9cc03fcc 	andi	r19,r19,255
 400c920:	b811883a 	mov	r8,r23
 400c924:	9803331e 	bne	r19,zero,400d5f4 <___vfiprintf_internal_r+0x148c>
 400c928:	8880080c 	andi	r2,r17,32
 400c92c:	10004826 	beq	r2,zero,400ca50 <___vfiprintf_internal_r+0x8e8>
 400c930:	d9002217 	ldw	r4,136(sp)
 400c934:	20800117 	ldw	r2,4(r4)
 400c938:	24c00017 	ldw	r19,0(r4)
 400c93c:	21000204 	addi	r4,r4,8
 400c940:	d9002215 	stw	r4,136(sp)
 400c944:	1029883a 	mov	r20,r2
 400c948:	10024c16 	blt	r2,zero,400d27c <___vfiprintf_internal_r+0x1114>
 400c94c:	dd401d83 	ldbu	r21,118(sp)
 400c950:	80007116 	blt	r16,zero,400cb18 <___vfiprintf_internal_r+0x9b0>
 400c954:	00ffdfc4 	movi	r3,-129
 400c958:	9d04b03a 	or	r2,r19,r20
 400c95c:	88e2703a 	and	r17,r17,r3
 400c960:	1000d126 	beq	r2,zero,400cca8 <___vfiprintf_internal_r+0xb40>
 400c964:	a0023526 	beq	r20,zero,400d23c <___vfiprintf_internal_r+0x10d4>
 400c968:	ddc01a04 	addi	r23,sp,104
 400c96c:	4039883a 	mov	fp,r8
 400c970:	9809883a 	mov	r4,r19
 400c974:	a00b883a 	mov	r5,r20
 400c978:	01800284 	movi	r6,10
 400c97c:	000f883a 	mov	r7,zero
 400c980:	400e5b80 	call	400e5b8 <__umoddi3>
 400c984:	10800c04 	addi	r2,r2,48
 400c988:	bdffffc4 	addi	r23,r23,-1
 400c98c:	9809883a 	mov	r4,r19
 400c990:	a00b883a 	mov	r5,r20
 400c994:	b8800005 	stb	r2,0(r23)
 400c998:	01800284 	movi	r6,10
 400c99c:	000f883a 	mov	r7,zero
 400c9a0:	400dfbc0 	call	400dfbc <__udivdi3>
 400c9a4:	1027883a 	mov	r19,r2
 400c9a8:	10c4b03a 	or	r2,r2,r3
 400c9ac:	1829883a 	mov	r20,r3
 400c9b0:	103fef1e 	bne	r2,zero,400c970 <__alt_data_end+0xfc00c970>
 400c9b4:	d9001e17 	ldw	r4,120(sp)
 400c9b8:	e011883a 	mov	r8,fp
 400c9bc:	25e9c83a 	sub	r20,r4,r23
 400c9c0:	003eec06 	br	400c574 <__alt_data_end+0xfc00c574>
 400c9c4:	d8802307 	ldb	r2,140(sp)
 400c9c8:	1002361e 	bne	r2,zero,400d2a4 <___vfiprintf_internal_r+0x113c>
 400c9cc:	00c00804 	movi	r3,32
 400c9d0:	d8c02305 	stb	r3,140(sp)
 400c9d4:	04c00044 	movi	r19,1
 400c9d8:	b0c00007 	ldb	r3,0(r22)
 400c9dc:	003e3f06 	br	400c2dc <__alt_data_end+0xfc00c2dc>
 400c9e0:	8c400054 	ori	r17,r17,1
 400c9e4:	b0c00007 	ldb	r3,0(r22)
 400c9e8:	003e3c06 	br	400c2dc <__alt_data_end+0xfc00c2dc>
 400c9ec:	8c402014 	ori	r17,r17,128
 400c9f0:	b0c00007 	ldb	r3,0(r22)
 400c9f4:	003e3906 	br	400c2dc <__alt_data_end+0xfc00c2dc>
 400c9f8:	dc002715 	stw	r16,156(sp)
 400c9fc:	d8002515 	stw	zero,148(sp)
 400ca00:	1f3ff404 	addi	fp,r3,-48
 400ca04:	0009883a 	mov	r4,zero
 400ca08:	b021883a 	mov	r16,r22
 400ca0c:	01400284 	movi	r5,10
 400ca10:	40044f40 	call	40044f4 <__mulsi3>
 400ca14:	80c00007 	ldb	r3,0(r16)
 400ca18:	e089883a 	add	r4,fp,r2
 400ca1c:	b5800044 	addi	r22,r22,1
 400ca20:	1f3ff404 	addi	fp,r3,-48
 400ca24:	b021883a 	mov	r16,r22
 400ca28:	af3ff82e 	bgeu	r21,fp,400ca0c <__alt_data_end+0xfc00ca0c>
 400ca2c:	d9002515 	stw	r4,148(sp)
 400ca30:	dc002717 	ldw	r16,156(sp)
 400ca34:	003e2a06 	br	400c2e0 <__alt_data_end+0xfc00c2e0>
 400ca38:	9cc03fcc 	andi	r19,r19,255
 400ca3c:	b811883a 	mov	r8,r23
 400ca40:	9802e91e 	bne	r19,zero,400d5e8 <___vfiprintf_internal_r+0x1480>
 400ca44:	8c400414 	ori	r17,r17,16
 400ca48:	8880080c 	andi	r2,r17,32
 400ca4c:	103fb81e 	bne	r2,zero,400c930 <__alt_data_end+0xfc00c930>
 400ca50:	8880040c 	andi	r2,r17,16
 400ca54:	10022e26 	beq	r2,zero,400d310 <___vfiprintf_internal_r+0x11a8>
 400ca58:	d9402217 	ldw	r5,136(sp)
 400ca5c:	2cc00017 	ldw	r19,0(r5)
 400ca60:	29400104 	addi	r5,r5,4
 400ca64:	d9402215 	stw	r5,136(sp)
 400ca68:	9829d7fa 	srai	r20,r19,31
 400ca6c:	a005883a 	mov	r2,r20
 400ca70:	003fb506 	br	400c948 <__alt_data_end+0xfc00c948>
 400ca74:	9cc03fcc 	andi	r19,r19,255
 400ca78:	b811883a 	mov	r8,r23
 400ca7c:	9802fa1e 	bne	r19,zero,400d668 <___vfiprintf_internal_r+0x1500>
 400ca80:	8c400414 	ori	r17,r17,16
 400ca84:	8880080c 	andi	r2,r17,32
 400ca88:	103f661e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400ca8c:	8880040c 	andi	r2,r17,16
 400ca90:	10020626 	beq	r2,zero,400d2ac <___vfiprintf_internal_r+0x1144>
 400ca94:	d9402217 	ldw	r5,136(sp)
 400ca98:	d8001d85 	stb	zero,118(sp)
 400ca9c:	0029883a 	mov	r20,zero
 400caa0:	28800104 	addi	r2,r5,4
 400caa4:	2cc00017 	ldw	r19,0(r5)
 400caa8:	80020816 	blt	r16,zero,400d2cc <___vfiprintf_internal_r+0x1164>
 400caac:	00ffdfc4 	movi	r3,-129
 400cab0:	d8802215 	stw	r2,136(sp)
 400cab4:	88e2703a 	and	r17,r17,r3
 400cab8:	983f651e 	bne	r19,zero,400c850 <__alt_data_end+0xfc00c850>
 400cabc:	002b883a 	mov	r21,zero
 400cac0:	8002cf26 	beq	r16,zero,400d600 <___vfiprintf_internal_r+0x1498>
 400cac4:	0027883a 	mov	r19,zero
 400cac8:	0029883a 	mov	r20,zero
 400cacc:	003f6106 	br	400c854 <__alt_data_end+0xfc00c854>
 400cad0:	9cc03fcc 	andi	r19,r19,255
 400cad4:	b811883a 	mov	r8,r23
 400cad8:	9802e01e 	bne	r19,zero,400d65c <___vfiprintf_internal_r+0x14f4>
 400cadc:	8c400414 	ori	r17,r17,16
 400cae0:	8880080c 	andi	r2,r17,32
 400cae4:	1000641e 	bne	r2,zero,400cc78 <___vfiprintf_internal_r+0xb10>
 400cae8:	8880040c 	andi	r2,r17,16
 400caec:	1001c81e 	bne	r2,zero,400d210 <___vfiprintf_internal_r+0x10a8>
 400caf0:	8880100c 	andi	r2,r17,64
 400caf4:	d8001d85 	stb	zero,118(sp)
 400caf8:	1002281e 	bne	r2,zero,400d39c <___vfiprintf_internal_r+0x1234>
 400cafc:	d9002217 	ldw	r4,136(sp)
 400cb00:	0029883a 	mov	r20,zero
 400cb04:	20800104 	addi	r2,r4,4
 400cb08:	24c00017 	ldw	r19,0(r4)
 400cb0c:	8001c60e 	bge	r16,zero,400d228 <___vfiprintf_internal_r+0x10c0>
 400cb10:	d8802215 	stw	r2,136(sp)
 400cb14:	002b883a 	mov	r21,zero
 400cb18:	9d04b03a 	or	r2,r19,r20
 400cb1c:	103f911e 	bne	r2,zero,400c964 <__alt_data_end+0xfc00c964>
 400cb20:	00800044 	movi	r2,1
 400cb24:	10803fcc 	andi	r2,r2,255
 400cb28:	00c00044 	movi	r3,1
 400cb2c:	10c05f26 	beq	r2,r3,400ccac <___vfiprintf_internal_r+0xb44>
 400cb30:	00c00084 	movi	r3,2
 400cb34:	10ffe31e 	bne	r2,r3,400cac4 <__alt_data_end+0xfc00cac4>
 400cb38:	0027883a 	mov	r19,zero
 400cb3c:	0029883a 	mov	r20,zero
 400cb40:	00015106 	br	400d088 <___vfiprintf_internal_r+0xf20>
 400cb44:	9cc03fcc 	andi	r19,r19,255
 400cb48:	b811883a 	mov	r8,r23
 400cb4c:	9802c01e 	bne	r19,zero,400d650 <___vfiprintf_internal_r+0x14e8>
 400cb50:	01410074 	movhi	r5,1025
 400cb54:	29594204 	addi	r5,r5,25864
 400cb58:	d9402615 	stw	r5,152(sp)
 400cb5c:	8880080c 	andi	r2,r17,32
 400cb60:	103f541e 	bne	r2,zero,400c8b4 <__alt_data_end+0xfc00c8b4>
 400cb64:	8880040c 	andi	r2,r17,16
 400cb68:	1001f226 	beq	r2,zero,400d334 <___vfiprintf_internal_r+0x11cc>
 400cb6c:	d9402217 	ldw	r5,136(sp)
 400cb70:	0029883a 	mov	r20,zero
 400cb74:	2cc00017 	ldw	r19,0(r5)
 400cb78:	29400104 	addi	r5,r5,4
 400cb7c:	d9402215 	stw	r5,136(sp)
 400cb80:	003f5106 	br	400c8c8 <__alt_data_end+0xfc00c8c8>
 400cb84:	d8c02217 	ldw	r3,136(sp)
 400cb88:	b811883a 	mov	r8,r23
 400cb8c:	d8001d85 	stb	zero,118(sp)
 400cb90:	1dc00017 	ldw	r23,0(r3)
 400cb94:	1f000104 	addi	fp,r3,4
 400cb98:	b8025926 	beq	r23,zero,400d500 <___vfiprintf_internal_r+0x1398>
 400cb9c:	80023316 	blt	r16,zero,400d46c <___vfiprintf_internal_r+0x1304>
 400cba0:	800d883a 	mov	r6,r16
 400cba4:	000b883a 	mov	r5,zero
 400cba8:	b809883a 	mov	r4,r23
 400cbac:	da002a15 	stw	r8,168(sp)
 400cbb0:	400a4040 	call	400a404 <memchr>
 400cbb4:	da002a17 	ldw	r8,168(sp)
 400cbb8:	10026826 	beq	r2,zero,400d55c <___vfiprintf_internal_r+0x13f4>
 400cbbc:	15e9c83a 	sub	r20,r2,r23
 400cbc0:	dd401d83 	ldbu	r21,118(sp)
 400cbc4:	df002215 	stw	fp,136(sp)
 400cbc8:	0021883a 	mov	r16,zero
 400cbcc:	003e6906 	br	400c574 <__alt_data_end+0xfc00c574>
 400cbd0:	9cc03fcc 	andi	r19,r19,255
 400cbd4:	b811883a 	mov	r8,r23
 400cbd8:	983fc126 	beq	r19,zero,400cae0 <__alt_data_end+0xfc00cae0>
 400cbdc:	d8c02303 	ldbu	r3,140(sp)
 400cbe0:	d8c01d85 	stb	r3,118(sp)
 400cbe4:	003fbe06 	br	400cae0 <__alt_data_end+0xfc00cae0>
 400cbe8:	d9002217 	ldw	r4,136(sp)
 400cbec:	d9402217 	ldw	r5,136(sp)
 400cbf0:	21000017 	ldw	r4,0(r4)
 400cbf4:	28800104 	addi	r2,r5,4
 400cbf8:	d9002515 	stw	r4,148(sp)
 400cbfc:	203e3d16 	blt	r4,zero,400c4f4 <__alt_data_end+0xfc00c4f4>
 400cc00:	d8802215 	stw	r2,136(sp)
 400cc04:	b0c00007 	ldb	r3,0(r22)
 400cc08:	003db406 	br	400c2dc <__alt_data_end+0xfc00c2dc>
 400cc0c:	00c00ac4 	movi	r3,43
 400cc10:	d8c02305 	stb	r3,140(sp)
 400cc14:	04c00044 	movi	r19,1
 400cc18:	b0c00007 	ldb	r3,0(r22)
 400cc1c:	003daf06 	br	400c2dc <__alt_data_end+0xfc00c2dc>
 400cc20:	b0c00007 	ldb	r3,0(r22)
 400cc24:	01000a84 	movi	r4,42
 400cc28:	b4000044 	addi	r16,r22,1
 400cc2c:	19025e26 	beq	r3,r4,400d5a8 <___vfiprintf_internal_r+0x1440>
 400cc30:	1f3ff404 	addi	fp,r3,-48
 400cc34:	0009883a 	mov	r4,zero
 400cc38:	af025236 	bltu	r21,fp,400d584 <___vfiprintf_internal_r+0x141c>
 400cc3c:	01400284 	movi	r5,10
 400cc40:	40044f40 	call	40044f4 <__mulsi3>
 400cc44:	80c00007 	ldb	r3,0(r16)
 400cc48:	1709883a 	add	r4,r2,fp
 400cc4c:	85800044 	addi	r22,r16,1
 400cc50:	1f3ff404 	addi	fp,r3,-48
 400cc54:	b021883a 	mov	r16,r22
 400cc58:	af3ff82e 	bgeu	r21,fp,400cc3c <__alt_data_end+0xfc00cc3c>
 400cc5c:	2021883a 	mov	r16,r4
 400cc60:	203d9f0e 	bge	r4,zero,400c2e0 <__alt_data_end+0xfc00c2e0>
 400cc64:	043fffc4 	movi	r16,-1
 400cc68:	003d9d06 	br	400c2e0 <__alt_data_end+0xfc00c2e0>
 400cc6c:	8c401014 	ori	r17,r17,64
 400cc70:	b0c00007 	ldb	r3,0(r22)
 400cc74:	003d9906 	br	400c2dc <__alt_data_end+0xfc00c2dc>
 400cc78:	d9002217 	ldw	r4,136(sp)
 400cc7c:	d8001d85 	stb	zero,118(sp)
 400cc80:	20c00204 	addi	r3,r4,8
 400cc84:	24c00017 	ldw	r19,0(r4)
 400cc88:	25000117 	ldw	r20,4(r4)
 400cc8c:	8001e716 	blt	r16,zero,400d42c <___vfiprintf_internal_r+0x12c4>
 400cc90:	013fdfc4 	movi	r4,-129
 400cc94:	9d04b03a 	or	r2,r19,r20
 400cc98:	d8c02215 	stw	r3,136(sp)
 400cc9c:	8922703a 	and	r17,r17,r4
 400cca0:	002b883a 	mov	r21,zero
 400cca4:	103f2f1e 	bne	r2,zero,400c964 <__alt_data_end+0xfc00c964>
 400cca8:	803e2f26 	beq	r16,zero,400c568 <__alt_data_end+0xfc00c568>
 400ccac:	0027883a 	mov	r19,zero
 400ccb0:	9cc00c04 	addi	r19,r19,48
 400ccb4:	dcc019c5 	stb	r19,103(sp)
 400ccb8:	dd002817 	ldw	r20,160(sp)
 400ccbc:	ddc019c4 	addi	r23,sp,103
 400ccc0:	003e2c06 	br	400c574 <__alt_data_end+0xfc00c574>
 400ccc4:	9cc03fcc 	andi	r19,r19,255
 400ccc8:	b811883a 	mov	r8,r23
 400cccc:	9802571e 	bne	r19,zero,400d62c <___vfiprintf_internal_r+0x14c4>
 400ccd0:	18005726 	beq	r3,zero,400ce30 <___vfiprintf_internal_r+0xcc8>
 400ccd4:	04c00044 	movi	r19,1
 400ccd8:	d8c01005 	stb	r3,64(sp)
 400ccdc:	d8001d85 	stb	zero,118(sp)
 400cce0:	9829883a 	mov	r20,r19
 400cce4:	ddc01004 	addi	r23,sp,64
 400cce8:	003f0a06 	br	400c914 <__alt_data_end+0xfc00c914>
 400ccec:	d9402017 	ldw	r5,128(sp)
 400ccf0:	d9002117 	ldw	r4,132(sp)
 400ccf4:	d9801a04 	addi	r6,sp,104
 400ccf8:	da802a15 	stw	r10,168(sp)
 400ccfc:	400c0540 	call	400c054 <__sprint_r.part.0>
 400cd00:	da802a17 	ldw	r10,168(sp)
 400cd04:	1000501e 	bne	r2,zero,400ce48 <___vfiprintf_internal_r+0xce0>
 400cd08:	d9801b17 	ldw	r6,108(sp)
 400cd0c:	d8801c17 	ldw	r2,112(sp)
 400cd10:	d811883a 	mov	r8,sp
 400cd14:	31000044 	addi	r4,r6,1
 400cd18:	003e3606 	br	400c5f4 <__alt_data_end+0xfc00c5f4>
 400cd1c:	d9001b17 	ldw	r4,108(sp)
 400cd20:	d8801c17 	ldw	r2,112(sp)
 400cd24:	21400044 	addi	r5,r4,1
 400cd28:	d9801d87 	ldb	r6,118(sp)
 400cd2c:	303e5226 	beq	r6,zero,400c678 <__alt_data_end+0xfc00c678>
 400cd30:	01800044 	movi	r6,1
 400cd34:	d9001d84 	addi	r4,sp,118
 400cd38:	1185883a 	add	r2,r2,r6
 400cd3c:	41000015 	stw	r4,0(r8)
 400cd40:	41800115 	stw	r6,4(r8)
 400cd44:	d8801c15 	stw	r2,112(sp)
 400cd48:	d9401b15 	stw	r5,108(sp)
 400cd4c:	010001c4 	movi	r4,7
 400cd50:	2140b00e 	bge	r4,r5,400d014 <___vfiprintf_internal_r+0xeac>
 400cd54:	1000f61e 	bne	r2,zero,400d130 <___vfiprintf_internal_r+0xfc8>
 400cd58:	3800b31e 	bne	r7,zero,400d028 <___vfiprintf_internal_r+0xec0>
 400cd5c:	0009883a 	mov	r4,zero
 400cd60:	300b883a 	mov	r5,r6
 400cd64:	d811883a 	mov	r8,sp
 400cd68:	01802004 	movi	r6,128
 400cd6c:	19be5226 	beq	r3,r6,400c6b8 <__alt_data_end+0xfc00c6b8>
 400cd70:	8521c83a 	sub	r16,r16,r20
 400cd74:	043e790e 	bge	zero,r16,400c75c <__alt_data_end+0xfc00c75c>
 400cd78:	05400404 	movi	r21,16
 400cd7c:	ac01b00e 	bge	r21,r16,400d440 <___vfiprintf_internal_r+0x12d8>
 400cd80:	01410074 	movhi	r5,1025
 400cd84:	2959a704 	addi	r5,r5,26268
 400cd88:	d9402315 	stw	r5,140(sp)
 400cd8c:	070001c4 	movi	fp,7
 400cd90:	00000506 	br	400cda8 <___vfiprintf_internal_r+0xc40>
 400cd94:	21400084 	addi	r5,r4,2
 400cd98:	42000204 	addi	r8,r8,8
 400cd9c:	1809883a 	mov	r4,r3
 400cda0:	843ffc04 	addi	r16,r16,-16
 400cda4:	ac000d0e 	bge	r21,r16,400cddc <___vfiprintf_internal_r+0xc74>
 400cda8:	10800404 	addi	r2,r2,16
 400cdac:	20c00044 	addi	r3,r4,1
 400cdb0:	44800015 	stw	r18,0(r8)
 400cdb4:	45400115 	stw	r21,4(r8)
 400cdb8:	d8801c15 	stw	r2,112(sp)
 400cdbc:	d8c01b15 	stw	r3,108(sp)
 400cdc0:	e0fff40e 	bge	fp,r3,400cd94 <__alt_data_end+0xfc00cd94>
 400cdc4:	1000101e 	bne	r2,zero,400ce08 <___vfiprintf_internal_r+0xca0>
 400cdc8:	843ffc04 	addi	r16,r16,-16
 400cdcc:	01400044 	movi	r5,1
 400cdd0:	0009883a 	mov	r4,zero
 400cdd4:	d811883a 	mov	r8,sp
 400cdd8:	ac3ff316 	blt	r21,r16,400cda8 <__alt_data_end+0xfc00cda8>
 400cddc:	d8c02317 	ldw	r3,140(sp)
 400cde0:	1405883a 	add	r2,r2,r16
 400cde4:	44000115 	stw	r16,4(r8)
 400cde8:	40c00015 	stw	r3,0(r8)
 400cdec:	d8801c15 	stw	r2,112(sp)
 400cdf0:	d9401b15 	stw	r5,108(sp)
 400cdf4:	00c001c4 	movi	r3,7
 400cdf8:	19401916 	blt	r3,r5,400ce60 <___vfiprintf_internal_r+0xcf8>
 400cdfc:	42000204 	addi	r8,r8,8
 400ce00:	29400044 	addi	r5,r5,1
 400ce04:	003e5506 	br	400c75c <__alt_data_end+0xfc00c75c>
 400ce08:	d9402017 	ldw	r5,128(sp)
 400ce0c:	d9002117 	ldw	r4,132(sp)
 400ce10:	d9801a04 	addi	r6,sp,104
 400ce14:	400c0540 	call	400c054 <__sprint_r.part.0>
 400ce18:	10000b1e 	bne	r2,zero,400ce48 <___vfiprintf_internal_r+0xce0>
 400ce1c:	d9001b17 	ldw	r4,108(sp)
 400ce20:	d8801c17 	ldw	r2,112(sp)
 400ce24:	d811883a 	mov	r8,sp
 400ce28:	21400044 	addi	r5,r4,1
 400ce2c:	003fdc06 	br	400cda0 <__alt_data_end+0xfc00cda0>
 400ce30:	d8801c17 	ldw	r2,112(sp)
 400ce34:	10000426 	beq	r2,zero,400ce48 <___vfiprintf_internal_r+0xce0>
 400ce38:	d9402017 	ldw	r5,128(sp)
 400ce3c:	d9002117 	ldw	r4,132(sp)
 400ce40:	d9801a04 	addi	r6,sp,104
 400ce44:	400c0540 	call	400c054 <__sprint_r.part.0>
 400ce48:	d9402017 	ldw	r5,128(sp)
 400ce4c:	2880030b 	ldhu	r2,12(r5)
 400ce50:	1080100c 	andi	r2,r2,64
 400ce54:	10014d1e 	bne	r2,zero,400d38c <___vfiprintf_internal_r+0x1224>
 400ce58:	d8802417 	ldw	r2,144(sp)
 400ce5c:	003d9706 	br	400c4bc <__alt_data_end+0xfc00c4bc>
 400ce60:	1000d21e 	bne	r2,zero,400d1ac <___vfiprintf_internal_r+0x1044>
 400ce64:	00c00044 	movi	r3,1
 400ce68:	a005883a 	mov	r2,r20
 400ce6c:	ddc00015 	stw	r23,0(sp)
 400ce70:	dd000115 	stw	r20,4(sp)
 400ce74:	dd001c15 	stw	r20,112(sp)
 400ce78:	d8c01b15 	stw	r3,108(sp)
 400ce7c:	d811883a 	mov	r8,sp
 400ce80:	42000204 	addi	r8,r8,8
 400ce84:	8c40010c 	andi	r17,r17,4
 400ce88:	88004026 	beq	r17,zero,400cf8c <___vfiprintf_internal_r+0xe24>
 400ce8c:	d9002517 	ldw	r4,148(sp)
 400ce90:	24e3c83a 	sub	r17,r4,r19
 400ce94:	04403d0e 	bge	zero,r17,400cf8c <___vfiprintf_internal_r+0xe24>
 400ce98:	04000404 	movi	r16,16
 400ce9c:	8441a90e 	bge	r16,r17,400d544 <___vfiprintf_internal_r+0x13dc>
 400cea0:	00c10074 	movhi	r3,1025
 400cea4:	18d9ab04 	addi	r3,r3,26284
 400cea8:	d9001b17 	ldw	r4,108(sp)
 400ceac:	d8c02315 	stw	r3,140(sp)
 400ceb0:	050001c4 	movi	r20,7
 400ceb4:	dd402117 	ldw	r21,132(sp)
 400ceb8:	ddc02017 	ldw	r23,128(sp)
 400cebc:	00000506 	br	400ced4 <___vfiprintf_internal_r+0xd6c>
 400cec0:	21400084 	addi	r5,r4,2
 400cec4:	42000204 	addi	r8,r8,8
 400cec8:	1809883a 	mov	r4,r3
 400cecc:	8c7ffc04 	addi	r17,r17,-16
 400ced0:	84400f0e 	bge	r16,r17,400cf10 <___vfiprintf_internal_r+0xda8>
 400ced4:	01410074 	movhi	r5,1025
 400ced8:	10800404 	addi	r2,r2,16
 400cedc:	20c00044 	addi	r3,r4,1
 400cee0:	2959ab04 	addi	r5,r5,26284
 400cee4:	41400015 	stw	r5,0(r8)
 400cee8:	44000115 	stw	r16,4(r8)
 400ceec:	d8801c15 	stw	r2,112(sp)
 400cef0:	d8c01b15 	stw	r3,108(sp)
 400cef4:	a0fff20e 	bge	r20,r3,400cec0 <__alt_data_end+0xfc00cec0>
 400cef8:	1000141e 	bne	r2,zero,400cf4c <___vfiprintf_internal_r+0xde4>
 400cefc:	8c7ffc04 	addi	r17,r17,-16
 400cf00:	01400044 	movi	r5,1
 400cf04:	0009883a 	mov	r4,zero
 400cf08:	d811883a 	mov	r8,sp
 400cf0c:	847ff116 	blt	r16,r17,400ced4 <__alt_data_end+0xfc00ced4>
 400cf10:	d8c02317 	ldw	r3,140(sp)
 400cf14:	1445883a 	add	r2,r2,r17
 400cf18:	44400115 	stw	r17,4(r8)
 400cf1c:	40c00015 	stw	r3,0(r8)
 400cf20:	d8801c15 	stw	r2,112(sp)
 400cf24:	d9401b15 	stw	r5,108(sp)
 400cf28:	00c001c4 	movi	r3,7
 400cf2c:	1940170e 	bge	r3,r5,400cf8c <___vfiprintf_internal_r+0xe24>
 400cf30:	1000101e 	bne	r2,zero,400cf74 <___vfiprintf_internal_r+0xe0c>
 400cf34:	d8802517 	ldw	r2,148(sp)
 400cf38:	14c11616 	blt	r2,r19,400d394 <___vfiprintf_internal_r+0x122c>
 400cf3c:	d9002417 	ldw	r4,144(sp)
 400cf40:	2089883a 	add	r4,r4,r2
 400cf44:	d9002415 	stw	r4,144(sp)
 400cf48:	003e1806 	br	400c7ac <__alt_data_end+0xfc00c7ac>
 400cf4c:	d9801a04 	addi	r6,sp,104
 400cf50:	b80b883a 	mov	r5,r23
 400cf54:	a809883a 	mov	r4,r21
 400cf58:	400c0540 	call	400c054 <__sprint_r.part.0>
 400cf5c:	103fba1e 	bne	r2,zero,400ce48 <__alt_data_end+0xfc00ce48>
 400cf60:	d9001b17 	ldw	r4,108(sp)
 400cf64:	d8801c17 	ldw	r2,112(sp)
 400cf68:	d811883a 	mov	r8,sp
 400cf6c:	21400044 	addi	r5,r4,1
 400cf70:	003fd606 	br	400cecc <__alt_data_end+0xfc00cecc>
 400cf74:	d9402017 	ldw	r5,128(sp)
 400cf78:	d9002117 	ldw	r4,132(sp)
 400cf7c:	d9801a04 	addi	r6,sp,104
 400cf80:	400c0540 	call	400c054 <__sprint_r.part.0>
 400cf84:	103fb01e 	bne	r2,zero,400ce48 <__alt_data_end+0xfc00ce48>
 400cf88:	d8801c17 	ldw	r2,112(sp)
 400cf8c:	d8c02517 	ldw	r3,148(sp)
 400cf90:	1cc0010e 	bge	r3,r19,400cf98 <___vfiprintf_internal_r+0xe30>
 400cf94:	9807883a 	mov	r3,r19
 400cf98:	d9002417 	ldw	r4,144(sp)
 400cf9c:	20c9883a 	add	r4,r4,r3
 400cfa0:	d9002415 	stw	r4,144(sp)
 400cfa4:	103e0126 	beq	r2,zero,400c7ac <__alt_data_end+0xfc00c7ac>
 400cfa8:	d9402017 	ldw	r5,128(sp)
 400cfac:	d9002117 	ldw	r4,132(sp)
 400cfb0:	d9801a04 	addi	r6,sp,104
 400cfb4:	400c0540 	call	400c054 <__sprint_r.part.0>
 400cfb8:	103dfc26 	beq	r2,zero,400c7ac <__alt_data_end+0xfc00c7ac>
 400cfbc:	003fa206 	br	400ce48 <__alt_data_end+0xfc00ce48>
 400cfc0:	d9402017 	ldw	r5,128(sp)
 400cfc4:	d9002117 	ldw	r4,132(sp)
 400cfc8:	d9801a04 	addi	r6,sp,104
 400cfcc:	d9c02b15 	stw	r7,172(sp)
 400cfd0:	400c0540 	call	400c054 <__sprint_r.part.0>
 400cfd4:	d9c02b17 	ldw	r7,172(sp)
 400cfd8:	103f9b1e 	bne	r2,zero,400ce48 <__alt_data_end+0xfc00ce48>
 400cfdc:	d9001b17 	ldw	r4,108(sp)
 400cfe0:	d8801c17 	ldw	r2,112(sp)
 400cfe4:	d811883a 	mov	r8,sp
 400cfe8:	21800044 	addi	r6,r4,1
 400cfec:	003dbf06 	br	400c6ec <__alt_data_end+0xfc00c6ec>
 400cff0:	1000d81e 	bne	r2,zero,400d354 <___vfiprintf_internal_r+0x11ec>
 400cff4:	d9001d87 	ldb	r4,118(sp)
 400cff8:	20000a26 	beq	r4,zero,400d024 <___vfiprintf_internal_r+0xebc>
 400cffc:	00800044 	movi	r2,1
 400d000:	d9001d84 	addi	r4,sp,118
 400d004:	100b883a 	mov	r5,r2
 400d008:	d9000015 	stw	r4,0(sp)
 400d00c:	d8800115 	stw	r2,4(sp)
 400d010:	d811883a 	mov	r8,sp
 400d014:	2809883a 	mov	r4,r5
 400d018:	42000204 	addi	r8,r8,8
 400d01c:	29400044 	addi	r5,r5,1
 400d020:	003d9506 	br	400c678 <__alt_data_end+0xfc00c678>
 400d024:	3800fd26 	beq	r7,zero,400d41c <___vfiprintf_internal_r+0x12b4>
 400d028:	00800084 	movi	r2,2
 400d02c:	d9001d04 	addi	r4,sp,116
 400d030:	d9000015 	stw	r4,0(sp)
 400d034:	d8800115 	stw	r2,4(sp)
 400d038:	01400044 	movi	r5,1
 400d03c:	d811883a 	mov	r8,sp
 400d040:	2809883a 	mov	r4,r5
 400d044:	42000204 	addi	r8,r8,8
 400d048:	29400044 	addi	r5,r5,1
 400d04c:	003f4606 	br	400cd68 <__alt_data_end+0xfc00cd68>
 400d050:	d8802517 	ldw	r2,148(sp)
 400d054:	14c0010e 	bge	r2,r19,400d05c <___vfiprintf_internal_r+0xef4>
 400d058:	9805883a 	mov	r2,r19
 400d05c:	d9402417 	ldw	r5,144(sp)
 400d060:	288b883a 	add	r5,r5,r2
 400d064:	d9402415 	stw	r5,144(sp)
 400d068:	003dd006 	br	400c7ac <__alt_data_end+0xfc00c7ac>
 400d06c:	d8001d85 	stb	zero,118(sp)
 400d070:	80005d16 	blt	r16,zero,400d1e8 <___vfiprintf_internal_r+0x1080>
 400d074:	00ffdfc4 	movi	r3,-129
 400d078:	9d04b03a 	or	r2,r19,r20
 400d07c:	88e2703a 	and	r17,r17,r3
 400d080:	103d3726 	beq	r2,zero,400c560 <__alt_data_end+0xfc00c560>
 400d084:	002b883a 	mov	r21,zero
 400d088:	d9002617 	ldw	r4,152(sp)
 400d08c:	ddc01a04 	addi	r23,sp,104
 400d090:	988003cc 	andi	r2,r19,15
 400d094:	a006973a 	slli	r3,r20,28
 400d098:	2085883a 	add	r2,r4,r2
 400d09c:	9826d13a 	srli	r19,r19,4
 400d0a0:	10800003 	ldbu	r2,0(r2)
 400d0a4:	a028d13a 	srli	r20,r20,4
 400d0a8:	bdffffc4 	addi	r23,r23,-1
 400d0ac:	1ce6b03a 	or	r19,r3,r19
 400d0b0:	b8800005 	stb	r2,0(r23)
 400d0b4:	9d04b03a 	or	r2,r19,r20
 400d0b8:	103ff51e 	bne	r2,zero,400d090 <__alt_data_end+0xfc00d090>
 400d0bc:	d8801e17 	ldw	r2,120(sp)
 400d0c0:	15e9c83a 	sub	r20,r2,r23
 400d0c4:	003d2b06 	br	400c574 <__alt_data_end+0xfc00c574>
 400d0c8:	d9402017 	ldw	r5,128(sp)
 400d0cc:	d9002117 	ldw	r4,132(sp)
 400d0d0:	d9801a04 	addi	r6,sp,104
 400d0d4:	400c0540 	call	400c054 <__sprint_r.part.0>
 400d0d8:	103f5b1e 	bne	r2,zero,400ce48 <__alt_data_end+0xfc00ce48>
 400d0dc:	d8801c17 	ldw	r2,112(sp)
 400d0e0:	d811883a 	mov	r8,sp
 400d0e4:	003f6706 	br	400ce84 <__alt_data_end+0xfc00ce84>
 400d0e8:	d9402017 	ldw	r5,128(sp)
 400d0ec:	d9002117 	ldw	r4,132(sp)
 400d0f0:	d9801a04 	addi	r6,sp,104
 400d0f4:	400c0540 	call	400c054 <__sprint_r.part.0>
 400d0f8:	103f531e 	bne	r2,zero,400ce48 <__alt_data_end+0xfc00ce48>
 400d0fc:	d811883a 	mov	r8,sp
 400d100:	003cd906 	br	400c468 <__alt_data_end+0xfc00c468>
 400d104:	10803fcc 	andi	r2,r2,255
 400d108:	1080201c 	xori	r2,r2,128
 400d10c:	10bfe004 	addi	r2,r2,-128
 400d110:	00c00c04 	movi	r3,48
 400d114:	10ffe926 	beq	r2,r3,400d0bc <__alt_data_end+0xfc00d0bc>
 400d118:	b8ffffc5 	stb	r3,-1(r23)
 400d11c:	d8c01e17 	ldw	r3,120(sp)
 400d120:	b8bfffc4 	addi	r2,r23,-1
 400d124:	102f883a 	mov	r23,r2
 400d128:	18a9c83a 	sub	r20,r3,r2
 400d12c:	003d1106 	br	400c574 <__alt_data_end+0xfc00c574>
 400d130:	d9402017 	ldw	r5,128(sp)
 400d134:	d9002117 	ldw	r4,132(sp)
 400d138:	d9801a04 	addi	r6,sp,104
 400d13c:	d8c02a15 	stw	r3,168(sp)
 400d140:	d9c02b15 	stw	r7,172(sp)
 400d144:	400c0540 	call	400c054 <__sprint_r.part.0>
 400d148:	d8c02a17 	ldw	r3,168(sp)
 400d14c:	d9c02b17 	ldw	r7,172(sp)
 400d150:	103f3d1e 	bne	r2,zero,400ce48 <__alt_data_end+0xfc00ce48>
 400d154:	d9001b17 	ldw	r4,108(sp)
 400d158:	d8801c17 	ldw	r2,112(sp)
 400d15c:	d811883a 	mov	r8,sp
 400d160:	21400044 	addi	r5,r4,1
 400d164:	003d4406 	br	400c678 <__alt_data_end+0xfc00c678>
 400d168:	d9402017 	ldw	r5,128(sp)
 400d16c:	d9002117 	ldw	r4,132(sp)
 400d170:	d9801a04 	addi	r6,sp,104
 400d174:	d8c02a15 	stw	r3,168(sp)
 400d178:	400c0540 	call	400c054 <__sprint_r.part.0>
 400d17c:	d8c02a17 	ldw	r3,168(sp)
 400d180:	103f311e 	bne	r2,zero,400ce48 <__alt_data_end+0xfc00ce48>
 400d184:	d9001b17 	ldw	r4,108(sp)
 400d188:	d8801c17 	ldw	r2,112(sp)
 400d18c:	d811883a 	mov	r8,sp
 400d190:	21400044 	addi	r5,r4,1
 400d194:	003ef406 	br	400cd68 <__alt_data_end+0xfc00cd68>
 400d198:	1000bd1e 	bne	r2,zero,400d490 <___vfiprintf_internal_r+0x1328>
 400d19c:	01400044 	movi	r5,1
 400d1a0:	0009883a 	mov	r4,zero
 400d1a4:	d811883a 	mov	r8,sp
 400d1a8:	003ef106 	br	400cd70 <__alt_data_end+0xfc00cd70>
 400d1ac:	d9402017 	ldw	r5,128(sp)
 400d1b0:	d9002117 	ldw	r4,132(sp)
 400d1b4:	d9801a04 	addi	r6,sp,104
 400d1b8:	400c0540 	call	400c054 <__sprint_r.part.0>
 400d1bc:	103f221e 	bne	r2,zero,400ce48 <__alt_data_end+0xfc00ce48>
 400d1c0:	d9401b17 	ldw	r5,108(sp)
 400d1c4:	d8801c17 	ldw	r2,112(sp)
 400d1c8:	d811883a 	mov	r8,sp
 400d1cc:	29400044 	addi	r5,r5,1
 400d1d0:	003d6206 	br	400c75c <__alt_data_end+0xfc00c75c>
 400d1d4:	01410074 	movhi	r5,1025
 400d1d8:	29594704 	addi	r5,r5,25884
 400d1dc:	d9402615 	stw	r5,152(sp)
 400d1e0:	d8c02215 	stw	r3,136(sp)
 400d1e4:	1023883a 	mov	r17,r2
 400d1e8:	9d04b03a 	or	r2,r19,r20
 400d1ec:	103fa51e 	bne	r2,zero,400d084 <__alt_data_end+0xfc00d084>
 400d1f0:	002b883a 	mov	r21,zero
 400d1f4:	00800084 	movi	r2,2
 400d1f8:	003e4a06 	br	400cb24 <__alt_data_end+0xfc00cb24>
 400d1fc:	01410074 	movhi	r5,1025
 400d200:	29594704 	addi	r5,r5,25884
 400d204:	002b883a 	mov	r21,zero
 400d208:	d9402615 	stw	r5,152(sp)
 400d20c:	003f9e06 	br	400d088 <__alt_data_end+0xfc00d088>
 400d210:	d9402217 	ldw	r5,136(sp)
 400d214:	d8001d85 	stb	zero,118(sp)
 400d218:	0029883a 	mov	r20,zero
 400d21c:	28800104 	addi	r2,r5,4
 400d220:	2cc00017 	ldw	r19,0(r5)
 400d224:	803e3a16 	blt	r16,zero,400cb10 <__alt_data_end+0xfc00cb10>
 400d228:	00ffdfc4 	movi	r3,-129
 400d22c:	d8802215 	stw	r2,136(sp)
 400d230:	88e2703a 	and	r17,r17,r3
 400d234:	002b883a 	mov	r21,zero
 400d238:	983e9b26 	beq	r19,zero,400cca8 <__alt_data_end+0xfc00cca8>
 400d23c:	00800244 	movi	r2,9
 400d240:	14fdc936 	bltu	r2,r19,400c968 <__alt_data_end+0xfc00c968>
 400d244:	003e9a06 	br	400ccb0 <__alt_data_end+0xfc00ccb0>
 400d248:	00800c04 	movi	r2,48
 400d24c:	d8c01d45 	stb	r3,117(sp)
 400d250:	d8801d05 	stb	r2,116(sp)
 400d254:	d8001d85 	stb	zero,118(sp)
 400d258:	88c00094 	ori	r3,r17,2
 400d25c:	80009c16 	blt	r16,zero,400d4d0 <___vfiprintf_internal_r+0x1368>
 400d260:	00bfdfc4 	movi	r2,-129
 400d264:	88a2703a 	and	r17,r17,r2
 400d268:	8c400094 	ori	r17,r17,2
 400d26c:	002b883a 	mov	r21,zero
 400d270:	003f8506 	br	400d088 <__alt_data_end+0xfc00d088>
 400d274:	b029883a 	mov	r20,r22
 400d278:	003c0b06 	br	400c2a8 <__alt_data_end+0xfc00c2a8>
 400d27c:	04e7c83a 	sub	r19,zero,r19
 400d280:	05400b44 	movi	r21,45
 400d284:	9804c03a 	cmpne	r2,r19,zero
 400d288:	0529c83a 	sub	r20,zero,r20
 400d28c:	dd401d85 	stb	r21,118(sp)
 400d290:	a0a9c83a 	sub	r20,r20,r2
 400d294:	80009716 	blt	r16,zero,400d4f4 <___vfiprintf_internal_r+0x138c>
 400d298:	00bfdfc4 	movi	r2,-129
 400d29c:	88a2703a 	and	r17,r17,r2
 400d2a0:	003db006 	br	400c964 <__alt_data_end+0xfc00c964>
 400d2a4:	b0c00007 	ldb	r3,0(r22)
 400d2a8:	003c0c06 	br	400c2dc <__alt_data_end+0xfc00c2dc>
 400d2ac:	8880100c 	andi	r2,r17,64
 400d2b0:	d8001d85 	stb	zero,118(sp)
 400d2b4:	1000461e 	bne	r2,zero,400d3d0 <___vfiprintf_internal_r+0x1268>
 400d2b8:	d9002217 	ldw	r4,136(sp)
 400d2bc:	0029883a 	mov	r20,zero
 400d2c0:	20800104 	addi	r2,r4,4
 400d2c4:	24c00017 	ldw	r19,0(r4)
 400d2c8:	803df80e 	bge	r16,zero,400caac <__alt_data_end+0xfc00caac>
 400d2cc:	9d06b03a 	or	r3,r19,r20
 400d2d0:	d8802215 	stw	r2,136(sp)
 400d2d4:	183d5e1e 	bne	r3,zero,400c850 <__alt_data_end+0xfc00c850>
 400d2d8:	002b883a 	mov	r21,zero
 400d2dc:	0005883a 	mov	r2,zero
 400d2e0:	003e1006 	br	400cb24 <__alt_data_end+0xfc00cb24>
 400d2e4:	8880040c 	andi	r2,r17,16
 400d2e8:	1000321e 	bne	r2,zero,400d3b4 <___vfiprintf_internal_r+0x124c>
 400d2ec:	8c40100c 	andi	r17,r17,64
 400d2f0:	88008d26 	beq	r17,zero,400d528 <___vfiprintf_internal_r+0x13c0>
 400d2f4:	d9402217 	ldw	r5,136(sp)
 400d2f8:	d8c02417 	ldw	r3,144(sp)
 400d2fc:	28800017 	ldw	r2,0(r5)
 400d300:	29400104 	addi	r5,r5,4
 400d304:	d9402215 	stw	r5,136(sp)
 400d308:	10c0000d 	sth	r3,0(r2)
 400d30c:	003bca06 	br	400c238 <__alt_data_end+0xfc00c238>
 400d310:	8880100c 	andi	r2,r17,64
 400d314:	10003a26 	beq	r2,zero,400d400 <___vfiprintf_internal_r+0x1298>
 400d318:	d8802217 	ldw	r2,136(sp)
 400d31c:	14c0000f 	ldh	r19,0(r2)
 400d320:	10800104 	addi	r2,r2,4
 400d324:	d8802215 	stw	r2,136(sp)
 400d328:	9829d7fa 	srai	r20,r19,31
 400d32c:	a005883a 	mov	r2,r20
 400d330:	003d8506 	br	400c948 <__alt_data_end+0xfc00c948>
 400d334:	8880100c 	andi	r2,r17,64
 400d338:	10002b26 	beq	r2,zero,400d3e8 <___vfiprintf_internal_r+0x1280>
 400d33c:	d8802217 	ldw	r2,136(sp)
 400d340:	0029883a 	mov	r20,zero
 400d344:	14c0000b 	ldhu	r19,0(r2)
 400d348:	10800104 	addi	r2,r2,4
 400d34c:	d8802215 	stw	r2,136(sp)
 400d350:	003d5d06 	br	400c8c8 <__alt_data_end+0xfc00c8c8>
 400d354:	d9402017 	ldw	r5,128(sp)
 400d358:	d9002117 	ldw	r4,132(sp)
 400d35c:	d9801a04 	addi	r6,sp,104
 400d360:	d8c02a15 	stw	r3,168(sp)
 400d364:	d9c02b15 	stw	r7,172(sp)
 400d368:	400c0540 	call	400c054 <__sprint_r.part.0>
 400d36c:	d8c02a17 	ldw	r3,168(sp)
 400d370:	d9c02b17 	ldw	r7,172(sp)
 400d374:	103eb41e 	bne	r2,zero,400ce48 <__alt_data_end+0xfc00ce48>
 400d378:	d9001b17 	ldw	r4,108(sp)
 400d37c:	d8801c17 	ldw	r2,112(sp)
 400d380:	d811883a 	mov	r8,sp
 400d384:	21400044 	addi	r5,r4,1
 400d388:	003e6706 	br	400cd28 <__alt_data_end+0xfc00cd28>
 400d38c:	00bfffc4 	movi	r2,-1
 400d390:	003c4a06 	br	400c4bc <__alt_data_end+0xfc00c4bc>
 400d394:	9805883a 	mov	r2,r19
 400d398:	003ee806 	br	400cf3c <__alt_data_end+0xfc00cf3c>
 400d39c:	d8c02217 	ldw	r3,136(sp)
 400d3a0:	0029883a 	mov	r20,zero
 400d3a4:	18800104 	addi	r2,r3,4
 400d3a8:	1cc0000b 	ldhu	r19,0(r3)
 400d3ac:	803f9e0e 	bge	r16,zero,400d228 <__alt_data_end+0xfc00d228>
 400d3b0:	003dd706 	br	400cb10 <__alt_data_end+0xfc00cb10>
 400d3b4:	d8c02217 	ldw	r3,136(sp)
 400d3b8:	d9002417 	ldw	r4,144(sp)
 400d3bc:	18800017 	ldw	r2,0(r3)
 400d3c0:	18c00104 	addi	r3,r3,4
 400d3c4:	d8c02215 	stw	r3,136(sp)
 400d3c8:	11000015 	stw	r4,0(r2)
 400d3cc:	003b9a06 	br	400c238 <__alt_data_end+0xfc00c238>
 400d3d0:	d8c02217 	ldw	r3,136(sp)
 400d3d4:	0029883a 	mov	r20,zero
 400d3d8:	18800104 	addi	r2,r3,4
 400d3dc:	1cc0000b 	ldhu	r19,0(r3)
 400d3e0:	803db20e 	bge	r16,zero,400caac <__alt_data_end+0xfc00caac>
 400d3e4:	003fb906 	br	400d2cc <__alt_data_end+0xfc00d2cc>
 400d3e8:	d9002217 	ldw	r4,136(sp)
 400d3ec:	0029883a 	mov	r20,zero
 400d3f0:	24c00017 	ldw	r19,0(r4)
 400d3f4:	21000104 	addi	r4,r4,4
 400d3f8:	d9002215 	stw	r4,136(sp)
 400d3fc:	003d3206 	br	400c8c8 <__alt_data_end+0xfc00c8c8>
 400d400:	d8c02217 	ldw	r3,136(sp)
 400d404:	1cc00017 	ldw	r19,0(r3)
 400d408:	18c00104 	addi	r3,r3,4
 400d40c:	d8c02215 	stw	r3,136(sp)
 400d410:	9829d7fa 	srai	r20,r19,31
 400d414:	a005883a 	mov	r2,r20
 400d418:	003d4b06 	br	400c948 <__alt_data_end+0xfc00c948>
 400d41c:	0009883a 	mov	r4,zero
 400d420:	01400044 	movi	r5,1
 400d424:	d811883a 	mov	r8,sp
 400d428:	003e4f06 	br	400cd68 <__alt_data_end+0xfc00cd68>
 400d42c:	d8c02215 	stw	r3,136(sp)
 400d430:	002b883a 	mov	r21,zero
 400d434:	003db806 	br	400cb18 <__alt_data_end+0xfc00cb18>
 400d438:	d811883a 	mov	r8,sp
 400d43c:	003e9606 	br	400ce98 <__alt_data_end+0xfc00ce98>
 400d440:	01010074 	movhi	r4,1025
 400d444:	2119a704 	addi	r4,r4,26268
 400d448:	d9002315 	stw	r4,140(sp)
 400d44c:	003e6306 	br	400cddc <__alt_data_end+0xfc00cddc>
 400d450:	b0c00043 	ldbu	r3,1(r22)
 400d454:	8c400814 	ori	r17,r17,32
 400d458:	b5800044 	addi	r22,r22,1
 400d45c:	18c03fcc 	andi	r3,r3,255
 400d460:	18c0201c 	xori	r3,r3,128
 400d464:	18ffe004 	addi	r3,r3,-128
 400d468:	003b9c06 	br	400c2dc <__alt_data_end+0xfc00c2dc>
 400d46c:	b809883a 	mov	r4,r23
 400d470:	da002a15 	stw	r8,168(sp)
 400d474:	40052400 	call	4005240 <strlen>
 400d478:	1029883a 	mov	r20,r2
 400d47c:	dd401d83 	ldbu	r21,118(sp)
 400d480:	df002215 	stw	fp,136(sp)
 400d484:	0021883a 	mov	r16,zero
 400d488:	da002a17 	ldw	r8,168(sp)
 400d48c:	003c3906 	br	400c574 <__alt_data_end+0xfc00c574>
 400d490:	d9402017 	ldw	r5,128(sp)
 400d494:	d9002117 	ldw	r4,132(sp)
 400d498:	d9801a04 	addi	r6,sp,104
 400d49c:	400c0540 	call	400c054 <__sprint_r.part.0>
 400d4a0:	103e691e 	bne	r2,zero,400ce48 <__alt_data_end+0xfc00ce48>
 400d4a4:	d9001b17 	ldw	r4,108(sp)
 400d4a8:	d8801c17 	ldw	r2,112(sp)
 400d4ac:	d811883a 	mov	r8,sp
 400d4b0:	21400044 	addi	r5,r4,1
 400d4b4:	003e2e06 	br	400cd70 <__alt_data_end+0xfc00cd70>
 400d4b8:	01010074 	movhi	r4,1025
 400d4bc:	2119ab04 	addi	r4,r4,26284
 400d4c0:	d9002315 	stw	r4,140(sp)
 400d4c4:	d9001b17 	ldw	r4,108(sp)
 400d4c8:	21000044 	addi	r4,r4,1
 400d4cc:	003c5e06 	br	400c648 <__alt_data_end+0xfc00c648>
 400d4d0:	002b883a 	mov	r21,zero
 400d4d4:	00800084 	movi	r2,2
 400d4d8:	10803fcc 	andi	r2,r2,255
 400d4dc:	01000044 	movi	r4,1
 400d4e0:	11002b26 	beq	r2,r4,400d590 <___vfiprintf_internal_r+0x1428>
 400d4e4:	01000084 	movi	r4,2
 400d4e8:	11002b1e 	bne	r2,r4,400d598 <___vfiprintf_internal_r+0x1430>
 400d4ec:	1823883a 	mov	r17,r3
 400d4f0:	003ee506 	br	400d088 <__alt_data_end+0xfc00d088>
 400d4f4:	8807883a 	mov	r3,r17
 400d4f8:	00800044 	movi	r2,1
 400d4fc:	003ff606 	br	400d4d8 <__alt_data_end+0xfc00d4d8>
 400d500:	00800184 	movi	r2,6
 400d504:	1400012e 	bgeu	r2,r16,400d50c <___vfiprintf_internal_r+0x13a4>
 400d508:	1021883a 	mov	r16,r2
 400d50c:	8029883a 	mov	r20,r16
 400d510:	8027883a 	mov	r19,r16
 400d514:	80002216 	blt	r16,zero,400d5a0 <___vfiprintf_internal_r+0x1438>
 400d518:	05c10074 	movhi	r23,1025
 400d51c:	df002215 	stw	fp,136(sp)
 400d520:	bdd94c04 	addi	r23,r23,25904
 400d524:	003cfb06 	br	400c914 <__alt_data_end+0xfc00c914>
 400d528:	d9002217 	ldw	r4,136(sp)
 400d52c:	d9402417 	ldw	r5,144(sp)
 400d530:	20800017 	ldw	r2,0(r4)
 400d534:	21000104 	addi	r4,r4,4
 400d538:	d9002215 	stw	r4,136(sp)
 400d53c:	11400015 	stw	r5,0(r2)
 400d540:	003b3d06 	br	400c238 <__alt_data_end+0xfc00c238>
 400d544:	01410074 	movhi	r5,1025
 400d548:	2959ab04 	addi	r5,r5,26284
 400d54c:	d9402315 	stw	r5,140(sp)
 400d550:	d9401b17 	ldw	r5,108(sp)
 400d554:	29400044 	addi	r5,r5,1
 400d558:	003e6d06 	br	400cf10 <__alt_data_end+0xfc00cf10>
 400d55c:	8029883a 	mov	r20,r16
 400d560:	dd401d83 	ldbu	r21,118(sp)
 400d564:	df002215 	stw	fp,136(sp)
 400d568:	0021883a 	mov	r16,zero
 400d56c:	003c0106 	br	400c574 <__alt_data_end+0xfc00c574>
 400d570:	00c10074 	movhi	r3,1025
 400d574:	18d9a704 	addi	r3,r3,26268
 400d578:	d8c02315 	stw	r3,140(sp)
 400d57c:	280d883a 	mov	r6,r5
 400d580:	003c6906 	br	400c728 <__alt_data_end+0xfc00c728>
 400d584:	802d883a 	mov	r22,r16
 400d588:	0021883a 	mov	r16,zero
 400d58c:	003b5406 	br	400c2e0 <__alt_data_end+0xfc00c2e0>
 400d590:	1823883a 	mov	r17,r3
 400d594:	003cf306 	br	400c964 <__alt_data_end+0xfc00c964>
 400d598:	1823883a 	mov	r17,r3
 400d59c:	003cad06 	br	400c854 <__alt_data_end+0xfc00c854>
 400d5a0:	0027883a 	mov	r19,zero
 400d5a4:	003fdc06 	br	400d518 <__alt_data_end+0xfc00d518>
 400d5a8:	d9402217 	ldw	r5,136(sp)
 400d5ac:	8005883a 	mov	r2,r16
 400d5b0:	b0c00043 	ldbu	r3,1(r22)
 400d5b4:	2c000017 	ldw	r16,0(r5)
 400d5b8:	29000104 	addi	r4,r5,4
 400d5bc:	d9002215 	stw	r4,136(sp)
 400d5c0:	102d883a 	mov	r22,r2
 400d5c4:	803fa50e 	bge	r16,zero,400d45c <__alt_data_end+0xfc00d45c>
 400d5c8:	18c03fcc 	andi	r3,r3,255
 400d5cc:	18c0201c 	xori	r3,r3,128
 400d5d0:	043fffc4 	movi	r16,-1
 400d5d4:	18ffe004 	addi	r3,r3,-128
 400d5d8:	003b4006 	br	400c2dc <__alt_data_end+0xfc00c2dc>
 400d5dc:	d9402303 	ldbu	r5,140(sp)
 400d5e0:	d9401d85 	stb	r5,118(sp)
 400d5e4:	003cae06 	br	400c8a0 <__alt_data_end+0xfc00c8a0>
 400d5e8:	d8c02303 	ldbu	r3,140(sp)
 400d5ec:	d8c01d85 	stb	r3,118(sp)
 400d5f0:	003d1406 	br	400ca44 <__alt_data_end+0xfc00ca44>
 400d5f4:	d8c02303 	ldbu	r3,140(sp)
 400d5f8:	d8c01d85 	stb	r3,118(sp)
 400d5fc:	003cca06 	br	400c928 <__alt_data_end+0xfc00c928>
 400d600:	8880004c 	andi	r2,r17,1
 400d604:	002b883a 	mov	r21,zero
 400d608:	10000526 	beq	r2,zero,400d620 <___vfiprintf_internal_r+0x14b8>
 400d60c:	00800c04 	movi	r2,48
 400d610:	d88019c5 	stb	r2,103(sp)
 400d614:	dd002817 	ldw	r20,160(sp)
 400d618:	ddc019c4 	addi	r23,sp,103
 400d61c:	003bd506 	br	400c574 <__alt_data_end+0xfc00c574>
 400d620:	0029883a 	mov	r20,zero
 400d624:	ddc01a04 	addi	r23,sp,104
 400d628:	003bd206 	br	400c574 <__alt_data_end+0xfc00c574>
 400d62c:	d9002303 	ldbu	r4,140(sp)
 400d630:	d9001d85 	stb	r4,118(sp)
 400d634:	003da606 	br	400ccd0 <__alt_data_end+0xfc00ccd0>
 400d638:	d8c02303 	ldbu	r3,140(sp)
 400d63c:	d8c01d85 	stb	r3,118(sp)
 400d640:	003c7606 	br	400c81c <__alt_data_end+0xfc00c81c>
 400d644:	d8c02303 	ldbu	r3,140(sp)
 400d648:	d8c01d85 	stb	r3,118(sp)
 400d64c:	003c6506 	br	400c7e4 <__alt_data_end+0xfc00c7e4>
 400d650:	d9002303 	ldbu	r4,140(sp)
 400d654:	d9001d85 	stb	r4,118(sp)
 400d658:	003d3d06 	br	400cb50 <__alt_data_end+0xfc00cb50>
 400d65c:	d8c02303 	ldbu	r3,140(sp)
 400d660:	d8c01d85 	stb	r3,118(sp)
 400d664:	003d1d06 	br	400cadc <__alt_data_end+0xfc00cadc>
 400d668:	d8c02303 	ldbu	r3,140(sp)
 400d66c:	d8c01d85 	stb	r3,118(sp)
 400d670:	003d0306 	br	400ca80 <__alt_data_end+0xfc00ca80>

0400d674 <__vfiprintf_internal>:
 400d674:	008100b4 	movhi	r2,1026
 400d678:	10a16104 	addi	r2,r2,-31356
 400d67c:	300f883a 	mov	r7,r6
 400d680:	280d883a 	mov	r6,r5
 400d684:	200b883a 	mov	r5,r4
 400d688:	11000017 	ldw	r4,0(r2)
 400d68c:	400c1681 	jmpi	400c168 <___vfiprintf_internal_r>

0400d690 <__sbprintf>:
 400d690:	2880030b 	ldhu	r2,12(r5)
 400d694:	2ac01917 	ldw	r11,100(r5)
 400d698:	2a80038b 	ldhu	r10,14(r5)
 400d69c:	2a400717 	ldw	r9,28(r5)
 400d6a0:	2a000917 	ldw	r8,36(r5)
 400d6a4:	defee204 	addi	sp,sp,-1144
 400d6a8:	00c10004 	movi	r3,1024
 400d6ac:	dc011a15 	stw	r16,1128(sp)
 400d6b0:	10bfff4c 	andi	r2,r2,65533
 400d6b4:	2821883a 	mov	r16,r5
 400d6b8:	d8cb883a 	add	r5,sp,r3
 400d6bc:	dc811c15 	stw	r18,1136(sp)
 400d6c0:	dc411b15 	stw	r17,1132(sp)
 400d6c4:	dfc11d15 	stw	ra,1140(sp)
 400d6c8:	2025883a 	mov	r18,r4
 400d6cc:	d881030d 	sth	r2,1036(sp)
 400d6d0:	dac11915 	stw	r11,1124(sp)
 400d6d4:	da81038d 	sth	r10,1038(sp)
 400d6d8:	da410715 	stw	r9,1052(sp)
 400d6dc:	da010915 	stw	r8,1060(sp)
 400d6e0:	dec10015 	stw	sp,1024(sp)
 400d6e4:	dec10415 	stw	sp,1040(sp)
 400d6e8:	d8c10215 	stw	r3,1032(sp)
 400d6ec:	d8c10515 	stw	r3,1044(sp)
 400d6f0:	d8010615 	stw	zero,1048(sp)
 400d6f4:	400c1680 	call	400c168 <___vfiprintf_internal_r>
 400d6f8:	1023883a 	mov	r17,r2
 400d6fc:	10000416 	blt	r2,zero,400d710 <__sbprintf+0x80>
 400d700:	d9410004 	addi	r5,sp,1024
 400d704:	9009883a 	mov	r4,r18
 400d708:	40092ac0 	call	40092ac <_fflush_r>
 400d70c:	10000d1e 	bne	r2,zero,400d744 <__sbprintf+0xb4>
 400d710:	d881030b 	ldhu	r2,1036(sp)
 400d714:	1080100c 	andi	r2,r2,64
 400d718:	10000326 	beq	r2,zero,400d728 <__sbprintf+0x98>
 400d71c:	8080030b 	ldhu	r2,12(r16)
 400d720:	10801014 	ori	r2,r2,64
 400d724:	8080030d 	sth	r2,12(r16)
 400d728:	8805883a 	mov	r2,r17
 400d72c:	dfc11d17 	ldw	ra,1140(sp)
 400d730:	dc811c17 	ldw	r18,1136(sp)
 400d734:	dc411b17 	ldw	r17,1132(sp)
 400d738:	dc011a17 	ldw	r16,1128(sp)
 400d73c:	dec11e04 	addi	sp,sp,1144
 400d740:	f800283a 	ret
 400d744:	047fffc4 	movi	r17,-1
 400d748:	003ff106 	br	400d710 <__alt_data_end+0xfc00d710>

0400d74c <__swbuf_r>:
 400d74c:	defffb04 	addi	sp,sp,-20
 400d750:	dcc00315 	stw	r19,12(sp)
 400d754:	dc800215 	stw	r18,8(sp)
 400d758:	dc000015 	stw	r16,0(sp)
 400d75c:	dfc00415 	stw	ra,16(sp)
 400d760:	dc400115 	stw	r17,4(sp)
 400d764:	2025883a 	mov	r18,r4
 400d768:	2827883a 	mov	r19,r5
 400d76c:	3021883a 	mov	r16,r6
 400d770:	20000226 	beq	r4,zero,400d77c <__swbuf_r+0x30>
 400d774:	20800e17 	ldw	r2,56(r4)
 400d778:	10004226 	beq	r2,zero,400d884 <__swbuf_r+0x138>
 400d77c:	80800617 	ldw	r2,24(r16)
 400d780:	8100030b 	ldhu	r4,12(r16)
 400d784:	80800215 	stw	r2,8(r16)
 400d788:	2080020c 	andi	r2,r4,8
 400d78c:	10003626 	beq	r2,zero,400d868 <__swbuf_r+0x11c>
 400d790:	80c00417 	ldw	r3,16(r16)
 400d794:	18003426 	beq	r3,zero,400d868 <__swbuf_r+0x11c>
 400d798:	2088000c 	andi	r2,r4,8192
 400d79c:	9c403fcc 	andi	r17,r19,255
 400d7a0:	10001a26 	beq	r2,zero,400d80c <__swbuf_r+0xc0>
 400d7a4:	80800017 	ldw	r2,0(r16)
 400d7a8:	81000517 	ldw	r4,20(r16)
 400d7ac:	10c7c83a 	sub	r3,r2,r3
 400d7b0:	1900200e 	bge	r3,r4,400d834 <__swbuf_r+0xe8>
 400d7b4:	18c00044 	addi	r3,r3,1
 400d7b8:	81000217 	ldw	r4,8(r16)
 400d7bc:	11400044 	addi	r5,r2,1
 400d7c0:	81400015 	stw	r5,0(r16)
 400d7c4:	213fffc4 	addi	r4,r4,-1
 400d7c8:	81000215 	stw	r4,8(r16)
 400d7cc:	14c00005 	stb	r19,0(r2)
 400d7d0:	80800517 	ldw	r2,20(r16)
 400d7d4:	10c01e26 	beq	r2,r3,400d850 <__swbuf_r+0x104>
 400d7d8:	8080030b 	ldhu	r2,12(r16)
 400d7dc:	1080004c 	andi	r2,r2,1
 400d7e0:	10000226 	beq	r2,zero,400d7ec <__swbuf_r+0xa0>
 400d7e4:	00800284 	movi	r2,10
 400d7e8:	88801926 	beq	r17,r2,400d850 <__swbuf_r+0x104>
 400d7ec:	8805883a 	mov	r2,r17
 400d7f0:	dfc00417 	ldw	ra,16(sp)
 400d7f4:	dcc00317 	ldw	r19,12(sp)
 400d7f8:	dc800217 	ldw	r18,8(sp)
 400d7fc:	dc400117 	ldw	r17,4(sp)
 400d800:	dc000017 	ldw	r16,0(sp)
 400d804:	dec00504 	addi	sp,sp,20
 400d808:	f800283a 	ret
 400d80c:	81401917 	ldw	r5,100(r16)
 400d810:	00b7ffc4 	movi	r2,-8193
 400d814:	21080014 	ori	r4,r4,8192
 400d818:	2884703a 	and	r2,r5,r2
 400d81c:	80801915 	stw	r2,100(r16)
 400d820:	80800017 	ldw	r2,0(r16)
 400d824:	8100030d 	sth	r4,12(r16)
 400d828:	81000517 	ldw	r4,20(r16)
 400d82c:	10c7c83a 	sub	r3,r2,r3
 400d830:	193fe016 	blt	r3,r4,400d7b4 <__alt_data_end+0xfc00d7b4>
 400d834:	800b883a 	mov	r5,r16
 400d838:	9009883a 	mov	r4,r18
 400d83c:	40092ac0 	call	40092ac <_fflush_r>
 400d840:	1000071e 	bne	r2,zero,400d860 <__swbuf_r+0x114>
 400d844:	80800017 	ldw	r2,0(r16)
 400d848:	00c00044 	movi	r3,1
 400d84c:	003fda06 	br	400d7b8 <__alt_data_end+0xfc00d7b8>
 400d850:	800b883a 	mov	r5,r16
 400d854:	9009883a 	mov	r4,r18
 400d858:	40092ac0 	call	40092ac <_fflush_r>
 400d85c:	103fe326 	beq	r2,zero,400d7ec <__alt_data_end+0xfc00d7ec>
 400d860:	00bfffc4 	movi	r2,-1
 400d864:	003fe206 	br	400d7f0 <__alt_data_end+0xfc00d7f0>
 400d868:	800b883a 	mov	r5,r16
 400d86c:	9009883a 	mov	r4,r18
 400d870:	400768c0 	call	400768c <__swsetup_r>
 400d874:	103ffa1e 	bne	r2,zero,400d860 <__alt_data_end+0xfc00d860>
 400d878:	8100030b 	ldhu	r4,12(r16)
 400d87c:	80c00417 	ldw	r3,16(r16)
 400d880:	003fc506 	br	400d798 <__alt_data_end+0xfc00d798>
 400d884:	40096980 	call	4009698 <__sinit>
 400d888:	003fbc06 	br	400d77c <__alt_data_end+0xfc00d77c>

0400d88c <__swbuf>:
 400d88c:	008100b4 	movhi	r2,1026
 400d890:	10a16104 	addi	r2,r2,-31356
 400d894:	280d883a 	mov	r6,r5
 400d898:	200b883a 	mov	r5,r4
 400d89c:	11000017 	ldw	r4,0(r2)
 400d8a0:	400d74c1 	jmpi	400d74c <__swbuf_r>

0400d8a4 <_write_r>:
 400d8a4:	defffd04 	addi	sp,sp,-12
 400d8a8:	2805883a 	mov	r2,r5
 400d8ac:	dc000015 	stw	r16,0(sp)
 400d8b0:	040100b4 	movhi	r16,1026
 400d8b4:	dc400115 	stw	r17,4(sp)
 400d8b8:	300b883a 	mov	r5,r6
 400d8bc:	84287d04 	addi	r16,r16,-24076
 400d8c0:	2023883a 	mov	r17,r4
 400d8c4:	380d883a 	mov	r6,r7
 400d8c8:	1009883a 	mov	r4,r2
 400d8cc:	dfc00215 	stw	ra,8(sp)
 400d8d0:	80000015 	stw	zero,0(r16)
 400d8d4:	4011ce40 	call	4011ce4 <write>
 400d8d8:	00ffffc4 	movi	r3,-1
 400d8dc:	10c00526 	beq	r2,r3,400d8f4 <_write_r+0x50>
 400d8e0:	dfc00217 	ldw	ra,8(sp)
 400d8e4:	dc400117 	ldw	r17,4(sp)
 400d8e8:	dc000017 	ldw	r16,0(sp)
 400d8ec:	dec00304 	addi	sp,sp,12
 400d8f0:	f800283a 	ret
 400d8f4:	80c00017 	ldw	r3,0(r16)
 400d8f8:	183ff926 	beq	r3,zero,400d8e0 <__alt_data_end+0xfc00d8e0>
 400d8fc:	88c00015 	stw	r3,0(r17)
 400d900:	003ff706 	br	400d8e0 <__alt_data_end+0xfc00d8e0>

0400d904 <_close_r>:
 400d904:	defffd04 	addi	sp,sp,-12
 400d908:	dc000015 	stw	r16,0(sp)
 400d90c:	040100b4 	movhi	r16,1026
 400d910:	dc400115 	stw	r17,4(sp)
 400d914:	84287d04 	addi	r16,r16,-24076
 400d918:	2023883a 	mov	r17,r4
 400d91c:	2809883a 	mov	r4,r5
 400d920:	dfc00215 	stw	ra,8(sp)
 400d924:	80000015 	stw	zero,0(r16)
 400d928:	401145c0 	call	401145c <close>
 400d92c:	00ffffc4 	movi	r3,-1
 400d930:	10c00526 	beq	r2,r3,400d948 <_close_r+0x44>
 400d934:	dfc00217 	ldw	ra,8(sp)
 400d938:	dc400117 	ldw	r17,4(sp)
 400d93c:	dc000017 	ldw	r16,0(sp)
 400d940:	dec00304 	addi	sp,sp,12
 400d944:	f800283a 	ret
 400d948:	80c00017 	ldw	r3,0(r16)
 400d94c:	183ff926 	beq	r3,zero,400d934 <__alt_data_end+0xfc00d934>
 400d950:	88c00015 	stw	r3,0(r17)
 400d954:	003ff706 	br	400d934 <__alt_data_end+0xfc00d934>

0400d958 <_fclose_r>:
 400d958:	28003926 	beq	r5,zero,400da40 <_fclose_r+0xe8>
 400d95c:	defffc04 	addi	sp,sp,-16
 400d960:	dc400115 	stw	r17,4(sp)
 400d964:	dc000015 	stw	r16,0(sp)
 400d968:	dfc00315 	stw	ra,12(sp)
 400d96c:	dc800215 	stw	r18,8(sp)
 400d970:	2023883a 	mov	r17,r4
 400d974:	2821883a 	mov	r16,r5
 400d978:	20000226 	beq	r4,zero,400d984 <_fclose_r+0x2c>
 400d97c:	20800e17 	ldw	r2,56(r4)
 400d980:	10002726 	beq	r2,zero,400da20 <_fclose_r+0xc8>
 400d984:	8080030f 	ldh	r2,12(r16)
 400d988:	1000071e 	bne	r2,zero,400d9a8 <_fclose_r+0x50>
 400d98c:	0005883a 	mov	r2,zero
 400d990:	dfc00317 	ldw	ra,12(sp)
 400d994:	dc800217 	ldw	r18,8(sp)
 400d998:	dc400117 	ldw	r17,4(sp)
 400d99c:	dc000017 	ldw	r16,0(sp)
 400d9a0:	dec00404 	addi	sp,sp,16
 400d9a4:	f800283a 	ret
 400d9a8:	800b883a 	mov	r5,r16
 400d9ac:	8809883a 	mov	r4,r17
 400d9b0:	40090900 	call	4009090 <__sflush_r>
 400d9b4:	1025883a 	mov	r18,r2
 400d9b8:	80800b17 	ldw	r2,44(r16)
 400d9bc:	10000426 	beq	r2,zero,400d9d0 <_fclose_r+0x78>
 400d9c0:	81400717 	ldw	r5,28(r16)
 400d9c4:	8809883a 	mov	r4,r17
 400d9c8:	103ee83a 	callr	r2
 400d9cc:	10001616 	blt	r2,zero,400da28 <_fclose_r+0xd0>
 400d9d0:	8080030b 	ldhu	r2,12(r16)
 400d9d4:	1080200c 	andi	r2,r2,128
 400d9d8:	1000151e 	bne	r2,zero,400da30 <_fclose_r+0xd8>
 400d9dc:	81400c17 	ldw	r5,48(r16)
 400d9e0:	28000526 	beq	r5,zero,400d9f8 <_fclose_r+0xa0>
 400d9e4:	80801004 	addi	r2,r16,64
 400d9e8:	28800226 	beq	r5,r2,400d9f4 <_fclose_r+0x9c>
 400d9ec:	8809883a 	mov	r4,r17
 400d9f0:	400980c0 	call	400980c <_free_r>
 400d9f4:	80000c15 	stw	zero,48(r16)
 400d9f8:	81401117 	ldw	r5,68(r16)
 400d9fc:	28000326 	beq	r5,zero,400da0c <_fclose_r+0xb4>
 400da00:	8809883a 	mov	r4,r17
 400da04:	400980c0 	call	400980c <_free_r>
 400da08:	80001115 	stw	zero,68(r16)
 400da0c:	40096a80 	call	40096a8 <__sfp_lock_acquire>
 400da10:	8000030d 	sth	zero,12(r16)
 400da14:	40096ac0 	call	40096ac <__sfp_lock_release>
 400da18:	9005883a 	mov	r2,r18
 400da1c:	003fdc06 	br	400d990 <__alt_data_end+0xfc00d990>
 400da20:	40096980 	call	4009698 <__sinit>
 400da24:	003fd706 	br	400d984 <__alt_data_end+0xfc00d984>
 400da28:	04bfffc4 	movi	r18,-1
 400da2c:	003fe806 	br	400d9d0 <__alt_data_end+0xfc00d9d0>
 400da30:	81400417 	ldw	r5,16(r16)
 400da34:	8809883a 	mov	r4,r17
 400da38:	400980c0 	call	400980c <_free_r>
 400da3c:	003fe706 	br	400d9dc <__alt_data_end+0xfc00d9dc>
 400da40:	0005883a 	mov	r2,zero
 400da44:	f800283a 	ret

0400da48 <fclose>:
 400da48:	008100b4 	movhi	r2,1026
 400da4c:	10a16104 	addi	r2,r2,-31356
 400da50:	200b883a 	mov	r5,r4
 400da54:	11000017 	ldw	r4,0(r2)
 400da58:	400d9581 	jmpi	400d958 <_fclose_r>

0400da5c <__fputwc>:
 400da5c:	defff804 	addi	sp,sp,-32
 400da60:	dcc00415 	stw	r19,16(sp)
 400da64:	dc800315 	stw	r18,12(sp)
 400da68:	dc000115 	stw	r16,4(sp)
 400da6c:	dfc00715 	stw	ra,28(sp)
 400da70:	dd400615 	stw	r21,24(sp)
 400da74:	dd000515 	stw	r20,20(sp)
 400da78:	dc400215 	stw	r17,8(sp)
 400da7c:	2027883a 	mov	r19,r4
 400da80:	2825883a 	mov	r18,r5
 400da84:	3021883a 	mov	r16,r6
 400da88:	400a1f40 	call	400a1f4 <__locale_mb_cur_max>
 400da8c:	00c00044 	movi	r3,1
 400da90:	10c03e26 	beq	r2,r3,400db8c <__fputwc+0x130>
 400da94:	81c01704 	addi	r7,r16,92
 400da98:	900d883a 	mov	r6,r18
 400da9c:	d80b883a 	mov	r5,sp
 400daa0:	9809883a 	mov	r4,r19
 400daa4:	400ddd40 	call	400ddd4 <_wcrtomb_r>
 400daa8:	1029883a 	mov	r20,r2
 400daac:	00bfffc4 	movi	r2,-1
 400dab0:	a0802026 	beq	r20,r2,400db34 <__fputwc+0xd8>
 400dab4:	d9400003 	ldbu	r5,0(sp)
 400dab8:	a0001c26 	beq	r20,zero,400db2c <__fputwc+0xd0>
 400dabc:	0023883a 	mov	r17,zero
 400dac0:	05400284 	movi	r21,10
 400dac4:	00000906 	br	400daec <__fputwc+0x90>
 400dac8:	80800017 	ldw	r2,0(r16)
 400dacc:	11400005 	stb	r5,0(r2)
 400dad0:	80c00017 	ldw	r3,0(r16)
 400dad4:	18c00044 	addi	r3,r3,1
 400dad8:	80c00015 	stw	r3,0(r16)
 400dadc:	8c400044 	addi	r17,r17,1
 400dae0:	dc45883a 	add	r2,sp,r17
 400dae4:	8d00112e 	bgeu	r17,r20,400db2c <__fputwc+0xd0>
 400dae8:	11400003 	ldbu	r5,0(r2)
 400daec:	80c00217 	ldw	r3,8(r16)
 400daf0:	18ffffc4 	addi	r3,r3,-1
 400daf4:	80c00215 	stw	r3,8(r16)
 400daf8:	183ff30e 	bge	r3,zero,400dac8 <__alt_data_end+0xfc00dac8>
 400dafc:	80800617 	ldw	r2,24(r16)
 400db00:	18801916 	blt	r3,r2,400db68 <__fputwc+0x10c>
 400db04:	80800017 	ldw	r2,0(r16)
 400db08:	11400005 	stb	r5,0(r2)
 400db0c:	80800017 	ldw	r2,0(r16)
 400db10:	10c00003 	ldbu	r3,0(r2)
 400db14:	10800044 	addi	r2,r2,1
 400db18:	1d402326 	beq	r3,r21,400dba8 <__fputwc+0x14c>
 400db1c:	80800015 	stw	r2,0(r16)
 400db20:	8c400044 	addi	r17,r17,1
 400db24:	dc45883a 	add	r2,sp,r17
 400db28:	8d3fef36 	bltu	r17,r20,400dae8 <__alt_data_end+0xfc00dae8>
 400db2c:	9005883a 	mov	r2,r18
 400db30:	00000406 	br	400db44 <__fputwc+0xe8>
 400db34:	80c0030b 	ldhu	r3,12(r16)
 400db38:	a005883a 	mov	r2,r20
 400db3c:	18c01014 	ori	r3,r3,64
 400db40:	80c0030d 	sth	r3,12(r16)
 400db44:	dfc00717 	ldw	ra,28(sp)
 400db48:	dd400617 	ldw	r21,24(sp)
 400db4c:	dd000517 	ldw	r20,20(sp)
 400db50:	dcc00417 	ldw	r19,16(sp)
 400db54:	dc800317 	ldw	r18,12(sp)
 400db58:	dc400217 	ldw	r17,8(sp)
 400db5c:	dc000117 	ldw	r16,4(sp)
 400db60:	dec00804 	addi	sp,sp,32
 400db64:	f800283a 	ret
 400db68:	800d883a 	mov	r6,r16
 400db6c:	29403fcc 	andi	r5,r5,255
 400db70:	9809883a 	mov	r4,r19
 400db74:	400d74c0 	call	400d74c <__swbuf_r>
 400db78:	10bfffe0 	cmpeqi	r2,r2,-1
 400db7c:	10803fcc 	andi	r2,r2,255
 400db80:	103fd626 	beq	r2,zero,400dadc <__alt_data_end+0xfc00dadc>
 400db84:	00bfffc4 	movi	r2,-1
 400db88:	003fee06 	br	400db44 <__alt_data_end+0xfc00db44>
 400db8c:	90ffffc4 	addi	r3,r18,-1
 400db90:	01003f84 	movi	r4,254
 400db94:	20ffbf36 	bltu	r4,r3,400da94 <__alt_data_end+0xfc00da94>
 400db98:	900b883a 	mov	r5,r18
 400db9c:	dc800005 	stb	r18,0(sp)
 400dba0:	1029883a 	mov	r20,r2
 400dba4:	003fc506 	br	400dabc <__alt_data_end+0xfc00dabc>
 400dba8:	800d883a 	mov	r6,r16
 400dbac:	a80b883a 	mov	r5,r21
 400dbb0:	9809883a 	mov	r4,r19
 400dbb4:	400d74c0 	call	400d74c <__swbuf_r>
 400dbb8:	10bfffe0 	cmpeqi	r2,r2,-1
 400dbbc:	003fef06 	br	400db7c <__alt_data_end+0xfc00db7c>

0400dbc0 <_fputwc_r>:
 400dbc0:	3080030b 	ldhu	r2,12(r6)
 400dbc4:	10c8000c 	andi	r3,r2,8192
 400dbc8:	1800051e 	bne	r3,zero,400dbe0 <_fputwc_r+0x20>
 400dbcc:	30c01917 	ldw	r3,100(r6)
 400dbd0:	10880014 	ori	r2,r2,8192
 400dbd4:	3080030d 	sth	r2,12(r6)
 400dbd8:	18880014 	ori	r2,r3,8192
 400dbdc:	30801915 	stw	r2,100(r6)
 400dbe0:	400da5c1 	jmpi	400da5c <__fputwc>

0400dbe4 <fputwc>:
 400dbe4:	008100b4 	movhi	r2,1026
 400dbe8:	defffc04 	addi	sp,sp,-16
 400dbec:	10a16104 	addi	r2,r2,-31356
 400dbf0:	dc000115 	stw	r16,4(sp)
 400dbf4:	14000017 	ldw	r16,0(r2)
 400dbf8:	dc400215 	stw	r17,8(sp)
 400dbfc:	dfc00315 	stw	ra,12(sp)
 400dc00:	2023883a 	mov	r17,r4
 400dc04:	80000226 	beq	r16,zero,400dc10 <fputwc+0x2c>
 400dc08:	80800e17 	ldw	r2,56(r16)
 400dc0c:	10001026 	beq	r2,zero,400dc50 <fputwc+0x6c>
 400dc10:	2880030b 	ldhu	r2,12(r5)
 400dc14:	10c8000c 	andi	r3,r2,8192
 400dc18:	1800051e 	bne	r3,zero,400dc30 <fputwc+0x4c>
 400dc1c:	28c01917 	ldw	r3,100(r5)
 400dc20:	10880014 	ori	r2,r2,8192
 400dc24:	2880030d 	sth	r2,12(r5)
 400dc28:	18880014 	ori	r2,r3,8192
 400dc2c:	28801915 	stw	r2,100(r5)
 400dc30:	280d883a 	mov	r6,r5
 400dc34:	8009883a 	mov	r4,r16
 400dc38:	880b883a 	mov	r5,r17
 400dc3c:	dfc00317 	ldw	ra,12(sp)
 400dc40:	dc400217 	ldw	r17,8(sp)
 400dc44:	dc000117 	ldw	r16,4(sp)
 400dc48:	dec00404 	addi	sp,sp,16
 400dc4c:	400da5c1 	jmpi	400da5c <__fputwc>
 400dc50:	8009883a 	mov	r4,r16
 400dc54:	d9400015 	stw	r5,0(sp)
 400dc58:	40096980 	call	4009698 <__sinit>
 400dc5c:	d9400017 	ldw	r5,0(sp)
 400dc60:	003feb06 	br	400dc10 <__alt_data_end+0xfc00dc10>

0400dc64 <_fstat_r>:
 400dc64:	defffd04 	addi	sp,sp,-12
 400dc68:	2805883a 	mov	r2,r5
 400dc6c:	dc000015 	stw	r16,0(sp)
 400dc70:	040100b4 	movhi	r16,1026
 400dc74:	dc400115 	stw	r17,4(sp)
 400dc78:	84287d04 	addi	r16,r16,-24076
 400dc7c:	2023883a 	mov	r17,r4
 400dc80:	300b883a 	mov	r5,r6
 400dc84:	1009883a 	mov	r4,r2
 400dc88:	dfc00215 	stw	ra,8(sp)
 400dc8c:	80000015 	stw	zero,0(r16)
 400dc90:	401159c0 	call	401159c <fstat>
 400dc94:	00ffffc4 	movi	r3,-1
 400dc98:	10c00526 	beq	r2,r3,400dcb0 <_fstat_r+0x4c>
 400dc9c:	dfc00217 	ldw	ra,8(sp)
 400dca0:	dc400117 	ldw	r17,4(sp)
 400dca4:	dc000017 	ldw	r16,0(sp)
 400dca8:	dec00304 	addi	sp,sp,12
 400dcac:	f800283a 	ret
 400dcb0:	80c00017 	ldw	r3,0(r16)
 400dcb4:	183ff926 	beq	r3,zero,400dc9c <__alt_data_end+0xfc00dc9c>
 400dcb8:	88c00015 	stw	r3,0(r17)
 400dcbc:	003ff706 	br	400dc9c <__alt_data_end+0xfc00dc9c>

0400dcc0 <_isatty_r>:
 400dcc0:	defffd04 	addi	sp,sp,-12
 400dcc4:	dc000015 	stw	r16,0(sp)
 400dcc8:	040100b4 	movhi	r16,1026
 400dccc:	dc400115 	stw	r17,4(sp)
 400dcd0:	84287d04 	addi	r16,r16,-24076
 400dcd4:	2023883a 	mov	r17,r4
 400dcd8:	2809883a 	mov	r4,r5
 400dcdc:	dfc00215 	stw	ra,8(sp)
 400dce0:	80000015 	stw	zero,0(r16)
 400dce4:	40116900 	call	4011690 <isatty>
 400dce8:	00ffffc4 	movi	r3,-1
 400dcec:	10c00526 	beq	r2,r3,400dd04 <_isatty_r+0x44>
 400dcf0:	dfc00217 	ldw	ra,8(sp)
 400dcf4:	dc400117 	ldw	r17,4(sp)
 400dcf8:	dc000017 	ldw	r16,0(sp)
 400dcfc:	dec00304 	addi	sp,sp,12
 400dd00:	f800283a 	ret
 400dd04:	80c00017 	ldw	r3,0(r16)
 400dd08:	183ff926 	beq	r3,zero,400dcf0 <__alt_data_end+0xfc00dcf0>
 400dd0c:	88c00015 	stw	r3,0(r17)
 400dd10:	003ff706 	br	400dcf0 <__alt_data_end+0xfc00dcf0>

0400dd14 <_lseek_r>:
 400dd14:	defffd04 	addi	sp,sp,-12
 400dd18:	2805883a 	mov	r2,r5
 400dd1c:	dc000015 	stw	r16,0(sp)
 400dd20:	040100b4 	movhi	r16,1026
 400dd24:	dc400115 	stw	r17,4(sp)
 400dd28:	300b883a 	mov	r5,r6
 400dd2c:	84287d04 	addi	r16,r16,-24076
 400dd30:	2023883a 	mov	r17,r4
 400dd34:	380d883a 	mov	r6,r7
 400dd38:	1009883a 	mov	r4,r2
 400dd3c:	dfc00215 	stw	ra,8(sp)
 400dd40:	80000015 	stw	zero,0(r16)
 400dd44:	40118640 	call	4011864 <lseek>
 400dd48:	00ffffc4 	movi	r3,-1
 400dd4c:	10c00526 	beq	r2,r3,400dd64 <_lseek_r+0x50>
 400dd50:	dfc00217 	ldw	ra,8(sp)
 400dd54:	dc400117 	ldw	r17,4(sp)
 400dd58:	dc000017 	ldw	r16,0(sp)
 400dd5c:	dec00304 	addi	sp,sp,12
 400dd60:	f800283a 	ret
 400dd64:	80c00017 	ldw	r3,0(r16)
 400dd68:	183ff926 	beq	r3,zero,400dd50 <__alt_data_end+0xfc00dd50>
 400dd6c:	88c00015 	stw	r3,0(r17)
 400dd70:	003ff706 	br	400dd50 <__alt_data_end+0xfc00dd50>

0400dd74 <_read_r>:
 400dd74:	defffd04 	addi	sp,sp,-12
 400dd78:	2805883a 	mov	r2,r5
 400dd7c:	dc000015 	stw	r16,0(sp)
 400dd80:	040100b4 	movhi	r16,1026
 400dd84:	dc400115 	stw	r17,4(sp)
 400dd88:	300b883a 	mov	r5,r6
 400dd8c:	84287d04 	addi	r16,r16,-24076
 400dd90:	2023883a 	mov	r17,r4
 400dd94:	380d883a 	mov	r6,r7
 400dd98:	1009883a 	mov	r4,r2
 400dd9c:	dfc00215 	stw	ra,8(sp)
 400dda0:	80000015 	stw	zero,0(r16)
 400dda4:	4011a400 	call	4011a40 <read>
 400dda8:	00ffffc4 	movi	r3,-1
 400ddac:	10c00526 	beq	r2,r3,400ddc4 <_read_r+0x50>
 400ddb0:	dfc00217 	ldw	ra,8(sp)
 400ddb4:	dc400117 	ldw	r17,4(sp)
 400ddb8:	dc000017 	ldw	r16,0(sp)
 400ddbc:	dec00304 	addi	sp,sp,12
 400ddc0:	f800283a 	ret
 400ddc4:	80c00017 	ldw	r3,0(r16)
 400ddc8:	183ff926 	beq	r3,zero,400ddb0 <__alt_data_end+0xfc00ddb0>
 400ddcc:	88c00015 	stw	r3,0(r17)
 400ddd0:	003ff706 	br	400ddb0 <__alt_data_end+0xfc00ddb0>

0400ddd4 <_wcrtomb_r>:
 400ddd4:	defff604 	addi	sp,sp,-40
 400ddd8:	008100b4 	movhi	r2,1026
 400dddc:	dc800815 	stw	r18,32(sp)
 400dde0:	dc400715 	stw	r17,28(sp)
 400dde4:	dc000615 	stw	r16,24(sp)
 400dde8:	10a16504 	addi	r2,r2,-31340
 400ddec:	dfc00915 	stw	ra,36(sp)
 400ddf0:	2021883a 	mov	r16,r4
 400ddf4:	3823883a 	mov	r17,r7
 400ddf8:	14800017 	ldw	r18,0(r2)
 400ddfc:	28001426 	beq	r5,zero,400de50 <_wcrtomb_r+0x7c>
 400de00:	d9400415 	stw	r5,16(sp)
 400de04:	d9800515 	stw	r6,20(sp)
 400de08:	400a1e80 	call	400a1e8 <__locale_charset>
 400de0c:	d9800517 	ldw	r6,20(sp)
 400de10:	d9400417 	ldw	r5,16(sp)
 400de14:	100f883a 	mov	r7,r2
 400de18:	dc400015 	stw	r17,0(sp)
 400de1c:	8009883a 	mov	r4,r16
 400de20:	903ee83a 	callr	r18
 400de24:	00ffffc4 	movi	r3,-1
 400de28:	10c0031e 	bne	r2,r3,400de38 <_wcrtomb_r+0x64>
 400de2c:	88000015 	stw	zero,0(r17)
 400de30:	00c02284 	movi	r3,138
 400de34:	80c00015 	stw	r3,0(r16)
 400de38:	dfc00917 	ldw	ra,36(sp)
 400de3c:	dc800817 	ldw	r18,32(sp)
 400de40:	dc400717 	ldw	r17,28(sp)
 400de44:	dc000617 	ldw	r16,24(sp)
 400de48:	dec00a04 	addi	sp,sp,40
 400de4c:	f800283a 	ret
 400de50:	400a1e80 	call	400a1e8 <__locale_charset>
 400de54:	100f883a 	mov	r7,r2
 400de58:	dc400015 	stw	r17,0(sp)
 400de5c:	000d883a 	mov	r6,zero
 400de60:	d9400104 	addi	r5,sp,4
 400de64:	8009883a 	mov	r4,r16
 400de68:	903ee83a 	callr	r18
 400de6c:	003fed06 	br	400de24 <__alt_data_end+0xfc00de24>

0400de70 <wcrtomb>:
 400de70:	defff604 	addi	sp,sp,-40
 400de74:	008100b4 	movhi	r2,1026
 400de78:	dc800615 	stw	r18,24(sp)
 400de7c:	dc400515 	stw	r17,20(sp)
 400de80:	10a16104 	addi	r2,r2,-31356
 400de84:	dfc00915 	stw	ra,36(sp)
 400de88:	dd000815 	stw	r20,32(sp)
 400de8c:	dcc00715 	stw	r19,28(sp)
 400de90:	dc000415 	stw	r16,16(sp)
 400de94:	3025883a 	mov	r18,r6
 400de98:	14400017 	ldw	r17,0(r2)
 400de9c:	20001926 	beq	r4,zero,400df04 <wcrtomb+0x94>
 400dea0:	008100b4 	movhi	r2,1026
 400dea4:	10a16504 	addi	r2,r2,-31340
 400dea8:	15000017 	ldw	r20,0(r2)
 400deac:	2021883a 	mov	r16,r4
 400deb0:	2827883a 	mov	r19,r5
 400deb4:	400a1e80 	call	400a1e8 <__locale_charset>
 400deb8:	100f883a 	mov	r7,r2
 400debc:	dc800015 	stw	r18,0(sp)
 400dec0:	980d883a 	mov	r6,r19
 400dec4:	800b883a 	mov	r5,r16
 400dec8:	8809883a 	mov	r4,r17
 400decc:	a03ee83a 	callr	r20
 400ded0:	00ffffc4 	movi	r3,-1
 400ded4:	10c0031e 	bne	r2,r3,400dee4 <wcrtomb+0x74>
 400ded8:	90000015 	stw	zero,0(r18)
 400dedc:	00c02284 	movi	r3,138
 400dee0:	88c00015 	stw	r3,0(r17)
 400dee4:	dfc00917 	ldw	ra,36(sp)
 400dee8:	dd000817 	ldw	r20,32(sp)
 400deec:	dcc00717 	ldw	r19,28(sp)
 400def0:	dc800617 	ldw	r18,24(sp)
 400def4:	dc400517 	ldw	r17,20(sp)
 400def8:	dc000417 	ldw	r16,16(sp)
 400defc:	dec00a04 	addi	sp,sp,40
 400df00:	f800283a 	ret
 400df04:	008100b4 	movhi	r2,1026
 400df08:	10a16504 	addi	r2,r2,-31340
 400df0c:	14000017 	ldw	r16,0(r2)
 400df10:	400a1e80 	call	400a1e8 <__locale_charset>
 400df14:	100f883a 	mov	r7,r2
 400df18:	dc800015 	stw	r18,0(sp)
 400df1c:	000d883a 	mov	r6,zero
 400df20:	d9400104 	addi	r5,sp,4
 400df24:	8809883a 	mov	r4,r17
 400df28:	803ee83a 	callr	r16
 400df2c:	003fe806 	br	400ded0 <__alt_data_end+0xfc00ded0>

0400df30 <__ascii_wctomb>:
 400df30:	28000526 	beq	r5,zero,400df48 <__ascii_wctomb+0x18>
 400df34:	00803fc4 	movi	r2,255
 400df38:	11800536 	bltu	r2,r6,400df50 <__ascii_wctomb+0x20>
 400df3c:	29800005 	stb	r6,0(r5)
 400df40:	00800044 	movi	r2,1
 400df44:	f800283a 	ret
 400df48:	0005883a 	mov	r2,zero
 400df4c:	f800283a 	ret
 400df50:	00802284 	movi	r2,138
 400df54:	20800015 	stw	r2,0(r4)
 400df58:	00bfffc4 	movi	r2,-1
 400df5c:	f800283a 	ret

0400df60 <_wctomb_r>:
 400df60:	008100b4 	movhi	r2,1026
 400df64:	defff904 	addi	sp,sp,-28
 400df68:	10a16504 	addi	r2,r2,-31340
 400df6c:	dfc00615 	stw	ra,24(sp)
 400df70:	dc400515 	stw	r17,20(sp)
 400df74:	dc000415 	stw	r16,16(sp)
 400df78:	3823883a 	mov	r17,r7
 400df7c:	14000017 	ldw	r16,0(r2)
 400df80:	d9000115 	stw	r4,4(sp)
 400df84:	d9400215 	stw	r5,8(sp)
 400df88:	d9800315 	stw	r6,12(sp)
 400df8c:	400a1e80 	call	400a1e8 <__locale_charset>
 400df90:	d9800317 	ldw	r6,12(sp)
 400df94:	d9400217 	ldw	r5,8(sp)
 400df98:	d9000117 	ldw	r4,4(sp)
 400df9c:	100f883a 	mov	r7,r2
 400dfa0:	dc400015 	stw	r17,0(sp)
 400dfa4:	803ee83a 	callr	r16
 400dfa8:	dfc00617 	ldw	ra,24(sp)
 400dfac:	dc400517 	ldw	r17,20(sp)
 400dfb0:	dc000417 	ldw	r16,16(sp)
 400dfb4:	dec00704 	addi	sp,sp,28
 400dfb8:	f800283a 	ret

0400dfbc <__udivdi3>:
 400dfbc:	defff404 	addi	sp,sp,-48
 400dfc0:	dcc00515 	stw	r19,20(sp)
 400dfc4:	dc000215 	stw	r16,8(sp)
 400dfc8:	dfc00b15 	stw	ra,44(sp)
 400dfcc:	df000a15 	stw	fp,40(sp)
 400dfd0:	ddc00915 	stw	r23,36(sp)
 400dfd4:	dd800815 	stw	r22,32(sp)
 400dfd8:	dd400715 	stw	r21,28(sp)
 400dfdc:	dd000615 	stw	r20,24(sp)
 400dfe0:	dc800415 	stw	r18,16(sp)
 400dfe4:	dc400315 	stw	r17,12(sp)
 400dfe8:	2027883a 	mov	r19,r4
 400dfec:	2821883a 	mov	r16,r5
 400dff0:	3800461e 	bne	r7,zero,400e10c <__udivdi3+0x150>
 400dff4:	3023883a 	mov	r17,r6
 400dff8:	2025883a 	mov	r18,r4
 400dffc:	2980572e 	bgeu	r5,r6,400e15c <__udivdi3+0x1a0>
 400e000:	00bfffd4 	movui	r2,65535
 400e004:	282d883a 	mov	r22,r5
 400e008:	1180b236 	bltu	r2,r6,400e2d4 <__udivdi3+0x318>
 400e00c:	00803fc4 	movi	r2,255
 400e010:	1185803a 	cmpltu	r2,r2,r6
 400e014:	100490fa 	slli	r2,r2,3
 400e018:	3086d83a 	srl	r3,r6,r2
 400e01c:	01010074 	movhi	r4,1025
 400e020:	2119af04 	addi	r4,r4,26300
 400e024:	20c7883a 	add	r3,r4,r3
 400e028:	18c00003 	ldbu	r3,0(r3)
 400e02c:	1885883a 	add	r2,r3,r2
 400e030:	00c00804 	movi	r3,32
 400e034:	1887c83a 	sub	r3,r3,r2
 400e038:	18000526 	beq	r3,zero,400e050 <__udivdi3+0x94>
 400e03c:	80e0983a 	sll	r16,r16,r3
 400e040:	9884d83a 	srl	r2,r19,r2
 400e044:	30e2983a 	sll	r17,r6,r3
 400e048:	98e4983a 	sll	r18,r19,r3
 400e04c:	142cb03a 	or	r22,r2,r16
 400e050:	882ad43a 	srli	r21,r17,16
 400e054:	b009883a 	mov	r4,r22
 400e058:	8d3fffcc 	andi	r20,r17,65535
 400e05c:	a80b883a 	mov	r5,r21
 400e060:	400449c0 	call	400449c <__umodsi3>
 400e064:	b009883a 	mov	r4,r22
 400e068:	a80b883a 	mov	r5,r21
 400e06c:	1027883a 	mov	r19,r2
 400e070:	40044380 	call	4004438 <__udivsi3>
 400e074:	100b883a 	mov	r5,r2
 400e078:	a009883a 	mov	r4,r20
 400e07c:	102d883a 	mov	r22,r2
 400e080:	40044f40 	call	40044f4 <__mulsi3>
 400e084:	9826943a 	slli	r19,r19,16
 400e088:	9006d43a 	srli	r3,r18,16
 400e08c:	1cc6b03a 	or	r3,r3,r19
 400e090:	1880052e 	bgeu	r3,r2,400e0a8 <__udivdi3+0xec>
 400e094:	1c47883a 	add	r3,r3,r17
 400e098:	b13fffc4 	addi	r4,r22,-1
 400e09c:	1c400136 	bltu	r3,r17,400e0a4 <__udivdi3+0xe8>
 400e0a0:	18814236 	bltu	r3,r2,400e5ac <__udivdi3+0x5f0>
 400e0a4:	202d883a 	mov	r22,r4
 400e0a8:	18a1c83a 	sub	r16,r3,r2
 400e0ac:	8009883a 	mov	r4,r16
 400e0b0:	a80b883a 	mov	r5,r21
 400e0b4:	400449c0 	call	400449c <__umodsi3>
 400e0b8:	1027883a 	mov	r19,r2
 400e0bc:	8009883a 	mov	r4,r16
 400e0c0:	a80b883a 	mov	r5,r21
 400e0c4:	9826943a 	slli	r19,r19,16
 400e0c8:	40044380 	call	4004438 <__udivsi3>
 400e0cc:	100b883a 	mov	r5,r2
 400e0d0:	a009883a 	mov	r4,r20
 400e0d4:	94bfffcc 	andi	r18,r18,65535
 400e0d8:	1021883a 	mov	r16,r2
 400e0dc:	94e4b03a 	or	r18,r18,r19
 400e0e0:	40044f40 	call	40044f4 <__mulsi3>
 400e0e4:	9080052e 	bgeu	r18,r2,400e0fc <__udivdi3+0x140>
 400e0e8:	8ca5883a 	add	r18,r17,r18
 400e0ec:	80ffffc4 	addi	r3,r16,-1
 400e0f0:	94410c36 	bltu	r18,r17,400e524 <__udivdi3+0x568>
 400e0f4:	90810b2e 	bgeu	r18,r2,400e524 <__udivdi3+0x568>
 400e0f8:	843fff84 	addi	r16,r16,-2
 400e0fc:	b004943a 	slli	r2,r22,16
 400e100:	0007883a 	mov	r3,zero
 400e104:	1404b03a 	or	r2,r2,r16
 400e108:	00005e06 	br	400e284 <__udivdi3+0x2c8>
 400e10c:	29c05b36 	bltu	r5,r7,400e27c <__udivdi3+0x2c0>
 400e110:	00bfffd4 	movui	r2,65535
 400e114:	11c0672e 	bgeu	r2,r7,400e2b4 <__udivdi3+0x2f8>
 400e118:	00804034 	movhi	r2,256
 400e11c:	10bfffc4 	addi	r2,r2,-1
 400e120:	11c10a36 	bltu	r2,r7,400e54c <__udivdi3+0x590>
 400e124:	00800404 	movi	r2,16
 400e128:	3886d83a 	srl	r3,r7,r2
 400e12c:	01010074 	movhi	r4,1025
 400e130:	2119af04 	addi	r4,r4,26300
 400e134:	20c7883a 	add	r3,r4,r3
 400e138:	18c00003 	ldbu	r3,0(r3)
 400e13c:	05c00804 	movi	r23,32
 400e140:	1885883a 	add	r2,r3,r2
 400e144:	b8afc83a 	sub	r23,r23,r2
 400e148:	b800671e 	bne	r23,zero,400e2e8 <__udivdi3+0x32c>
 400e14c:	3c010536 	bltu	r7,r16,400e564 <__udivdi3+0x5a8>
 400e150:	9985403a 	cmpgeu	r2,r19,r6
 400e154:	0007883a 	mov	r3,zero
 400e158:	00004a06 	br	400e284 <__udivdi3+0x2c8>
 400e15c:	3000041e 	bne	r6,zero,400e170 <__udivdi3+0x1b4>
 400e160:	000b883a 	mov	r5,zero
 400e164:	01000044 	movi	r4,1
 400e168:	40044380 	call	4004438 <__udivsi3>
 400e16c:	1023883a 	mov	r17,r2
 400e170:	00bfffd4 	movui	r2,65535
 400e174:	1440532e 	bgeu	r2,r17,400e2c4 <__udivdi3+0x308>
 400e178:	00804034 	movhi	r2,256
 400e17c:	10bfffc4 	addi	r2,r2,-1
 400e180:	1440f436 	bltu	r2,r17,400e554 <__udivdi3+0x598>
 400e184:	00800404 	movi	r2,16
 400e188:	8886d83a 	srl	r3,r17,r2
 400e18c:	01010074 	movhi	r4,1025
 400e190:	2119af04 	addi	r4,r4,26300
 400e194:	20c7883a 	add	r3,r4,r3
 400e198:	18c00003 	ldbu	r3,0(r3)
 400e19c:	1885883a 	add	r2,r3,r2
 400e1a0:	00c00804 	movi	r3,32
 400e1a4:	1887c83a 	sub	r3,r3,r2
 400e1a8:	1800a51e 	bne	r3,zero,400e440 <__udivdi3+0x484>
 400e1ac:	882ad43a 	srli	r21,r17,16
 400e1b0:	8461c83a 	sub	r16,r16,r17
 400e1b4:	8d3fffcc 	andi	r20,r17,65535
 400e1b8:	00c00044 	movi	r3,1
 400e1bc:	a80b883a 	mov	r5,r21
 400e1c0:	8009883a 	mov	r4,r16
 400e1c4:	d8c00115 	stw	r3,4(sp)
 400e1c8:	400449c0 	call	400449c <__umodsi3>
 400e1cc:	a80b883a 	mov	r5,r21
 400e1d0:	8009883a 	mov	r4,r16
 400e1d4:	1027883a 	mov	r19,r2
 400e1d8:	40044380 	call	4004438 <__udivsi3>
 400e1dc:	a00b883a 	mov	r5,r20
 400e1e0:	1009883a 	mov	r4,r2
 400e1e4:	102d883a 	mov	r22,r2
 400e1e8:	40044f40 	call	40044f4 <__mulsi3>
 400e1ec:	9826943a 	slli	r19,r19,16
 400e1f0:	900ed43a 	srli	r7,r18,16
 400e1f4:	d8c00117 	ldw	r3,4(sp)
 400e1f8:	3cceb03a 	or	r7,r7,r19
 400e1fc:	3880052e 	bgeu	r7,r2,400e214 <__udivdi3+0x258>
 400e200:	3c4f883a 	add	r7,r7,r17
 400e204:	b13fffc4 	addi	r4,r22,-1
 400e208:	3c400136 	bltu	r7,r17,400e210 <__udivdi3+0x254>
 400e20c:	3880e436 	bltu	r7,r2,400e5a0 <__udivdi3+0x5e4>
 400e210:	202d883a 	mov	r22,r4
 400e214:	38a1c83a 	sub	r16,r7,r2
 400e218:	8009883a 	mov	r4,r16
 400e21c:	a80b883a 	mov	r5,r21
 400e220:	d8c00115 	stw	r3,4(sp)
 400e224:	400449c0 	call	400449c <__umodsi3>
 400e228:	1027883a 	mov	r19,r2
 400e22c:	8009883a 	mov	r4,r16
 400e230:	a80b883a 	mov	r5,r21
 400e234:	9826943a 	slli	r19,r19,16
 400e238:	40044380 	call	4004438 <__udivsi3>
 400e23c:	a00b883a 	mov	r5,r20
 400e240:	1009883a 	mov	r4,r2
 400e244:	94bfffcc 	andi	r18,r18,65535
 400e248:	1021883a 	mov	r16,r2
 400e24c:	94e4b03a 	or	r18,r18,r19
 400e250:	40044f40 	call	40044f4 <__mulsi3>
 400e254:	d8c00117 	ldw	r3,4(sp)
 400e258:	9080052e 	bgeu	r18,r2,400e270 <__udivdi3+0x2b4>
 400e25c:	8ca5883a 	add	r18,r17,r18
 400e260:	813fffc4 	addi	r4,r16,-1
 400e264:	9440ad36 	bltu	r18,r17,400e51c <__udivdi3+0x560>
 400e268:	9080ac2e 	bgeu	r18,r2,400e51c <__udivdi3+0x560>
 400e26c:	843fff84 	addi	r16,r16,-2
 400e270:	b004943a 	slli	r2,r22,16
 400e274:	1404b03a 	or	r2,r2,r16
 400e278:	00000206 	br	400e284 <__udivdi3+0x2c8>
 400e27c:	0007883a 	mov	r3,zero
 400e280:	0005883a 	mov	r2,zero
 400e284:	dfc00b17 	ldw	ra,44(sp)
 400e288:	df000a17 	ldw	fp,40(sp)
 400e28c:	ddc00917 	ldw	r23,36(sp)
 400e290:	dd800817 	ldw	r22,32(sp)
 400e294:	dd400717 	ldw	r21,28(sp)
 400e298:	dd000617 	ldw	r20,24(sp)
 400e29c:	dcc00517 	ldw	r19,20(sp)
 400e2a0:	dc800417 	ldw	r18,16(sp)
 400e2a4:	dc400317 	ldw	r17,12(sp)
 400e2a8:	dc000217 	ldw	r16,8(sp)
 400e2ac:	dec00c04 	addi	sp,sp,48
 400e2b0:	f800283a 	ret
 400e2b4:	00803fc4 	movi	r2,255
 400e2b8:	11c5803a 	cmpltu	r2,r2,r7
 400e2bc:	100490fa 	slli	r2,r2,3
 400e2c0:	003f9906 	br	400e128 <__alt_data_end+0xfc00e128>
 400e2c4:	00803fc4 	movi	r2,255
 400e2c8:	1445803a 	cmpltu	r2,r2,r17
 400e2cc:	100490fa 	slli	r2,r2,3
 400e2d0:	003fad06 	br	400e188 <__alt_data_end+0xfc00e188>
 400e2d4:	00804034 	movhi	r2,256
 400e2d8:	10bfffc4 	addi	r2,r2,-1
 400e2dc:	11809f36 	bltu	r2,r6,400e55c <__udivdi3+0x5a0>
 400e2e0:	00800404 	movi	r2,16
 400e2e4:	003f4c06 	br	400e018 <__alt_data_end+0xfc00e018>
 400e2e8:	3dce983a 	sll	r7,r7,r23
 400e2ec:	30b8d83a 	srl	fp,r6,r2
 400e2f0:	80a2d83a 	srl	r17,r16,r2
 400e2f4:	35cc983a 	sll	r6,r6,r23
 400e2f8:	3f38b03a 	or	fp,r7,fp
 400e2fc:	e024d43a 	srli	r18,fp,16
 400e300:	9884d83a 	srl	r2,r19,r2
 400e304:	85e0983a 	sll	r16,r16,r23
 400e308:	8809883a 	mov	r4,r17
 400e30c:	900b883a 	mov	r5,r18
 400e310:	d9800015 	stw	r6,0(sp)
 400e314:	1420b03a 	or	r16,r2,r16
 400e318:	400449c0 	call	400449c <__umodsi3>
 400e31c:	900b883a 	mov	r5,r18
 400e320:	8809883a 	mov	r4,r17
 400e324:	1029883a 	mov	r20,r2
 400e328:	e5bfffcc 	andi	r22,fp,65535
 400e32c:	40044380 	call	4004438 <__udivsi3>
 400e330:	100b883a 	mov	r5,r2
 400e334:	b009883a 	mov	r4,r22
 400e338:	102b883a 	mov	r21,r2
 400e33c:	40044f40 	call	40044f4 <__mulsi3>
 400e340:	a028943a 	slli	r20,r20,16
 400e344:	8006d43a 	srli	r3,r16,16
 400e348:	1d06b03a 	or	r3,r3,r20
 400e34c:	1880042e 	bgeu	r3,r2,400e360 <__udivdi3+0x3a4>
 400e350:	1f07883a 	add	r3,r3,fp
 400e354:	a93fffc4 	addi	r4,r21,-1
 400e358:	1f00892e 	bgeu	r3,fp,400e580 <__udivdi3+0x5c4>
 400e35c:	202b883a 	mov	r21,r4
 400e360:	18a3c83a 	sub	r17,r3,r2
 400e364:	8809883a 	mov	r4,r17
 400e368:	900b883a 	mov	r5,r18
 400e36c:	400449c0 	call	400449c <__umodsi3>
 400e370:	1029883a 	mov	r20,r2
 400e374:	8809883a 	mov	r4,r17
 400e378:	900b883a 	mov	r5,r18
 400e37c:	a028943a 	slli	r20,r20,16
 400e380:	40044380 	call	4004438 <__udivsi3>
 400e384:	100b883a 	mov	r5,r2
 400e388:	b009883a 	mov	r4,r22
 400e38c:	843fffcc 	andi	r16,r16,65535
 400e390:	1023883a 	mov	r17,r2
 400e394:	8520b03a 	or	r16,r16,r20
 400e398:	40044f40 	call	40044f4 <__mulsi3>
 400e39c:	8080042e 	bgeu	r16,r2,400e3b0 <__udivdi3+0x3f4>
 400e3a0:	8721883a 	add	r16,r16,fp
 400e3a4:	88ffffc4 	addi	r3,r17,-1
 400e3a8:	8700712e 	bgeu	r16,fp,400e570 <__udivdi3+0x5b4>
 400e3ac:	1823883a 	mov	r17,r3
 400e3b0:	a80e943a 	slli	r7,r21,16
 400e3b4:	d8c00017 	ldw	r3,0(sp)
 400e3b8:	80a1c83a 	sub	r16,r16,r2
 400e3bc:	3c64b03a 	or	r18,r7,r17
 400e3c0:	1d3fffcc 	andi	r20,r3,65535
 400e3c4:	9022d43a 	srli	r17,r18,16
 400e3c8:	95bfffcc 	andi	r22,r18,65535
 400e3cc:	a00b883a 	mov	r5,r20
 400e3d0:	b009883a 	mov	r4,r22
 400e3d4:	182ad43a 	srli	r21,r3,16
 400e3d8:	40044f40 	call	40044f4 <__mulsi3>
 400e3dc:	a00b883a 	mov	r5,r20
 400e3e0:	8809883a 	mov	r4,r17
 400e3e4:	1039883a 	mov	fp,r2
 400e3e8:	40044f40 	call	40044f4 <__mulsi3>
 400e3ec:	8809883a 	mov	r4,r17
 400e3f0:	a80b883a 	mov	r5,r21
 400e3f4:	1029883a 	mov	r20,r2
 400e3f8:	40044f40 	call	40044f4 <__mulsi3>
 400e3fc:	a80b883a 	mov	r5,r21
 400e400:	b009883a 	mov	r4,r22
 400e404:	1023883a 	mov	r17,r2
 400e408:	40044f40 	call	40044f4 <__mulsi3>
 400e40c:	e006d43a 	srli	r3,fp,16
 400e410:	1505883a 	add	r2,r2,r20
 400e414:	1887883a 	add	r3,r3,r2
 400e418:	1d00022e 	bgeu	r3,r20,400e424 <__udivdi3+0x468>
 400e41c:	00800074 	movhi	r2,1
 400e420:	88a3883a 	add	r17,r17,r2
 400e424:	1804d43a 	srli	r2,r3,16
 400e428:	1463883a 	add	r17,r2,r17
 400e42c:	84404436 	bltu	r16,r17,400e540 <__udivdi3+0x584>
 400e430:	84403e26 	beq	r16,r17,400e52c <__udivdi3+0x570>
 400e434:	9005883a 	mov	r2,r18
 400e438:	0007883a 	mov	r3,zero
 400e43c:	003f9106 	br	400e284 <__alt_data_end+0xfc00e284>
 400e440:	88e2983a 	sll	r17,r17,r3
 400e444:	80aed83a 	srl	r23,r16,r2
 400e448:	80e0983a 	sll	r16,r16,r3
 400e44c:	882ad43a 	srli	r21,r17,16
 400e450:	9884d83a 	srl	r2,r19,r2
 400e454:	b809883a 	mov	r4,r23
 400e458:	a80b883a 	mov	r5,r21
 400e45c:	98e4983a 	sll	r18,r19,r3
 400e460:	142cb03a 	or	r22,r2,r16
 400e464:	400449c0 	call	400449c <__umodsi3>
 400e468:	b809883a 	mov	r4,r23
 400e46c:	a80b883a 	mov	r5,r21
 400e470:	1027883a 	mov	r19,r2
 400e474:	8d3fffcc 	andi	r20,r17,65535
 400e478:	40044380 	call	4004438 <__udivsi3>
 400e47c:	a009883a 	mov	r4,r20
 400e480:	100b883a 	mov	r5,r2
 400e484:	102f883a 	mov	r23,r2
 400e488:	40044f40 	call	40044f4 <__mulsi3>
 400e48c:	9826943a 	slli	r19,r19,16
 400e490:	b008d43a 	srli	r4,r22,16
 400e494:	24c8b03a 	or	r4,r4,r19
 400e498:	2080062e 	bgeu	r4,r2,400e4b4 <__udivdi3+0x4f8>
 400e49c:	2449883a 	add	r4,r4,r17
 400e4a0:	b8ffffc4 	addi	r3,r23,-1
 400e4a4:	24403c36 	bltu	r4,r17,400e598 <__udivdi3+0x5dc>
 400e4a8:	20803b2e 	bgeu	r4,r2,400e598 <__udivdi3+0x5dc>
 400e4ac:	bdffff84 	addi	r23,r23,-2
 400e4b0:	2449883a 	add	r4,r4,r17
 400e4b4:	20a1c83a 	sub	r16,r4,r2
 400e4b8:	a80b883a 	mov	r5,r21
 400e4bc:	8009883a 	mov	r4,r16
 400e4c0:	400449c0 	call	400449c <__umodsi3>
 400e4c4:	a80b883a 	mov	r5,r21
 400e4c8:	8009883a 	mov	r4,r16
 400e4cc:	1027883a 	mov	r19,r2
 400e4d0:	40044380 	call	4004438 <__udivsi3>
 400e4d4:	a009883a 	mov	r4,r20
 400e4d8:	100b883a 	mov	r5,r2
 400e4dc:	9826943a 	slli	r19,r19,16
 400e4e0:	1039883a 	mov	fp,r2
 400e4e4:	40044f40 	call	40044f4 <__mulsi3>
 400e4e8:	b13fffcc 	andi	r4,r22,65535
 400e4ec:	24c8b03a 	or	r4,r4,r19
 400e4f0:	2080062e 	bgeu	r4,r2,400e50c <__udivdi3+0x550>
 400e4f4:	2449883a 	add	r4,r4,r17
 400e4f8:	e0ffffc4 	addi	r3,fp,-1
 400e4fc:	24402436 	bltu	r4,r17,400e590 <__udivdi3+0x5d4>
 400e500:	2080232e 	bgeu	r4,r2,400e590 <__udivdi3+0x5d4>
 400e504:	e73fff84 	addi	fp,fp,-2
 400e508:	2449883a 	add	r4,r4,r17
 400e50c:	b82e943a 	slli	r23,r23,16
 400e510:	20a1c83a 	sub	r16,r4,r2
 400e514:	bf06b03a 	or	r3,r23,fp
 400e518:	003f2806 	br	400e1bc <__alt_data_end+0xfc00e1bc>
 400e51c:	2021883a 	mov	r16,r4
 400e520:	003f5306 	br	400e270 <__alt_data_end+0xfc00e270>
 400e524:	1821883a 	mov	r16,r3
 400e528:	003ef406 	br	400e0fc <__alt_data_end+0xfc00e0fc>
 400e52c:	1806943a 	slli	r3,r3,16
 400e530:	9de6983a 	sll	r19,r19,r23
 400e534:	e73fffcc 	andi	fp,fp,65535
 400e538:	1f07883a 	add	r3,r3,fp
 400e53c:	98ffbd2e 	bgeu	r19,r3,400e434 <__alt_data_end+0xfc00e434>
 400e540:	90bfffc4 	addi	r2,r18,-1
 400e544:	0007883a 	mov	r3,zero
 400e548:	003f4e06 	br	400e284 <__alt_data_end+0xfc00e284>
 400e54c:	00800604 	movi	r2,24
 400e550:	003ef506 	br	400e128 <__alt_data_end+0xfc00e128>
 400e554:	00800604 	movi	r2,24
 400e558:	003f0b06 	br	400e188 <__alt_data_end+0xfc00e188>
 400e55c:	00800604 	movi	r2,24
 400e560:	003ead06 	br	400e018 <__alt_data_end+0xfc00e018>
 400e564:	0007883a 	mov	r3,zero
 400e568:	00800044 	movi	r2,1
 400e56c:	003f4506 	br	400e284 <__alt_data_end+0xfc00e284>
 400e570:	80bf8e2e 	bgeu	r16,r2,400e3ac <__alt_data_end+0xfc00e3ac>
 400e574:	8c7fff84 	addi	r17,r17,-2
 400e578:	8721883a 	add	r16,r16,fp
 400e57c:	003f8c06 	br	400e3b0 <__alt_data_end+0xfc00e3b0>
 400e580:	18bf762e 	bgeu	r3,r2,400e35c <__alt_data_end+0xfc00e35c>
 400e584:	ad7fff84 	addi	r21,r21,-2
 400e588:	1f07883a 	add	r3,r3,fp
 400e58c:	003f7406 	br	400e360 <__alt_data_end+0xfc00e360>
 400e590:	1839883a 	mov	fp,r3
 400e594:	003fdd06 	br	400e50c <__alt_data_end+0xfc00e50c>
 400e598:	182f883a 	mov	r23,r3
 400e59c:	003fc506 	br	400e4b4 <__alt_data_end+0xfc00e4b4>
 400e5a0:	b5bfff84 	addi	r22,r22,-2
 400e5a4:	3c4f883a 	add	r7,r7,r17
 400e5a8:	003f1a06 	br	400e214 <__alt_data_end+0xfc00e214>
 400e5ac:	b5bfff84 	addi	r22,r22,-2
 400e5b0:	1c47883a 	add	r3,r3,r17
 400e5b4:	003ebc06 	br	400e0a8 <__alt_data_end+0xfc00e0a8>

0400e5b8 <__umoddi3>:
 400e5b8:	defff304 	addi	sp,sp,-52
 400e5bc:	df000b15 	stw	fp,44(sp)
 400e5c0:	dc400415 	stw	r17,16(sp)
 400e5c4:	dc000315 	stw	r16,12(sp)
 400e5c8:	dfc00c15 	stw	ra,48(sp)
 400e5cc:	ddc00a15 	stw	r23,40(sp)
 400e5d0:	dd800915 	stw	r22,36(sp)
 400e5d4:	dd400815 	stw	r21,32(sp)
 400e5d8:	dd000715 	stw	r20,28(sp)
 400e5dc:	dcc00615 	stw	r19,24(sp)
 400e5e0:	dc800515 	stw	r18,20(sp)
 400e5e4:	2021883a 	mov	r16,r4
 400e5e8:	2823883a 	mov	r17,r5
 400e5ec:	2839883a 	mov	fp,r5
 400e5f0:	3800401e 	bne	r7,zero,400e6f4 <__umoddi3+0x13c>
 400e5f4:	3027883a 	mov	r19,r6
 400e5f8:	2029883a 	mov	r20,r4
 400e5fc:	2980552e 	bgeu	r5,r6,400e754 <__umoddi3+0x19c>
 400e600:	00bfffd4 	movui	r2,65535
 400e604:	1180a236 	bltu	r2,r6,400e890 <__umoddi3+0x2d8>
 400e608:	01003fc4 	movi	r4,255
 400e60c:	2189803a 	cmpltu	r4,r4,r6
 400e610:	200890fa 	slli	r4,r4,3
 400e614:	3104d83a 	srl	r2,r6,r4
 400e618:	00c10074 	movhi	r3,1025
 400e61c:	18d9af04 	addi	r3,r3,26300
 400e620:	1885883a 	add	r2,r3,r2
 400e624:	10c00003 	ldbu	r3,0(r2)
 400e628:	00800804 	movi	r2,32
 400e62c:	1909883a 	add	r4,r3,r4
 400e630:	1125c83a 	sub	r18,r2,r4
 400e634:	90000526 	beq	r18,zero,400e64c <__umoddi3+0x94>
 400e638:	8ca2983a 	sll	r17,r17,r18
 400e63c:	8108d83a 	srl	r4,r16,r4
 400e640:	34a6983a 	sll	r19,r6,r18
 400e644:	84a8983a 	sll	r20,r16,r18
 400e648:	2478b03a 	or	fp,r4,r17
 400e64c:	982cd43a 	srli	r22,r19,16
 400e650:	e009883a 	mov	r4,fp
 400e654:	9dffffcc 	andi	r23,r19,65535
 400e658:	b00b883a 	mov	r5,r22
 400e65c:	400449c0 	call	400449c <__umodsi3>
 400e660:	b00b883a 	mov	r5,r22
 400e664:	e009883a 	mov	r4,fp
 400e668:	102b883a 	mov	r21,r2
 400e66c:	40044380 	call	4004438 <__udivsi3>
 400e670:	100b883a 	mov	r5,r2
 400e674:	b809883a 	mov	r4,r23
 400e678:	40044f40 	call	40044f4 <__mulsi3>
 400e67c:	a82a943a 	slli	r21,r21,16
 400e680:	a006d43a 	srli	r3,r20,16
 400e684:	1d46b03a 	or	r3,r3,r21
 400e688:	1880032e 	bgeu	r3,r2,400e698 <__umoddi3+0xe0>
 400e68c:	1cc7883a 	add	r3,r3,r19
 400e690:	1cc00136 	bltu	r3,r19,400e698 <__umoddi3+0xe0>
 400e694:	18813136 	bltu	r3,r2,400eb5c <__umoddi3+0x5a4>
 400e698:	18a1c83a 	sub	r16,r3,r2
 400e69c:	b00b883a 	mov	r5,r22
 400e6a0:	8009883a 	mov	r4,r16
 400e6a4:	400449c0 	call	400449c <__umodsi3>
 400e6a8:	b00b883a 	mov	r5,r22
 400e6ac:	8009883a 	mov	r4,r16
 400e6b0:	1023883a 	mov	r17,r2
 400e6b4:	40044380 	call	4004438 <__udivsi3>
 400e6b8:	100b883a 	mov	r5,r2
 400e6bc:	b809883a 	mov	r4,r23
 400e6c0:	8822943a 	slli	r17,r17,16
 400e6c4:	40044f40 	call	40044f4 <__mulsi3>
 400e6c8:	a0ffffcc 	andi	r3,r20,65535
 400e6cc:	1c46b03a 	or	r3,r3,r17
 400e6d0:	1880042e 	bgeu	r3,r2,400e6e4 <__umoddi3+0x12c>
 400e6d4:	1cc7883a 	add	r3,r3,r19
 400e6d8:	1cc00236 	bltu	r3,r19,400e6e4 <__umoddi3+0x12c>
 400e6dc:	1880012e 	bgeu	r3,r2,400e6e4 <__umoddi3+0x12c>
 400e6e0:	1cc7883a 	add	r3,r3,r19
 400e6e4:	1885c83a 	sub	r2,r3,r2
 400e6e8:	1484d83a 	srl	r2,r2,r18
 400e6ec:	0007883a 	mov	r3,zero
 400e6f0:	00005306 	br	400e840 <__umoddi3+0x288>
 400e6f4:	29c05036 	bltu	r5,r7,400e838 <__umoddi3+0x280>
 400e6f8:	00bfffd4 	movui	r2,65535
 400e6fc:	11c05c2e 	bgeu	r2,r7,400e870 <__umoddi3+0x2b8>
 400e700:	00804034 	movhi	r2,256
 400e704:	10bfffc4 	addi	r2,r2,-1
 400e708:	11c10636 	bltu	r2,r7,400eb24 <__umoddi3+0x56c>
 400e70c:	01000404 	movi	r4,16
 400e710:	3904d83a 	srl	r2,r7,r4
 400e714:	00c10074 	movhi	r3,1025
 400e718:	18d9af04 	addi	r3,r3,26300
 400e71c:	1885883a 	add	r2,r3,r2
 400e720:	14c00003 	ldbu	r19,0(r2)
 400e724:	00c00804 	movi	r3,32
 400e728:	9927883a 	add	r19,r19,r4
 400e72c:	1ce9c83a 	sub	r20,r3,r19
 400e730:	a0005c1e 	bne	r20,zero,400e8a4 <__umoddi3+0x2ec>
 400e734:	3c400136 	bltu	r7,r17,400e73c <__umoddi3+0x184>
 400e738:	81810a36 	bltu	r16,r6,400eb64 <__umoddi3+0x5ac>
 400e73c:	8185c83a 	sub	r2,r16,r6
 400e740:	89e3c83a 	sub	r17,r17,r7
 400e744:	8089803a 	cmpltu	r4,r16,r2
 400e748:	8939c83a 	sub	fp,r17,r4
 400e74c:	e007883a 	mov	r3,fp
 400e750:	00003b06 	br	400e840 <__umoddi3+0x288>
 400e754:	3000041e 	bne	r6,zero,400e768 <__umoddi3+0x1b0>
 400e758:	000b883a 	mov	r5,zero
 400e75c:	01000044 	movi	r4,1
 400e760:	40044380 	call	4004438 <__udivsi3>
 400e764:	1027883a 	mov	r19,r2
 400e768:	00bfffd4 	movui	r2,65535
 400e76c:	14c0442e 	bgeu	r2,r19,400e880 <__umoddi3+0x2c8>
 400e770:	00804034 	movhi	r2,256
 400e774:	10bfffc4 	addi	r2,r2,-1
 400e778:	14c0ec36 	bltu	r2,r19,400eb2c <__umoddi3+0x574>
 400e77c:	00800404 	movi	r2,16
 400e780:	9886d83a 	srl	r3,r19,r2
 400e784:	01010074 	movhi	r4,1025
 400e788:	2119af04 	addi	r4,r4,26300
 400e78c:	20c7883a 	add	r3,r4,r3
 400e790:	18c00003 	ldbu	r3,0(r3)
 400e794:	1887883a 	add	r3,r3,r2
 400e798:	00800804 	movi	r2,32
 400e79c:	10e5c83a 	sub	r18,r2,r3
 400e7a0:	9000ab1e 	bne	r18,zero,400ea50 <__umoddi3+0x498>
 400e7a4:	982cd43a 	srli	r22,r19,16
 400e7a8:	8ce3c83a 	sub	r17,r17,r19
 400e7ac:	9dffffcc 	andi	r23,r19,65535
 400e7b0:	b00b883a 	mov	r5,r22
 400e7b4:	8809883a 	mov	r4,r17
 400e7b8:	400449c0 	call	400449c <__umodsi3>
 400e7bc:	b00b883a 	mov	r5,r22
 400e7c0:	8809883a 	mov	r4,r17
 400e7c4:	102b883a 	mov	r21,r2
 400e7c8:	40044380 	call	4004438 <__udivsi3>
 400e7cc:	b80b883a 	mov	r5,r23
 400e7d0:	1009883a 	mov	r4,r2
 400e7d4:	40044f40 	call	40044f4 <__mulsi3>
 400e7d8:	a82a943a 	slli	r21,r21,16
 400e7dc:	a006d43a 	srli	r3,r20,16
 400e7e0:	1d46b03a 	or	r3,r3,r21
 400e7e4:	1880042e 	bgeu	r3,r2,400e7f8 <__umoddi3+0x240>
 400e7e8:	1cc7883a 	add	r3,r3,r19
 400e7ec:	1cc00236 	bltu	r3,r19,400e7f8 <__umoddi3+0x240>
 400e7f0:	1880012e 	bgeu	r3,r2,400e7f8 <__umoddi3+0x240>
 400e7f4:	1cc7883a 	add	r3,r3,r19
 400e7f8:	18a1c83a 	sub	r16,r3,r2
 400e7fc:	b00b883a 	mov	r5,r22
 400e800:	8009883a 	mov	r4,r16
 400e804:	400449c0 	call	400449c <__umodsi3>
 400e808:	1023883a 	mov	r17,r2
 400e80c:	b00b883a 	mov	r5,r22
 400e810:	8009883a 	mov	r4,r16
 400e814:	40044380 	call	4004438 <__udivsi3>
 400e818:	8822943a 	slli	r17,r17,16
 400e81c:	b80b883a 	mov	r5,r23
 400e820:	1009883a 	mov	r4,r2
 400e824:	40044f40 	call	40044f4 <__mulsi3>
 400e828:	a53fffcc 	andi	r20,r20,65535
 400e82c:	a446b03a 	or	r3,r20,r17
 400e830:	18bfac2e 	bgeu	r3,r2,400e6e4 <__alt_data_end+0xfc00e6e4>
 400e834:	003fa706 	br	400e6d4 <__alt_data_end+0xfc00e6d4>
 400e838:	2005883a 	mov	r2,r4
 400e83c:	2807883a 	mov	r3,r5
 400e840:	dfc00c17 	ldw	ra,48(sp)
 400e844:	df000b17 	ldw	fp,44(sp)
 400e848:	ddc00a17 	ldw	r23,40(sp)
 400e84c:	dd800917 	ldw	r22,36(sp)
 400e850:	dd400817 	ldw	r21,32(sp)
 400e854:	dd000717 	ldw	r20,28(sp)
 400e858:	dcc00617 	ldw	r19,24(sp)
 400e85c:	dc800517 	ldw	r18,20(sp)
 400e860:	dc400417 	ldw	r17,16(sp)
 400e864:	dc000317 	ldw	r16,12(sp)
 400e868:	dec00d04 	addi	sp,sp,52
 400e86c:	f800283a 	ret
 400e870:	04c03fc4 	movi	r19,255
 400e874:	99c9803a 	cmpltu	r4,r19,r7
 400e878:	200890fa 	slli	r4,r4,3
 400e87c:	003fa406 	br	400e710 <__alt_data_end+0xfc00e710>
 400e880:	00803fc4 	movi	r2,255
 400e884:	14c5803a 	cmpltu	r2,r2,r19
 400e888:	100490fa 	slli	r2,r2,3
 400e88c:	003fbc06 	br	400e780 <__alt_data_end+0xfc00e780>
 400e890:	00804034 	movhi	r2,256
 400e894:	10bfffc4 	addi	r2,r2,-1
 400e898:	1180a636 	bltu	r2,r6,400eb34 <__umoddi3+0x57c>
 400e89c:	01000404 	movi	r4,16
 400e8a0:	003f5c06 	br	400e614 <__alt_data_end+0xfc00e614>
 400e8a4:	3d0e983a 	sll	r7,r7,r20
 400e8a8:	34ead83a 	srl	r21,r6,r19
 400e8ac:	8cc6d83a 	srl	r3,r17,r19
 400e8b0:	8d10983a 	sll	r8,r17,r20
 400e8b4:	3d6ab03a 	or	r21,r7,r21
 400e8b8:	a82cd43a 	srli	r22,r21,16
 400e8bc:	84e2d83a 	srl	r17,r16,r19
 400e8c0:	1809883a 	mov	r4,r3
 400e8c4:	b00b883a 	mov	r5,r22
 400e8c8:	8a22b03a 	or	r17,r17,r8
 400e8cc:	3524983a 	sll	r18,r6,r20
 400e8d0:	dc400015 	stw	r17,0(sp)
 400e8d4:	d8c00115 	stw	r3,4(sp)
 400e8d8:	400449c0 	call	400449c <__umodsi3>
 400e8dc:	d8c00117 	ldw	r3,4(sp)
 400e8e0:	b00b883a 	mov	r5,r22
 400e8e4:	1039883a 	mov	fp,r2
 400e8e8:	1809883a 	mov	r4,r3
 400e8ec:	40044380 	call	4004438 <__udivsi3>
 400e8f0:	adffffcc 	andi	r23,r21,65535
 400e8f4:	100b883a 	mov	r5,r2
 400e8f8:	b809883a 	mov	r4,r23
 400e8fc:	1023883a 	mov	r17,r2
 400e900:	40044f40 	call	40044f4 <__mulsi3>
 400e904:	d9400017 	ldw	r5,0(sp)
 400e908:	e008943a 	slli	r4,fp,16
 400e90c:	8520983a 	sll	r16,r16,r20
 400e910:	2806d43a 	srli	r3,r5,16
 400e914:	1906b03a 	or	r3,r3,r4
 400e918:	1880042e 	bgeu	r3,r2,400e92c <__umoddi3+0x374>
 400e91c:	1d47883a 	add	r3,r3,r21
 400e920:	893fffc4 	addi	r4,r17,-1
 400e924:	1d40892e 	bgeu	r3,r21,400eb4c <__umoddi3+0x594>
 400e928:	2023883a 	mov	r17,r4
 400e92c:	18b9c83a 	sub	fp,r3,r2
 400e930:	b00b883a 	mov	r5,r22
 400e934:	e009883a 	mov	r4,fp
 400e938:	400449c0 	call	400449c <__umodsi3>
 400e93c:	b00b883a 	mov	r5,r22
 400e940:	e009883a 	mov	r4,fp
 400e944:	d8800215 	stw	r2,8(sp)
 400e948:	40044380 	call	4004438 <__udivsi3>
 400e94c:	100b883a 	mov	r5,r2
 400e950:	b809883a 	mov	r4,r23
 400e954:	102d883a 	mov	r22,r2
 400e958:	40044f40 	call	40044f4 <__mulsi3>
 400e95c:	d9800217 	ldw	r6,8(sp)
 400e960:	d8c00017 	ldw	r3,0(sp)
 400e964:	300c943a 	slli	r6,r6,16
 400e968:	1a3fffcc 	andi	r8,r3,65535
 400e96c:	4190b03a 	or	r8,r8,r6
 400e970:	4080042e 	bgeu	r8,r2,400e984 <__umoddi3+0x3cc>
 400e974:	4551883a 	add	r8,r8,r21
 400e978:	b0ffffc4 	addi	r3,r22,-1
 400e97c:	45406f2e 	bgeu	r8,r21,400eb3c <__umoddi3+0x584>
 400e980:	182d883a 	mov	r22,r3
 400e984:	880e943a 	slli	r7,r17,16
 400e988:	9006d43a 	srli	r3,r18,16
 400e98c:	91bfffcc 	andi	r6,r18,65535
 400e990:	3dacb03a 	or	r22,r7,r22
 400e994:	b02ed43a 	srli	r23,r22,16
 400e998:	b5bfffcc 	andi	r22,r22,65535
 400e99c:	300b883a 	mov	r5,r6
 400e9a0:	b009883a 	mov	r4,r22
 400e9a4:	40a3c83a 	sub	r17,r8,r2
 400e9a8:	d8c00115 	stw	r3,4(sp)
 400e9ac:	d9800215 	stw	r6,8(sp)
 400e9b0:	40044f40 	call	40044f4 <__mulsi3>
 400e9b4:	d9800217 	ldw	r6,8(sp)
 400e9b8:	b809883a 	mov	r4,r23
 400e9bc:	1039883a 	mov	fp,r2
 400e9c0:	300b883a 	mov	r5,r6
 400e9c4:	40044f40 	call	40044f4 <__mulsi3>
 400e9c8:	d8c00117 	ldw	r3,4(sp)
 400e9cc:	b809883a 	mov	r4,r23
 400e9d0:	d8800215 	stw	r2,8(sp)
 400e9d4:	180b883a 	mov	r5,r3
 400e9d8:	40044f40 	call	40044f4 <__mulsi3>
 400e9dc:	d8c00117 	ldw	r3,4(sp)
 400e9e0:	b009883a 	mov	r4,r22
 400e9e4:	102f883a 	mov	r23,r2
 400e9e8:	180b883a 	mov	r5,r3
 400e9ec:	40044f40 	call	40044f4 <__mulsi3>
 400e9f0:	d9800217 	ldw	r6,8(sp)
 400e9f4:	e006d43a 	srli	r3,fp,16
 400e9f8:	1185883a 	add	r2,r2,r6
 400e9fc:	1885883a 	add	r2,r3,r2
 400ea00:	1180022e 	bgeu	r2,r6,400ea0c <__umoddi3+0x454>
 400ea04:	00c00074 	movhi	r3,1
 400ea08:	b8ef883a 	add	r23,r23,r3
 400ea0c:	1006d43a 	srli	r3,r2,16
 400ea10:	1004943a 	slli	r2,r2,16
 400ea14:	e73fffcc 	andi	fp,fp,65535
 400ea18:	1dc7883a 	add	r3,r3,r23
 400ea1c:	1739883a 	add	fp,r2,fp
 400ea20:	88c03a36 	bltu	r17,r3,400eb0c <__umoddi3+0x554>
 400ea24:	88c05126 	beq	r17,r3,400eb6c <__umoddi3+0x5b4>
 400ea28:	88c9c83a 	sub	r4,r17,r3
 400ea2c:	e00f883a 	mov	r7,fp
 400ea30:	81cfc83a 	sub	r7,r16,r7
 400ea34:	81c7803a 	cmpltu	r3,r16,r7
 400ea38:	20c7c83a 	sub	r3,r4,r3
 400ea3c:	1cc4983a 	sll	r2,r3,r19
 400ea40:	3d0ed83a 	srl	r7,r7,r20
 400ea44:	1d06d83a 	srl	r3,r3,r20
 400ea48:	11c4b03a 	or	r2,r2,r7
 400ea4c:	003f7c06 	br	400e840 <__alt_data_end+0xfc00e840>
 400ea50:	9ca6983a 	sll	r19,r19,r18
 400ea54:	88f8d83a 	srl	fp,r17,r3
 400ea58:	80c4d83a 	srl	r2,r16,r3
 400ea5c:	982cd43a 	srli	r22,r19,16
 400ea60:	8ca2983a 	sll	r17,r17,r18
 400ea64:	e009883a 	mov	r4,fp
 400ea68:	b00b883a 	mov	r5,r22
 400ea6c:	146ab03a 	or	r21,r2,r17
 400ea70:	400449c0 	call	400449c <__umodsi3>
 400ea74:	b00b883a 	mov	r5,r22
 400ea78:	e009883a 	mov	r4,fp
 400ea7c:	1029883a 	mov	r20,r2
 400ea80:	9dffffcc 	andi	r23,r19,65535
 400ea84:	40044380 	call	4004438 <__udivsi3>
 400ea88:	b809883a 	mov	r4,r23
 400ea8c:	100b883a 	mov	r5,r2
 400ea90:	40044f40 	call	40044f4 <__mulsi3>
 400ea94:	a008943a 	slli	r4,r20,16
 400ea98:	a806d43a 	srli	r3,r21,16
 400ea9c:	84a8983a 	sll	r20,r16,r18
 400eaa0:	1906b03a 	or	r3,r3,r4
 400eaa4:	1880042e 	bgeu	r3,r2,400eab8 <__umoddi3+0x500>
 400eaa8:	1cc7883a 	add	r3,r3,r19
 400eaac:	1cc00236 	bltu	r3,r19,400eab8 <__umoddi3+0x500>
 400eab0:	1880012e 	bgeu	r3,r2,400eab8 <__umoddi3+0x500>
 400eab4:	1cc7883a 	add	r3,r3,r19
 400eab8:	18a3c83a 	sub	r17,r3,r2
 400eabc:	b00b883a 	mov	r5,r22
 400eac0:	8809883a 	mov	r4,r17
 400eac4:	400449c0 	call	400449c <__umodsi3>
 400eac8:	b00b883a 	mov	r5,r22
 400eacc:	8809883a 	mov	r4,r17
 400ead0:	1021883a 	mov	r16,r2
 400ead4:	40044380 	call	4004438 <__udivsi3>
 400ead8:	100b883a 	mov	r5,r2
 400eadc:	b809883a 	mov	r4,r23
 400eae0:	8020943a 	slli	r16,r16,16
 400eae4:	40044f40 	call	40044f4 <__mulsi3>
 400eae8:	a8ffffcc 	andi	r3,r21,65535
 400eaec:	1c06b03a 	or	r3,r3,r16
 400eaf0:	1880042e 	bgeu	r3,r2,400eb04 <__umoddi3+0x54c>
 400eaf4:	1cc7883a 	add	r3,r3,r19
 400eaf8:	1cc00236 	bltu	r3,r19,400eb04 <__umoddi3+0x54c>
 400eafc:	1880012e 	bgeu	r3,r2,400eb04 <__umoddi3+0x54c>
 400eb00:	1cc7883a 	add	r3,r3,r19
 400eb04:	18a3c83a 	sub	r17,r3,r2
 400eb08:	003f2906 	br	400e7b0 <__alt_data_end+0xfc00e7b0>
 400eb0c:	e48fc83a 	sub	r7,fp,r18
 400eb10:	1d49c83a 	sub	r4,r3,r21
 400eb14:	e1f9803a 	cmpltu	fp,fp,r7
 400eb18:	2739c83a 	sub	fp,r4,fp
 400eb1c:	8f09c83a 	sub	r4,r17,fp
 400eb20:	003fc306 	br	400ea30 <__alt_data_end+0xfc00ea30>
 400eb24:	01000604 	movi	r4,24
 400eb28:	003ef906 	br	400e710 <__alt_data_end+0xfc00e710>
 400eb2c:	00800604 	movi	r2,24
 400eb30:	003f1306 	br	400e780 <__alt_data_end+0xfc00e780>
 400eb34:	01000604 	movi	r4,24
 400eb38:	003eb606 	br	400e614 <__alt_data_end+0xfc00e614>
 400eb3c:	40bf902e 	bgeu	r8,r2,400e980 <__alt_data_end+0xfc00e980>
 400eb40:	b5bfff84 	addi	r22,r22,-2
 400eb44:	4551883a 	add	r8,r8,r21
 400eb48:	003f8e06 	br	400e984 <__alt_data_end+0xfc00e984>
 400eb4c:	18bf762e 	bgeu	r3,r2,400e928 <__alt_data_end+0xfc00e928>
 400eb50:	8c7fff84 	addi	r17,r17,-2
 400eb54:	1d47883a 	add	r3,r3,r21
 400eb58:	003f7406 	br	400e92c <__alt_data_end+0xfc00e92c>
 400eb5c:	1cc7883a 	add	r3,r3,r19
 400eb60:	003ecd06 	br	400e698 <__alt_data_end+0xfc00e698>
 400eb64:	8005883a 	mov	r2,r16
 400eb68:	003ef806 	br	400e74c <__alt_data_end+0xfc00e74c>
 400eb6c:	873fe736 	bltu	r16,fp,400eb0c <__alt_data_end+0xfc00eb0c>
 400eb70:	e00f883a 	mov	r7,fp
 400eb74:	0009883a 	mov	r4,zero
 400eb78:	003fad06 	br	400ea30 <__alt_data_end+0xfc00ea30>

0400eb7c <__adddf3>:
 400eb7c:	02c00434 	movhi	r11,16
 400eb80:	5affffc4 	addi	r11,r11,-1
 400eb84:	2806d7fa 	srli	r3,r5,31
 400eb88:	2ad4703a 	and	r10,r5,r11
 400eb8c:	3ad2703a 	and	r9,r7,r11
 400eb90:	3804d53a 	srli	r2,r7,20
 400eb94:	3018d77a 	srli	r12,r6,29
 400eb98:	280ad53a 	srli	r5,r5,20
 400eb9c:	501490fa 	slli	r10,r10,3
 400eba0:	2010d77a 	srli	r8,r4,29
 400eba4:	481290fa 	slli	r9,r9,3
 400eba8:	380ed7fa 	srli	r7,r7,31
 400ebac:	defffb04 	addi	sp,sp,-20
 400ebb0:	dc800215 	stw	r18,8(sp)
 400ebb4:	dc400115 	stw	r17,4(sp)
 400ebb8:	dc000015 	stw	r16,0(sp)
 400ebbc:	dfc00415 	stw	ra,16(sp)
 400ebc0:	dcc00315 	stw	r19,12(sp)
 400ebc4:	1c803fcc 	andi	r18,r3,255
 400ebc8:	2c01ffcc 	andi	r16,r5,2047
 400ebcc:	5210b03a 	or	r8,r10,r8
 400ebd0:	202290fa 	slli	r17,r4,3
 400ebd4:	1081ffcc 	andi	r2,r2,2047
 400ebd8:	4b12b03a 	or	r9,r9,r12
 400ebdc:	300c90fa 	slli	r6,r6,3
 400ebe0:	91c07526 	beq	r18,r7,400edb8 <__adddf3+0x23c>
 400ebe4:	8087c83a 	sub	r3,r16,r2
 400ebe8:	00c0ab0e 	bge	zero,r3,400ee98 <__adddf3+0x31c>
 400ebec:	10002a1e 	bne	r2,zero,400ec98 <__adddf3+0x11c>
 400ebf0:	4984b03a 	or	r2,r9,r6
 400ebf4:	1000961e 	bne	r2,zero,400ee50 <__adddf3+0x2d4>
 400ebf8:	888001cc 	andi	r2,r17,7
 400ebfc:	10000726 	beq	r2,zero,400ec1c <__adddf3+0xa0>
 400ec00:	888003cc 	andi	r2,r17,15
 400ec04:	00c00104 	movi	r3,4
 400ec08:	10c00426 	beq	r2,r3,400ec1c <__adddf3+0xa0>
 400ec0c:	88c7883a 	add	r3,r17,r3
 400ec10:	1c63803a 	cmpltu	r17,r3,r17
 400ec14:	4451883a 	add	r8,r8,r17
 400ec18:	1823883a 	mov	r17,r3
 400ec1c:	4080202c 	andhi	r2,r8,128
 400ec20:	10005926 	beq	r2,zero,400ed88 <__adddf3+0x20c>
 400ec24:	84000044 	addi	r16,r16,1
 400ec28:	0081ffc4 	movi	r2,2047
 400ec2c:	8080ba26 	beq	r16,r2,400ef18 <__adddf3+0x39c>
 400ec30:	00bfe034 	movhi	r2,65408
 400ec34:	10bfffc4 	addi	r2,r2,-1
 400ec38:	4090703a 	and	r8,r8,r2
 400ec3c:	4004977a 	slli	r2,r8,29
 400ec40:	4010927a 	slli	r8,r8,9
 400ec44:	8822d0fa 	srli	r17,r17,3
 400ec48:	8401ffcc 	andi	r16,r16,2047
 400ec4c:	4010d33a 	srli	r8,r8,12
 400ec50:	9007883a 	mov	r3,r18
 400ec54:	1444b03a 	or	r2,r2,r17
 400ec58:	8401ffcc 	andi	r16,r16,2047
 400ec5c:	8020953a 	slli	r16,r16,20
 400ec60:	18c03fcc 	andi	r3,r3,255
 400ec64:	01000434 	movhi	r4,16
 400ec68:	213fffc4 	addi	r4,r4,-1
 400ec6c:	180697fa 	slli	r3,r3,31
 400ec70:	4110703a 	and	r8,r8,r4
 400ec74:	4410b03a 	or	r8,r8,r16
 400ec78:	40c6b03a 	or	r3,r8,r3
 400ec7c:	dfc00417 	ldw	ra,16(sp)
 400ec80:	dcc00317 	ldw	r19,12(sp)
 400ec84:	dc800217 	ldw	r18,8(sp)
 400ec88:	dc400117 	ldw	r17,4(sp)
 400ec8c:	dc000017 	ldw	r16,0(sp)
 400ec90:	dec00504 	addi	sp,sp,20
 400ec94:	f800283a 	ret
 400ec98:	0081ffc4 	movi	r2,2047
 400ec9c:	80bfd626 	beq	r16,r2,400ebf8 <__alt_data_end+0xfc00ebf8>
 400eca0:	4a402034 	orhi	r9,r9,128
 400eca4:	00800e04 	movi	r2,56
 400eca8:	10c09f16 	blt	r2,r3,400ef28 <__adddf3+0x3ac>
 400ecac:	008007c4 	movi	r2,31
 400ecb0:	10c0c216 	blt	r2,r3,400efbc <__adddf3+0x440>
 400ecb4:	00800804 	movi	r2,32
 400ecb8:	10c5c83a 	sub	r2,r2,r3
 400ecbc:	488a983a 	sll	r5,r9,r2
 400ecc0:	30c8d83a 	srl	r4,r6,r3
 400ecc4:	3084983a 	sll	r2,r6,r2
 400ecc8:	48c6d83a 	srl	r3,r9,r3
 400eccc:	290cb03a 	or	r6,r5,r4
 400ecd0:	1004c03a 	cmpne	r2,r2,zero
 400ecd4:	308cb03a 	or	r6,r6,r2
 400ecd8:	898dc83a 	sub	r6,r17,r6
 400ecdc:	89a3803a 	cmpltu	r17,r17,r6
 400ece0:	40d1c83a 	sub	r8,r8,r3
 400ece4:	4451c83a 	sub	r8,r8,r17
 400ece8:	3023883a 	mov	r17,r6
 400ecec:	4080202c 	andhi	r2,r8,128
 400ecf0:	10002326 	beq	r2,zero,400ed80 <__adddf3+0x204>
 400ecf4:	04c02034 	movhi	r19,128
 400ecf8:	9cffffc4 	addi	r19,r19,-1
 400ecfc:	44e6703a 	and	r19,r8,r19
 400ed00:	98007626 	beq	r19,zero,400eedc <__adddf3+0x360>
 400ed04:	9809883a 	mov	r4,r19
 400ed08:	40113bc0 	call	40113bc <__clzsi2>
 400ed0c:	10fffe04 	addi	r3,r2,-8
 400ed10:	010007c4 	movi	r4,31
 400ed14:	20c07716 	blt	r4,r3,400eef4 <__adddf3+0x378>
 400ed18:	00800804 	movi	r2,32
 400ed1c:	10c5c83a 	sub	r2,r2,r3
 400ed20:	8884d83a 	srl	r2,r17,r2
 400ed24:	98d0983a 	sll	r8,r19,r3
 400ed28:	88e2983a 	sll	r17,r17,r3
 400ed2c:	1204b03a 	or	r2,r2,r8
 400ed30:	1c007416 	blt	r3,r16,400ef04 <__adddf3+0x388>
 400ed34:	1c21c83a 	sub	r16,r3,r16
 400ed38:	82000044 	addi	r8,r16,1
 400ed3c:	00c007c4 	movi	r3,31
 400ed40:	1a009116 	blt	r3,r8,400ef88 <__adddf3+0x40c>
 400ed44:	00c00804 	movi	r3,32
 400ed48:	1a07c83a 	sub	r3,r3,r8
 400ed4c:	8a08d83a 	srl	r4,r17,r8
 400ed50:	88e2983a 	sll	r17,r17,r3
 400ed54:	10c6983a 	sll	r3,r2,r3
 400ed58:	1210d83a 	srl	r8,r2,r8
 400ed5c:	8804c03a 	cmpne	r2,r17,zero
 400ed60:	1906b03a 	or	r3,r3,r4
 400ed64:	18a2b03a 	or	r17,r3,r2
 400ed68:	0021883a 	mov	r16,zero
 400ed6c:	003fa206 	br	400ebf8 <__alt_data_end+0xfc00ebf8>
 400ed70:	1890b03a 	or	r8,r3,r2
 400ed74:	40017d26 	beq	r8,zero,400f36c <__adddf3+0x7f0>
 400ed78:	1011883a 	mov	r8,r2
 400ed7c:	1823883a 	mov	r17,r3
 400ed80:	888001cc 	andi	r2,r17,7
 400ed84:	103f9e1e 	bne	r2,zero,400ec00 <__alt_data_end+0xfc00ec00>
 400ed88:	4004977a 	slli	r2,r8,29
 400ed8c:	8822d0fa 	srli	r17,r17,3
 400ed90:	4010d0fa 	srli	r8,r8,3
 400ed94:	9007883a 	mov	r3,r18
 400ed98:	1444b03a 	or	r2,r2,r17
 400ed9c:	0101ffc4 	movi	r4,2047
 400eda0:	81002426 	beq	r16,r4,400ee34 <__adddf3+0x2b8>
 400eda4:	8120703a 	and	r16,r16,r4
 400eda8:	01000434 	movhi	r4,16
 400edac:	213fffc4 	addi	r4,r4,-1
 400edb0:	4110703a 	and	r8,r8,r4
 400edb4:	003fa806 	br	400ec58 <__alt_data_end+0xfc00ec58>
 400edb8:	8089c83a 	sub	r4,r16,r2
 400edbc:	01005e0e 	bge	zero,r4,400ef38 <__adddf3+0x3bc>
 400edc0:	10002b26 	beq	r2,zero,400ee70 <__adddf3+0x2f4>
 400edc4:	0081ffc4 	movi	r2,2047
 400edc8:	80bf8b26 	beq	r16,r2,400ebf8 <__alt_data_end+0xfc00ebf8>
 400edcc:	4a402034 	orhi	r9,r9,128
 400edd0:	00800e04 	movi	r2,56
 400edd4:	1100a40e 	bge	r2,r4,400f068 <__adddf3+0x4ec>
 400edd8:	498cb03a 	or	r6,r9,r6
 400eddc:	300ac03a 	cmpne	r5,r6,zero
 400ede0:	0013883a 	mov	r9,zero
 400ede4:	2c4b883a 	add	r5,r5,r17
 400ede8:	2c63803a 	cmpltu	r17,r5,r17
 400edec:	4a11883a 	add	r8,r9,r8
 400edf0:	8a11883a 	add	r8,r17,r8
 400edf4:	2823883a 	mov	r17,r5
 400edf8:	4080202c 	andhi	r2,r8,128
 400edfc:	103fe026 	beq	r2,zero,400ed80 <__alt_data_end+0xfc00ed80>
 400ee00:	84000044 	addi	r16,r16,1
 400ee04:	0081ffc4 	movi	r2,2047
 400ee08:	8080d226 	beq	r16,r2,400f154 <__adddf3+0x5d8>
 400ee0c:	00bfe034 	movhi	r2,65408
 400ee10:	10bfffc4 	addi	r2,r2,-1
 400ee14:	4090703a 	and	r8,r8,r2
 400ee18:	880ad07a 	srli	r5,r17,1
 400ee1c:	400897fa 	slli	r4,r8,31
 400ee20:	88c0004c 	andi	r3,r17,1
 400ee24:	28e2b03a 	or	r17,r5,r3
 400ee28:	4010d07a 	srli	r8,r8,1
 400ee2c:	2462b03a 	or	r17,r4,r17
 400ee30:	003f7106 	br	400ebf8 <__alt_data_end+0xfc00ebf8>
 400ee34:	4088b03a 	or	r4,r8,r2
 400ee38:	20014526 	beq	r4,zero,400f350 <__adddf3+0x7d4>
 400ee3c:	01000434 	movhi	r4,16
 400ee40:	42000234 	orhi	r8,r8,8
 400ee44:	213fffc4 	addi	r4,r4,-1
 400ee48:	4110703a 	and	r8,r8,r4
 400ee4c:	003f8206 	br	400ec58 <__alt_data_end+0xfc00ec58>
 400ee50:	18ffffc4 	addi	r3,r3,-1
 400ee54:	1800491e 	bne	r3,zero,400ef7c <__adddf3+0x400>
 400ee58:	898bc83a 	sub	r5,r17,r6
 400ee5c:	8963803a 	cmpltu	r17,r17,r5
 400ee60:	4251c83a 	sub	r8,r8,r9
 400ee64:	4451c83a 	sub	r8,r8,r17
 400ee68:	2823883a 	mov	r17,r5
 400ee6c:	003f9f06 	br	400ecec <__alt_data_end+0xfc00ecec>
 400ee70:	4984b03a 	or	r2,r9,r6
 400ee74:	103f6026 	beq	r2,zero,400ebf8 <__alt_data_end+0xfc00ebf8>
 400ee78:	213fffc4 	addi	r4,r4,-1
 400ee7c:	2000931e 	bne	r4,zero,400f0cc <__adddf3+0x550>
 400ee80:	898d883a 	add	r6,r17,r6
 400ee84:	3463803a 	cmpltu	r17,r6,r17
 400ee88:	4251883a 	add	r8,r8,r9
 400ee8c:	8a11883a 	add	r8,r17,r8
 400ee90:	3023883a 	mov	r17,r6
 400ee94:	003fd806 	br	400edf8 <__alt_data_end+0xfc00edf8>
 400ee98:	1800541e 	bne	r3,zero,400efec <__adddf3+0x470>
 400ee9c:	80800044 	addi	r2,r16,1
 400eea0:	1081ffcc 	andi	r2,r2,2047
 400eea4:	00c00044 	movi	r3,1
 400eea8:	1880a00e 	bge	r3,r2,400f12c <__adddf3+0x5b0>
 400eeac:	8989c83a 	sub	r4,r17,r6
 400eeb0:	8905803a 	cmpltu	r2,r17,r4
 400eeb4:	4267c83a 	sub	r19,r8,r9
 400eeb8:	98a7c83a 	sub	r19,r19,r2
 400eebc:	9880202c 	andhi	r2,r19,128
 400eec0:	10006326 	beq	r2,zero,400f050 <__adddf3+0x4d4>
 400eec4:	3463c83a 	sub	r17,r6,r17
 400eec8:	4a07c83a 	sub	r3,r9,r8
 400eecc:	344d803a 	cmpltu	r6,r6,r17
 400eed0:	19a7c83a 	sub	r19,r3,r6
 400eed4:	3825883a 	mov	r18,r7
 400eed8:	983f8a1e 	bne	r19,zero,400ed04 <__alt_data_end+0xfc00ed04>
 400eedc:	8809883a 	mov	r4,r17
 400eee0:	40113bc0 	call	40113bc <__clzsi2>
 400eee4:	10800804 	addi	r2,r2,32
 400eee8:	10fffe04 	addi	r3,r2,-8
 400eeec:	010007c4 	movi	r4,31
 400eef0:	20ff890e 	bge	r4,r3,400ed18 <__alt_data_end+0xfc00ed18>
 400eef4:	10bff604 	addi	r2,r2,-40
 400eef8:	8884983a 	sll	r2,r17,r2
 400eefc:	0023883a 	mov	r17,zero
 400ef00:	1c3f8c0e 	bge	r3,r16,400ed34 <__alt_data_end+0xfc00ed34>
 400ef04:	023fe034 	movhi	r8,65408
 400ef08:	423fffc4 	addi	r8,r8,-1
 400ef0c:	80e1c83a 	sub	r16,r16,r3
 400ef10:	1210703a 	and	r8,r2,r8
 400ef14:	003f3806 	br	400ebf8 <__alt_data_end+0xfc00ebf8>
 400ef18:	9007883a 	mov	r3,r18
 400ef1c:	0011883a 	mov	r8,zero
 400ef20:	0005883a 	mov	r2,zero
 400ef24:	003f4c06 	br	400ec58 <__alt_data_end+0xfc00ec58>
 400ef28:	498cb03a 	or	r6,r9,r6
 400ef2c:	300cc03a 	cmpne	r6,r6,zero
 400ef30:	0007883a 	mov	r3,zero
 400ef34:	003f6806 	br	400ecd8 <__alt_data_end+0xfc00ecd8>
 400ef38:	20009c1e 	bne	r4,zero,400f1ac <__adddf3+0x630>
 400ef3c:	80800044 	addi	r2,r16,1
 400ef40:	1141ffcc 	andi	r5,r2,2047
 400ef44:	01000044 	movi	r4,1
 400ef48:	2140670e 	bge	r4,r5,400f0e8 <__adddf3+0x56c>
 400ef4c:	0101ffc4 	movi	r4,2047
 400ef50:	11007f26 	beq	r2,r4,400f150 <__adddf3+0x5d4>
 400ef54:	898d883a 	add	r6,r17,r6
 400ef58:	4247883a 	add	r3,r8,r9
 400ef5c:	3451803a 	cmpltu	r8,r6,r17
 400ef60:	40d1883a 	add	r8,r8,r3
 400ef64:	402297fa 	slli	r17,r8,31
 400ef68:	300cd07a 	srli	r6,r6,1
 400ef6c:	4010d07a 	srli	r8,r8,1
 400ef70:	1021883a 	mov	r16,r2
 400ef74:	89a2b03a 	or	r17,r17,r6
 400ef78:	003f1f06 	br	400ebf8 <__alt_data_end+0xfc00ebf8>
 400ef7c:	0081ffc4 	movi	r2,2047
 400ef80:	80bf481e 	bne	r16,r2,400eca4 <__alt_data_end+0xfc00eca4>
 400ef84:	003f1c06 	br	400ebf8 <__alt_data_end+0xfc00ebf8>
 400ef88:	843ff844 	addi	r16,r16,-31
 400ef8c:	01000804 	movi	r4,32
 400ef90:	1406d83a 	srl	r3,r2,r16
 400ef94:	41005026 	beq	r8,r4,400f0d8 <__adddf3+0x55c>
 400ef98:	01001004 	movi	r4,64
 400ef9c:	2211c83a 	sub	r8,r4,r8
 400efa0:	1204983a 	sll	r2,r2,r8
 400efa4:	88a2b03a 	or	r17,r17,r2
 400efa8:	8822c03a 	cmpne	r17,r17,zero
 400efac:	1c62b03a 	or	r17,r3,r17
 400efb0:	0011883a 	mov	r8,zero
 400efb4:	0021883a 	mov	r16,zero
 400efb8:	003f7106 	br	400ed80 <__alt_data_end+0xfc00ed80>
 400efbc:	193ff804 	addi	r4,r3,-32
 400efc0:	00800804 	movi	r2,32
 400efc4:	4908d83a 	srl	r4,r9,r4
 400efc8:	18804526 	beq	r3,r2,400f0e0 <__adddf3+0x564>
 400efcc:	00801004 	movi	r2,64
 400efd0:	10c5c83a 	sub	r2,r2,r3
 400efd4:	4886983a 	sll	r3,r9,r2
 400efd8:	198cb03a 	or	r6,r3,r6
 400efdc:	300cc03a 	cmpne	r6,r6,zero
 400efe0:	218cb03a 	or	r6,r4,r6
 400efe4:	0007883a 	mov	r3,zero
 400efe8:	003f3b06 	br	400ecd8 <__alt_data_end+0xfc00ecd8>
 400efec:	80002a26 	beq	r16,zero,400f098 <__adddf3+0x51c>
 400eff0:	0101ffc4 	movi	r4,2047
 400eff4:	11006826 	beq	r2,r4,400f198 <__adddf3+0x61c>
 400eff8:	00c7c83a 	sub	r3,zero,r3
 400effc:	42002034 	orhi	r8,r8,128
 400f000:	01000e04 	movi	r4,56
 400f004:	20c07c16 	blt	r4,r3,400f1f8 <__adddf3+0x67c>
 400f008:	010007c4 	movi	r4,31
 400f00c:	20c0da16 	blt	r4,r3,400f378 <__adddf3+0x7fc>
 400f010:	01000804 	movi	r4,32
 400f014:	20c9c83a 	sub	r4,r4,r3
 400f018:	4114983a 	sll	r10,r8,r4
 400f01c:	88cad83a 	srl	r5,r17,r3
 400f020:	8908983a 	sll	r4,r17,r4
 400f024:	40c6d83a 	srl	r3,r8,r3
 400f028:	5162b03a 	or	r17,r10,r5
 400f02c:	2008c03a 	cmpne	r4,r4,zero
 400f030:	8922b03a 	or	r17,r17,r4
 400f034:	3463c83a 	sub	r17,r6,r17
 400f038:	48c7c83a 	sub	r3,r9,r3
 400f03c:	344d803a 	cmpltu	r6,r6,r17
 400f040:	1991c83a 	sub	r8,r3,r6
 400f044:	1021883a 	mov	r16,r2
 400f048:	3825883a 	mov	r18,r7
 400f04c:	003f2706 	br	400ecec <__alt_data_end+0xfc00ecec>
 400f050:	24d0b03a 	or	r8,r4,r19
 400f054:	40001b1e 	bne	r8,zero,400f0c4 <__adddf3+0x548>
 400f058:	0005883a 	mov	r2,zero
 400f05c:	0007883a 	mov	r3,zero
 400f060:	0021883a 	mov	r16,zero
 400f064:	003f4d06 	br	400ed9c <__alt_data_end+0xfc00ed9c>
 400f068:	008007c4 	movi	r2,31
 400f06c:	11003c16 	blt	r2,r4,400f160 <__adddf3+0x5e4>
 400f070:	00800804 	movi	r2,32
 400f074:	1105c83a 	sub	r2,r2,r4
 400f078:	488e983a 	sll	r7,r9,r2
 400f07c:	310ad83a 	srl	r5,r6,r4
 400f080:	3084983a 	sll	r2,r6,r2
 400f084:	4912d83a 	srl	r9,r9,r4
 400f088:	394ab03a 	or	r5,r7,r5
 400f08c:	1004c03a 	cmpne	r2,r2,zero
 400f090:	288ab03a 	or	r5,r5,r2
 400f094:	003f5306 	br	400ede4 <__alt_data_end+0xfc00ede4>
 400f098:	4448b03a 	or	r4,r8,r17
 400f09c:	20003e26 	beq	r4,zero,400f198 <__adddf3+0x61c>
 400f0a0:	00c6303a 	nor	r3,zero,r3
 400f0a4:	18003a1e 	bne	r3,zero,400f190 <__adddf3+0x614>
 400f0a8:	3463c83a 	sub	r17,r6,r17
 400f0ac:	4a07c83a 	sub	r3,r9,r8
 400f0b0:	344d803a 	cmpltu	r6,r6,r17
 400f0b4:	1991c83a 	sub	r8,r3,r6
 400f0b8:	1021883a 	mov	r16,r2
 400f0bc:	3825883a 	mov	r18,r7
 400f0c0:	003f0a06 	br	400ecec <__alt_data_end+0xfc00ecec>
 400f0c4:	2023883a 	mov	r17,r4
 400f0c8:	003f0d06 	br	400ed00 <__alt_data_end+0xfc00ed00>
 400f0cc:	0081ffc4 	movi	r2,2047
 400f0d0:	80bf3f1e 	bne	r16,r2,400edd0 <__alt_data_end+0xfc00edd0>
 400f0d4:	003ec806 	br	400ebf8 <__alt_data_end+0xfc00ebf8>
 400f0d8:	0005883a 	mov	r2,zero
 400f0dc:	003fb106 	br	400efa4 <__alt_data_end+0xfc00efa4>
 400f0e0:	0007883a 	mov	r3,zero
 400f0e4:	003fbc06 	br	400efd8 <__alt_data_end+0xfc00efd8>
 400f0e8:	4444b03a 	or	r2,r8,r17
 400f0ec:	8000871e 	bne	r16,zero,400f30c <__adddf3+0x790>
 400f0f0:	1000ba26 	beq	r2,zero,400f3dc <__adddf3+0x860>
 400f0f4:	4984b03a 	or	r2,r9,r6
 400f0f8:	103ebf26 	beq	r2,zero,400ebf8 <__alt_data_end+0xfc00ebf8>
 400f0fc:	8985883a 	add	r2,r17,r6
 400f100:	4247883a 	add	r3,r8,r9
 400f104:	1451803a 	cmpltu	r8,r2,r17
 400f108:	40d1883a 	add	r8,r8,r3
 400f10c:	40c0202c 	andhi	r3,r8,128
 400f110:	1023883a 	mov	r17,r2
 400f114:	183f1a26 	beq	r3,zero,400ed80 <__alt_data_end+0xfc00ed80>
 400f118:	00bfe034 	movhi	r2,65408
 400f11c:	10bfffc4 	addi	r2,r2,-1
 400f120:	2021883a 	mov	r16,r4
 400f124:	4090703a 	and	r8,r8,r2
 400f128:	003eb306 	br	400ebf8 <__alt_data_end+0xfc00ebf8>
 400f12c:	4444b03a 	or	r2,r8,r17
 400f130:	8000291e 	bne	r16,zero,400f1d8 <__adddf3+0x65c>
 400f134:	10004b1e 	bne	r2,zero,400f264 <__adddf3+0x6e8>
 400f138:	4990b03a 	or	r8,r9,r6
 400f13c:	40008b26 	beq	r8,zero,400f36c <__adddf3+0x7f0>
 400f140:	4811883a 	mov	r8,r9
 400f144:	3023883a 	mov	r17,r6
 400f148:	3825883a 	mov	r18,r7
 400f14c:	003eaa06 	br	400ebf8 <__alt_data_end+0xfc00ebf8>
 400f150:	1021883a 	mov	r16,r2
 400f154:	0011883a 	mov	r8,zero
 400f158:	0005883a 	mov	r2,zero
 400f15c:	003f0f06 	br	400ed9c <__alt_data_end+0xfc00ed9c>
 400f160:	217ff804 	addi	r5,r4,-32
 400f164:	00800804 	movi	r2,32
 400f168:	494ad83a 	srl	r5,r9,r5
 400f16c:	20807d26 	beq	r4,r2,400f364 <__adddf3+0x7e8>
 400f170:	00801004 	movi	r2,64
 400f174:	1109c83a 	sub	r4,r2,r4
 400f178:	4912983a 	sll	r9,r9,r4
 400f17c:	498cb03a 	or	r6,r9,r6
 400f180:	300cc03a 	cmpne	r6,r6,zero
 400f184:	298ab03a 	or	r5,r5,r6
 400f188:	0013883a 	mov	r9,zero
 400f18c:	003f1506 	br	400ede4 <__alt_data_end+0xfc00ede4>
 400f190:	0101ffc4 	movi	r4,2047
 400f194:	113f9a1e 	bne	r2,r4,400f000 <__alt_data_end+0xfc00f000>
 400f198:	4811883a 	mov	r8,r9
 400f19c:	3023883a 	mov	r17,r6
 400f1a0:	1021883a 	mov	r16,r2
 400f1a4:	3825883a 	mov	r18,r7
 400f1a8:	003e9306 	br	400ebf8 <__alt_data_end+0xfc00ebf8>
 400f1ac:	8000161e 	bne	r16,zero,400f208 <__adddf3+0x68c>
 400f1b0:	444ab03a 	or	r5,r8,r17
 400f1b4:	28005126 	beq	r5,zero,400f2fc <__adddf3+0x780>
 400f1b8:	0108303a 	nor	r4,zero,r4
 400f1bc:	20004d1e 	bne	r4,zero,400f2f4 <__adddf3+0x778>
 400f1c0:	89a3883a 	add	r17,r17,r6
 400f1c4:	4253883a 	add	r9,r8,r9
 400f1c8:	898d803a 	cmpltu	r6,r17,r6
 400f1cc:	3251883a 	add	r8,r6,r9
 400f1d0:	1021883a 	mov	r16,r2
 400f1d4:	003f0806 	br	400edf8 <__alt_data_end+0xfc00edf8>
 400f1d8:	1000301e 	bne	r2,zero,400f29c <__adddf3+0x720>
 400f1dc:	4984b03a 	or	r2,r9,r6
 400f1e0:	10007126 	beq	r2,zero,400f3a8 <__adddf3+0x82c>
 400f1e4:	4811883a 	mov	r8,r9
 400f1e8:	3023883a 	mov	r17,r6
 400f1ec:	3825883a 	mov	r18,r7
 400f1f0:	0401ffc4 	movi	r16,2047
 400f1f4:	003e8006 	br	400ebf8 <__alt_data_end+0xfc00ebf8>
 400f1f8:	4462b03a 	or	r17,r8,r17
 400f1fc:	8822c03a 	cmpne	r17,r17,zero
 400f200:	0007883a 	mov	r3,zero
 400f204:	003f8b06 	br	400f034 <__alt_data_end+0xfc00f034>
 400f208:	0141ffc4 	movi	r5,2047
 400f20c:	11403b26 	beq	r2,r5,400f2fc <__adddf3+0x780>
 400f210:	0109c83a 	sub	r4,zero,r4
 400f214:	42002034 	orhi	r8,r8,128
 400f218:	01400e04 	movi	r5,56
 400f21c:	29006716 	blt	r5,r4,400f3bc <__adddf3+0x840>
 400f220:	014007c4 	movi	r5,31
 400f224:	29007016 	blt	r5,r4,400f3e8 <__adddf3+0x86c>
 400f228:	01400804 	movi	r5,32
 400f22c:	290bc83a 	sub	r5,r5,r4
 400f230:	4154983a 	sll	r10,r8,r5
 400f234:	890ed83a 	srl	r7,r17,r4
 400f238:	894a983a 	sll	r5,r17,r5
 400f23c:	4108d83a 	srl	r4,r8,r4
 400f240:	51e2b03a 	or	r17,r10,r7
 400f244:	280ac03a 	cmpne	r5,r5,zero
 400f248:	8962b03a 	or	r17,r17,r5
 400f24c:	89a3883a 	add	r17,r17,r6
 400f250:	2253883a 	add	r9,r4,r9
 400f254:	898d803a 	cmpltu	r6,r17,r6
 400f258:	3251883a 	add	r8,r6,r9
 400f25c:	1021883a 	mov	r16,r2
 400f260:	003ee506 	br	400edf8 <__alt_data_end+0xfc00edf8>
 400f264:	4984b03a 	or	r2,r9,r6
 400f268:	103e6326 	beq	r2,zero,400ebf8 <__alt_data_end+0xfc00ebf8>
 400f26c:	8987c83a 	sub	r3,r17,r6
 400f270:	88c9803a 	cmpltu	r4,r17,r3
 400f274:	4245c83a 	sub	r2,r8,r9
 400f278:	1105c83a 	sub	r2,r2,r4
 400f27c:	1100202c 	andhi	r4,r2,128
 400f280:	203ebb26 	beq	r4,zero,400ed70 <__alt_data_end+0xfc00ed70>
 400f284:	3463c83a 	sub	r17,r6,r17
 400f288:	4a07c83a 	sub	r3,r9,r8
 400f28c:	344d803a 	cmpltu	r6,r6,r17
 400f290:	1991c83a 	sub	r8,r3,r6
 400f294:	3825883a 	mov	r18,r7
 400f298:	003e5706 	br	400ebf8 <__alt_data_end+0xfc00ebf8>
 400f29c:	4984b03a 	or	r2,r9,r6
 400f2a0:	10002e26 	beq	r2,zero,400f35c <__adddf3+0x7e0>
 400f2a4:	4004d0fa 	srli	r2,r8,3
 400f2a8:	8822d0fa 	srli	r17,r17,3
 400f2ac:	4010977a 	slli	r8,r8,29
 400f2b0:	10c0022c 	andhi	r3,r2,8
 400f2b4:	4462b03a 	or	r17,r8,r17
 400f2b8:	18000826 	beq	r3,zero,400f2dc <__adddf3+0x760>
 400f2bc:	4808d0fa 	srli	r4,r9,3
 400f2c0:	20c0022c 	andhi	r3,r4,8
 400f2c4:	1800051e 	bne	r3,zero,400f2dc <__adddf3+0x760>
 400f2c8:	300cd0fa 	srli	r6,r6,3
 400f2cc:	4806977a 	slli	r3,r9,29
 400f2d0:	2005883a 	mov	r2,r4
 400f2d4:	3825883a 	mov	r18,r7
 400f2d8:	19a2b03a 	or	r17,r3,r6
 400f2dc:	8810d77a 	srli	r8,r17,29
 400f2e0:	100490fa 	slli	r2,r2,3
 400f2e4:	882290fa 	slli	r17,r17,3
 400f2e8:	0401ffc4 	movi	r16,2047
 400f2ec:	4090b03a 	or	r8,r8,r2
 400f2f0:	003e4106 	br	400ebf8 <__alt_data_end+0xfc00ebf8>
 400f2f4:	0141ffc4 	movi	r5,2047
 400f2f8:	117fc71e 	bne	r2,r5,400f218 <__alt_data_end+0xfc00f218>
 400f2fc:	4811883a 	mov	r8,r9
 400f300:	3023883a 	mov	r17,r6
 400f304:	1021883a 	mov	r16,r2
 400f308:	003e3b06 	br	400ebf8 <__alt_data_end+0xfc00ebf8>
 400f30c:	10002f26 	beq	r2,zero,400f3cc <__adddf3+0x850>
 400f310:	4984b03a 	or	r2,r9,r6
 400f314:	10001126 	beq	r2,zero,400f35c <__adddf3+0x7e0>
 400f318:	4004d0fa 	srli	r2,r8,3
 400f31c:	8822d0fa 	srli	r17,r17,3
 400f320:	4010977a 	slli	r8,r8,29
 400f324:	10c0022c 	andhi	r3,r2,8
 400f328:	4462b03a 	or	r17,r8,r17
 400f32c:	183feb26 	beq	r3,zero,400f2dc <__alt_data_end+0xfc00f2dc>
 400f330:	4808d0fa 	srli	r4,r9,3
 400f334:	20c0022c 	andhi	r3,r4,8
 400f338:	183fe81e 	bne	r3,zero,400f2dc <__alt_data_end+0xfc00f2dc>
 400f33c:	300cd0fa 	srli	r6,r6,3
 400f340:	4806977a 	slli	r3,r9,29
 400f344:	2005883a 	mov	r2,r4
 400f348:	19a2b03a 	or	r17,r3,r6
 400f34c:	003fe306 	br	400f2dc <__alt_data_end+0xfc00f2dc>
 400f350:	0011883a 	mov	r8,zero
 400f354:	0005883a 	mov	r2,zero
 400f358:	003e3f06 	br	400ec58 <__alt_data_end+0xfc00ec58>
 400f35c:	0401ffc4 	movi	r16,2047
 400f360:	003e2506 	br	400ebf8 <__alt_data_end+0xfc00ebf8>
 400f364:	0013883a 	mov	r9,zero
 400f368:	003f8406 	br	400f17c <__alt_data_end+0xfc00f17c>
 400f36c:	0005883a 	mov	r2,zero
 400f370:	0007883a 	mov	r3,zero
 400f374:	003e8906 	br	400ed9c <__alt_data_end+0xfc00ed9c>
 400f378:	197ff804 	addi	r5,r3,-32
 400f37c:	01000804 	movi	r4,32
 400f380:	414ad83a 	srl	r5,r8,r5
 400f384:	19002426 	beq	r3,r4,400f418 <__adddf3+0x89c>
 400f388:	01001004 	movi	r4,64
 400f38c:	20c7c83a 	sub	r3,r4,r3
 400f390:	40c6983a 	sll	r3,r8,r3
 400f394:	1c46b03a 	or	r3,r3,r17
 400f398:	1806c03a 	cmpne	r3,r3,zero
 400f39c:	28e2b03a 	or	r17,r5,r3
 400f3a0:	0007883a 	mov	r3,zero
 400f3a4:	003f2306 	br	400f034 <__alt_data_end+0xfc00f034>
 400f3a8:	0007883a 	mov	r3,zero
 400f3ac:	5811883a 	mov	r8,r11
 400f3b0:	00bfffc4 	movi	r2,-1
 400f3b4:	0401ffc4 	movi	r16,2047
 400f3b8:	003e7806 	br	400ed9c <__alt_data_end+0xfc00ed9c>
 400f3bc:	4462b03a 	or	r17,r8,r17
 400f3c0:	8822c03a 	cmpne	r17,r17,zero
 400f3c4:	0009883a 	mov	r4,zero
 400f3c8:	003fa006 	br	400f24c <__alt_data_end+0xfc00f24c>
 400f3cc:	4811883a 	mov	r8,r9
 400f3d0:	3023883a 	mov	r17,r6
 400f3d4:	0401ffc4 	movi	r16,2047
 400f3d8:	003e0706 	br	400ebf8 <__alt_data_end+0xfc00ebf8>
 400f3dc:	4811883a 	mov	r8,r9
 400f3e0:	3023883a 	mov	r17,r6
 400f3e4:	003e0406 	br	400ebf8 <__alt_data_end+0xfc00ebf8>
 400f3e8:	21fff804 	addi	r7,r4,-32
 400f3ec:	01400804 	movi	r5,32
 400f3f0:	41ced83a 	srl	r7,r8,r7
 400f3f4:	21400a26 	beq	r4,r5,400f420 <__adddf3+0x8a4>
 400f3f8:	01401004 	movi	r5,64
 400f3fc:	2909c83a 	sub	r4,r5,r4
 400f400:	4108983a 	sll	r4,r8,r4
 400f404:	2448b03a 	or	r4,r4,r17
 400f408:	2008c03a 	cmpne	r4,r4,zero
 400f40c:	3922b03a 	or	r17,r7,r4
 400f410:	0009883a 	mov	r4,zero
 400f414:	003f8d06 	br	400f24c <__alt_data_end+0xfc00f24c>
 400f418:	0007883a 	mov	r3,zero
 400f41c:	003fdd06 	br	400f394 <__alt_data_end+0xfc00f394>
 400f420:	0009883a 	mov	r4,zero
 400f424:	003ff706 	br	400f404 <__alt_data_end+0xfc00f404>

0400f428 <__divdf3>:
 400f428:	defff004 	addi	sp,sp,-64
 400f42c:	dc800815 	stw	r18,32(sp)
 400f430:	2824d53a 	srli	r18,r5,20
 400f434:	dd800c15 	stw	r22,48(sp)
 400f438:	282cd7fa 	srli	r22,r5,31
 400f43c:	dc000615 	stw	r16,24(sp)
 400f440:	04000434 	movhi	r16,16
 400f444:	843fffc4 	addi	r16,r16,-1
 400f448:	dfc00f15 	stw	ra,60(sp)
 400f44c:	df000e15 	stw	fp,56(sp)
 400f450:	ddc00d15 	stw	r23,52(sp)
 400f454:	dd400b15 	stw	r21,44(sp)
 400f458:	dd000a15 	stw	r20,40(sp)
 400f45c:	dcc00915 	stw	r19,36(sp)
 400f460:	dc400715 	stw	r17,28(sp)
 400f464:	9481ffcc 	andi	r18,r18,2047
 400f468:	2c20703a 	and	r16,r5,r16
 400f46c:	b2003fcc 	andi	r8,r22,255
 400f470:	90006126 	beq	r18,zero,400f5f8 <__divdf3+0x1d0>
 400f474:	0081ffc4 	movi	r2,2047
 400f478:	202b883a 	mov	r21,r4
 400f47c:	90803726 	beq	r18,r2,400f55c <__divdf3+0x134>
 400f480:	80800434 	orhi	r2,r16,16
 400f484:	100490fa 	slli	r2,r2,3
 400f488:	2020d77a 	srli	r16,r4,29
 400f48c:	202a90fa 	slli	r21,r4,3
 400f490:	94bf0044 	addi	r18,r18,-1023
 400f494:	80a0b03a 	or	r16,r16,r2
 400f498:	0013883a 	mov	r9,zero
 400f49c:	000b883a 	mov	r5,zero
 400f4a0:	3806d53a 	srli	r3,r7,20
 400f4a4:	382ed7fa 	srli	r23,r7,31
 400f4a8:	04400434 	movhi	r17,16
 400f4ac:	8c7fffc4 	addi	r17,r17,-1
 400f4b0:	18c1ffcc 	andi	r3,r3,2047
 400f4b4:	3029883a 	mov	r20,r6
 400f4b8:	3c62703a 	and	r17,r7,r17
 400f4bc:	bf003fcc 	andi	fp,r23,255
 400f4c0:	18006e26 	beq	r3,zero,400f67c <__divdf3+0x254>
 400f4c4:	0081ffc4 	movi	r2,2047
 400f4c8:	18806626 	beq	r3,r2,400f664 <__divdf3+0x23c>
 400f4cc:	88800434 	orhi	r2,r17,16
 400f4d0:	100490fa 	slli	r2,r2,3
 400f4d4:	3022d77a 	srli	r17,r6,29
 400f4d8:	302890fa 	slli	r20,r6,3
 400f4dc:	18ff0044 	addi	r3,r3,-1023
 400f4e0:	88a2b03a 	or	r17,r17,r2
 400f4e4:	000f883a 	mov	r7,zero
 400f4e8:	b5e6f03a 	xor	r19,r22,r23
 400f4ec:	3a4cb03a 	or	r6,r7,r9
 400f4f0:	008003c4 	movi	r2,15
 400f4f4:	9809883a 	mov	r4,r19
 400f4f8:	90c7c83a 	sub	r3,r18,r3
 400f4fc:	9cc03fcc 	andi	r19,r19,255
 400f500:	11809636 	bltu	r2,r6,400f75c <__divdf3+0x334>
 400f504:	300c90ba 	slli	r6,r6,2
 400f508:	00810074 	movhi	r2,1025
 400f50c:	10bd4704 	addi	r2,r2,-2788
 400f510:	308d883a 	add	r6,r6,r2
 400f514:	30800017 	ldw	r2,0(r6)
 400f518:	1000683a 	jmp	r2
 400f51c:	0400f75c 	xori	r16,zero,989
 400f520:	0400f594 	movui	r16,982
 400f524:	0400f74c 	andi	r16,zero,989
 400f528:	0400f588 	cmpgei	r16,zero,982
 400f52c:	0400f74c 	andi	r16,zero,989
 400f530:	0400f720 	cmpeqi	r16,zero,988
 400f534:	0400f74c 	andi	r16,zero,989
 400f538:	0400f588 	cmpgei	r16,zero,982
 400f53c:	0400f594 	movui	r16,982
 400f540:	0400f594 	movui	r16,982
 400f544:	0400f720 	cmpeqi	r16,zero,988
 400f548:	0400f588 	cmpgei	r16,zero,982
 400f54c:	0400f578 	rdprs	r16,zero,981
 400f550:	0400f578 	rdprs	r16,zero,981
 400f554:	0400f578 	rdprs	r16,zero,981
 400f558:	0400fae4 	muli	r16,zero,1003
 400f55c:	2404b03a 	or	r2,r4,r16
 400f560:	10006c1e 	bne	r2,zero,400f714 <__divdf3+0x2ec>
 400f564:	02400204 	movi	r9,8
 400f568:	0021883a 	mov	r16,zero
 400f56c:	002b883a 	mov	r21,zero
 400f570:	01400084 	movi	r5,2
 400f574:	003fca06 	br	400f4a0 <__alt_data_end+0xfc00f4a0>
 400f578:	8023883a 	mov	r17,r16
 400f57c:	a829883a 	mov	r20,r21
 400f580:	4039883a 	mov	fp,r8
 400f584:	280f883a 	mov	r7,r5
 400f588:	00800084 	movi	r2,2
 400f58c:	3881601e 	bne	r7,r2,400fb10 <__divdf3+0x6e8>
 400f590:	e027883a 	mov	r19,fp
 400f594:	9900004c 	andi	r4,r19,1
 400f598:	0081ffc4 	movi	r2,2047
 400f59c:	0021883a 	mov	r16,zero
 400f5a0:	002b883a 	mov	r21,zero
 400f5a4:	1004953a 	slli	r2,r2,20
 400f5a8:	20c03fcc 	andi	r3,r4,255
 400f5ac:	01400434 	movhi	r5,16
 400f5b0:	297fffc4 	addi	r5,r5,-1
 400f5b4:	180697fa 	slli	r3,r3,31
 400f5b8:	8160703a 	and	r16,r16,r5
 400f5bc:	80a0b03a 	or	r16,r16,r2
 400f5c0:	80c6b03a 	or	r3,r16,r3
 400f5c4:	a805883a 	mov	r2,r21
 400f5c8:	dfc00f17 	ldw	ra,60(sp)
 400f5cc:	df000e17 	ldw	fp,56(sp)
 400f5d0:	ddc00d17 	ldw	r23,52(sp)
 400f5d4:	dd800c17 	ldw	r22,48(sp)
 400f5d8:	dd400b17 	ldw	r21,44(sp)
 400f5dc:	dd000a17 	ldw	r20,40(sp)
 400f5e0:	dcc00917 	ldw	r19,36(sp)
 400f5e4:	dc800817 	ldw	r18,32(sp)
 400f5e8:	dc400717 	ldw	r17,28(sp)
 400f5ec:	dc000617 	ldw	r16,24(sp)
 400f5f0:	dec01004 	addi	sp,sp,64
 400f5f4:	f800283a 	ret
 400f5f8:	2404b03a 	or	r2,r4,r16
 400f5fc:	2023883a 	mov	r17,r4
 400f600:	10003f26 	beq	r2,zero,400f700 <__divdf3+0x2d8>
 400f604:	80015e26 	beq	r16,zero,400fb80 <__divdf3+0x758>
 400f608:	8009883a 	mov	r4,r16
 400f60c:	d9800215 	stw	r6,8(sp)
 400f610:	d9c00515 	stw	r7,20(sp)
 400f614:	da000415 	stw	r8,16(sp)
 400f618:	40113bc0 	call	40113bc <__clzsi2>
 400f61c:	d9800217 	ldw	r6,8(sp)
 400f620:	d9c00517 	ldw	r7,20(sp)
 400f624:	da000417 	ldw	r8,16(sp)
 400f628:	113ffd44 	addi	r4,r2,-11
 400f62c:	00c00704 	movi	r3,28
 400f630:	19014f16 	blt	r3,r4,400fb70 <__divdf3+0x748>
 400f634:	00c00744 	movi	r3,29
 400f638:	157ffe04 	addi	r21,r2,-8
 400f63c:	1907c83a 	sub	r3,r3,r4
 400f640:	8560983a 	sll	r16,r16,r21
 400f644:	88c6d83a 	srl	r3,r17,r3
 400f648:	8d6a983a 	sll	r21,r17,r21
 400f64c:	1c20b03a 	or	r16,r3,r16
 400f650:	1080fcc4 	addi	r2,r2,1011
 400f654:	00a5c83a 	sub	r18,zero,r2
 400f658:	0013883a 	mov	r9,zero
 400f65c:	000b883a 	mov	r5,zero
 400f660:	003f8f06 	br	400f4a0 <__alt_data_end+0xfc00f4a0>
 400f664:	3444b03a 	or	r2,r6,r17
 400f668:	1000231e 	bne	r2,zero,400f6f8 <__divdf3+0x2d0>
 400f66c:	0023883a 	mov	r17,zero
 400f670:	0029883a 	mov	r20,zero
 400f674:	01c00084 	movi	r7,2
 400f678:	003f9b06 	br	400f4e8 <__alt_data_end+0xfc00f4e8>
 400f67c:	3444b03a 	or	r2,r6,r17
 400f680:	10001926 	beq	r2,zero,400f6e8 <__divdf3+0x2c0>
 400f684:	88014b26 	beq	r17,zero,400fbb4 <__divdf3+0x78c>
 400f688:	8809883a 	mov	r4,r17
 400f68c:	d9400115 	stw	r5,4(sp)
 400f690:	d9800215 	stw	r6,8(sp)
 400f694:	da000415 	stw	r8,16(sp)
 400f698:	da400315 	stw	r9,12(sp)
 400f69c:	40113bc0 	call	40113bc <__clzsi2>
 400f6a0:	d9400117 	ldw	r5,4(sp)
 400f6a4:	d9800217 	ldw	r6,8(sp)
 400f6a8:	da000417 	ldw	r8,16(sp)
 400f6ac:	da400317 	ldw	r9,12(sp)
 400f6b0:	113ffd44 	addi	r4,r2,-11
 400f6b4:	00c00704 	movi	r3,28
 400f6b8:	19013a16 	blt	r3,r4,400fba4 <__divdf3+0x77c>
 400f6bc:	00c00744 	movi	r3,29
 400f6c0:	153ffe04 	addi	r20,r2,-8
 400f6c4:	1907c83a 	sub	r3,r3,r4
 400f6c8:	8d22983a 	sll	r17,r17,r20
 400f6cc:	30c6d83a 	srl	r3,r6,r3
 400f6d0:	3528983a 	sll	r20,r6,r20
 400f6d4:	1c62b03a 	or	r17,r3,r17
 400f6d8:	1080fcc4 	addi	r2,r2,1011
 400f6dc:	0087c83a 	sub	r3,zero,r2
 400f6e0:	000f883a 	mov	r7,zero
 400f6e4:	003f8006 	br	400f4e8 <__alt_data_end+0xfc00f4e8>
 400f6e8:	0023883a 	mov	r17,zero
 400f6ec:	0029883a 	mov	r20,zero
 400f6f0:	01c00044 	movi	r7,1
 400f6f4:	003f7c06 	br	400f4e8 <__alt_data_end+0xfc00f4e8>
 400f6f8:	01c000c4 	movi	r7,3
 400f6fc:	003f7a06 	br	400f4e8 <__alt_data_end+0xfc00f4e8>
 400f700:	02400104 	movi	r9,4
 400f704:	0021883a 	mov	r16,zero
 400f708:	002b883a 	mov	r21,zero
 400f70c:	01400044 	movi	r5,1
 400f710:	003f6306 	br	400f4a0 <__alt_data_end+0xfc00f4a0>
 400f714:	02400304 	movi	r9,12
 400f718:	014000c4 	movi	r5,3
 400f71c:	003f6006 	br	400f4a0 <__alt_data_end+0xfc00f4a0>
 400f720:	04000434 	movhi	r16,16
 400f724:	0009883a 	mov	r4,zero
 400f728:	843fffc4 	addi	r16,r16,-1
 400f72c:	057fffc4 	movi	r21,-1
 400f730:	0081ffc4 	movi	r2,2047
 400f734:	003f9b06 	br	400f5a4 <__alt_data_end+0xfc00f5a4>
 400f738:	00c00044 	movi	r3,1
 400f73c:	1887c83a 	sub	r3,r3,r2
 400f740:	01000e04 	movi	r4,56
 400f744:	20c1530e 	bge	r4,r3,400fc94 <__divdf3+0x86c>
 400f748:	9900004c 	andi	r4,r19,1
 400f74c:	0005883a 	mov	r2,zero
 400f750:	0021883a 	mov	r16,zero
 400f754:	002b883a 	mov	r21,zero
 400f758:	003f9206 	br	400f5a4 <__alt_data_end+0xfc00f5a4>
 400f75c:	8c012e36 	bltu	r17,r16,400fc18 <__divdf3+0x7f0>
 400f760:	84412c26 	beq	r16,r17,400fc14 <__divdf3+0x7ec>
 400f764:	a82f883a 	mov	r23,r21
 400f768:	18ffffc4 	addi	r3,r3,-1
 400f76c:	002b883a 	mov	r21,zero
 400f770:	a004d63a 	srli	r2,r20,24
 400f774:	8822923a 	slli	r17,r17,8
 400f778:	a028923a 	slli	r20,r20,8
 400f77c:	8009883a 	mov	r4,r16
 400f780:	88acb03a 	or	r22,r17,r2
 400f784:	dd000015 	stw	r20,0(sp)
 400f788:	b028d43a 	srli	r20,r22,16
 400f78c:	d8c00215 	stw	r3,8(sp)
 400f790:	b4bfffcc 	andi	r18,r22,65535
 400f794:	a00b883a 	mov	r5,r20
 400f798:	40044380 	call	4004438 <__udivsi3>
 400f79c:	100b883a 	mov	r5,r2
 400f7a0:	9009883a 	mov	r4,r18
 400f7a4:	1023883a 	mov	r17,r2
 400f7a8:	40044f40 	call	40044f4 <__mulsi3>
 400f7ac:	8009883a 	mov	r4,r16
 400f7b0:	a00b883a 	mov	r5,r20
 400f7b4:	1039883a 	mov	fp,r2
 400f7b8:	400449c0 	call	400449c <__umodsi3>
 400f7bc:	1004943a 	slli	r2,r2,16
 400f7c0:	b808d43a 	srli	r4,r23,16
 400f7c4:	d8c00217 	ldw	r3,8(sp)
 400f7c8:	2084b03a 	or	r2,r4,r2
 400f7cc:	1700062e 	bgeu	r2,fp,400f7e8 <__divdf3+0x3c0>
 400f7d0:	1585883a 	add	r2,r2,r22
 400f7d4:	893fffc4 	addi	r4,r17,-1
 400f7d8:	15811d36 	bltu	r2,r22,400fc50 <__divdf3+0x828>
 400f7dc:	17011c2e 	bgeu	r2,fp,400fc50 <__divdf3+0x828>
 400f7e0:	8c7fff84 	addi	r17,r17,-2
 400f7e4:	1585883a 	add	r2,r2,r22
 400f7e8:	1739c83a 	sub	fp,r2,fp
 400f7ec:	a00b883a 	mov	r5,r20
 400f7f0:	e009883a 	mov	r4,fp
 400f7f4:	d8c00215 	stw	r3,8(sp)
 400f7f8:	40044380 	call	4004438 <__udivsi3>
 400f7fc:	100b883a 	mov	r5,r2
 400f800:	9009883a 	mov	r4,r18
 400f804:	1021883a 	mov	r16,r2
 400f808:	40044f40 	call	40044f4 <__mulsi3>
 400f80c:	a00b883a 	mov	r5,r20
 400f810:	e009883a 	mov	r4,fp
 400f814:	d8800415 	stw	r2,16(sp)
 400f818:	400449c0 	call	400449c <__umodsi3>
 400f81c:	1004943a 	slli	r2,r2,16
 400f820:	da000417 	ldw	r8,16(sp)
 400f824:	bdffffcc 	andi	r23,r23,65535
 400f828:	b884b03a 	or	r2,r23,r2
 400f82c:	d8c00217 	ldw	r3,8(sp)
 400f830:	1200062e 	bgeu	r2,r8,400f84c <__divdf3+0x424>
 400f834:	1585883a 	add	r2,r2,r22
 400f838:	813fffc4 	addi	r4,r16,-1
 400f83c:	15810236 	bltu	r2,r22,400fc48 <__divdf3+0x820>
 400f840:	1201012e 	bgeu	r2,r8,400fc48 <__divdf3+0x820>
 400f844:	843fff84 	addi	r16,r16,-2
 400f848:	1585883a 	add	r2,r2,r22
 400f84c:	8822943a 	slli	r17,r17,16
 400f850:	d9800017 	ldw	r6,0(sp)
 400f854:	1211c83a 	sub	r8,r2,r8
 400f858:	8c22b03a 	or	r17,r17,r16
 400f85c:	373fffcc 	andi	fp,r6,65535
 400f860:	8abfffcc 	andi	r10,r17,65535
 400f864:	8820d43a 	srli	r16,r17,16
 400f868:	5009883a 	mov	r4,r10
 400f86c:	e00b883a 	mov	r5,fp
 400f870:	302ed43a 	srli	r23,r6,16
 400f874:	d8c00215 	stw	r3,8(sp)
 400f878:	da000415 	stw	r8,16(sp)
 400f87c:	da800115 	stw	r10,4(sp)
 400f880:	40044f40 	call	40044f4 <__mulsi3>
 400f884:	800b883a 	mov	r5,r16
 400f888:	e009883a 	mov	r4,fp
 400f88c:	d8800515 	stw	r2,20(sp)
 400f890:	40044f40 	call	40044f4 <__mulsi3>
 400f894:	8009883a 	mov	r4,r16
 400f898:	b80b883a 	mov	r5,r23
 400f89c:	d8800315 	stw	r2,12(sp)
 400f8a0:	40044f40 	call	40044f4 <__mulsi3>
 400f8a4:	da800117 	ldw	r10,4(sp)
 400f8a8:	b80b883a 	mov	r5,r23
 400f8ac:	1021883a 	mov	r16,r2
 400f8b0:	5009883a 	mov	r4,r10
 400f8b4:	40044f40 	call	40044f4 <__mulsi3>
 400f8b8:	d9c00517 	ldw	r7,20(sp)
 400f8bc:	da400317 	ldw	r9,12(sp)
 400f8c0:	d8c00217 	ldw	r3,8(sp)
 400f8c4:	3808d43a 	srli	r4,r7,16
 400f8c8:	1245883a 	add	r2,r2,r9
 400f8cc:	da000417 	ldw	r8,16(sp)
 400f8d0:	2085883a 	add	r2,r4,r2
 400f8d4:	1240022e 	bgeu	r2,r9,400f8e0 <__divdf3+0x4b8>
 400f8d8:	01000074 	movhi	r4,1
 400f8dc:	8121883a 	add	r16,r16,r4
 400f8e0:	1008d43a 	srli	r4,r2,16
 400f8e4:	1004943a 	slli	r2,r2,16
 400f8e8:	39ffffcc 	andi	r7,r7,65535
 400f8ec:	2409883a 	add	r4,r4,r16
 400f8f0:	11c5883a 	add	r2,r2,r7
 400f8f4:	4100bb36 	bltu	r8,r4,400fbe4 <__divdf3+0x7bc>
 400f8f8:	4100d726 	beq	r8,r4,400fc58 <__divdf3+0x830>
 400f8fc:	4109c83a 	sub	r4,r8,r4
 400f900:	a8a1c83a 	sub	r16,r21,r2
 400f904:	ac2b803a 	cmpltu	r21,r21,r16
 400f908:	256bc83a 	sub	r21,r4,r21
 400f90c:	b540d926 	beq	r22,r21,400fc74 <__divdf3+0x84c>
 400f910:	a00b883a 	mov	r5,r20
 400f914:	a809883a 	mov	r4,r21
 400f918:	d8c00215 	stw	r3,8(sp)
 400f91c:	40044380 	call	4004438 <__udivsi3>
 400f920:	100b883a 	mov	r5,r2
 400f924:	9009883a 	mov	r4,r18
 400f928:	d8800515 	stw	r2,20(sp)
 400f92c:	40044f40 	call	40044f4 <__mulsi3>
 400f930:	a809883a 	mov	r4,r21
 400f934:	a00b883a 	mov	r5,r20
 400f938:	d8800415 	stw	r2,16(sp)
 400f93c:	400449c0 	call	400449c <__umodsi3>
 400f940:	1004943a 	slli	r2,r2,16
 400f944:	8008d43a 	srli	r4,r16,16
 400f948:	da000417 	ldw	r8,16(sp)
 400f94c:	d8c00217 	ldw	r3,8(sp)
 400f950:	2084b03a 	or	r2,r4,r2
 400f954:	d9c00517 	ldw	r7,20(sp)
 400f958:	1200062e 	bgeu	r2,r8,400f974 <__divdf3+0x54c>
 400f95c:	1585883a 	add	r2,r2,r22
 400f960:	393fffc4 	addi	r4,r7,-1
 400f964:	1580c536 	bltu	r2,r22,400fc7c <__divdf3+0x854>
 400f968:	1200c42e 	bgeu	r2,r8,400fc7c <__divdf3+0x854>
 400f96c:	39ffff84 	addi	r7,r7,-2
 400f970:	1585883a 	add	r2,r2,r22
 400f974:	122bc83a 	sub	r21,r2,r8
 400f978:	a00b883a 	mov	r5,r20
 400f97c:	a809883a 	mov	r4,r21
 400f980:	d8c00215 	stw	r3,8(sp)
 400f984:	d9c00515 	stw	r7,20(sp)
 400f988:	40044380 	call	4004438 <__udivsi3>
 400f98c:	9009883a 	mov	r4,r18
 400f990:	100b883a 	mov	r5,r2
 400f994:	d8800415 	stw	r2,16(sp)
 400f998:	40044f40 	call	40044f4 <__mulsi3>
 400f99c:	a809883a 	mov	r4,r21
 400f9a0:	a00b883a 	mov	r5,r20
 400f9a4:	1025883a 	mov	r18,r2
 400f9a8:	400449c0 	call	400449c <__umodsi3>
 400f9ac:	1004943a 	slli	r2,r2,16
 400f9b0:	813fffcc 	andi	r4,r16,65535
 400f9b4:	d8c00217 	ldw	r3,8(sp)
 400f9b8:	20a0b03a 	or	r16,r4,r2
 400f9bc:	d9c00517 	ldw	r7,20(sp)
 400f9c0:	da000417 	ldw	r8,16(sp)
 400f9c4:	8480062e 	bgeu	r16,r18,400f9e0 <__divdf3+0x5b8>
 400f9c8:	85a1883a 	add	r16,r16,r22
 400f9cc:	40bfffc4 	addi	r2,r8,-1
 400f9d0:	8580ac36 	bltu	r16,r22,400fc84 <__divdf3+0x85c>
 400f9d4:	8480ab2e 	bgeu	r16,r18,400fc84 <__divdf3+0x85c>
 400f9d8:	423fff84 	addi	r8,r8,-2
 400f9dc:	85a1883a 	add	r16,r16,r22
 400f9e0:	3804943a 	slli	r2,r7,16
 400f9e4:	84a1c83a 	sub	r16,r16,r18
 400f9e8:	e009883a 	mov	r4,fp
 400f9ec:	1228b03a 	or	r20,r2,r8
 400f9f0:	a1ffffcc 	andi	r7,r20,65535
 400f9f4:	a024d43a 	srli	r18,r20,16
 400f9f8:	380b883a 	mov	r5,r7
 400f9fc:	d8c00215 	stw	r3,8(sp)
 400fa00:	d9c00515 	stw	r7,20(sp)
 400fa04:	40044f40 	call	40044f4 <__mulsi3>
 400fa08:	900b883a 	mov	r5,r18
 400fa0c:	e009883a 	mov	r4,fp
 400fa10:	102b883a 	mov	r21,r2
 400fa14:	40044f40 	call	40044f4 <__mulsi3>
 400fa18:	900b883a 	mov	r5,r18
 400fa1c:	b809883a 	mov	r4,r23
 400fa20:	1039883a 	mov	fp,r2
 400fa24:	40044f40 	call	40044f4 <__mulsi3>
 400fa28:	d9c00517 	ldw	r7,20(sp)
 400fa2c:	b80b883a 	mov	r5,r23
 400fa30:	1025883a 	mov	r18,r2
 400fa34:	3809883a 	mov	r4,r7
 400fa38:	40044f40 	call	40044f4 <__mulsi3>
 400fa3c:	a808d43a 	srli	r4,r21,16
 400fa40:	1705883a 	add	r2,r2,fp
 400fa44:	d8c00217 	ldw	r3,8(sp)
 400fa48:	2085883a 	add	r2,r4,r2
 400fa4c:	1700022e 	bgeu	r2,fp,400fa58 <__divdf3+0x630>
 400fa50:	01000074 	movhi	r4,1
 400fa54:	9125883a 	add	r18,r18,r4
 400fa58:	1008d43a 	srli	r4,r2,16
 400fa5c:	1004943a 	slli	r2,r2,16
 400fa60:	ad7fffcc 	andi	r21,r21,65535
 400fa64:	2489883a 	add	r4,r4,r18
 400fa68:	1545883a 	add	r2,r2,r21
 400fa6c:	81003836 	bltu	r16,r4,400fb50 <__divdf3+0x728>
 400fa70:	81003626 	beq	r16,r4,400fb4c <__divdf3+0x724>
 400fa74:	a5000054 	ori	r20,r20,1
 400fa78:	1880ffc4 	addi	r2,r3,1023
 400fa7c:	00bf2e0e 	bge	zero,r2,400f738 <__alt_data_end+0xfc00f738>
 400fa80:	a10001cc 	andi	r4,r20,7
 400fa84:	20000726 	beq	r4,zero,400faa4 <__divdf3+0x67c>
 400fa88:	a10003cc 	andi	r4,r20,15
 400fa8c:	01400104 	movi	r5,4
 400fa90:	21400426 	beq	r4,r5,400faa4 <__divdf3+0x67c>
 400fa94:	a149883a 	add	r4,r20,r5
 400fa98:	2529803a 	cmpltu	r20,r4,r20
 400fa9c:	8d23883a 	add	r17,r17,r20
 400faa0:	2029883a 	mov	r20,r4
 400faa4:	8900402c 	andhi	r4,r17,256
 400faa8:	20000426 	beq	r4,zero,400fabc <__divdf3+0x694>
 400faac:	18810004 	addi	r2,r3,1024
 400fab0:	00ffc034 	movhi	r3,65280
 400fab4:	18ffffc4 	addi	r3,r3,-1
 400fab8:	88e2703a 	and	r17,r17,r3
 400fabc:	00c1ff84 	movi	r3,2046
 400fac0:	18beb416 	blt	r3,r2,400f594 <__alt_data_end+0xfc00f594>
 400fac4:	a028d0fa 	srli	r20,r20,3
 400fac8:	882a977a 	slli	r21,r17,29
 400facc:	8820927a 	slli	r16,r17,9
 400fad0:	1081ffcc 	andi	r2,r2,2047
 400fad4:	ad2ab03a 	or	r21,r21,r20
 400fad8:	8020d33a 	srli	r16,r16,12
 400fadc:	9900004c 	andi	r4,r19,1
 400fae0:	003eb006 	br	400f5a4 <__alt_data_end+0xfc00f5a4>
 400fae4:	8080022c 	andhi	r2,r16,8
 400fae8:	10001226 	beq	r2,zero,400fb34 <__divdf3+0x70c>
 400faec:	8880022c 	andhi	r2,r17,8
 400faf0:	1000101e 	bne	r2,zero,400fb34 <__divdf3+0x70c>
 400faf4:	00800434 	movhi	r2,16
 400faf8:	8c000234 	orhi	r16,r17,8
 400fafc:	10bfffc4 	addi	r2,r2,-1
 400fb00:	b809883a 	mov	r4,r23
 400fb04:	80a0703a 	and	r16,r16,r2
 400fb08:	a02b883a 	mov	r21,r20
 400fb0c:	003f0806 	br	400f730 <__alt_data_end+0xfc00f730>
 400fb10:	008000c4 	movi	r2,3
 400fb14:	3880b126 	beq	r7,r2,400fddc <__divdf3+0x9b4>
 400fb18:	00800044 	movi	r2,1
 400fb1c:	38805b1e 	bne	r7,r2,400fc8c <__divdf3+0x864>
 400fb20:	e009883a 	mov	r4,fp
 400fb24:	0005883a 	mov	r2,zero
 400fb28:	0021883a 	mov	r16,zero
 400fb2c:	002b883a 	mov	r21,zero
 400fb30:	003e9c06 	br	400f5a4 <__alt_data_end+0xfc00f5a4>
 400fb34:	00800434 	movhi	r2,16
 400fb38:	84000234 	orhi	r16,r16,8
 400fb3c:	10bfffc4 	addi	r2,r2,-1
 400fb40:	b009883a 	mov	r4,r22
 400fb44:	80a0703a 	and	r16,r16,r2
 400fb48:	003ef906 	br	400f730 <__alt_data_end+0xfc00f730>
 400fb4c:	103fca26 	beq	r2,zero,400fa78 <__alt_data_end+0xfc00fa78>
 400fb50:	b421883a 	add	r16,r22,r16
 400fb54:	a17fffc4 	addi	r5,r20,-1
 400fb58:	8580422e 	bgeu	r16,r22,400fc64 <__divdf3+0x83c>
 400fb5c:	2829883a 	mov	r20,r5
 400fb60:	813fc41e 	bne	r16,r4,400fa74 <__alt_data_end+0xfc00fa74>
 400fb64:	d9800017 	ldw	r6,0(sp)
 400fb68:	30bfc21e 	bne	r6,r2,400fa74 <__alt_data_end+0xfc00fa74>
 400fb6c:	003fc206 	br	400fa78 <__alt_data_end+0xfc00fa78>
 400fb70:	143ff604 	addi	r16,r2,-40
 400fb74:	8c20983a 	sll	r16,r17,r16
 400fb78:	002b883a 	mov	r21,zero
 400fb7c:	003eb406 	br	400f650 <__alt_data_end+0xfc00f650>
 400fb80:	d9800215 	stw	r6,8(sp)
 400fb84:	d9c00515 	stw	r7,20(sp)
 400fb88:	da000415 	stw	r8,16(sp)
 400fb8c:	40113bc0 	call	40113bc <__clzsi2>
 400fb90:	10800804 	addi	r2,r2,32
 400fb94:	da000417 	ldw	r8,16(sp)
 400fb98:	d9c00517 	ldw	r7,20(sp)
 400fb9c:	d9800217 	ldw	r6,8(sp)
 400fba0:	003ea106 	br	400f628 <__alt_data_end+0xfc00f628>
 400fba4:	147ff604 	addi	r17,r2,-40
 400fba8:	3462983a 	sll	r17,r6,r17
 400fbac:	0029883a 	mov	r20,zero
 400fbb0:	003ec906 	br	400f6d8 <__alt_data_end+0xfc00f6d8>
 400fbb4:	3009883a 	mov	r4,r6
 400fbb8:	d9400115 	stw	r5,4(sp)
 400fbbc:	d9800215 	stw	r6,8(sp)
 400fbc0:	da000415 	stw	r8,16(sp)
 400fbc4:	da400315 	stw	r9,12(sp)
 400fbc8:	40113bc0 	call	40113bc <__clzsi2>
 400fbcc:	10800804 	addi	r2,r2,32
 400fbd0:	da400317 	ldw	r9,12(sp)
 400fbd4:	da000417 	ldw	r8,16(sp)
 400fbd8:	d9800217 	ldw	r6,8(sp)
 400fbdc:	d9400117 	ldw	r5,4(sp)
 400fbe0:	003eb306 	br	400f6b0 <__alt_data_end+0xfc00f6b0>
 400fbe4:	d9800017 	ldw	r6,0(sp)
 400fbe8:	a9ab883a 	add	r21,r21,r6
 400fbec:	a98b803a 	cmpltu	r5,r21,r6
 400fbf0:	2d8b883a 	add	r5,r5,r22
 400fbf4:	2a11883a 	add	r8,r5,r8
 400fbf8:	897fffc4 	addi	r5,r17,-1
 400fbfc:	b2000c2e 	bgeu	r22,r8,400fc30 <__divdf3+0x808>
 400fc00:	41003f36 	bltu	r8,r4,400fd00 <__divdf3+0x8d8>
 400fc04:	22006c26 	beq	r4,r8,400fdb8 <__divdf3+0x990>
 400fc08:	4109c83a 	sub	r4,r8,r4
 400fc0c:	2823883a 	mov	r17,r5
 400fc10:	003f3b06 	br	400f900 <__alt_data_end+0xfc00f900>
 400fc14:	ad3ed336 	bltu	r21,r20,400f764 <__alt_data_end+0xfc00f764>
 400fc18:	a804d07a 	srli	r2,r21,1
 400fc1c:	802e97fa 	slli	r23,r16,31
 400fc20:	a82a97fa 	slli	r21,r21,31
 400fc24:	8020d07a 	srli	r16,r16,1
 400fc28:	b8aeb03a 	or	r23,r23,r2
 400fc2c:	003ed006 	br	400f770 <__alt_data_end+0xfc00f770>
 400fc30:	b23ff51e 	bne	r22,r8,400fc08 <__alt_data_end+0xfc00fc08>
 400fc34:	d9800017 	ldw	r6,0(sp)
 400fc38:	a9bff12e 	bgeu	r21,r6,400fc00 <__alt_data_end+0xfc00fc00>
 400fc3c:	b109c83a 	sub	r4,r22,r4
 400fc40:	2823883a 	mov	r17,r5
 400fc44:	003f2e06 	br	400f900 <__alt_data_end+0xfc00f900>
 400fc48:	2021883a 	mov	r16,r4
 400fc4c:	003eff06 	br	400f84c <__alt_data_end+0xfc00f84c>
 400fc50:	2023883a 	mov	r17,r4
 400fc54:	003ee406 	br	400f7e8 <__alt_data_end+0xfc00f7e8>
 400fc58:	a8bfe236 	bltu	r21,r2,400fbe4 <__alt_data_end+0xfc00fbe4>
 400fc5c:	0009883a 	mov	r4,zero
 400fc60:	003f2706 	br	400f900 <__alt_data_end+0xfc00f900>
 400fc64:	81002d36 	bltu	r16,r4,400fd1c <__divdf3+0x8f4>
 400fc68:	24005626 	beq	r4,r16,400fdc4 <__divdf3+0x99c>
 400fc6c:	2829883a 	mov	r20,r5
 400fc70:	003f8006 	br	400fa74 <__alt_data_end+0xfc00fa74>
 400fc74:	053fffc4 	movi	r20,-1
 400fc78:	003f7f06 	br	400fa78 <__alt_data_end+0xfc00fa78>
 400fc7c:	200f883a 	mov	r7,r4
 400fc80:	003f3c06 	br	400f974 <__alt_data_end+0xfc00f974>
 400fc84:	1011883a 	mov	r8,r2
 400fc88:	003f5506 	br	400f9e0 <__alt_data_end+0xfc00f9e0>
 400fc8c:	e027883a 	mov	r19,fp
 400fc90:	003f7906 	br	400fa78 <__alt_data_end+0xfc00fa78>
 400fc94:	010007c4 	movi	r4,31
 400fc98:	20c02816 	blt	r4,r3,400fd3c <__divdf3+0x914>
 400fc9c:	00800804 	movi	r2,32
 400fca0:	10c5c83a 	sub	r2,r2,r3
 400fca4:	888a983a 	sll	r5,r17,r2
 400fca8:	a0c8d83a 	srl	r4,r20,r3
 400fcac:	a084983a 	sll	r2,r20,r2
 400fcb0:	88e2d83a 	srl	r17,r17,r3
 400fcb4:	2906b03a 	or	r3,r5,r4
 400fcb8:	1004c03a 	cmpne	r2,r2,zero
 400fcbc:	1886b03a 	or	r3,r3,r2
 400fcc0:	188001cc 	andi	r2,r3,7
 400fcc4:	10000726 	beq	r2,zero,400fce4 <__divdf3+0x8bc>
 400fcc8:	188003cc 	andi	r2,r3,15
 400fccc:	01000104 	movi	r4,4
 400fcd0:	11000426 	beq	r2,r4,400fce4 <__divdf3+0x8bc>
 400fcd4:	1805883a 	mov	r2,r3
 400fcd8:	10c00104 	addi	r3,r2,4
 400fcdc:	1885803a 	cmpltu	r2,r3,r2
 400fce0:	88a3883a 	add	r17,r17,r2
 400fce4:	8880202c 	andhi	r2,r17,128
 400fce8:	10002926 	beq	r2,zero,400fd90 <__divdf3+0x968>
 400fcec:	9900004c 	andi	r4,r19,1
 400fcf0:	00800044 	movi	r2,1
 400fcf4:	0021883a 	mov	r16,zero
 400fcf8:	002b883a 	mov	r21,zero
 400fcfc:	003e2906 	br	400f5a4 <__alt_data_end+0xfc00f5a4>
 400fd00:	d9800017 	ldw	r6,0(sp)
 400fd04:	8c7fff84 	addi	r17,r17,-2
 400fd08:	a9ab883a 	add	r21,r21,r6
 400fd0c:	a98b803a 	cmpltu	r5,r21,r6
 400fd10:	2d8b883a 	add	r5,r5,r22
 400fd14:	2a11883a 	add	r8,r5,r8
 400fd18:	003ef806 	br	400f8fc <__alt_data_end+0xfc00f8fc>
 400fd1c:	d9800017 	ldw	r6,0(sp)
 400fd20:	318f883a 	add	r7,r6,r6
 400fd24:	398b803a 	cmpltu	r5,r7,r6
 400fd28:	2d8d883a 	add	r6,r5,r22
 400fd2c:	81a1883a 	add	r16,r16,r6
 400fd30:	a17fff84 	addi	r5,r20,-2
 400fd34:	d9c00015 	stw	r7,0(sp)
 400fd38:	003f8806 	br	400fb5c <__alt_data_end+0xfc00fb5c>
 400fd3c:	013ff844 	movi	r4,-31
 400fd40:	2085c83a 	sub	r2,r4,r2
 400fd44:	8888d83a 	srl	r4,r17,r2
 400fd48:	00800804 	movi	r2,32
 400fd4c:	18802126 	beq	r3,r2,400fdd4 <__divdf3+0x9ac>
 400fd50:	04001004 	movi	r16,64
 400fd54:	80c7c83a 	sub	r3,r16,r3
 400fd58:	88e0983a 	sll	r16,r17,r3
 400fd5c:	8504b03a 	or	r2,r16,r20
 400fd60:	1004c03a 	cmpne	r2,r2,zero
 400fd64:	2084b03a 	or	r2,r4,r2
 400fd68:	144001cc 	andi	r17,r2,7
 400fd6c:	88000d1e 	bne	r17,zero,400fda4 <__divdf3+0x97c>
 400fd70:	0021883a 	mov	r16,zero
 400fd74:	102ad0fa 	srli	r21,r2,3
 400fd78:	9900004c 	andi	r4,r19,1
 400fd7c:	0005883a 	mov	r2,zero
 400fd80:	ac6ab03a 	or	r21,r21,r17
 400fd84:	003e0706 	br	400f5a4 <__alt_data_end+0xfc00f5a4>
 400fd88:	1007883a 	mov	r3,r2
 400fd8c:	0023883a 	mov	r17,zero
 400fd90:	8820927a 	slli	r16,r17,9
 400fd94:	1805883a 	mov	r2,r3
 400fd98:	8822977a 	slli	r17,r17,29
 400fd9c:	8020d33a 	srli	r16,r16,12
 400fda0:	003ff406 	br	400fd74 <__alt_data_end+0xfc00fd74>
 400fda4:	10c003cc 	andi	r3,r2,15
 400fda8:	01000104 	movi	r4,4
 400fdac:	193ff626 	beq	r3,r4,400fd88 <__alt_data_end+0xfc00fd88>
 400fdb0:	0023883a 	mov	r17,zero
 400fdb4:	003fc806 	br	400fcd8 <__alt_data_end+0xfc00fcd8>
 400fdb8:	a8bfd136 	bltu	r21,r2,400fd00 <__alt_data_end+0xfc00fd00>
 400fdbc:	2823883a 	mov	r17,r5
 400fdc0:	003fa606 	br	400fc5c <__alt_data_end+0xfc00fc5c>
 400fdc4:	d9800017 	ldw	r6,0(sp)
 400fdc8:	30bfd436 	bltu	r6,r2,400fd1c <__alt_data_end+0xfc00fd1c>
 400fdcc:	2829883a 	mov	r20,r5
 400fdd0:	003f6406 	br	400fb64 <__alt_data_end+0xfc00fb64>
 400fdd4:	0021883a 	mov	r16,zero
 400fdd8:	003fe006 	br	400fd5c <__alt_data_end+0xfc00fd5c>
 400fddc:	00800434 	movhi	r2,16
 400fde0:	8c000234 	orhi	r16,r17,8
 400fde4:	10bfffc4 	addi	r2,r2,-1
 400fde8:	e009883a 	mov	r4,fp
 400fdec:	80a0703a 	and	r16,r16,r2
 400fdf0:	a02b883a 	mov	r21,r20
 400fdf4:	003e4e06 	br	400f730 <__alt_data_end+0xfc00f730>

0400fdf8 <__eqdf2>:
 400fdf8:	2804d53a 	srli	r2,r5,20
 400fdfc:	3806d53a 	srli	r3,r7,20
 400fe00:	02000434 	movhi	r8,16
 400fe04:	423fffc4 	addi	r8,r8,-1
 400fe08:	1081ffcc 	andi	r2,r2,2047
 400fe0c:	0281ffc4 	movi	r10,2047
 400fe10:	2a12703a 	and	r9,r5,r8
 400fe14:	18c1ffcc 	andi	r3,r3,2047
 400fe18:	3a10703a 	and	r8,r7,r8
 400fe1c:	280ad7fa 	srli	r5,r5,31
 400fe20:	380ed7fa 	srli	r7,r7,31
 400fe24:	12801026 	beq	r2,r10,400fe68 <__eqdf2+0x70>
 400fe28:	0281ffc4 	movi	r10,2047
 400fe2c:	1a800a26 	beq	r3,r10,400fe58 <__eqdf2+0x60>
 400fe30:	10c00226 	beq	r2,r3,400fe3c <__eqdf2+0x44>
 400fe34:	00800044 	movi	r2,1
 400fe38:	f800283a 	ret
 400fe3c:	4a3ffd1e 	bne	r9,r8,400fe34 <__alt_data_end+0xfc00fe34>
 400fe40:	21bffc1e 	bne	r4,r6,400fe34 <__alt_data_end+0xfc00fe34>
 400fe44:	29c00c26 	beq	r5,r7,400fe78 <__eqdf2+0x80>
 400fe48:	103ffa1e 	bne	r2,zero,400fe34 <__alt_data_end+0xfc00fe34>
 400fe4c:	2244b03a 	or	r2,r4,r9
 400fe50:	1004c03a 	cmpne	r2,r2,zero
 400fe54:	f800283a 	ret
 400fe58:	3214b03a 	or	r10,r6,r8
 400fe5c:	503ff426 	beq	r10,zero,400fe30 <__alt_data_end+0xfc00fe30>
 400fe60:	00800044 	movi	r2,1
 400fe64:	f800283a 	ret
 400fe68:	2254b03a 	or	r10,r4,r9
 400fe6c:	503fee26 	beq	r10,zero,400fe28 <__alt_data_end+0xfc00fe28>
 400fe70:	00800044 	movi	r2,1
 400fe74:	f800283a 	ret
 400fe78:	0005883a 	mov	r2,zero
 400fe7c:	f800283a 	ret

0400fe80 <__gedf2>:
 400fe80:	2804d53a 	srli	r2,r5,20
 400fe84:	3806d53a 	srli	r3,r7,20
 400fe88:	02000434 	movhi	r8,16
 400fe8c:	423fffc4 	addi	r8,r8,-1
 400fe90:	1081ffcc 	andi	r2,r2,2047
 400fe94:	0241ffc4 	movi	r9,2047
 400fe98:	2a14703a 	and	r10,r5,r8
 400fe9c:	18c1ffcc 	andi	r3,r3,2047
 400fea0:	3a10703a 	and	r8,r7,r8
 400fea4:	280ad7fa 	srli	r5,r5,31
 400fea8:	380ed7fa 	srli	r7,r7,31
 400feac:	12401d26 	beq	r2,r9,400ff24 <__gedf2+0xa4>
 400feb0:	0241ffc4 	movi	r9,2047
 400feb4:	1a401226 	beq	r3,r9,400ff00 <__gedf2+0x80>
 400feb8:	1000081e 	bne	r2,zero,400fedc <__gedf2+0x5c>
 400febc:	2296b03a 	or	r11,r4,r10
 400fec0:	5813003a 	cmpeq	r9,r11,zero
 400fec4:	1800091e 	bne	r3,zero,400feec <__gedf2+0x6c>
 400fec8:	3218b03a 	or	r12,r6,r8
 400fecc:	6000071e 	bne	r12,zero,400feec <__gedf2+0x6c>
 400fed0:	0005883a 	mov	r2,zero
 400fed4:	5800101e 	bne	r11,zero,400ff18 <__gedf2+0x98>
 400fed8:	f800283a 	ret
 400fedc:	18000c1e 	bne	r3,zero,400ff10 <__gedf2+0x90>
 400fee0:	3212b03a 	or	r9,r6,r8
 400fee4:	48000c26 	beq	r9,zero,400ff18 <__gedf2+0x98>
 400fee8:	0013883a 	mov	r9,zero
 400feec:	39c03fcc 	andi	r7,r7,255
 400fef0:	48000826 	beq	r9,zero,400ff14 <__gedf2+0x94>
 400fef4:	38000926 	beq	r7,zero,400ff1c <__gedf2+0x9c>
 400fef8:	00800044 	movi	r2,1
 400fefc:	f800283a 	ret
 400ff00:	3212b03a 	or	r9,r6,r8
 400ff04:	483fec26 	beq	r9,zero,400feb8 <__alt_data_end+0xfc00feb8>
 400ff08:	00bfff84 	movi	r2,-2
 400ff0c:	f800283a 	ret
 400ff10:	39c03fcc 	andi	r7,r7,255
 400ff14:	29c00626 	beq	r5,r7,400ff30 <__gedf2+0xb0>
 400ff18:	283ff726 	beq	r5,zero,400fef8 <__alt_data_end+0xfc00fef8>
 400ff1c:	00bfffc4 	movi	r2,-1
 400ff20:	f800283a 	ret
 400ff24:	2292b03a 	or	r9,r4,r10
 400ff28:	483fe126 	beq	r9,zero,400feb0 <__alt_data_end+0xfc00feb0>
 400ff2c:	003ff606 	br	400ff08 <__alt_data_end+0xfc00ff08>
 400ff30:	18bff916 	blt	r3,r2,400ff18 <__alt_data_end+0xfc00ff18>
 400ff34:	10c00316 	blt	r2,r3,400ff44 <__gedf2+0xc4>
 400ff38:	42bff736 	bltu	r8,r10,400ff18 <__alt_data_end+0xfc00ff18>
 400ff3c:	52000326 	beq	r10,r8,400ff4c <__gedf2+0xcc>
 400ff40:	5200042e 	bgeu	r10,r8,400ff54 <__gedf2+0xd4>
 400ff44:	283fec1e 	bne	r5,zero,400fef8 <__alt_data_end+0xfc00fef8>
 400ff48:	003ff406 	br	400ff1c <__alt_data_end+0xfc00ff1c>
 400ff4c:	313ff236 	bltu	r6,r4,400ff18 <__alt_data_end+0xfc00ff18>
 400ff50:	21bffc36 	bltu	r4,r6,400ff44 <__alt_data_end+0xfc00ff44>
 400ff54:	0005883a 	mov	r2,zero
 400ff58:	f800283a 	ret

0400ff5c <__ledf2>:
 400ff5c:	2804d53a 	srli	r2,r5,20
 400ff60:	3810d53a 	srli	r8,r7,20
 400ff64:	00c00434 	movhi	r3,16
 400ff68:	18ffffc4 	addi	r3,r3,-1
 400ff6c:	1081ffcc 	andi	r2,r2,2047
 400ff70:	0241ffc4 	movi	r9,2047
 400ff74:	28d4703a 	and	r10,r5,r3
 400ff78:	4201ffcc 	andi	r8,r8,2047
 400ff7c:	38c6703a 	and	r3,r7,r3
 400ff80:	280ad7fa 	srli	r5,r5,31
 400ff84:	380ed7fa 	srli	r7,r7,31
 400ff88:	12401f26 	beq	r2,r9,4010008 <__ledf2+0xac>
 400ff8c:	0241ffc4 	movi	r9,2047
 400ff90:	42401426 	beq	r8,r9,400ffe4 <__ledf2+0x88>
 400ff94:	1000091e 	bne	r2,zero,400ffbc <__ledf2+0x60>
 400ff98:	2296b03a 	or	r11,r4,r10
 400ff9c:	5813003a 	cmpeq	r9,r11,zero
 400ffa0:	29403fcc 	andi	r5,r5,255
 400ffa4:	40000a1e 	bne	r8,zero,400ffd0 <__ledf2+0x74>
 400ffa8:	30d8b03a 	or	r12,r6,r3
 400ffac:	6000081e 	bne	r12,zero,400ffd0 <__ledf2+0x74>
 400ffb0:	0005883a 	mov	r2,zero
 400ffb4:	5800111e 	bne	r11,zero,400fffc <__ledf2+0xa0>
 400ffb8:	f800283a 	ret
 400ffbc:	29403fcc 	andi	r5,r5,255
 400ffc0:	40000c1e 	bne	r8,zero,400fff4 <__ledf2+0x98>
 400ffc4:	30d2b03a 	or	r9,r6,r3
 400ffc8:	48000c26 	beq	r9,zero,400fffc <__ledf2+0xa0>
 400ffcc:	0013883a 	mov	r9,zero
 400ffd0:	39c03fcc 	andi	r7,r7,255
 400ffd4:	48000826 	beq	r9,zero,400fff8 <__ledf2+0x9c>
 400ffd8:	38001126 	beq	r7,zero,4010020 <__ledf2+0xc4>
 400ffdc:	00800044 	movi	r2,1
 400ffe0:	f800283a 	ret
 400ffe4:	30d2b03a 	or	r9,r6,r3
 400ffe8:	483fea26 	beq	r9,zero,400ff94 <__alt_data_end+0xfc00ff94>
 400ffec:	00800084 	movi	r2,2
 400fff0:	f800283a 	ret
 400fff4:	39c03fcc 	andi	r7,r7,255
 400fff8:	39400726 	beq	r7,r5,4010018 <__ledf2+0xbc>
 400fffc:	2800081e 	bne	r5,zero,4010020 <__ledf2+0xc4>
 4010000:	00800044 	movi	r2,1
 4010004:	f800283a 	ret
 4010008:	2292b03a 	or	r9,r4,r10
 401000c:	483fdf26 	beq	r9,zero,400ff8c <__alt_data_end+0xfc00ff8c>
 4010010:	00800084 	movi	r2,2
 4010014:	f800283a 	ret
 4010018:	4080030e 	bge	r8,r2,4010028 <__ledf2+0xcc>
 401001c:	383fef26 	beq	r7,zero,400ffdc <__alt_data_end+0xfc00ffdc>
 4010020:	00bfffc4 	movi	r2,-1
 4010024:	f800283a 	ret
 4010028:	123feb16 	blt	r2,r8,400ffd8 <__alt_data_end+0xfc00ffd8>
 401002c:	1abff336 	bltu	r3,r10,400fffc <__alt_data_end+0xfc00fffc>
 4010030:	50c00326 	beq	r10,r3,4010040 <__ledf2+0xe4>
 4010034:	50c0042e 	bgeu	r10,r3,4010048 <__ledf2+0xec>
 4010038:	283fe81e 	bne	r5,zero,400ffdc <__alt_data_end+0xfc00ffdc>
 401003c:	003ff806 	br	4010020 <__alt_data_end+0xfc010020>
 4010040:	313fee36 	bltu	r6,r4,400fffc <__alt_data_end+0xfc00fffc>
 4010044:	21bffc36 	bltu	r4,r6,4010038 <__alt_data_end+0xfc010038>
 4010048:	0005883a 	mov	r2,zero
 401004c:	f800283a 	ret

04010050 <__muldf3>:
 4010050:	deffee04 	addi	sp,sp,-72
 4010054:	dd000c15 	stw	r20,48(sp)
 4010058:	2828d53a 	srli	r20,r5,20
 401005c:	ddc00f15 	stw	r23,60(sp)
 4010060:	282ed7fa 	srli	r23,r5,31
 4010064:	dc000815 	stw	r16,32(sp)
 4010068:	04000434 	movhi	r16,16
 401006c:	dcc00b15 	stw	r19,44(sp)
 4010070:	843fffc4 	addi	r16,r16,-1
 4010074:	dfc01115 	stw	ra,68(sp)
 4010078:	df001015 	stw	fp,64(sp)
 401007c:	dd800e15 	stw	r22,56(sp)
 4010080:	dd400d15 	stw	r21,52(sp)
 4010084:	dc800a15 	stw	r18,40(sp)
 4010088:	dc400915 	stw	r17,36(sp)
 401008c:	a501ffcc 	andi	r20,r20,2047
 4010090:	2c20703a 	and	r16,r5,r16
 4010094:	b827883a 	mov	r19,r23
 4010098:	ba403fcc 	andi	r9,r23,255
 401009c:	a0006026 	beq	r20,zero,4010220 <__muldf3+0x1d0>
 40100a0:	0081ffc4 	movi	r2,2047
 40100a4:	202d883a 	mov	r22,r4
 40100a8:	a0803626 	beq	r20,r2,4010184 <__muldf3+0x134>
 40100ac:	84000434 	orhi	r16,r16,16
 40100b0:	200ad77a 	srli	r5,r4,29
 40100b4:	800490fa 	slli	r2,r16,3
 40100b8:	202c90fa 	slli	r22,r4,3
 40100bc:	a53f0044 	addi	r20,r20,-1023
 40100c0:	28a0b03a 	or	r16,r5,r2
 40100c4:	002b883a 	mov	r21,zero
 40100c8:	000b883a 	mov	r5,zero
 40100cc:	3804d53a 	srli	r2,r7,20
 40100d0:	3838d7fa 	srli	fp,r7,31
 40100d4:	04400434 	movhi	r17,16
 40100d8:	8c7fffc4 	addi	r17,r17,-1
 40100dc:	1081ffcc 	andi	r2,r2,2047
 40100e0:	3025883a 	mov	r18,r6
 40100e4:	3c62703a 	and	r17,r7,r17
 40100e8:	e2803fcc 	andi	r10,fp,255
 40100ec:	10006d26 	beq	r2,zero,40102a4 <__muldf3+0x254>
 40100f0:	00c1ffc4 	movi	r3,2047
 40100f4:	10c06526 	beq	r2,r3,401028c <__muldf3+0x23c>
 40100f8:	8c400434 	orhi	r17,r17,16
 40100fc:	300ed77a 	srli	r7,r6,29
 4010100:	880690fa 	slli	r3,r17,3
 4010104:	302490fa 	slli	r18,r6,3
 4010108:	10bf0044 	addi	r2,r2,-1023
 401010c:	38e2b03a 	or	r17,r7,r3
 4010110:	000f883a 	mov	r7,zero
 4010114:	a087883a 	add	r3,r20,r2
 4010118:	010003c4 	movi	r4,15
 401011c:	3d44b03a 	or	r2,r7,r21
 4010120:	e5ccf03a 	xor	r6,fp,r23
 4010124:	1a000044 	addi	r8,r3,1
 4010128:	20809b36 	bltu	r4,r2,4010398 <__muldf3+0x348>
 401012c:	100490ba 	slli	r2,r2,2
 4010130:	01010074 	movhi	r4,1025
 4010134:	21005104 	addi	r4,r4,324
 4010138:	1105883a 	add	r2,r2,r4
 401013c:	10800017 	ldw	r2,0(r2)
 4010140:	1000683a 	jmp	r2
 4010144:	04010398 	cmpnei	r16,zero,1038
 4010148:	040101a4 	muli	r16,zero,1030
 401014c:	040101a4 	muli	r16,zero,1030
 4010150:	040101a0 	cmpeqi	r16,zero,1030
 4010154:	04010374 	movhi	r16,1037
 4010158:	04010374 	movhi	r16,1037
 401015c:	0401035c 	xori	r16,zero,1037
 4010160:	040101a0 	cmpeqi	r16,zero,1030
 4010164:	04010374 	movhi	r16,1037
 4010168:	0401035c 	xori	r16,zero,1037
 401016c:	04010374 	movhi	r16,1037
 4010170:	040101a0 	cmpeqi	r16,zero,1030
 4010174:	04010384 	movi	r16,1038
 4010178:	04010384 	movi	r16,1038
 401017c:	04010384 	movi	r16,1038
 4010180:	040106e4 	muli	r16,zero,1051
 4010184:	2404b03a 	or	r2,r4,r16
 4010188:	1000711e 	bne	r2,zero,4010350 <__muldf3+0x300>
 401018c:	05400204 	movi	r21,8
 4010190:	0021883a 	mov	r16,zero
 4010194:	002d883a 	mov	r22,zero
 4010198:	01400084 	movi	r5,2
 401019c:	003fcb06 	br	40100cc <__alt_data_end+0xfc0100cc>
 40101a0:	500d883a 	mov	r6,r10
 40101a4:	00800084 	movi	r2,2
 40101a8:	38805926 	beq	r7,r2,4010310 <__muldf3+0x2c0>
 40101ac:	008000c4 	movi	r2,3
 40101b0:	3881bb26 	beq	r7,r2,40108a0 <__muldf3+0x850>
 40101b4:	00800044 	movi	r2,1
 40101b8:	3881961e 	bne	r7,r2,4010814 <__muldf3+0x7c4>
 40101bc:	3027883a 	mov	r19,r6
 40101c0:	0005883a 	mov	r2,zero
 40101c4:	0021883a 	mov	r16,zero
 40101c8:	002d883a 	mov	r22,zero
 40101cc:	1004953a 	slli	r2,r2,20
 40101d0:	98c03fcc 	andi	r3,r19,255
 40101d4:	04400434 	movhi	r17,16
 40101d8:	8c7fffc4 	addi	r17,r17,-1
 40101dc:	180697fa 	slli	r3,r3,31
 40101e0:	8460703a 	and	r16,r16,r17
 40101e4:	80a0b03a 	or	r16,r16,r2
 40101e8:	80c6b03a 	or	r3,r16,r3
 40101ec:	b005883a 	mov	r2,r22
 40101f0:	dfc01117 	ldw	ra,68(sp)
 40101f4:	df001017 	ldw	fp,64(sp)
 40101f8:	ddc00f17 	ldw	r23,60(sp)
 40101fc:	dd800e17 	ldw	r22,56(sp)
 4010200:	dd400d17 	ldw	r21,52(sp)
 4010204:	dd000c17 	ldw	r20,48(sp)
 4010208:	dcc00b17 	ldw	r19,44(sp)
 401020c:	dc800a17 	ldw	r18,40(sp)
 4010210:	dc400917 	ldw	r17,36(sp)
 4010214:	dc000817 	ldw	r16,32(sp)
 4010218:	dec01204 	addi	sp,sp,72
 401021c:	f800283a 	ret
 4010220:	2404b03a 	or	r2,r4,r16
 4010224:	202b883a 	mov	r21,r4
 4010228:	10004426 	beq	r2,zero,401033c <__muldf3+0x2ec>
 401022c:	80015126 	beq	r16,zero,4010774 <__muldf3+0x724>
 4010230:	8009883a 	mov	r4,r16
 4010234:	d9800715 	stw	r6,28(sp)
 4010238:	d9c00215 	stw	r7,8(sp)
 401023c:	da400415 	stw	r9,16(sp)
 4010240:	40113bc0 	call	40113bc <__clzsi2>
 4010244:	d9800717 	ldw	r6,28(sp)
 4010248:	d9c00217 	ldw	r7,8(sp)
 401024c:	da400417 	ldw	r9,16(sp)
 4010250:	113ffd44 	addi	r4,r2,-11
 4010254:	00c00704 	movi	r3,28
 4010258:	19014216 	blt	r3,r4,4010764 <__muldf3+0x714>
 401025c:	00c00744 	movi	r3,29
 4010260:	15bffe04 	addi	r22,r2,-8
 4010264:	1907c83a 	sub	r3,r3,r4
 4010268:	85a0983a 	sll	r16,r16,r22
 401026c:	a8c6d83a 	srl	r3,r21,r3
 4010270:	adac983a 	sll	r22,r21,r22
 4010274:	1c20b03a 	or	r16,r3,r16
 4010278:	1080fcc4 	addi	r2,r2,1011
 401027c:	00a9c83a 	sub	r20,zero,r2
 4010280:	002b883a 	mov	r21,zero
 4010284:	000b883a 	mov	r5,zero
 4010288:	003f9006 	br	40100cc <__alt_data_end+0xfc0100cc>
 401028c:	3446b03a 	or	r3,r6,r17
 4010290:	1800281e 	bne	r3,zero,4010334 <__muldf3+0x2e4>
 4010294:	0023883a 	mov	r17,zero
 4010298:	0025883a 	mov	r18,zero
 401029c:	01c00084 	movi	r7,2
 40102a0:	003f9c06 	br	4010114 <__alt_data_end+0xfc010114>
 40102a4:	3446b03a 	or	r3,r6,r17
 40102a8:	18001e26 	beq	r3,zero,4010324 <__muldf3+0x2d4>
 40102ac:	88012126 	beq	r17,zero,4010734 <__muldf3+0x6e4>
 40102b0:	8809883a 	mov	r4,r17
 40102b4:	d9400215 	stw	r5,8(sp)
 40102b8:	d9800715 	stw	r6,28(sp)
 40102bc:	da400415 	stw	r9,16(sp)
 40102c0:	da800315 	stw	r10,12(sp)
 40102c4:	40113bc0 	call	40113bc <__clzsi2>
 40102c8:	d9400217 	ldw	r5,8(sp)
 40102cc:	d9800717 	ldw	r6,28(sp)
 40102d0:	da400417 	ldw	r9,16(sp)
 40102d4:	da800317 	ldw	r10,12(sp)
 40102d8:	113ffd44 	addi	r4,r2,-11
 40102dc:	00c00704 	movi	r3,28
 40102e0:	19011016 	blt	r3,r4,4010724 <__muldf3+0x6d4>
 40102e4:	00c00744 	movi	r3,29
 40102e8:	14bffe04 	addi	r18,r2,-8
 40102ec:	1907c83a 	sub	r3,r3,r4
 40102f0:	8ca2983a 	sll	r17,r17,r18
 40102f4:	30c6d83a 	srl	r3,r6,r3
 40102f8:	34a4983a 	sll	r18,r6,r18
 40102fc:	1c62b03a 	or	r17,r3,r17
 4010300:	1080fcc4 	addi	r2,r2,1011
 4010304:	0085c83a 	sub	r2,zero,r2
 4010308:	000f883a 	mov	r7,zero
 401030c:	003f8106 	br	4010114 <__alt_data_end+0xfc010114>
 4010310:	3027883a 	mov	r19,r6
 4010314:	0081ffc4 	movi	r2,2047
 4010318:	0021883a 	mov	r16,zero
 401031c:	002d883a 	mov	r22,zero
 4010320:	003faa06 	br	40101cc <__alt_data_end+0xfc0101cc>
 4010324:	0023883a 	mov	r17,zero
 4010328:	0025883a 	mov	r18,zero
 401032c:	01c00044 	movi	r7,1
 4010330:	003f7806 	br	4010114 <__alt_data_end+0xfc010114>
 4010334:	01c000c4 	movi	r7,3
 4010338:	003f7606 	br	4010114 <__alt_data_end+0xfc010114>
 401033c:	05400104 	movi	r21,4
 4010340:	0021883a 	mov	r16,zero
 4010344:	002d883a 	mov	r22,zero
 4010348:	01400044 	movi	r5,1
 401034c:	003f5f06 	br	40100cc <__alt_data_end+0xfc0100cc>
 4010350:	05400304 	movi	r21,12
 4010354:	014000c4 	movi	r5,3
 4010358:	003f5c06 	br	40100cc <__alt_data_end+0xfc0100cc>
 401035c:	04000434 	movhi	r16,16
 4010360:	0027883a 	mov	r19,zero
 4010364:	843fffc4 	addi	r16,r16,-1
 4010368:	05bfffc4 	movi	r22,-1
 401036c:	0081ffc4 	movi	r2,2047
 4010370:	003f9606 	br	40101cc <__alt_data_end+0xfc0101cc>
 4010374:	8023883a 	mov	r17,r16
 4010378:	b025883a 	mov	r18,r22
 401037c:	280f883a 	mov	r7,r5
 4010380:	003f8806 	br	40101a4 <__alt_data_end+0xfc0101a4>
 4010384:	8023883a 	mov	r17,r16
 4010388:	b025883a 	mov	r18,r22
 401038c:	480d883a 	mov	r6,r9
 4010390:	280f883a 	mov	r7,r5
 4010394:	003f8306 	br	40101a4 <__alt_data_end+0xfc0101a4>
 4010398:	b026d43a 	srli	r19,r22,16
 401039c:	902ed43a 	srli	r23,r18,16
 40103a0:	b5bfffcc 	andi	r22,r22,65535
 40103a4:	94bfffcc 	andi	r18,r18,65535
 40103a8:	b00b883a 	mov	r5,r22
 40103ac:	9009883a 	mov	r4,r18
 40103b0:	d8c00515 	stw	r3,20(sp)
 40103b4:	d9800715 	stw	r6,28(sp)
 40103b8:	da000615 	stw	r8,24(sp)
 40103bc:	40044f40 	call	40044f4 <__mulsi3>
 40103c0:	980b883a 	mov	r5,r19
 40103c4:	9009883a 	mov	r4,r18
 40103c8:	1029883a 	mov	r20,r2
 40103cc:	40044f40 	call	40044f4 <__mulsi3>
 40103d0:	b80b883a 	mov	r5,r23
 40103d4:	9809883a 	mov	r4,r19
 40103d8:	102b883a 	mov	r21,r2
 40103dc:	40044f40 	call	40044f4 <__mulsi3>
 40103e0:	b809883a 	mov	r4,r23
 40103e4:	b00b883a 	mov	r5,r22
 40103e8:	1039883a 	mov	fp,r2
 40103ec:	40044f40 	call	40044f4 <__mulsi3>
 40103f0:	a008d43a 	srli	r4,r20,16
 40103f4:	1545883a 	add	r2,r2,r21
 40103f8:	d8c00517 	ldw	r3,20(sp)
 40103fc:	2085883a 	add	r2,r4,r2
 4010400:	d9800717 	ldw	r6,28(sp)
 4010404:	da000617 	ldw	r8,24(sp)
 4010408:	1540022e 	bgeu	r2,r21,4010414 <__muldf3+0x3c4>
 401040c:	01000074 	movhi	r4,1
 4010410:	e139883a 	add	fp,fp,r4
 4010414:	100e943a 	slli	r7,r2,16
 4010418:	1004d43a 	srli	r2,r2,16
 401041c:	882ad43a 	srli	r21,r17,16
 4010420:	a53fffcc 	andi	r20,r20,65535
 4010424:	8c7fffcc 	andi	r17,r17,65535
 4010428:	3d29883a 	add	r20,r7,r20
 401042c:	b00b883a 	mov	r5,r22
 4010430:	8809883a 	mov	r4,r17
 4010434:	d8c00515 	stw	r3,20(sp)
 4010438:	d9800715 	stw	r6,28(sp)
 401043c:	da000615 	stw	r8,24(sp)
 4010440:	dd000115 	stw	r20,4(sp)
 4010444:	d8800015 	stw	r2,0(sp)
 4010448:	40044f40 	call	40044f4 <__mulsi3>
 401044c:	980b883a 	mov	r5,r19
 4010450:	8809883a 	mov	r4,r17
 4010454:	d8800215 	stw	r2,8(sp)
 4010458:	40044f40 	call	40044f4 <__mulsi3>
 401045c:	9809883a 	mov	r4,r19
 4010460:	a80b883a 	mov	r5,r21
 4010464:	1029883a 	mov	r20,r2
 4010468:	40044f40 	call	40044f4 <__mulsi3>
 401046c:	b00b883a 	mov	r5,r22
 4010470:	a809883a 	mov	r4,r21
 4010474:	d8800415 	stw	r2,16(sp)
 4010478:	40044f40 	call	40044f4 <__mulsi3>
 401047c:	d9c00217 	ldw	r7,8(sp)
 4010480:	1505883a 	add	r2,r2,r20
 4010484:	d8c00517 	ldw	r3,20(sp)
 4010488:	3826d43a 	srli	r19,r7,16
 401048c:	d9800717 	ldw	r6,28(sp)
 4010490:	da000617 	ldw	r8,24(sp)
 4010494:	9885883a 	add	r2,r19,r2
 4010498:	da400417 	ldw	r9,16(sp)
 401049c:	1500022e 	bgeu	r2,r20,40104a8 <__muldf3+0x458>
 40104a0:	01000074 	movhi	r4,1
 40104a4:	4913883a 	add	r9,r9,r4
 40104a8:	1028d43a 	srli	r20,r2,16
 40104ac:	1004943a 	slli	r2,r2,16
 40104b0:	802cd43a 	srli	r22,r16,16
 40104b4:	843fffcc 	andi	r16,r16,65535
 40104b8:	3cffffcc 	andi	r19,r7,65535
 40104bc:	9009883a 	mov	r4,r18
 40104c0:	800b883a 	mov	r5,r16
 40104c4:	a269883a 	add	r20,r20,r9
 40104c8:	d8c00515 	stw	r3,20(sp)
 40104cc:	d9800715 	stw	r6,28(sp)
 40104d0:	da000615 	stw	r8,24(sp)
 40104d4:	14e7883a 	add	r19,r2,r19
 40104d8:	40044f40 	call	40044f4 <__mulsi3>
 40104dc:	9009883a 	mov	r4,r18
 40104e0:	b00b883a 	mov	r5,r22
 40104e4:	d8800315 	stw	r2,12(sp)
 40104e8:	40044f40 	call	40044f4 <__mulsi3>
 40104ec:	b809883a 	mov	r4,r23
 40104f0:	b00b883a 	mov	r5,r22
 40104f4:	d8800215 	stw	r2,8(sp)
 40104f8:	40044f40 	call	40044f4 <__mulsi3>
 40104fc:	b80b883a 	mov	r5,r23
 4010500:	8009883a 	mov	r4,r16
 4010504:	d8800415 	stw	r2,16(sp)
 4010508:	40044f40 	call	40044f4 <__mulsi3>
 401050c:	da800317 	ldw	r10,12(sp)
 4010510:	d9c00217 	ldw	r7,8(sp)
 4010514:	d9000017 	ldw	r4,0(sp)
 4010518:	502ed43a 	srli	r23,r10,16
 401051c:	11c5883a 	add	r2,r2,r7
 4010520:	24e5883a 	add	r18,r4,r19
 4010524:	b885883a 	add	r2,r23,r2
 4010528:	d8c00517 	ldw	r3,20(sp)
 401052c:	d9800717 	ldw	r6,28(sp)
 4010530:	da000617 	ldw	r8,24(sp)
 4010534:	da400417 	ldw	r9,16(sp)
 4010538:	11c0022e 	bgeu	r2,r7,4010544 <__muldf3+0x4f4>
 401053c:	01000074 	movhi	r4,1
 4010540:	4913883a 	add	r9,r9,r4
 4010544:	100ed43a 	srli	r7,r2,16
 4010548:	1004943a 	slli	r2,r2,16
 401054c:	55ffffcc 	andi	r23,r10,65535
 4010550:	3a53883a 	add	r9,r7,r9
 4010554:	8809883a 	mov	r4,r17
 4010558:	800b883a 	mov	r5,r16
 401055c:	d8c00515 	stw	r3,20(sp)
 4010560:	d9800715 	stw	r6,28(sp)
 4010564:	da000615 	stw	r8,24(sp)
 4010568:	da400415 	stw	r9,16(sp)
 401056c:	15ef883a 	add	r23,r2,r23
 4010570:	40044f40 	call	40044f4 <__mulsi3>
 4010574:	8809883a 	mov	r4,r17
 4010578:	b00b883a 	mov	r5,r22
 401057c:	d8800215 	stw	r2,8(sp)
 4010580:	40044f40 	call	40044f4 <__mulsi3>
 4010584:	b00b883a 	mov	r5,r22
 4010588:	a809883a 	mov	r4,r21
 401058c:	d8800315 	stw	r2,12(sp)
 4010590:	40044f40 	call	40044f4 <__mulsi3>
 4010594:	8009883a 	mov	r4,r16
 4010598:	a80b883a 	mov	r5,r21
 401059c:	1023883a 	mov	r17,r2
 40105a0:	40044f40 	call	40044f4 <__mulsi3>
 40105a4:	d9c00217 	ldw	r7,8(sp)
 40105a8:	da800317 	ldw	r10,12(sp)
 40105ac:	d8c00517 	ldw	r3,20(sp)
 40105b0:	3808d43a 	srli	r4,r7,16
 40105b4:	1285883a 	add	r2,r2,r10
 40105b8:	d9800717 	ldw	r6,28(sp)
 40105bc:	2085883a 	add	r2,r4,r2
 40105c0:	da000617 	ldw	r8,24(sp)
 40105c4:	da400417 	ldw	r9,16(sp)
 40105c8:	1280022e 	bgeu	r2,r10,40105d4 <__muldf3+0x584>
 40105cc:	01000074 	movhi	r4,1
 40105d0:	8923883a 	add	r17,r17,r4
 40105d4:	1008943a 	slli	r4,r2,16
 40105d8:	39ffffcc 	andi	r7,r7,65535
 40105dc:	e4b9883a 	add	fp,fp,r18
 40105e0:	21cf883a 	add	r7,r4,r7
 40105e4:	e4e7803a 	cmpltu	r19,fp,r19
 40105e8:	3d0f883a 	add	r7,r7,r20
 40105ec:	bf39883a 	add	fp,r23,fp
 40105f0:	99c9883a 	add	r4,r19,r7
 40105f4:	e5ef803a 	cmpltu	r23,fp,r23
 40105f8:	490b883a 	add	r5,r9,r4
 40105fc:	1004d43a 	srli	r2,r2,16
 4010600:	b965883a 	add	r18,r23,r5
 4010604:	24c9803a 	cmpltu	r4,r4,r19
 4010608:	3d29803a 	cmpltu	r20,r7,r20
 401060c:	a128b03a 	or	r20,r20,r4
 4010610:	95ef803a 	cmpltu	r23,r18,r23
 4010614:	2a53803a 	cmpltu	r9,r5,r9
 4010618:	a0a9883a 	add	r20,r20,r2
 401061c:	4deeb03a 	or	r23,r9,r23
 4010620:	a5ef883a 	add	r23,r20,r23
 4010624:	bc63883a 	add	r17,r23,r17
 4010628:	e004927a 	slli	r2,fp,9
 401062c:	d9000117 	ldw	r4,4(sp)
 4010630:	882e927a 	slli	r23,r17,9
 4010634:	9022d5fa 	srli	r17,r18,23
 4010638:	e038d5fa 	srli	fp,fp,23
 401063c:	1104b03a 	or	r2,r2,r4
 4010640:	9024927a 	slli	r18,r18,9
 4010644:	1004c03a 	cmpne	r2,r2,zero
 4010648:	bc62b03a 	or	r17,r23,r17
 401064c:	1738b03a 	or	fp,r2,fp
 4010650:	8880402c 	andhi	r2,r17,256
 4010654:	e4a4b03a 	or	r18,fp,r18
 4010658:	10000726 	beq	r2,zero,4010678 <__muldf3+0x628>
 401065c:	9006d07a 	srli	r3,r18,1
 4010660:	880497fa 	slli	r2,r17,31
 4010664:	9480004c 	andi	r18,r18,1
 4010668:	8822d07a 	srli	r17,r17,1
 401066c:	1ca4b03a 	or	r18,r3,r18
 4010670:	14a4b03a 	or	r18,r2,r18
 4010674:	4007883a 	mov	r3,r8
 4010678:	1880ffc4 	addi	r2,r3,1023
 401067c:	0080460e 	bge	zero,r2,4010798 <__muldf3+0x748>
 4010680:	910001cc 	andi	r4,r18,7
 4010684:	20000726 	beq	r4,zero,40106a4 <__muldf3+0x654>
 4010688:	910003cc 	andi	r4,r18,15
 401068c:	01400104 	movi	r5,4
 4010690:	21400426 	beq	r4,r5,40106a4 <__muldf3+0x654>
 4010694:	9149883a 	add	r4,r18,r5
 4010698:	24a5803a 	cmpltu	r18,r4,r18
 401069c:	8ca3883a 	add	r17,r17,r18
 40106a0:	2025883a 	mov	r18,r4
 40106a4:	8900402c 	andhi	r4,r17,256
 40106a8:	20000426 	beq	r4,zero,40106bc <__muldf3+0x66c>
 40106ac:	18810004 	addi	r2,r3,1024
 40106b0:	00ffc034 	movhi	r3,65280
 40106b4:	18ffffc4 	addi	r3,r3,-1
 40106b8:	88e2703a 	and	r17,r17,r3
 40106bc:	00c1ff84 	movi	r3,2046
 40106c0:	18bf1316 	blt	r3,r2,4010310 <__alt_data_end+0xfc010310>
 40106c4:	882c977a 	slli	r22,r17,29
 40106c8:	9024d0fa 	srli	r18,r18,3
 40106cc:	8822927a 	slli	r17,r17,9
 40106d0:	1081ffcc 	andi	r2,r2,2047
 40106d4:	b4acb03a 	or	r22,r22,r18
 40106d8:	8820d33a 	srli	r16,r17,12
 40106dc:	3027883a 	mov	r19,r6
 40106e0:	003eba06 	br	40101cc <__alt_data_end+0xfc0101cc>
 40106e4:	8080022c 	andhi	r2,r16,8
 40106e8:	10000926 	beq	r2,zero,4010710 <__muldf3+0x6c0>
 40106ec:	8880022c 	andhi	r2,r17,8
 40106f0:	1000071e 	bne	r2,zero,4010710 <__muldf3+0x6c0>
 40106f4:	00800434 	movhi	r2,16
 40106f8:	8c000234 	orhi	r16,r17,8
 40106fc:	10bfffc4 	addi	r2,r2,-1
 4010700:	e027883a 	mov	r19,fp
 4010704:	80a0703a 	and	r16,r16,r2
 4010708:	902d883a 	mov	r22,r18
 401070c:	003f1706 	br	401036c <__alt_data_end+0xfc01036c>
 4010710:	00800434 	movhi	r2,16
 4010714:	84000234 	orhi	r16,r16,8
 4010718:	10bfffc4 	addi	r2,r2,-1
 401071c:	80a0703a 	and	r16,r16,r2
 4010720:	003f1206 	br	401036c <__alt_data_end+0xfc01036c>
 4010724:	147ff604 	addi	r17,r2,-40
 4010728:	3462983a 	sll	r17,r6,r17
 401072c:	0025883a 	mov	r18,zero
 4010730:	003ef306 	br	4010300 <__alt_data_end+0xfc010300>
 4010734:	3009883a 	mov	r4,r6
 4010738:	d9400215 	stw	r5,8(sp)
 401073c:	d9800715 	stw	r6,28(sp)
 4010740:	da400415 	stw	r9,16(sp)
 4010744:	da800315 	stw	r10,12(sp)
 4010748:	40113bc0 	call	40113bc <__clzsi2>
 401074c:	10800804 	addi	r2,r2,32
 4010750:	da800317 	ldw	r10,12(sp)
 4010754:	da400417 	ldw	r9,16(sp)
 4010758:	d9800717 	ldw	r6,28(sp)
 401075c:	d9400217 	ldw	r5,8(sp)
 4010760:	003edd06 	br	40102d8 <__alt_data_end+0xfc0102d8>
 4010764:	143ff604 	addi	r16,r2,-40
 4010768:	ac20983a 	sll	r16,r21,r16
 401076c:	002d883a 	mov	r22,zero
 4010770:	003ec106 	br	4010278 <__alt_data_end+0xfc010278>
 4010774:	d9800715 	stw	r6,28(sp)
 4010778:	d9c00215 	stw	r7,8(sp)
 401077c:	da400415 	stw	r9,16(sp)
 4010780:	40113bc0 	call	40113bc <__clzsi2>
 4010784:	10800804 	addi	r2,r2,32
 4010788:	da400417 	ldw	r9,16(sp)
 401078c:	d9c00217 	ldw	r7,8(sp)
 4010790:	d9800717 	ldw	r6,28(sp)
 4010794:	003eae06 	br	4010250 <__alt_data_end+0xfc010250>
 4010798:	00c00044 	movi	r3,1
 401079c:	1887c83a 	sub	r3,r3,r2
 40107a0:	01000e04 	movi	r4,56
 40107a4:	20fe8516 	blt	r4,r3,40101bc <__alt_data_end+0xfc0101bc>
 40107a8:	010007c4 	movi	r4,31
 40107ac:	20c01b16 	blt	r4,r3,401081c <__muldf3+0x7cc>
 40107b0:	00800804 	movi	r2,32
 40107b4:	10c5c83a 	sub	r2,r2,r3
 40107b8:	888a983a 	sll	r5,r17,r2
 40107bc:	90c8d83a 	srl	r4,r18,r3
 40107c0:	9084983a 	sll	r2,r18,r2
 40107c4:	88e2d83a 	srl	r17,r17,r3
 40107c8:	2906b03a 	or	r3,r5,r4
 40107cc:	1004c03a 	cmpne	r2,r2,zero
 40107d0:	1886b03a 	or	r3,r3,r2
 40107d4:	188001cc 	andi	r2,r3,7
 40107d8:	10000726 	beq	r2,zero,40107f8 <__muldf3+0x7a8>
 40107dc:	188003cc 	andi	r2,r3,15
 40107e0:	01000104 	movi	r4,4
 40107e4:	11000426 	beq	r2,r4,40107f8 <__muldf3+0x7a8>
 40107e8:	1805883a 	mov	r2,r3
 40107ec:	10c00104 	addi	r3,r2,4
 40107f0:	1885803a 	cmpltu	r2,r3,r2
 40107f4:	88a3883a 	add	r17,r17,r2
 40107f8:	8880202c 	andhi	r2,r17,128
 40107fc:	10001c26 	beq	r2,zero,4010870 <__muldf3+0x820>
 4010800:	3027883a 	mov	r19,r6
 4010804:	00800044 	movi	r2,1
 4010808:	0021883a 	mov	r16,zero
 401080c:	002d883a 	mov	r22,zero
 4010810:	003e6e06 	br	40101cc <__alt_data_end+0xfc0101cc>
 4010814:	4007883a 	mov	r3,r8
 4010818:	003f9706 	br	4010678 <__alt_data_end+0xfc010678>
 401081c:	017ff844 	movi	r5,-31
 4010820:	2885c83a 	sub	r2,r5,r2
 4010824:	888ad83a 	srl	r5,r17,r2
 4010828:	00800804 	movi	r2,32
 401082c:	18801a26 	beq	r3,r2,4010898 <__muldf3+0x848>
 4010830:	01001004 	movi	r4,64
 4010834:	20c7c83a 	sub	r3,r4,r3
 4010838:	88e2983a 	sll	r17,r17,r3
 401083c:	8ca4b03a 	or	r18,r17,r18
 4010840:	9004c03a 	cmpne	r2,r18,zero
 4010844:	2884b03a 	or	r2,r5,r2
 4010848:	144001cc 	andi	r17,r2,7
 401084c:	88000d1e 	bne	r17,zero,4010884 <__muldf3+0x834>
 4010850:	0021883a 	mov	r16,zero
 4010854:	102cd0fa 	srli	r22,r2,3
 4010858:	3027883a 	mov	r19,r6
 401085c:	0005883a 	mov	r2,zero
 4010860:	b46cb03a 	or	r22,r22,r17
 4010864:	003e5906 	br	40101cc <__alt_data_end+0xfc0101cc>
 4010868:	1007883a 	mov	r3,r2
 401086c:	0023883a 	mov	r17,zero
 4010870:	8820927a 	slli	r16,r17,9
 4010874:	1805883a 	mov	r2,r3
 4010878:	8822977a 	slli	r17,r17,29
 401087c:	8020d33a 	srli	r16,r16,12
 4010880:	003ff406 	br	4010854 <__alt_data_end+0xfc010854>
 4010884:	10c003cc 	andi	r3,r2,15
 4010888:	01000104 	movi	r4,4
 401088c:	193ff626 	beq	r3,r4,4010868 <__alt_data_end+0xfc010868>
 4010890:	0023883a 	mov	r17,zero
 4010894:	003fd506 	br	40107ec <__alt_data_end+0xfc0107ec>
 4010898:	0023883a 	mov	r17,zero
 401089c:	003fe706 	br	401083c <__alt_data_end+0xfc01083c>
 40108a0:	00800434 	movhi	r2,16
 40108a4:	8c000234 	orhi	r16,r17,8
 40108a8:	10bfffc4 	addi	r2,r2,-1
 40108ac:	3027883a 	mov	r19,r6
 40108b0:	80a0703a 	and	r16,r16,r2
 40108b4:	902d883a 	mov	r22,r18
 40108b8:	003eac06 	br	401036c <__alt_data_end+0xfc01036c>

040108bc <__subdf3>:
 40108bc:	02000434 	movhi	r8,16
 40108c0:	423fffc4 	addi	r8,r8,-1
 40108c4:	defffb04 	addi	sp,sp,-20
 40108c8:	2a14703a 	and	r10,r5,r8
 40108cc:	3812d53a 	srli	r9,r7,20
 40108d0:	3a10703a 	and	r8,r7,r8
 40108d4:	2006d77a 	srli	r3,r4,29
 40108d8:	3004d77a 	srli	r2,r6,29
 40108dc:	dc000015 	stw	r16,0(sp)
 40108e0:	501490fa 	slli	r10,r10,3
 40108e4:	2820d53a 	srli	r16,r5,20
 40108e8:	401090fa 	slli	r8,r8,3
 40108ec:	dc800215 	stw	r18,8(sp)
 40108f0:	dc400115 	stw	r17,4(sp)
 40108f4:	dfc00415 	stw	ra,16(sp)
 40108f8:	202290fa 	slli	r17,r4,3
 40108fc:	dcc00315 	stw	r19,12(sp)
 4010900:	4a41ffcc 	andi	r9,r9,2047
 4010904:	0101ffc4 	movi	r4,2047
 4010908:	2824d7fa 	srli	r18,r5,31
 401090c:	8401ffcc 	andi	r16,r16,2047
 4010910:	50c6b03a 	or	r3,r10,r3
 4010914:	380ed7fa 	srli	r7,r7,31
 4010918:	408ab03a 	or	r5,r8,r2
 401091c:	300c90fa 	slli	r6,r6,3
 4010920:	49009626 	beq	r9,r4,4010b7c <__subdf3+0x2c0>
 4010924:	39c0005c 	xori	r7,r7,1
 4010928:	8245c83a 	sub	r2,r16,r9
 401092c:	3c807426 	beq	r7,r18,4010b00 <__subdf3+0x244>
 4010930:	0080af0e 	bge	zero,r2,4010bf0 <__subdf3+0x334>
 4010934:	48002a1e 	bne	r9,zero,40109e0 <__subdf3+0x124>
 4010938:	2988b03a 	or	r4,r5,r6
 401093c:	20009a1e 	bne	r4,zero,4010ba8 <__subdf3+0x2ec>
 4010940:	888001cc 	andi	r2,r17,7
 4010944:	10000726 	beq	r2,zero,4010964 <__subdf3+0xa8>
 4010948:	888003cc 	andi	r2,r17,15
 401094c:	01000104 	movi	r4,4
 4010950:	11000426 	beq	r2,r4,4010964 <__subdf3+0xa8>
 4010954:	890b883a 	add	r5,r17,r4
 4010958:	2c63803a 	cmpltu	r17,r5,r17
 401095c:	1c47883a 	add	r3,r3,r17
 4010960:	2823883a 	mov	r17,r5
 4010964:	1880202c 	andhi	r2,r3,128
 4010968:	10005926 	beq	r2,zero,4010ad0 <__subdf3+0x214>
 401096c:	84000044 	addi	r16,r16,1
 4010970:	0081ffc4 	movi	r2,2047
 4010974:	8080be26 	beq	r16,r2,4010c70 <__subdf3+0x3b4>
 4010978:	017fe034 	movhi	r5,65408
 401097c:	297fffc4 	addi	r5,r5,-1
 4010980:	1946703a 	and	r3,r3,r5
 4010984:	1804977a 	slli	r2,r3,29
 4010988:	1806927a 	slli	r3,r3,9
 401098c:	8822d0fa 	srli	r17,r17,3
 4010990:	8401ffcc 	andi	r16,r16,2047
 4010994:	180ad33a 	srli	r5,r3,12
 4010998:	9100004c 	andi	r4,r18,1
 401099c:	1444b03a 	or	r2,r2,r17
 40109a0:	80c1ffcc 	andi	r3,r16,2047
 40109a4:	1820953a 	slli	r16,r3,20
 40109a8:	20c03fcc 	andi	r3,r4,255
 40109ac:	180897fa 	slli	r4,r3,31
 40109b0:	00c00434 	movhi	r3,16
 40109b4:	18ffffc4 	addi	r3,r3,-1
 40109b8:	28c6703a 	and	r3,r5,r3
 40109bc:	1c06b03a 	or	r3,r3,r16
 40109c0:	1906b03a 	or	r3,r3,r4
 40109c4:	dfc00417 	ldw	ra,16(sp)
 40109c8:	dcc00317 	ldw	r19,12(sp)
 40109cc:	dc800217 	ldw	r18,8(sp)
 40109d0:	dc400117 	ldw	r17,4(sp)
 40109d4:	dc000017 	ldw	r16,0(sp)
 40109d8:	dec00504 	addi	sp,sp,20
 40109dc:	f800283a 	ret
 40109e0:	0101ffc4 	movi	r4,2047
 40109e4:	813fd626 	beq	r16,r4,4010940 <__alt_data_end+0xfc010940>
 40109e8:	29402034 	orhi	r5,r5,128
 40109ec:	01000e04 	movi	r4,56
 40109f0:	2080a316 	blt	r4,r2,4010c80 <__subdf3+0x3c4>
 40109f4:	010007c4 	movi	r4,31
 40109f8:	2080c616 	blt	r4,r2,4010d14 <__subdf3+0x458>
 40109fc:	01000804 	movi	r4,32
 4010a00:	2089c83a 	sub	r4,r4,r2
 4010a04:	2910983a 	sll	r8,r5,r4
 4010a08:	308ed83a 	srl	r7,r6,r2
 4010a0c:	3108983a 	sll	r4,r6,r4
 4010a10:	2884d83a 	srl	r2,r5,r2
 4010a14:	41ccb03a 	or	r6,r8,r7
 4010a18:	2008c03a 	cmpne	r4,r4,zero
 4010a1c:	310cb03a 	or	r6,r6,r4
 4010a20:	898dc83a 	sub	r6,r17,r6
 4010a24:	89a3803a 	cmpltu	r17,r17,r6
 4010a28:	1887c83a 	sub	r3,r3,r2
 4010a2c:	1c47c83a 	sub	r3,r3,r17
 4010a30:	3023883a 	mov	r17,r6
 4010a34:	1880202c 	andhi	r2,r3,128
 4010a38:	10002326 	beq	r2,zero,4010ac8 <__subdf3+0x20c>
 4010a3c:	04c02034 	movhi	r19,128
 4010a40:	9cffffc4 	addi	r19,r19,-1
 4010a44:	1ce6703a 	and	r19,r3,r19
 4010a48:	98007a26 	beq	r19,zero,4010c34 <__subdf3+0x378>
 4010a4c:	9809883a 	mov	r4,r19
 4010a50:	40113bc0 	call	40113bc <__clzsi2>
 4010a54:	113ffe04 	addi	r4,r2,-8
 4010a58:	00c007c4 	movi	r3,31
 4010a5c:	19007b16 	blt	r3,r4,4010c4c <__subdf3+0x390>
 4010a60:	00800804 	movi	r2,32
 4010a64:	1105c83a 	sub	r2,r2,r4
 4010a68:	8884d83a 	srl	r2,r17,r2
 4010a6c:	9906983a 	sll	r3,r19,r4
 4010a70:	8922983a 	sll	r17,r17,r4
 4010a74:	10c4b03a 	or	r2,r2,r3
 4010a78:	24007816 	blt	r4,r16,4010c5c <__subdf3+0x3a0>
 4010a7c:	2421c83a 	sub	r16,r4,r16
 4010a80:	80c00044 	addi	r3,r16,1
 4010a84:	010007c4 	movi	r4,31
 4010a88:	20c09516 	blt	r4,r3,4010ce0 <__subdf3+0x424>
 4010a8c:	01400804 	movi	r5,32
 4010a90:	28cbc83a 	sub	r5,r5,r3
 4010a94:	88c8d83a 	srl	r4,r17,r3
 4010a98:	8962983a 	sll	r17,r17,r5
 4010a9c:	114a983a 	sll	r5,r2,r5
 4010aa0:	10c6d83a 	srl	r3,r2,r3
 4010aa4:	8804c03a 	cmpne	r2,r17,zero
 4010aa8:	290ab03a 	or	r5,r5,r4
 4010aac:	28a2b03a 	or	r17,r5,r2
 4010ab0:	0021883a 	mov	r16,zero
 4010ab4:	003fa206 	br	4010940 <__alt_data_end+0xfc010940>
 4010ab8:	2090b03a 	or	r8,r4,r2
 4010abc:	40018e26 	beq	r8,zero,40110f8 <__subdf3+0x83c>
 4010ac0:	1007883a 	mov	r3,r2
 4010ac4:	2023883a 	mov	r17,r4
 4010ac8:	888001cc 	andi	r2,r17,7
 4010acc:	103f9e1e 	bne	r2,zero,4010948 <__alt_data_end+0xfc010948>
 4010ad0:	1804977a 	slli	r2,r3,29
 4010ad4:	8822d0fa 	srli	r17,r17,3
 4010ad8:	1810d0fa 	srli	r8,r3,3
 4010adc:	9100004c 	andi	r4,r18,1
 4010ae0:	1444b03a 	or	r2,r2,r17
 4010ae4:	00c1ffc4 	movi	r3,2047
 4010ae8:	80c02826 	beq	r16,r3,4010b8c <__subdf3+0x2d0>
 4010aec:	01400434 	movhi	r5,16
 4010af0:	297fffc4 	addi	r5,r5,-1
 4010af4:	80e0703a 	and	r16,r16,r3
 4010af8:	414a703a 	and	r5,r8,r5
 4010afc:	003fa806 	br	40109a0 <__alt_data_end+0xfc0109a0>
 4010b00:	0080630e 	bge	zero,r2,4010c90 <__subdf3+0x3d4>
 4010b04:	48003026 	beq	r9,zero,4010bc8 <__subdf3+0x30c>
 4010b08:	0101ffc4 	movi	r4,2047
 4010b0c:	813f8c26 	beq	r16,r4,4010940 <__alt_data_end+0xfc010940>
 4010b10:	29402034 	orhi	r5,r5,128
 4010b14:	01000e04 	movi	r4,56
 4010b18:	2080a90e 	bge	r4,r2,4010dc0 <__subdf3+0x504>
 4010b1c:	298cb03a 	or	r6,r5,r6
 4010b20:	3012c03a 	cmpne	r9,r6,zero
 4010b24:	0005883a 	mov	r2,zero
 4010b28:	4c53883a 	add	r9,r9,r17
 4010b2c:	4c63803a 	cmpltu	r17,r9,r17
 4010b30:	10c7883a 	add	r3,r2,r3
 4010b34:	88c7883a 	add	r3,r17,r3
 4010b38:	4823883a 	mov	r17,r9
 4010b3c:	1880202c 	andhi	r2,r3,128
 4010b40:	1000d026 	beq	r2,zero,4010e84 <__subdf3+0x5c8>
 4010b44:	84000044 	addi	r16,r16,1
 4010b48:	0081ffc4 	movi	r2,2047
 4010b4c:	8080fe26 	beq	r16,r2,4010f48 <__subdf3+0x68c>
 4010b50:	00bfe034 	movhi	r2,65408
 4010b54:	10bfffc4 	addi	r2,r2,-1
 4010b58:	1886703a 	and	r3,r3,r2
 4010b5c:	880ad07a 	srli	r5,r17,1
 4010b60:	180497fa 	slli	r2,r3,31
 4010b64:	8900004c 	andi	r4,r17,1
 4010b68:	2922b03a 	or	r17,r5,r4
 4010b6c:	1806d07a 	srli	r3,r3,1
 4010b70:	1462b03a 	or	r17,r2,r17
 4010b74:	3825883a 	mov	r18,r7
 4010b78:	003f7106 	br	4010940 <__alt_data_end+0xfc010940>
 4010b7c:	2984b03a 	or	r2,r5,r6
 4010b80:	103f6826 	beq	r2,zero,4010924 <__alt_data_end+0xfc010924>
 4010b84:	39c03fcc 	andi	r7,r7,255
 4010b88:	003f6706 	br	4010928 <__alt_data_end+0xfc010928>
 4010b8c:	4086b03a 	or	r3,r8,r2
 4010b90:	18015226 	beq	r3,zero,40110dc <__subdf3+0x820>
 4010b94:	00c00434 	movhi	r3,16
 4010b98:	41400234 	orhi	r5,r8,8
 4010b9c:	18ffffc4 	addi	r3,r3,-1
 4010ba0:	28ca703a 	and	r5,r5,r3
 4010ba4:	003f7e06 	br	40109a0 <__alt_data_end+0xfc0109a0>
 4010ba8:	10bfffc4 	addi	r2,r2,-1
 4010bac:	1000491e 	bne	r2,zero,4010cd4 <__subdf3+0x418>
 4010bb0:	898fc83a 	sub	r7,r17,r6
 4010bb4:	89e3803a 	cmpltu	r17,r17,r7
 4010bb8:	1947c83a 	sub	r3,r3,r5
 4010bbc:	1c47c83a 	sub	r3,r3,r17
 4010bc0:	3823883a 	mov	r17,r7
 4010bc4:	003f9b06 	br	4010a34 <__alt_data_end+0xfc010a34>
 4010bc8:	2988b03a 	or	r4,r5,r6
 4010bcc:	203f5c26 	beq	r4,zero,4010940 <__alt_data_end+0xfc010940>
 4010bd0:	10bfffc4 	addi	r2,r2,-1
 4010bd4:	1000931e 	bne	r2,zero,4010e24 <__subdf3+0x568>
 4010bd8:	898d883a 	add	r6,r17,r6
 4010bdc:	3463803a 	cmpltu	r17,r6,r17
 4010be0:	1947883a 	add	r3,r3,r5
 4010be4:	88c7883a 	add	r3,r17,r3
 4010be8:	3023883a 	mov	r17,r6
 4010bec:	003fd306 	br	4010b3c <__alt_data_end+0xfc010b3c>
 4010bf0:	1000541e 	bne	r2,zero,4010d44 <__subdf3+0x488>
 4010bf4:	80800044 	addi	r2,r16,1
 4010bf8:	1081ffcc 	andi	r2,r2,2047
 4010bfc:	01000044 	movi	r4,1
 4010c00:	2080a20e 	bge	r4,r2,4010e8c <__subdf3+0x5d0>
 4010c04:	8989c83a 	sub	r4,r17,r6
 4010c08:	8905803a 	cmpltu	r2,r17,r4
 4010c0c:	1967c83a 	sub	r19,r3,r5
 4010c10:	98a7c83a 	sub	r19,r19,r2
 4010c14:	9880202c 	andhi	r2,r19,128
 4010c18:	10006326 	beq	r2,zero,4010da8 <__subdf3+0x4ec>
 4010c1c:	3463c83a 	sub	r17,r6,r17
 4010c20:	28c7c83a 	sub	r3,r5,r3
 4010c24:	344d803a 	cmpltu	r6,r6,r17
 4010c28:	19a7c83a 	sub	r19,r3,r6
 4010c2c:	3825883a 	mov	r18,r7
 4010c30:	983f861e 	bne	r19,zero,4010a4c <__alt_data_end+0xfc010a4c>
 4010c34:	8809883a 	mov	r4,r17
 4010c38:	40113bc0 	call	40113bc <__clzsi2>
 4010c3c:	10800804 	addi	r2,r2,32
 4010c40:	113ffe04 	addi	r4,r2,-8
 4010c44:	00c007c4 	movi	r3,31
 4010c48:	193f850e 	bge	r3,r4,4010a60 <__alt_data_end+0xfc010a60>
 4010c4c:	10bff604 	addi	r2,r2,-40
 4010c50:	8884983a 	sll	r2,r17,r2
 4010c54:	0023883a 	mov	r17,zero
 4010c58:	243f880e 	bge	r4,r16,4010a7c <__alt_data_end+0xfc010a7c>
 4010c5c:	00ffe034 	movhi	r3,65408
 4010c60:	18ffffc4 	addi	r3,r3,-1
 4010c64:	8121c83a 	sub	r16,r16,r4
 4010c68:	10c6703a 	and	r3,r2,r3
 4010c6c:	003f3406 	br	4010940 <__alt_data_end+0xfc010940>
 4010c70:	9100004c 	andi	r4,r18,1
 4010c74:	000b883a 	mov	r5,zero
 4010c78:	0005883a 	mov	r2,zero
 4010c7c:	003f4806 	br	40109a0 <__alt_data_end+0xfc0109a0>
 4010c80:	298cb03a 	or	r6,r5,r6
 4010c84:	300cc03a 	cmpne	r6,r6,zero
 4010c88:	0005883a 	mov	r2,zero
 4010c8c:	003f6406 	br	4010a20 <__alt_data_end+0xfc010a20>
 4010c90:	10009a1e 	bne	r2,zero,4010efc <__subdf3+0x640>
 4010c94:	82400044 	addi	r9,r16,1
 4010c98:	4881ffcc 	andi	r2,r9,2047
 4010c9c:	02800044 	movi	r10,1
 4010ca0:	5080670e 	bge	r10,r2,4010e40 <__subdf3+0x584>
 4010ca4:	0081ffc4 	movi	r2,2047
 4010ca8:	4880af26 	beq	r9,r2,4010f68 <__subdf3+0x6ac>
 4010cac:	898d883a 	add	r6,r17,r6
 4010cb0:	1945883a 	add	r2,r3,r5
 4010cb4:	3447803a 	cmpltu	r3,r6,r17
 4010cb8:	1887883a 	add	r3,r3,r2
 4010cbc:	182297fa 	slli	r17,r3,31
 4010cc0:	300cd07a 	srli	r6,r6,1
 4010cc4:	1806d07a 	srli	r3,r3,1
 4010cc8:	4821883a 	mov	r16,r9
 4010ccc:	89a2b03a 	or	r17,r17,r6
 4010cd0:	003f1b06 	br	4010940 <__alt_data_end+0xfc010940>
 4010cd4:	0101ffc4 	movi	r4,2047
 4010cd8:	813f441e 	bne	r16,r4,40109ec <__alt_data_end+0xfc0109ec>
 4010cdc:	003f1806 	br	4010940 <__alt_data_end+0xfc010940>
 4010ce0:	843ff844 	addi	r16,r16,-31
 4010ce4:	01400804 	movi	r5,32
 4010ce8:	1408d83a 	srl	r4,r2,r16
 4010cec:	19405026 	beq	r3,r5,4010e30 <__subdf3+0x574>
 4010cf0:	01401004 	movi	r5,64
 4010cf4:	28c7c83a 	sub	r3,r5,r3
 4010cf8:	10c4983a 	sll	r2,r2,r3
 4010cfc:	88a2b03a 	or	r17,r17,r2
 4010d00:	8822c03a 	cmpne	r17,r17,zero
 4010d04:	2462b03a 	or	r17,r4,r17
 4010d08:	0007883a 	mov	r3,zero
 4010d0c:	0021883a 	mov	r16,zero
 4010d10:	003f6d06 	br	4010ac8 <__alt_data_end+0xfc010ac8>
 4010d14:	11fff804 	addi	r7,r2,-32
 4010d18:	01000804 	movi	r4,32
 4010d1c:	29ced83a 	srl	r7,r5,r7
 4010d20:	11004526 	beq	r2,r4,4010e38 <__subdf3+0x57c>
 4010d24:	01001004 	movi	r4,64
 4010d28:	2089c83a 	sub	r4,r4,r2
 4010d2c:	2904983a 	sll	r2,r5,r4
 4010d30:	118cb03a 	or	r6,r2,r6
 4010d34:	300cc03a 	cmpne	r6,r6,zero
 4010d38:	398cb03a 	or	r6,r7,r6
 4010d3c:	0005883a 	mov	r2,zero
 4010d40:	003f3706 	br	4010a20 <__alt_data_end+0xfc010a20>
 4010d44:	80002a26 	beq	r16,zero,4010df0 <__subdf3+0x534>
 4010d48:	0101ffc4 	movi	r4,2047
 4010d4c:	49006626 	beq	r9,r4,4010ee8 <__subdf3+0x62c>
 4010d50:	0085c83a 	sub	r2,zero,r2
 4010d54:	18c02034 	orhi	r3,r3,128
 4010d58:	01000e04 	movi	r4,56
 4010d5c:	20807e16 	blt	r4,r2,4010f58 <__subdf3+0x69c>
 4010d60:	010007c4 	movi	r4,31
 4010d64:	2080e716 	blt	r4,r2,4011104 <__subdf3+0x848>
 4010d68:	01000804 	movi	r4,32
 4010d6c:	2089c83a 	sub	r4,r4,r2
 4010d70:	1914983a 	sll	r10,r3,r4
 4010d74:	8890d83a 	srl	r8,r17,r2
 4010d78:	8908983a 	sll	r4,r17,r4
 4010d7c:	1884d83a 	srl	r2,r3,r2
 4010d80:	5222b03a 	or	r17,r10,r8
 4010d84:	2006c03a 	cmpne	r3,r4,zero
 4010d88:	88e2b03a 	or	r17,r17,r3
 4010d8c:	3463c83a 	sub	r17,r6,r17
 4010d90:	2885c83a 	sub	r2,r5,r2
 4010d94:	344d803a 	cmpltu	r6,r6,r17
 4010d98:	1187c83a 	sub	r3,r2,r6
 4010d9c:	4821883a 	mov	r16,r9
 4010da0:	3825883a 	mov	r18,r7
 4010da4:	003f2306 	br	4010a34 <__alt_data_end+0xfc010a34>
 4010da8:	24d0b03a 	or	r8,r4,r19
 4010dac:	40001b1e 	bne	r8,zero,4010e1c <__subdf3+0x560>
 4010db0:	0005883a 	mov	r2,zero
 4010db4:	0009883a 	mov	r4,zero
 4010db8:	0021883a 	mov	r16,zero
 4010dbc:	003f4906 	br	4010ae4 <__alt_data_end+0xfc010ae4>
 4010dc0:	010007c4 	movi	r4,31
 4010dc4:	20803a16 	blt	r4,r2,4010eb0 <__subdf3+0x5f4>
 4010dc8:	01000804 	movi	r4,32
 4010dcc:	2089c83a 	sub	r4,r4,r2
 4010dd0:	2912983a 	sll	r9,r5,r4
 4010dd4:	3090d83a 	srl	r8,r6,r2
 4010dd8:	3108983a 	sll	r4,r6,r4
 4010ddc:	2884d83a 	srl	r2,r5,r2
 4010de0:	4a12b03a 	or	r9,r9,r8
 4010de4:	2008c03a 	cmpne	r4,r4,zero
 4010de8:	4912b03a 	or	r9,r9,r4
 4010dec:	003f4e06 	br	4010b28 <__alt_data_end+0xfc010b28>
 4010df0:	1c48b03a 	or	r4,r3,r17
 4010df4:	20003c26 	beq	r4,zero,4010ee8 <__subdf3+0x62c>
 4010df8:	0084303a 	nor	r2,zero,r2
 4010dfc:	1000381e 	bne	r2,zero,4010ee0 <__subdf3+0x624>
 4010e00:	3463c83a 	sub	r17,r6,r17
 4010e04:	28c5c83a 	sub	r2,r5,r3
 4010e08:	344d803a 	cmpltu	r6,r6,r17
 4010e0c:	1187c83a 	sub	r3,r2,r6
 4010e10:	4821883a 	mov	r16,r9
 4010e14:	3825883a 	mov	r18,r7
 4010e18:	003f0606 	br	4010a34 <__alt_data_end+0xfc010a34>
 4010e1c:	2023883a 	mov	r17,r4
 4010e20:	003f0906 	br	4010a48 <__alt_data_end+0xfc010a48>
 4010e24:	0101ffc4 	movi	r4,2047
 4010e28:	813f3a1e 	bne	r16,r4,4010b14 <__alt_data_end+0xfc010b14>
 4010e2c:	003ec406 	br	4010940 <__alt_data_end+0xfc010940>
 4010e30:	0005883a 	mov	r2,zero
 4010e34:	003fb106 	br	4010cfc <__alt_data_end+0xfc010cfc>
 4010e38:	0005883a 	mov	r2,zero
 4010e3c:	003fbc06 	br	4010d30 <__alt_data_end+0xfc010d30>
 4010e40:	1c44b03a 	or	r2,r3,r17
 4010e44:	80008e1e 	bne	r16,zero,4011080 <__subdf3+0x7c4>
 4010e48:	1000c826 	beq	r2,zero,401116c <__subdf3+0x8b0>
 4010e4c:	2984b03a 	or	r2,r5,r6
 4010e50:	103ebb26 	beq	r2,zero,4010940 <__alt_data_end+0xfc010940>
 4010e54:	8989883a 	add	r4,r17,r6
 4010e58:	1945883a 	add	r2,r3,r5
 4010e5c:	2447803a 	cmpltu	r3,r4,r17
 4010e60:	1887883a 	add	r3,r3,r2
 4010e64:	1880202c 	andhi	r2,r3,128
 4010e68:	2023883a 	mov	r17,r4
 4010e6c:	103f1626 	beq	r2,zero,4010ac8 <__alt_data_end+0xfc010ac8>
 4010e70:	00bfe034 	movhi	r2,65408
 4010e74:	10bfffc4 	addi	r2,r2,-1
 4010e78:	5021883a 	mov	r16,r10
 4010e7c:	1886703a 	and	r3,r3,r2
 4010e80:	003eaf06 	br	4010940 <__alt_data_end+0xfc010940>
 4010e84:	3825883a 	mov	r18,r7
 4010e88:	003f0f06 	br	4010ac8 <__alt_data_end+0xfc010ac8>
 4010e8c:	1c44b03a 	or	r2,r3,r17
 4010e90:	8000251e 	bne	r16,zero,4010f28 <__subdf3+0x66c>
 4010e94:	1000661e 	bne	r2,zero,4011030 <__subdf3+0x774>
 4010e98:	2990b03a 	or	r8,r5,r6
 4010e9c:	40009626 	beq	r8,zero,40110f8 <__subdf3+0x83c>
 4010ea0:	2807883a 	mov	r3,r5
 4010ea4:	3023883a 	mov	r17,r6
 4010ea8:	3825883a 	mov	r18,r7
 4010eac:	003ea406 	br	4010940 <__alt_data_end+0xfc010940>
 4010eb0:	127ff804 	addi	r9,r2,-32
 4010eb4:	01000804 	movi	r4,32
 4010eb8:	2a52d83a 	srl	r9,r5,r9
 4010ebc:	11008c26 	beq	r2,r4,40110f0 <__subdf3+0x834>
 4010ec0:	01001004 	movi	r4,64
 4010ec4:	2085c83a 	sub	r2,r4,r2
 4010ec8:	2884983a 	sll	r2,r5,r2
 4010ecc:	118cb03a 	or	r6,r2,r6
 4010ed0:	300cc03a 	cmpne	r6,r6,zero
 4010ed4:	4992b03a 	or	r9,r9,r6
 4010ed8:	0005883a 	mov	r2,zero
 4010edc:	003f1206 	br	4010b28 <__alt_data_end+0xfc010b28>
 4010ee0:	0101ffc4 	movi	r4,2047
 4010ee4:	493f9c1e 	bne	r9,r4,4010d58 <__alt_data_end+0xfc010d58>
 4010ee8:	2807883a 	mov	r3,r5
 4010eec:	3023883a 	mov	r17,r6
 4010ef0:	4821883a 	mov	r16,r9
 4010ef4:	3825883a 	mov	r18,r7
 4010ef8:	003e9106 	br	4010940 <__alt_data_end+0xfc010940>
 4010efc:	80001f1e 	bne	r16,zero,4010f7c <__subdf3+0x6c0>
 4010f00:	1c48b03a 	or	r4,r3,r17
 4010f04:	20005a26 	beq	r4,zero,4011070 <__subdf3+0x7b4>
 4010f08:	0084303a 	nor	r2,zero,r2
 4010f0c:	1000561e 	bne	r2,zero,4011068 <__subdf3+0x7ac>
 4010f10:	89a3883a 	add	r17,r17,r6
 4010f14:	1945883a 	add	r2,r3,r5
 4010f18:	898d803a 	cmpltu	r6,r17,r6
 4010f1c:	3087883a 	add	r3,r6,r2
 4010f20:	4821883a 	mov	r16,r9
 4010f24:	003f0506 	br	4010b3c <__alt_data_end+0xfc010b3c>
 4010f28:	10002b1e 	bne	r2,zero,4010fd8 <__subdf3+0x71c>
 4010f2c:	2984b03a 	or	r2,r5,r6
 4010f30:	10008026 	beq	r2,zero,4011134 <__subdf3+0x878>
 4010f34:	2807883a 	mov	r3,r5
 4010f38:	3023883a 	mov	r17,r6
 4010f3c:	3825883a 	mov	r18,r7
 4010f40:	0401ffc4 	movi	r16,2047
 4010f44:	003e7e06 	br	4010940 <__alt_data_end+0xfc010940>
 4010f48:	3809883a 	mov	r4,r7
 4010f4c:	0011883a 	mov	r8,zero
 4010f50:	0005883a 	mov	r2,zero
 4010f54:	003ee306 	br	4010ae4 <__alt_data_end+0xfc010ae4>
 4010f58:	1c62b03a 	or	r17,r3,r17
 4010f5c:	8822c03a 	cmpne	r17,r17,zero
 4010f60:	0005883a 	mov	r2,zero
 4010f64:	003f8906 	br	4010d8c <__alt_data_end+0xfc010d8c>
 4010f68:	3809883a 	mov	r4,r7
 4010f6c:	4821883a 	mov	r16,r9
 4010f70:	0011883a 	mov	r8,zero
 4010f74:	0005883a 	mov	r2,zero
 4010f78:	003eda06 	br	4010ae4 <__alt_data_end+0xfc010ae4>
 4010f7c:	0101ffc4 	movi	r4,2047
 4010f80:	49003b26 	beq	r9,r4,4011070 <__subdf3+0x7b4>
 4010f84:	0085c83a 	sub	r2,zero,r2
 4010f88:	18c02034 	orhi	r3,r3,128
 4010f8c:	01000e04 	movi	r4,56
 4010f90:	20806e16 	blt	r4,r2,401114c <__subdf3+0x890>
 4010f94:	010007c4 	movi	r4,31
 4010f98:	20807716 	blt	r4,r2,4011178 <__subdf3+0x8bc>
 4010f9c:	01000804 	movi	r4,32
 4010fa0:	2089c83a 	sub	r4,r4,r2
 4010fa4:	1914983a 	sll	r10,r3,r4
 4010fa8:	8890d83a 	srl	r8,r17,r2
 4010fac:	8908983a 	sll	r4,r17,r4
 4010fb0:	1884d83a 	srl	r2,r3,r2
 4010fb4:	5222b03a 	or	r17,r10,r8
 4010fb8:	2006c03a 	cmpne	r3,r4,zero
 4010fbc:	88e2b03a 	or	r17,r17,r3
 4010fc0:	89a3883a 	add	r17,r17,r6
 4010fc4:	1145883a 	add	r2,r2,r5
 4010fc8:	898d803a 	cmpltu	r6,r17,r6
 4010fcc:	3087883a 	add	r3,r6,r2
 4010fd0:	4821883a 	mov	r16,r9
 4010fd4:	003ed906 	br	4010b3c <__alt_data_end+0xfc010b3c>
 4010fd8:	2984b03a 	or	r2,r5,r6
 4010fdc:	10004226 	beq	r2,zero,40110e8 <__subdf3+0x82c>
 4010fe0:	1808d0fa 	srli	r4,r3,3
 4010fe4:	8822d0fa 	srli	r17,r17,3
 4010fe8:	1806977a 	slli	r3,r3,29
 4010fec:	2080022c 	andhi	r2,r4,8
 4010ff0:	1c62b03a 	or	r17,r3,r17
 4010ff4:	10000826 	beq	r2,zero,4011018 <__subdf3+0x75c>
 4010ff8:	2812d0fa 	srli	r9,r5,3
 4010ffc:	4880022c 	andhi	r2,r9,8
 4011000:	1000051e 	bne	r2,zero,4011018 <__subdf3+0x75c>
 4011004:	300cd0fa 	srli	r6,r6,3
 4011008:	2804977a 	slli	r2,r5,29
 401100c:	4809883a 	mov	r4,r9
 4011010:	3825883a 	mov	r18,r7
 4011014:	11a2b03a 	or	r17,r2,r6
 4011018:	8806d77a 	srli	r3,r17,29
 401101c:	200890fa 	slli	r4,r4,3
 4011020:	882290fa 	slli	r17,r17,3
 4011024:	0401ffc4 	movi	r16,2047
 4011028:	1906b03a 	or	r3,r3,r4
 401102c:	003e4406 	br	4010940 <__alt_data_end+0xfc010940>
 4011030:	2984b03a 	or	r2,r5,r6
 4011034:	103e4226 	beq	r2,zero,4010940 <__alt_data_end+0xfc010940>
 4011038:	8989c83a 	sub	r4,r17,r6
 401103c:	8911803a 	cmpltu	r8,r17,r4
 4011040:	1945c83a 	sub	r2,r3,r5
 4011044:	1205c83a 	sub	r2,r2,r8
 4011048:	1200202c 	andhi	r8,r2,128
 401104c:	403e9a26 	beq	r8,zero,4010ab8 <__alt_data_end+0xfc010ab8>
 4011050:	3463c83a 	sub	r17,r6,r17
 4011054:	28c5c83a 	sub	r2,r5,r3
 4011058:	344d803a 	cmpltu	r6,r6,r17
 401105c:	1187c83a 	sub	r3,r2,r6
 4011060:	3825883a 	mov	r18,r7
 4011064:	003e3606 	br	4010940 <__alt_data_end+0xfc010940>
 4011068:	0101ffc4 	movi	r4,2047
 401106c:	493fc71e 	bne	r9,r4,4010f8c <__alt_data_end+0xfc010f8c>
 4011070:	2807883a 	mov	r3,r5
 4011074:	3023883a 	mov	r17,r6
 4011078:	4821883a 	mov	r16,r9
 401107c:	003e3006 	br	4010940 <__alt_data_end+0xfc010940>
 4011080:	10003626 	beq	r2,zero,401115c <__subdf3+0x8a0>
 4011084:	2984b03a 	or	r2,r5,r6
 4011088:	10001726 	beq	r2,zero,40110e8 <__subdf3+0x82c>
 401108c:	1808d0fa 	srli	r4,r3,3
 4011090:	8822d0fa 	srli	r17,r17,3
 4011094:	1806977a 	slli	r3,r3,29
 4011098:	2080022c 	andhi	r2,r4,8
 401109c:	1c62b03a 	or	r17,r3,r17
 40110a0:	10000726 	beq	r2,zero,40110c0 <__subdf3+0x804>
 40110a4:	2812d0fa 	srli	r9,r5,3
 40110a8:	4880022c 	andhi	r2,r9,8
 40110ac:	1000041e 	bne	r2,zero,40110c0 <__subdf3+0x804>
 40110b0:	300cd0fa 	srli	r6,r6,3
 40110b4:	2804977a 	slli	r2,r5,29
 40110b8:	4809883a 	mov	r4,r9
 40110bc:	11a2b03a 	or	r17,r2,r6
 40110c0:	8806d77a 	srli	r3,r17,29
 40110c4:	200890fa 	slli	r4,r4,3
 40110c8:	882290fa 	slli	r17,r17,3
 40110cc:	3825883a 	mov	r18,r7
 40110d0:	1906b03a 	or	r3,r3,r4
 40110d4:	0401ffc4 	movi	r16,2047
 40110d8:	003e1906 	br	4010940 <__alt_data_end+0xfc010940>
 40110dc:	000b883a 	mov	r5,zero
 40110e0:	0005883a 	mov	r2,zero
 40110e4:	003e2e06 	br	40109a0 <__alt_data_end+0xfc0109a0>
 40110e8:	0401ffc4 	movi	r16,2047
 40110ec:	003e1406 	br	4010940 <__alt_data_end+0xfc010940>
 40110f0:	0005883a 	mov	r2,zero
 40110f4:	003f7506 	br	4010ecc <__alt_data_end+0xfc010ecc>
 40110f8:	0005883a 	mov	r2,zero
 40110fc:	0009883a 	mov	r4,zero
 4011100:	003e7806 	br	4010ae4 <__alt_data_end+0xfc010ae4>
 4011104:	123ff804 	addi	r8,r2,-32
 4011108:	01000804 	movi	r4,32
 401110c:	1a10d83a 	srl	r8,r3,r8
 4011110:	11002526 	beq	r2,r4,40111a8 <__subdf3+0x8ec>
 4011114:	01001004 	movi	r4,64
 4011118:	2085c83a 	sub	r2,r4,r2
 401111c:	1884983a 	sll	r2,r3,r2
 4011120:	1444b03a 	or	r2,r2,r17
 4011124:	1004c03a 	cmpne	r2,r2,zero
 4011128:	40a2b03a 	or	r17,r8,r2
 401112c:	0005883a 	mov	r2,zero
 4011130:	003f1606 	br	4010d8c <__alt_data_end+0xfc010d8c>
 4011134:	02000434 	movhi	r8,16
 4011138:	0009883a 	mov	r4,zero
 401113c:	423fffc4 	addi	r8,r8,-1
 4011140:	00bfffc4 	movi	r2,-1
 4011144:	0401ffc4 	movi	r16,2047
 4011148:	003e6606 	br	4010ae4 <__alt_data_end+0xfc010ae4>
 401114c:	1c62b03a 	or	r17,r3,r17
 4011150:	8822c03a 	cmpne	r17,r17,zero
 4011154:	0005883a 	mov	r2,zero
 4011158:	003f9906 	br	4010fc0 <__alt_data_end+0xfc010fc0>
 401115c:	2807883a 	mov	r3,r5
 4011160:	3023883a 	mov	r17,r6
 4011164:	0401ffc4 	movi	r16,2047
 4011168:	003df506 	br	4010940 <__alt_data_end+0xfc010940>
 401116c:	2807883a 	mov	r3,r5
 4011170:	3023883a 	mov	r17,r6
 4011174:	003df206 	br	4010940 <__alt_data_end+0xfc010940>
 4011178:	123ff804 	addi	r8,r2,-32
 401117c:	01000804 	movi	r4,32
 4011180:	1a10d83a 	srl	r8,r3,r8
 4011184:	11000a26 	beq	r2,r4,40111b0 <__subdf3+0x8f4>
 4011188:	01001004 	movi	r4,64
 401118c:	2085c83a 	sub	r2,r4,r2
 4011190:	1884983a 	sll	r2,r3,r2
 4011194:	1444b03a 	or	r2,r2,r17
 4011198:	1004c03a 	cmpne	r2,r2,zero
 401119c:	40a2b03a 	or	r17,r8,r2
 40111a0:	0005883a 	mov	r2,zero
 40111a4:	003f8606 	br	4010fc0 <__alt_data_end+0xfc010fc0>
 40111a8:	0005883a 	mov	r2,zero
 40111ac:	003fdc06 	br	4011120 <__alt_data_end+0xfc011120>
 40111b0:	0005883a 	mov	r2,zero
 40111b4:	003ff706 	br	4011194 <__alt_data_end+0xfc011194>

040111b8 <__fixdfsi>:
 40111b8:	280cd53a 	srli	r6,r5,20
 40111bc:	00c00434 	movhi	r3,16
 40111c0:	18ffffc4 	addi	r3,r3,-1
 40111c4:	3181ffcc 	andi	r6,r6,2047
 40111c8:	01c0ff84 	movi	r7,1022
 40111cc:	28c6703a 	and	r3,r5,r3
 40111d0:	280ad7fa 	srli	r5,r5,31
 40111d4:	3980120e 	bge	r7,r6,4011220 <__fixdfsi+0x68>
 40111d8:	00810744 	movi	r2,1053
 40111dc:	11800c16 	blt	r2,r6,4011210 <__fixdfsi+0x58>
 40111e0:	00810cc4 	movi	r2,1075
 40111e4:	1185c83a 	sub	r2,r2,r6
 40111e8:	01c007c4 	movi	r7,31
 40111ec:	18c00434 	orhi	r3,r3,16
 40111f0:	38800d16 	blt	r7,r2,4011228 <__fixdfsi+0x70>
 40111f4:	31befb44 	addi	r6,r6,-1043
 40111f8:	2084d83a 	srl	r2,r4,r2
 40111fc:	1986983a 	sll	r3,r3,r6
 4011200:	1884b03a 	or	r2,r3,r2
 4011204:	28000726 	beq	r5,zero,4011224 <__fixdfsi+0x6c>
 4011208:	0085c83a 	sub	r2,zero,r2
 401120c:	f800283a 	ret
 4011210:	00a00034 	movhi	r2,32768
 4011214:	10bfffc4 	addi	r2,r2,-1
 4011218:	2885883a 	add	r2,r5,r2
 401121c:	f800283a 	ret
 4011220:	0005883a 	mov	r2,zero
 4011224:	f800283a 	ret
 4011228:	008104c4 	movi	r2,1043
 401122c:	1185c83a 	sub	r2,r2,r6
 4011230:	1884d83a 	srl	r2,r3,r2
 4011234:	003ff306 	br	4011204 <__alt_data_end+0xfc011204>

04011238 <__floatsidf>:
 4011238:	defffd04 	addi	sp,sp,-12
 401123c:	dfc00215 	stw	ra,8(sp)
 4011240:	dc400115 	stw	r17,4(sp)
 4011244:	dc000015 	stw	r16,0(sp)
 4011248:	20002b26 	beq	r4,zero,40112f8 <__floatsidf+0xc0>
 401124c:	2023883a 	mov	r17,r4
 4011250:	2020d7fa 	srli	r16,r4,31
 4011254:	20002d16 	blt	r4,zero,401130c <__floatsidf+0xd4>
 4011258:	8809883a 	mov	r4,r17
 401125c:	40113bc0 	call	40113bc <__clzsi2>
 4011260:	01410784 	movi	r5,1054
 4011264:	288bc83a 	sub	r5,r5,r2
 4011268:	01010cc4 	movi	r4,1075
 401126c:	2149c83a 	sub	r4,r4,r5
 4011270:	00c007c4 	movi	r3,31
 4011274:	1900160e 	bge	r3,r4,40112d0 <__floatsidf+0x98>
 4011278:	00c104c4 	movi	r3,1043
 401127c:	1947c83a 	sub	r3,r3,r5
 4011280:	88c6983a 	sll	r3,r17,r3
 4011284:	00800434 	movhi	r2,16
 4011288:	10bfffc4 	addi	r2,r2,-1
 401128c:	1886703a 	and	r3,r3,r2
 4011290:	2941ffcc 	andi	r5,r5,2047
 4011294:	800d883a 	mov	r6,r16
 4011298:	0005883a 	mov	r2,zero
 401129c:	280a953a 	slli	r5,r5,20
 40112a0:	31803fcc 	andi	r6,r6,255
 40112a4:	01000434 	movhi	r4,16
 40112a8:	300c97fa 	slli	r6,r6,31
 40112ac:	213fffc4 	addi	r4,r4,-1
 40112b0:	1906703a 	and	r3,r3,r4
 40112b4:	1946b03a 	or	r3,r3,r5
 40112b8:	1986b03a 	or	r3,r3,r6
 40112bc:	dfc00217 	ldw	ra,8(sp)
 40112c0:	dc400117 	ldw	r17,4(sp)
 40112c4:	dc000017 	ldw	r16,0(sp)
 40112c8:	dec00304 	addi	sp,sp,12
 40112cc:	f800283a 	ret
 40112d0:	00c002c4 	movi	r3,11
 40112d4:	1887c83a 	sub	r3,r3,r2
 40112d8:	88c6d83a 	srl	r3,r17,r3
 40112dc:	8904983a 	sll	r2,r17,r4
 40112e0:	01000434 	movhi	r4,16
 40112e4:	213fffc4 	addi	r4,r4,-1
 40112e8:	2941ffcc 	andi	r5,r5,2047
 40112ec:	1906703a 	and	r3,r3,r4
 40112f0:	800d883a 	mov	r6,r16
 40112f4:	003fe906 	br	401129c <__alt_data_end+0xfc01129c>
 40112f8:	000d883a 	mov	r6,zero
 40112fc:	000b883a 	mov	r5,zero
 4011300:	0007883a 	mov	r3,zero
 4011304:	0005883a 	mov	r2,zero
 4011308:	003fe406 	br	401129c <__alt_data_end+0xfc01129c>
 401130c:	0123c83a 	sub	r17,zero,r4
 4011310:	003fd106 	br	4011258 <__alt_data_end+0xfc011258>

04011314 <__floatunsidf>:
 4011314:	defffe04 	addi	sp,sp,-8
 4011318:	dc000015 	stw	r16,0(sp)
 401131c:	dfc00115 	stw	ra,4(sp)
 4011320:	2021883a 	mov	r16,r4
 4011324:	20002226 	beq	r4,zero,40113b0 <__floatunsidf+0x9c>
 4011328:	40113bc0 	call	40113bc <__clzsi2>
 401132c:	01010784 	movi	r4,1054
 4011330:	2089c83a 	sub	r4,r4,r2
 4011334:	01810cc4 	movi	r6,1075
 4011338:	310dc83a 	sub	r6,r6,r4
 401133c:	00c007c4 	movi	r3,31
 4011340:	1980120e 	bge	r3,r6,401138c <__floatunsidf+0x78>
 4011344:	00c104c4 	movi	r3,1043
 4011348:	1907c83a 	sub	r3,r3,r4
 401134c:	80ca983a 	sll	r5,r16,r3
 4011350:	00800434 	movhi	r2,16
 4011354:	10bfffc4 	addi	r2,r2,-1
 4011358:	2101ffcc 	andi	r4,r4,2047
 401135c:	0021883a 	mov	r16,zero
 4011360:	288a703a 	and	r5,r5,r2
 4011364:	2008953a 	slli	r4,r4,20
 4011368:	00c00434 	movhi	r3,16
 401136c:	18ffffc4 	addi	r3,r3,-1
 4011370:	28c6703a 	and	r3,r5,r3
 4011374:	8005883a 	mov	r2,r16
 4011378:	1906b03a 	or	r3,r3,r4
 401137c:	dfc00117 	ldw	ra,4(sp)
 4011380:	dc000017 	ldw	r16,0(sp)
 4011384:	dec00204 	addi	sp,sp,8
 4011388:	f800283a 	ret
 401138c:	00c002c4 	movi	r3,11
 4011390:	188bc83a 	sub	r5,r3,r2
 4011394:	814ad83a 	srl	r5,r16,r5
 4011398:	00c00434 	movhi	r3,16
 401139c:	18ffffc4 	addi	r3,r3,-1
 40113a0:	81a0983a 	sll	r16,r16,r6
 40113a4:	2101ffcc 	andi	r4,r4,2047
 40113a8:	28ca703a 	and	r5,r5,r3
 40113ac:	003fed06 	br	4011364 <__alt_data_end+0xfc011364>
 40113b0:	0009883a 	mov	r4,zero
 40113b4:	000b883a 	mov	r5,zero
 40113b8:	003fea06 	br	4011364 <__alt_data_end+0xfc011364>

040113bc <__clzsi2>:
 40113bc:	00bfffd4 	movui	r2,65535
 40113c0:	11000536 	bltu	r2,r4,40113d8 <__clzsi2+0x1c>
 40113c4:	00803fc4 	movi	r2,255
 40113c8:	11000f36 	bltu	r2,r4,4011408 <__clzsi2+0x4c>
 40113cc:	00800804 	movi	r2,32
 40113d0:	0007883a 	mov	r3,zero
 40113d4:	00000506 	br	40113ec <__clzsi2+0x30>
 40113d8:	00804034 	movhi	r2,256
 40113dc:	10bfffc4 	addi	r2,r2,-1
 40113e0:	11000c2e 	bgeu	r2,r4,4011414 <__clzsi2+0x58>
 40113e4:	00800204 	movi	r2,8
 40113e8:	00c00604 	movi	r3,24
 40113ec:	20c8d83a 	srl	r4,r4,r3
 40113f0:	00c10074 	movhi	r3,1025
 40113f4:	18d9af04 	addi	r3,r3,26300
 40113f8:	1909883a 	add	r4,r3,r4
 40113fc:	20c00003 	ldbu	r3,0(r4)
 4011400:	10c5c83a 	sub	r2,r2,r3
 4011404:	f800283a 	ret
 4011408:	00800604 	movi	r2,24
 401140c:	00c00204 	movi	r3,8
 4011410:	003ff606 	br	40113ec <__alt_data_end+0xfc0113ec>
 4011414:	00800404 	movi	r2,16
 4011418:	1007883a 	mov	r3,r2
 401141c:	003ff306 	br	40113ec <__alt_data_end+0xfc0113ec>

04011420 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011420:	defffe04 	addi	sp,sp,-8
 4011424:	dfc00115 	stw	ra,4(sp)
 4011428:	df000015 	stw	fp,0(sp)
 401142c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4011430:	d0a00b17 	ldw	r2,-32724(gp)
 4011434:	10000326 	beq	r2,zero,4011444 <alt_get_errno+0x24>
 4011438:	d0a00b17 	ldw	r2,-32724(gp)
 401143c:	103ee83a 	callr	r2
 4011440:	00000106 	br	4011448 <alt_get_errno+0x28>
 4011444:	d0a71d04 	addi	r2,gp,-25484
}
 4011448:	e037883a 	mov	sp,fp
 401144c:	dfc00117 	ldw	ra,4(sp)
 4011450:	df000017 	ldw	fp,0(sp)
 4011454:	dec00204 	addi	sp,sp,8
 4011458:	f800283a 	ret

0401145c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 401145c:	defffb04 	addi	sp,sp,-20
 4011460:	dfc00415 	stw	ra,16(sp)
 4011464:	df000315 	stw	fp,12(sp)
 4011468:	df000304 	addi	fp,sp,12
 401146c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4011470:	e0bfff17 	ldw	r2,-4(fp)
 4011474:	10000816 	blt	r2,zero,4011498 <close+0x3c>
 4011478:	01400304 	movi	r5,12
 401147c:	e13fff17 	ldw	r4,-4(fp)
 4011480:	40044f40 	call	40044f4 <__mulsi3>
 4011484:	1007883a 	mov	r3,r2
 4011488:	00810074 	movhi	r2,1025
 401148c:	109cc104 	addi	r2,r2,29444
 4011490:	1885883a 	add	r2,r3,r2
 4011494:	00000106 	br	401149c <close+0x40>
 4011498:	0005883a 	mov	r2,zero
 401149c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 40114a0:	e0bffd17 	ldw	r2,-12(fp)
 40114a4:	10001926 	beq	r2,zero,401150c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 40114a8:	e0bffd17 	ldw	r2,-12(fp)
 40114ac:	10800017 	ldw	r2,0(r2)
 40114b0:	10800417 	ldw	r2,16(r2)
 40114b4:	10000626 	beq	r2,zero,40114d0 <close+0x74>
 40114b8:	e0bffd17 	ldw	r2,-12(fp)
 40114bc:	10800017 	ldw	r2,0(r2)
 40114c0:	10800417 	ldw	r2,16(r2)
 40114c4:	e13ffd17 	ldw	r4,-12(fp)
 40114c8:	103ee83a 	callr	r2
 40114cc:	00000106 	br	40114d4 <close+0x78>
 40114d0:	0005883a 	mov	r2,zero
 40114d4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 40114d8:	e13fff17 	ldw	r4,-4(fp)
 40114dc:	4011b440 	call	4011b44 <alt_release_fd>
    if (rval < 0)
 40114e0:	e0bffe17 	ldw	r2,-8(fp)
 40114e4:	1000070e 	bge	r2,zero,4011504 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 40114e8:	40114200 	call	4011420 <alt_get_errno>
 40114ec:	1007883a 	mov	r3,r2
 40114f0:	e0bffe17 	ldw	r2,-8(fp)
 40114f4:	0085c83a 	sub	r2,zero,r2
 40114f8:	18800015 	stw	r2,0(r3)
      return -1;
 40114fc:	00bfffc4 	movi	r2,-1
 4011500:	00000706 	br	4011520 <close+0xc4>
    }
    return 0;
 4011504:	0005883a 	mov	r2,zero
 4011508:	00000506 	br	4011520 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401150c:	40114200 	call	4011420 <alt_get_errno>
 4011510:	1007883a 	mov	r3,r2
 4011514:	00801444 	movi	r2,81
 4011518:	18800015 	stw	r2,0(r3)
    return -1;
 401151c:	00bfffc4 	movi	r2,-1
  }
}
 4011520:	e037883a 	mov	sp,fp
 4011524:	dfc00117 	ldw	ra,4(sp)
 4011528:	df000017 	ldw	fp,0(sp)
 401152c:	dec00204 	addi	sp,sp,8
 4011530:	f800283a 	ret

04011534 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4011534:	defffc04 	addi	sp,sp,-16
 4011538:	df000315 	stw	fp,12(sp)
 401153c:	df000304 	addi	fp,sp,12
 4011540:	e13ffd15 	stw	r4,-12(fp)
 4011544:	e17ffe15 	stw	r5,-8(fp)
 4011548:	e1bfff15 	stw	r6,-4(fp)
  return len;
 401154c:	e0bfff17 	ldw	r2,-4(fp)
}
 4011550:	e037883a 	mov	sp,fp
 4011554:	df000017 	ldw	fp,0(sp)
 4011558:	dec00104 	addi	sp,sp,4
 401155c:	f800283a 	ret

04011560 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011560:	defffe04 	addi	sp,sp,-8
 4011564:	dfc00115 	stw	ra,4(sp)
 4011568:	df000015 	stw	fp,0(sp)
 401156c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4011570:	d0a00b17 	ldw	r2,-32724(gp)
 4011574:	10000326 	beq	r2,zero,4011584 <alt_get_errno+0x24>
 4011578:	d0a00b17 	ldw	r2,-32724(gp)
 401157c:	103ee83a 	callr	r2
 4011580:	00000106 	br	4011588 <alt_get_errno+0x28>
 4011584:	d0a71d04 	addi	r2,gp,-25484
}
 4011588:	e037883a 	mov	sp,fp
 401158c:	dfc00117 	ldw	ra,4(sp)
 4011590:	df000017 	ldw	fp,0(sp)
 4011594:	dec00204 	addi	sp,sp,8
 4011598:	f800283a 	ret

0401159c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 401159c:	defffb04 	addi	sp,sp,-20
 40115a0:	dfc00415 	stw	ra,16(sp)
 40115a4:	df000315 	stw	fp,12(sp)
 40115a8:	df000304 	addi	fp,sp,12
 40115ac:	e13ffe15 	stw	r4,-8(fp)
 40115b0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40115b4:	e0bffe17 	ldw	r2,-8(fp)
 40115b8:	10000816 	blt	r2,zero,40115dc <fstat+0x40>
 40115bc:	01400304 	movi	r5,12
 40115c0:	e13ffe17 	ldw	r4,-8(fp)
 40115c4:	40044f40 	call	40044f4 <__mulsi3>
 40115c8:	1007883a 	mov	r3,r2
 40115cc:	00810074 	movhi	r2,1025
 40115d0:	109cc104 	addi	r2,r2,29444
 40115d4:	1885883a 	add	r2,r3,r2
 40115d8:	00000106 	br	40115e0 <fstat+0x44>
 40115dc:	0005883a 	mov	r2,zero
 40115e0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 40115e4:	e0bffd17 	ldw	r2,-12(fp)
 40115e8:	10001026 	beq	r2,zero,401162c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 40115ec:	e0bffd17 	ldw	r2,-12(fp)
 40115f0:	10800017 	ldw	r2,0(r2)
 40115f4:	10800817 	ldw	r2,32(r2)
 40115f8:	10000726 	beq	r2,zero,4011618 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 40115fc:	e0bffd17 	ldw	r2,-12(fp)
 4011600:	10800017 	ldw	r2,0(r2)
 4011604:	10800817 	ldw	r2,32(r2)
 4011608:	e17fff17 	ldw	r5,-4(fp)
 401160c:	e13ffd17 	ldw	r4,-12(fp)
 4011610:	103ee83a 	callr	r2
 4011614:	00000a06 	br	4011640 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4011618:	e0bfff17 	ldw	r2,-4(fp)
 401161c:	00c80004 	movi	r3,8192
 4011620:	10c00115 	stw	r3,4(r2)
      return 0;
 4011624:	0005883a 	mov	r2,zero
 4011628:	00000506 	br	4011640 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401162c:	40115600 	call	4011560 <alt_get_errno>
 4011630:	1007883a 	mov	r3,r2
 4011634:	00801444 	movi	r2,81
 4011638:	18800015 	stw	r2,0(r3)
    return -1;
 401163c:	00bfffc4 	movi	r2,-1
  }
}
 4011640:	e037883a 	mov	sp,fp
 4011644:	dfc00117 	ldw	ra,4(sp)
 4011648:	df000017 	ldw	fp,0(sp)
 401164c:	dec00204 	addi	sp,sp,8
 4011650:	f800283a 	ret

04011654 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011654:	defffe04 	addi	sp,sp,-8
 4011658:	dfc00115 	stw	ra,4(sp)
 401165c:	df000015 	stw	fp,0(sp)
 4011660:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4011664:	d0a00b17 	ldw	r2,-32724(gp)
 4011668:	10000326 	beq	r2,zero,4011678 <alt_get_errno+0x24>
 401166c:	d0a00b17 	ldw	r2,-32724(gp)
 4011670:	103ee83a 	callr	r2
 4011674:	00000106 	br	401167c <alt_get_errno+0x28>
 4011678:	d0a71d04 	addi	r2,gp,-25484
}
 401167c:	e037883a 	mov	sp,fp
 4011680:	dfc00117 	ldw	ra,4(sp)
 4011684:	df000017 	ldw	fp,0(sp)
 4011688:	dec00204 	addi	sp,sp,8
 401168c:	f800283a 	ret

04011690 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4011690:	deffed04 	addi	sp,sp,-76
 4011694:	dfc01215 	stw	ra,72(sp)
 4011698:	df001115 	stw	fp,68(sp)
 401169c:	df001104 	addi	fp,sp,68
 40116a0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40116a4:	e0bfff17 	ldw	r2,-4(fp)
 40116a8:	10000816 	blt	r2,zero,40116cc <isatty+0x3c>
 40116ac:	01400304 	movi	r5,12
 40116b0:	e13fff17 	ldw	r4,-4(fp)
 40116b4:	40044f40 	call	40044f4 <__mulsi3>
 40116b8:	1007883a 	mov	r3,r2
 40116bc:	00810074 	movhi	r2,1025
 40116c0:	109cc104 	addi	r2,r2,29444
 40116c4:	1885883a 	add	r2,r3,r2
 40116c8:	00000106 	br	40116d0 <isatty+0x40>
 40116cc:	0005883a 	mov	r2,zero
 40116d0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 40116d4:	e0bfef17 	ldw	r2,-68(fp)
 40116d8:	10000e26 	beq	r2,zero,4011714 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 40116dc:	e0bfef17 	ldw	r2,-68(fp)
 40116e0:	10800017 	ldw	r2,0(r2)
 40116e4:	10800817 	ldw	r2,32(r2)
 40116e8:	1000021e 	bne	r2,zero,40116f4 <isatty+0x64>
    {
      return 1;
 40116ec:	00800044 	movi	r2,1
 40116f0:	00000d06 	br	4011728 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 40116f4:	e0bff004 	addi	r2,fp,-64
 40116f8:	100b883a 	mov	r5,r2
 40116fc:	e13fff17 	ldw	r4,-4(fp)
 4011700:	401159c0 	call	401159c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4011704:	e0bff117 	ldw	r2,-60(fp)
 4011708:	10880020 	cmpeqi	r2,r2,8192
 401170c:	10803fcc 	andi	r2,r2,255
 4011710:	00000506 	br	4011728 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4011714:	40116540 	call	4011654 <alt_get_errno>
 4011718:	1007883a 	mov	r3,r2
 401171c:	00801444 	movi	r2,81
 4011720:	18800015 	stw	r2,0(r3)
    return 0;
 4011724:	0005883a 	mov	r2,zero
  }
}
 4011728:	e037883a 	mov	sp,fp
 401172c:	dfc00117 	ldw	ra,4(sp)
 4011730:	df000017 	ldw	fp,0(sp)
 4011734:	dec00204 	addi	sp,sp,8
 4011738:	f800283a 	ret

0401173c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 401173c:	defffc04 	addi	sp,sp,-16
 4011740:	df000315 	stw	fp,12(sp)
 4011744:	df000304 	addi	fp,sp,12
 4011748:	e13ffd15 	stw	r4,-12(fp)
 401174c:	e17ffe15 	stw	r5,-8(fp)
 4011750:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4011754:	e0fffe17 	ldw	r3,-8(fp)
 4011758:	e0bffd17 	ldw	r2,-12(fp)
 401175c:	18800c26 	beq	r3,r2,4011790 <alt_load_section+0x54>
  {
    while( to != end )
 4011760:	00000806 	br	4011784 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4011764:	e0bffe17 	ldw	r2,-8(fp)
 4011768:	10c00104 	addi	r3,r2,4
 401176c:	e0fffe15 	stw	r3,-8(fp)
 4011770:	e0fffd17 	ldw	r3,-12(fp)
 4011774:	19000104 	addi	r4,r3,4
 4011778:	e13ffd15 	stw	r4,-12(fp)
 401177c:	18c00017 	ldw	r3,0(r3)
 4011780:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4011784:	e0fffe17 	ldw	r3,-8(fp)
 4011788:	e0bfff17 	ldw	r2,-4(fp)
 401178c:	18bff51e 	bne	r3,r2,4011764 <__alt_data_end+0xfc011764>
    {
      *to++ = *from++;
    }
  }
}
 4011790:	0001883a 	nop
 4011794:	e037883a 	mov	sp,fp
 4011798:	df000017 	ldw	fp,0(sp)
 401179c:	dec00104 	addi	sp,sp,4
 40117a0:	f800283a 	ret

040117a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40117a4:	defffe04 	addi	sp,sp,-8
 40117a8:	dfc00115 	stw	ra,4(sp)
 40117ac:	df000015 	stw	fp,0(sp)
 40117b0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 40117b4:	018100b4 	movhi	r6,1026
 40117b8:	31a18404 	addi	r6,r6,-31216
 40117bc:	01410074 	movhi	r5,1025
 40117c0:	295a8e04 	addi	r5,r5,27192
 40117c4:	010100b4 	movhi	r4,1026
 40117c8:	21218404 	addi	r4,r4,-31216
 40117cc:	401173c0 	call	401173c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 40117d0:	01810034 	movhi	r6,1024
 40117d4:	31808c04 	addi	r6,r6,560
 40117d8:	01410034 	movhi	r5,1024
 40117dc:	29400804 	addi	r5,r5,32
 40117e0:	01010034 	movhi	r4,1024
 40117e4:	21000804 	addi	r4,r4,32
 40117e8:	401173c0 	call	401173c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 40117ec:	01810074 	movhi	r6,1025
 40117f0:	319a8e04 	addi	r6,r6,27192
 40117f4:	01410074 	movhi	r5,1025
 40117f8:	2958ea04 	addi	r5,r5,25512
 40117fc:	01010074 	movhi	r4,1025
 4011800:	2118ea04 	addi	r4,r4,25512
 4011804:	401173c0 	call	401173c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4011808:	40150080 	call	4015008 <alt_dcache_flush_all>
  alt_icache_flush_all();
 401180c:	40152d80 	call	40152d8 <alt_icache_flush_all>
}
 4011810:	0001883a 	nop
 4011814:	e037883a 	mov	sp,fp
 4011818:	dfc00117 	ldw	ra,4(sp)
 401181c:	df000017 	ldw	fp,0(sp)
 4011820:	dec00204 	addi	sp,sp,8
 4011824:	f800283a 	ret

04011828 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011828:	defffe04 	addi	sp,sp,-8
 401182c:	dfc00115 	stw	ra,4(sp)
 4011830:	df000015 	stw	fp,0(sp)
 4011834:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4011838:	d0a00b17 	ldw	r2,-32724(gp)
 401183c:	10000326 	beq	r2,zero,401184c <alt_get_errno+0x24>
 4011840:	d0a00b17 	ldw	r2,-32724(gp)
 4011844:	103ee83a 	callr	r2
 4011848:	00000106 	br	4011850 <alt_get_errno+0x28>
 401184c:	d0a71d04 	addi	r2,gp,-25484
}
 4011850:	e037883a 	mov	sp,fp
 4011854:	dfc00117 	ldw	ra,4(sp)
 4011858:	df000017 	ldw	fp,0(sp)
 401185c:	dec00204 	addi	sp,sp,8
 4011860:	f800283a 	ret

04011864 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4011864:	defff904 	addi	sp,sp,-28
 4011868:	dfc00615 	stw	ra,24(sp)
 401186c:	df000515 	stw	fp,20(sp)
 4011870:	df000504 	addi	fp,sp,20
 4011874:	e13ffd15 	stw	r4,-12(fp)
 4011878:	e17ffe15 	stw	r5,-8(fp)
 401187c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4011880:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4011884:	e0bffd17 	ldw	r2,-12(fp)
 4011888:	10000816 	blt	r2,zero,40118ac <lseek+0x48>
 401188c:	01400304 	movi	r5,12
 4011890:	e13ffd17 	ldw	r4,-12(fp)
 4011894:	40044f40 	call	40044f4 <__mulsi3>
 4011898:	1007883a 	mov	r3,r2
 401189c:	00810074 	movhi	r2,1025
 40118a0:	109cc104 	addi	r2,r2,29444
 40118a4:	1885883a 	add	r2,r3,r2
 40118a8:	00000106 	br	40118b0 <lseek+0x4c>
 40118ac:	0005883a 	mov	r2,zero
 40118b0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 40118b4:	e0bffc17 	ldw	r2,-16(fp)
 40118b8:	10001026 	beq	r2,zero,40118fc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 40118bc:	e0bffc17 	ldw	r2,-16(fp)
 40118c0:	10800017 	ldw	r2,0(r2)
 40118c4:	10800717 	ldw	r2,28(r2)
 40118c8:	10000926 	beq	r2,zero,40118f0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 40118cc:	e0bffc17 	ldw	r2,-16(fp)
 40118d0:	10800017 	ldw	r2,0(r2)
 40118d4:	10800717 	ldw	r2,28(r2)
 40118d8:	e1bfff17 	ldw	r6,-4(fp)
 40118dc:	e17ffe17 	ldw	r5,-8(fp)
 40118e0:	e13ffc17 	ldw	r4,-16(fp)
 40118e4:	103ee83a 	callr	r2
 40118e8:	e0bffb15 	stw	r2,-20(fp)
 40118ec:	00000506 	br	4011904 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 40118f0:	00bfde84 	movi	r2,-134
 40118f4:	e0bffb15 	stw	r2,-20(fp)
 40118f8:	00000206 	br	4011904 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 40118fc:	00bfebc4 	movi	r2,-81
 4011900:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 4011904:	e0bffb17 	ldw	r2,-20(fp)
 4011908:	1000070e 	bge	r2,zero,4011928 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 401190c:	40118280 	call	4011828 <alt_get_errno>
 4011910:	1007883a 	mov	r3,r2
 4011914:	e0bffb17 	ldw	r2,-20(fp)
 4011918:	0085c83a 	sub	r2,zero,r2
 401191c:	18800015 	stw	r2,0(r3)
    rc = -1;
 4011920:	00bfffc4 	movi	r2,-1
 4011924:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 4011928:	e0bffb17 	ldw	r2,-20(fp)
}
 401192c:	e037883a 	mov	sp,fp
 4011930:	dfc00117 	ldw	ra,4(sp)
 4011934:	df000017 	ldw	fp,0(sp)
 4011938:	dec00204 	addi	sp,sp,8
 401193c:	f800283a 	ret

04011940 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4011940:	defffd04 	addi	sp,sp,-12
 4011944:	dfc00215 	stw	ra,8(sp)
 4011948:	df000115 	stw	fp,4(sp)
 401194c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4011950:	0009883a 	mov	r4,zero
 4011954:	4011e180 	call	4011e18 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4011958:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 401195c:	4011e500 	call	4011e50 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4011960:	01810074 	movhi	r6,1025
 4011964:	3199f204 	addi	r6,r6,26568
 4011968:	01410074 	movhi	r5,1025
 401196c:	2959f204 	addi	r5,r5,26568
 4011970:	01010074 	movhi	r4,1025
 4011974:	2119f204 	addi	r4,r4,26568
 4011978:	401567c0 	call	401567c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 401197c:	40151080 	call	4015108 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4011980:	01010074 	movhi	r4,1025
 4011984:	21145a04 	addi	r4,r4,20840
 4011988:	40160140 	call	4016014 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 401198c:	d0a72117 	ldw	r2,-25468(gp)
 4011990:	d0e72217 	ldw	r3,-25464(gp)
 4011994:	d1272317 	ldw	r4,-25460(gp)
 4011998:	200d883a 	mov	r6,r4
 401199c:	180b883a 	mov	r5,r3
 40119a0:	1009883a 	mov	r4,r2
 40119a4:	40018800 	call	4001880 <main>
 40119a8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 40119ac:	01000044 	movi	r4,1
 40119b0:	401145c0 	call	401145c <close>
  exit (result);
 40119b4:	e13fff17 	ldw	r4,-4(fp)
 40119b8:	40160280 	call	4016028 <exit>

040119bc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 40119bc:	defffe04 	addi	sp,sp,-8
 40119c0:	df000115 	stw	fp,4(sp)
 40119c4:	df000104 	addi	fp,sp,4
 40119c8:	e13fff15 	stw	r4,-4(fp)
}
 40119cc:	0001883a 	nop
 40119d0:	e037883a 	mov	sp,fp
 40119d4:	df000017 	ldw	fp,0(sp)
 40119d8:	dec00104 	addi	sp,sp,4
 40119dc:	f800283a 	ret

040119e0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 40119e0:	defffe04 	addi	sp,sp,-8
 40119e4:	df000115 	stw	fp,4(sp)
 40119e8:	df000104 	addi	fp,sp,4
 40119ec:	e13fff15 	stw	r4,-4(fp)
}
 40119f0:	0001883a 	nop
 40119f4:	e037883a 	mov	sp,fp
 40119f8:	df000017 	ldw	fp,0(sp)
 40119fc:	dec00104 	addi	sp,sp,4
 4011a00:	f800283a 	ret

04011a04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011a04:	defffe04 	addi	sp,sp,-8
 4011a08:	dfc00115 	stw	ra,4(sp)
 4011a0c:	df000015 	stw	fp,0(sp)
 4011a10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4011a14:	d0a00b17 	ldw	r2,-32724(gp)
 4011a18:	10000326 	beq	r2,zero,4011a28 <alt_get_errno+0x24>
 4011a1c:	d0a00b17 	ldw	r2,-32724(gp)
 4011a20:	103ee83a 	callr	r2
 4011a24:	00000106 	br	4011a2c <alt_get_errno+0x28>
 4011a28:	d0a71d04 	addi	r2,gp,-25484
}
 4011a2c:	e037883a 	mov	sp,fp
 4011a30:	dfc00117 	ldw	ra,4(sp)
 4011a34:	df000017 	ldw	fp,0(sp)
 4011a38:	dec00204 	addi	sp,sp,8
 4011a3c:	f800283a 	ret

04011a40 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4011a40:	defff904 	addi	sp,sp,-28
 4011a44:	dfc00615 	stw	ra,24(sp)
 4011a48:	df000515 	stw	fp,20(sp)
 4011a4c:	df000504 	addi	fp,sp,20
 4011a50:	e13ffd15 	stw	r4,-12(fp)
 4011a54:	e17ffe15 	stw	r5,-8(fp)
 4011a58:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4011a5c:	e0bffd17 	ldw	r2,-12(fp)
 4011a60:	10000816 	blt	r2,zero,4011a84 <read+0x44>
 4011a64:	01400304 	movi	r5,12
 4011a68:	e13ffd17 	ldw	r4,-12(fp)
 4011a6c:	40044f40 	call	40044f4 <__mulsi3>
 4011a70:	1007883a 	mov	r3,r2
 4011a74:	00810074 	movhi	r2,1025
 4011a78:	109cc104 	addi	r2,r2,29444
 4011a7c:	1885883a 	add	r2,r3,r2
 4011a80:	00000106 	br	4011a88 <read+0x48>
 4011a84:	0005883a 	mov	r2,zero
 4011a88:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4011a8c:	e0bffb17 	ldw	r2,-20(fp)
 4011a90:	10002226 	beq	r2,zero,4011b1c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4011a94:	e0bffb17 	ldw	r2,-20(fp)
 4011a98:	10800217 	ldw	r2,8(r2)
 4011a9c:	108000cc 	andi	r2,r2,3
 4011aa0:	10800060 	cmpeqi	r2,r2,1
 4011aa4:	1000181e 	bne	r2,zero,4011b08 <read+0xc8>
        (fd->dev->read))
 4011aa8:	e0bffb17 	ldw	r2,-20(fp)
 4011aac:	10800017 	ldw	r2,0(r2)
 4011ab0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4011ab4:	10001426 	beq	r2,zero,4011b08 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4011ab8:	e0bffb17 	ldw	r2,-20(fp)
 4011abc:	10800017 	ldw	r2,0(r2)
 4011ac0:	10800517 	ldw	r2,20(r2)
 4011ac4:	e0ffff17 	ldw	r3,-4(fp)
 4011ac8:	180d883a 	mov	r6,r3
 4011acc:	e17ffe17 	ldw	r5,-8(fp)
 4011ad0:	e13ffb17 	ldw	r4,-20(fp)
 4011ad4:	103ee83a 	callr	r2
 4011ad8:	e0bffc15 	stw	r2,-16(fp)
 4011adc:	e0bffc17 	ldw	r2,-16(fp)
 4011ae0:	1000070e 	bge	r2,zero,4011b00 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 4011ae4:	4011a040 	call	4011a04 <alt_get_errno>
 4011ae8:	1007883a 	mov	r3,r2
 4011aec:	e0bffc17 	ldw	r2,-16(fp)
 4011af0:	0085c83a 	sub	r2,zero,r2
 4011af4:	18800015 	stw	r2,0(r3)
          return -1;
 4011af8:	00bfffc4 	movi	r2,-1
 4011afc:	00000c06 	br	4011b30 <read+0xf0>
        }
        return rval;
 4011b00:	e0bffc17 	ldw	r2,-16(fp)
 4011b04:	00000a06 	br	4011b30 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4011b08:	4011a040 	call	4011a04 <alt_get_errno>
 4011b0c:	1007883a 	mov	r3,r2
 4011b10:	00800344 	movi	r2,13
 4011b14:	18800015 	stw	r2,0(r3)
 4011b18:	00000406 	br	4011b2c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4011b1c:	4011a040 	call	4011a04 <alt_get_errno>
 4011b20:	1007883a 	mov	r3,r2
 4011b24:	00801444 	movi	r2,81
 4011b28:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4011b2c:	00bfffc4 	movi	r2,-1
}
 4011b30:	e037883a 	mov	sp,fp
 4011b34:	dfc00117 	ldw	ra,4(sp)
 4011b38:	df000017 	ldw	fp,0(sp)
 4011b3c:	dec00204 	addi	sp,sp,8
 4011b40:	f800283a 	ret

04011b44 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4011b44:	defffc04 	addi	sp,sp,-16
 4011b48:	dfc00315 	stw	ra,12(sp)
 4011b4c:	df000215 	stw	fp,8(sp)
 4011b50:	dc000115 	stw	r16,4(sp)
 4011b54:	df000204 	addi	fp,sp,8
 4011b58:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 4011b5c:	e0bffe17 	ldw	r2,-8(fp)
 4011b60:	108000d0 	cmplti	r2,r2,3
 4011b64:	1000111e 	bne	r2,zero,4011bac <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 4011b68:	04010074 	movhi	r16,1025
 4011b6c:	841cc104 	addi	r16,r16,29444
 4011b70:	e0bffe17 	ldw	r2,-8(fp)
 4011b74:	01400304 	movi	r5,12
 4011b78:	1009883a 	mov	r4,r2
 4011b7c:	40044f40 	call	40044f4 <__mulsi3>
 4011b80:	8085883a 	add	r2,r16,r2
 4011b84:	10800204 	addi	r2,r2,8
 4011b88:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4011b8c:	04010074 	movhi	r16,1025
 4011b90:	841cc104 	addi	r16,r16,29444
 4011b94:	e0bffe17 	ldw	r2,-8(fp)
 4011b98:	01400304 	movi	r5,12
 4011b9c:	1009883a 	mov	r4,r2
 4011ba0:	40044f40 	call	40044f4 <__mulsi3>
 4011ba4:	8085883a 	add	r2,r16,r2
 4011ba8:	10000015 	stw	zero,0(r2)
  }
}
 4011bac:	0001883a 	nop
 4011bb0:	e6ffff04 	addi	sp,fp,-4
 4011bb4:	dfc00217 	ldw	ra,8(sp)
 4011bb8:	df000117 	ldw	fp,4(sp)
 4011bbc:	dc000017 	ldw	r16,0(sp)
 4011bc0:	dec00304 	addi	sp,sp,12
 4011bc4:	f800283a 	ret

04011bc8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4011bc8:	defff904 	addi	sp,sp,-28
 4011bcc:	df000615 	stw	fp,24(sp)
 4011bd0:	df000604 	addi	fp,sp,24
 4011bd4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011bd8:	0005303a 	rdctl	r2,status
 4011bdc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011be0:	e0fffe17 	ldw	r3,-8(fp)
 4011be4:	00bfff84 	movi	r2,-2
 4011be8:	1884703a 	and	r2,r3,r2
 4011bec:	1001703a 	wrctl	status,r2
  
  return context;
 4011bf0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4011bf4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4011bf8:	d0a00c17 	ldw	r2,-32720(gp)
 4011bfc:	10c000c4 	addi	r3,r2,3
 4011c00:	00bfff04 	movi	r2,-4
 4011c04:	1884703a 	and	r2,r3,r2
 4011c08:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4011c0c:	d0e00c17 	ldw	r3,-32720(gp)
 4011c10:	e0bfff17 	ldw	r2,-4(fp)
 4011c14:	1887883a 	add	r3,r3,r2
 4011c18:	00820034 	movhi	r2,2048
 4011c1c:	10800004 	addi	r2,r2,0
 4011c20:	10c0062e 	bgeu	r2,r3,4011c3c <sbrk+0x74>
 4011c24:	e0bffb17 	ldw	r2,-20(fp)
 4011c28:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011c2c:	e0bffa17 	ldw	r2,-24(fp)
 4011c30:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4011c34:	00bfffc4 	movi	r2,-1
 4011c38:	00000b06 	br	4011c68 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4011c3c:	d0a00c17 	ldw	r2,-32720(gp)
 4011c40:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4011c44:	d0e00c17 	ldw	r3,-32720(gp)
 4011c48:	e0bfff17 	ldw	r2,-4(fp)
 4011c4c:	1885883a 	add	r2,r3,r2
 4011c50:	d0a00c15 	stw	r2,-32720(gp)
 4011c54:	e0bffb17 	ldw	r2,-20(fp)
 4011c58:	e0bffc15 	stw	r2,-16(fp)
 4011c5c:	e0bffc17 	ldw	r2,-16(fp)
 4011c60:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4011c64:	e0bffd17 	ldw	r2,-12(fp)
} 
 4011c68:	e037883a 	mov	sp,fp
 4011c6c:	df000017 	ldw	fp,0(sp)
 4011c70:	dec00104 	addi	sp,sp,4
 4011c74:	f800283a 	ret

04011c78 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4011c78:	defffd04 	addi	sp,sp,-12
 4011c7c:	dfc00215 	stw	ra,8(sp)
 4011c80:	df000115 	stw	fp,4(sp)
 4011c84:	df000104 	addi	fp,sp,4
 4011c88:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4011c8c:	e13fff17 	ldw	r4,-4(fp)
 4011c90:	4014e880 	call	4014e88 <alt_busy_sleep>
}
 4011c94:	e037883a 	mov	sp,fp
 4011c98:	dfc00117 	ldw	ra,4(sp)
 4011c9c:	df000017 	ldw	fp,0(sp)
 4011ca0:	dec00204 	addi	sp,sp,8
 4011ca4:	f800283a 	ret

04011ca8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011ca8:	defffe04 	addi	sp,sp,-8
 4011cac:	dfc00115 	stw	ra,4(sp)
 4011cb0:	df000015 	stw	fp,0(sp)
 4011cb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4011cb8:	d0a00b17 	ldw	r2,-32724(gp)
 4011cbc:	10000326 	beq	r2,zero,4011ccc <alt_get_errno+0x24>
 4011cc0:	d0a00b17 	ldw	r2,-32724(gp)
 4011cc4:	103ee83a 	callr	r2
 4011cc8:	00000106 	br	4011cd0 <alt_get_errno+0x28>
 4011ccc:	d0a71d04 	addi	r2,gp,-25484
}
 4011cd0:	e037883a 	mov	sp,fp
 4011cd4:	dfc00117 	ldw	ra,4(sp)
 4011cd8:	df000017 	ldw	fp,0(sp)
 4011cdc:	dec00204 	addi	sp,sp,8
 4011ce0:	f800283a 	ret

04011ce4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4011ce4:	defff904 	addi	sp,sp,-28
 4011ce8:	dfc00615 	stw	ra,24(sp)
 4011cec:	df000515 	stw	fp,20(sp)
 4011cf0:	df000504 	addi	fp,sp,20
 4011cf4:	e13ffd15 	stw	r4,-12(fp)
 4011cf8:	e17ffe15 	stw	r5,-8(fp)
 4011cfc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4011d00:	e0bffd17 	ldw	r2,-12(fp)
 4011d04:	10000816 	blt	r2,zero,4011d28 <write+0x44>
 4011d08:	01400304 	movi	r5,12
 4011d0c:	e13ffd17 	ldw	r4,-12(fp)
 4011d10:	40044f40 	call	40044f4 <__mulsi3>
 4011d14:	1007883a 	mov	r3,r2
 4011d18:	00810074 	movhi	r2,1025
 4011d1c:	109cc104 	addi	r2,r2,29444
 4011d20:	1885883a 	add	r2,r3,r2
 4011d24:	00000106 	br	4011d2c <write+0x48>
 4011d28:	0005883a 	mov	r2,zero
 4011d2c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4011d30:	e0bffb17 	ldw	r2,-20(fp)
 4011d34:	10002126 	beq	r2,zero,4011dbc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4011d38:	e0bffb17 	ldw	r2,-20(fp)
 4011d3c:	10800217 	ldw	r2,8(r2)
 4011d40:	108000cc 	andi	r2,r2,3
 4011d44:	10001826 	beq	r2,zero,4011da8 <write+0xc4>
 4011d48:	e0bffb17 	ldw	r2,-20(fp)
 4011d4c:	10800017 	ldw	r2,0(r2)
 4011d50:	10800617 	ldw	r2,24(r2)
 4011d54:	10001426 	beq	r2,zero,4011da8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4011d58:	e0bffb17 	ldw	r2,-20(fp)
 4011d5c:	10800017 	ldw	r2,0(r2)
 4011d60:	10800617 	ldw	r2,24(r2)
 4011d64:	e0ffff17 	ldw	r3,-4(fp)
 4011d68:	180d883a 	mov	r6,r3
 4011d6c:	e17ffe17 	ldw	r5,-8(fp)
 4011d70:	e13ffb17 	ldw	r4,-20(fp)
 4011d74:	103ee83a 	callr	r2
 4011d78:	e0bffc15 	stw	r2,-16(fp)
 4011d7c:	e0bffc17 	ldw	r2,-16(fp)
 4011d80:	1000070e 	bge	r2,zero,4011da0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 4011d84:	4011ca80 	call	4011ca8 <alt_get_errno>
 4011d88:	1007883a 	mov	r3,r2
 4011d8c:	e0bffc17 	ldw	r2,-16(fp)
 4011d90:	0085c83a 	sub	r2,zero,r2
 4011d94:	18800015 	stw	r2,0(r3)
        return -1;
 4011d98:	00bfffc4 	movi	r2,-1
 4011d9c:	00000c06 	br	4011dd0 <write+0xec>
      }
      return rval;
 4011da0:	e0bffc17 	ldw	r2,-16(fp)
 4011da4:	00000a06 	br	4011dd0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4011da8:	4011ca80 	call	4011ca8 <alt_get_errno>
 4011dac:	1007883a 	mov	r3,r2
 4011db0:	00800344 	movi	r2,13
 4011db4:	18800015 	stw	r2,0(r3)
 4011db8:	00000406 	br	4011dcc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4011dbc:	4011ca80 	call	4011ca8 <alt_get_errno>
 4011dc0:	1007883a 	mov	r3,r2
 4011dc4:	00801444 	movi	r2,81
 4011dc8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4011dcc:	00bfffc4 	movi	r2,-1
}
 4011dd0:	e037883a 	mov	sp,fp
 4011dd4:	dfc00117 	ldw	ra,4(sp)
 4011dd8:	df000017 	ldw	fp,0(sp)
 4011ddc:	dec00204 	addi	sp,sp,8
 4011de0:	f800283a 	ret

04011de4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4011de4:	defffd04 	addi	sp,sp,-12
 4011de8:	dfc00215 	stw	ra,8(sp)
 4011dec:	df000115 	stw	fp,4(sp)
 4011df0:	df000104 	addi	fp,sp,4
 4011df4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4011df8:	d1600804 	addi	r5,gp,-32736
 4011dfc:	e13fff17 	ldw	r4,-4(fp)
 4011e00:	40150640 	call	4015064 <alt_dev_llist_insert>
}
 4011e04:	e037883a 	mov	sp,fp
 4011e08:	dfc00117 	ldw	ra,4(sp)
 4011e0c:	df000017 	ldw	fp,0(sp)
 4011e10:	dec00204 	addi	sp,sp,8
 4011e14:	f800283a 	ret

04011e18 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4011e18:	defffd04 	addi	sp,sp,-12
 4011e1c:	dfc00215 	stw	ra,8(sp)
 4011e20:	df000115 	stw	fp,4(sp)
 4011e24:	df000104 	addi	fp,sp,4
 4011e28:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 4011e2c:	4015d880 	call	4015d88 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4011e30:	00800044 	movi	r2,1
 4011e34:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4011e38:	0001883a 	nop
 4011e3c:	e037883a 	mov	sp,fp
 4011e40:	dfc00117 	ldw	ra,4(sp)
 4011e44:	df000017 	ldw	fp,0(sp)
 4011e48:	dec00204 	addi	sp,sp,8
 4011e4c:	f800283a 	ret

04011e50 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4011e50:	defffe04 	addi	sp,sp,-8
 4011e54:	dfc00115 	stw	ra,4(sp)
 4011e58:	df000015 	stw	fp,0(sp)
 4011e5c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 4011e60:	018000c4 	movi	r6,3
 4011e64:	000b883a 	mov	r5,zero
 4011e68:	01010074 	movhi	r4,1025
 4011e6c:	211d2e04 	addi	r4,r4,29880
 4011e70:	40120340 	call	4012034 <altera_avalon_jtag_uart_init>
 4011e74:	01010074 	movhi	r4,1025
 4011e78:	211d2404 	addi	r4,r4,29840
 4011e7c:	4011de40 	call	4011de4 <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
 4011e80:	010100b4 	movhi	r4,1026
 4011e84:	21213c04 	addi	r4,r4,-31504
 4011e88:	40152580 	call	4015258 <alt_fs_reg>
    ALTERA_MSGDMA_INIT ( TRDB_D5M_0_CMOS_SENSOR_ACQUISITION_0_MSGDMA_0, trdb_d5m_0_cmos_sensor_acquisition_0_msgdma_0);
 4011e8c:	008100b4 	movhi	r2,1026
 4011e90:	10a14804 	addi	r2,r2,-31456
 4011e94:	10c00717 	ldw	r3,28(r2)
 4011e98:	008100b4 	movhi	r2,1026
 4011e9c:	10a14804 	addi	r2,r2,-31456
 4011ea0:	10800817 	ldw	r2,32(r2)
 4011ea4:	100d883a 	mov	r6,r2
 4011ea8:	180b883a 	mov	r5,r3
 4011eac:	010100b4 	movhi	r4,1026
 4011eb0:	21214804 	addi	r4,r4,-31456
 4011eb4:	4014aac0 	call	4014aac <alt_msgdma_init>
}
 4011eb8:	0001883a 	nop
 4011ebc:	e037883a 	mov	sp,fp
 4011ec0:	dfc00117 	ldw	ra,4(sp)
 4011ec4:	df000017 	ldw	fp,0(sp)
 4011ec8:	dec00204 	addi	sp,sp,8
 4011ecc:	f800283a 	ret

04011ed0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4011ed0:	defffa04 	addi	sp,sp,-24
 4011ed4:	dfc00515 	stw	ra,20(sp)
 4011ed8:	df000415 	stw	fp,16(sp)
 4011edc:	df000404 	addi	fp,sp,16
 4011ee0:	e13ffd15 	stw	r4,-12(fp)
 4011ee4:	e17ffe15 	stw	r5,-8(fp)
 4011ee8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4011eec:	e0bffd17 	ldw	r2,-12(fp)
 4011ef0:	10800017 	ldw	r2,0(r2)
 4011ef4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4011ef8:	e0bffc17 	ldw	r2,-16(fp)
 4011efc:	10c00a04 	addi	r3,r2,40
 4011f00:	e0bffd17 	ldw	r2,-12(fp)
 4011f04:	10800217 	ldw	r2,8(r2)
 4011f08:	100f883a 	mov	r7,r2
 4011f0c:	e1bfff17 	ldw	r6,-4(fp)
 4011f10:	e17ffe17 	ldw	r5,-8(fp)
 4011f14:	1809883a 	mov	r4,r3
 4011f18:	40124f80 	call	40124f8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4011f1c:	e037883a 	mov	sp,fp
 4011f20:	dfc00117 	ldw	ra,4(sp)
 4011f24:	df000017 	ldw	fp,0(sp)
 4011f28:	dec00204 	addi	sp,sp,8
 4011f2c:	f800283a 	ret

04011f30 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4011f30:	defffa04 	addi	sp,sp,-24
 4011f34:	dfc00515 	stw	ra,20(sp)
 4011f38:	df000415 	stw	fp,16(sp)
 4011f3c:	df000404 	addi	fp,sp,16
 4011f40:	e13ffd15 	stw	r4,-12(fp)
 4011f44:	e17ffe15 	stw	r5,-8(fp)
 4011f48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4011f4c:	e0bffd17 	ldw	r2,-12(fp)
 4011f50:	10800017 	ldw	r2,0(r2)
 4011f54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4011f58:	e0bffc17 	ldw	r2,-16(fp)
 4011f5c:	10c00a04 	addi	r3,r2,40
 4011f60:	e0bffd17 	ldw	r2,-12(fp)
 4011f64:	10800217 	ldw	r2,8(r2)
 4011f68:	100f883a 	mov	r7,r2
 4011f6c:	e1bfff17 	ldw	r6,-4(fp)
 4011f70:	e17ffe17 	ldw	r5,-8(fp)
 4011f74:	1809883a 	mov	r4,r3
 4011f78:	40127140 	call	4012714 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4011f7c:	e037883a 	mov	sp,fp
 4011f80:	dfc00117 	ldw	ra,4(sp)
 4011f84:	df000017 	ldw	fp,0(sp)
 4011f88:	dec00204 	addi	sp,sp,8
 4011f8c:	f800283a 	ret

04011f90 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4011f90:	defffc04 	addi	sp,sp,-16
 4011f94:	dfc00315 	stw	ra,12(sp)
 4011f98:	df000215 	stw	fp,8(sp)
 4011f9c:	df000204 	addi	fp,sp,8
 4011fa0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4011fa4:	e0bfff17 	ldw	r2,-4(fp)
 4011fa8:	10800017 	ldw	r2,0(r2)
 4011fac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4011fb0:	e0bffe17 	ldw	r2,-8(fp)
 4011fb4:	10c00a04 	addi	r3,r2,40
 4011fb8:	e0bfff17 	ldw	r2,-4(fp)
 4011fbc:	10800217 	ldw	r2,8(r2)
 4011fc0:	100b883a 	mov	r5,r2
 4011fc4:	1809883a 	mov	r4,r3
 4011fc8:	40123a00 	call	40123a0 <altera_avalon_jtag_uart_close>
}
 4011fcc:	e037883a 	mov	sp,fp
 4011fd0:	dfc00117 	ldw	ra,4(sp)
 4011fd4:	df000017 	ldw	fp,0(sp)
 4011fd8:	dec00204 	addi	sp,sp,8
 4011fdc:	f800283a 	ret

04011fe0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4011fe0:	defffa04 	addi	sp,sp,-24
 4011fe4:	dfc00515 	stw	ra,20(sp)
 4011fe8:	df000415 	stw	fp,16(sp)
 4011fec:	df000404 	addi	fp,sp,16
 4011ff0:	e13ffd15 	stw	r4,-12(fp)
 4011ff4:	e17ffe15 	stw	r5,-8(fp)
 4011ff8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4011ffc:	e0bffd17 	ldw	r2,-12(fp)
 4012000:	10800017 	ldw	r2,0(r2)
 4012004:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4012008:	e0bffc17 	ldw	r2,-16(fp)
 401200c:	10800a04 	addi	r2,r2,40
 4012010:	e1bfff17 	ldw	r6,-4(fp)
 4012014:	e17ffe17 	ldw	r5,-8(fp)
 4012018:	1009883a 	mov	r4,r2
 401201c:	40124080 	call	4012408 <altera_avalon_jtag_uart_ioctl>
}
 4012020:	e037883a 	mov	sp,fp
 4012024:	dfc00117 	ldw	ra,4(sp)
 4012028:	df000017 	ldw	fp,0(sp)
 401202c:	dec00204 	addi	sp,sp,8
 4012030:	f800283a 	ret

04012034 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4012034:	defffa04 	addi	sp,sp,-24
 4012038:	dfc00515 	stw	ra,20(sp)
 401203c:	df000415 	stw	fp,16(sp)
 4012040:	df000404 	addi	fp,sp,16
 4012044:	e13ffd15 	stw	r4,-12(fp)
 4012048:	e17ffe15 	stw	r5,-8(fp)
 401204c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4012050:	e0bffd17 	ldw	r2,-12(fp)
 4012054:	00c00044 	movi	r3,1
 4012058:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 401205c:	e0bffd17 	ldw	r2,-12(fp)
 4012060:	10800017 	ldw	r2,0(r2)
 4012064:	10800104 	addi	r2,r2,4
 4012068:	1007883a 	mov	r3,r2
 401206c:	e0bffd17 	ldw	r2,-12(fp)
 4012070:	10800817 	ldw	r2,32(r2)
 4012074:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4012078:	e0bffe17 	ldw	r2,-8(fp)
 401207c:	e0ffff17 	ldw	r3,-4(fp)
 4012080:	d8000015 	stw	zero,0(sp)
 4012084:	e1fffd17 	ldw	r7,-12(fp)
 4012088:	01810074 	movhi	r6,1025
 401208c:	31883d04 	addi	r6,r6,8436
 4012090:	180b883a 	mov	r5,r3
 4012094:	1009883a 	mov	r4,r2
 4012098:	40152f80 	call	40152f8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 401209c:	e0bffd17 	ldw	r2,-12(fp)
 40120a0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 40120a4:	e0bffd17 	ldw	r2,-12(fp)
 40120a8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40120ac:	d0e72517 	ldw	r3,-25452(gp)
 40120b0:	e1fffd17 	ldw	r7,-12(fp)
 40120b4:	01810074 	movhi	r6,1025
 40120b8:	3188c004 	addi	r6,r6,8960
 40120bc:	180b883a 	mov	r5,r3
 40120c0:	1009883a 	mov	r4,r2
 40120c4:	4014d5c0 	call	4014d5c <alt_alarm_start>
 40120c8:	1000040e 	bge	r2,zero,40120dc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 40120cc:	e0fffd17 	ldw	r3,-12(fp)
 40120d0:	00a00034 	movhi	r2,32768
 40120d4:	10bfffc4 	addi	r2,r2,-1
 40120d8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 40120dc:	0001883a 	nop
 40120e0:	e037883a 	mov	sp,fp
 40120e4:	dfc00117 	ldw	ra,4(sp)
 40120e8:	df000017 	ldw	fp,0(sp)
 40120ec:	dec00204 	addi	sp,sp,8
 40120f0:	f800283a 	ret

040120f4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 40120f4:	defff804 	addi	sp,sp,-32
 40120f8:	df000715 	stw	fp,28(sp)
 40120fc:	df000704 	addi	fp,sp,28
 4012100:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4012104:	e0bfff17 	ldw	r2,-4(fp)
 4012108:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 401210c:	e0bffb17 	ldw	r2,-20(fp)
 4012110:	10800017 	ldw	r2,0(r2)
 4012114:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4012118:	e0bffc17 	ldw	r2,-16(fp)
 401211c:	10800104 	addi	r2,r2,4
 4012120:	10800037 	ldwio	r2,0(r2)
 4012124:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4012128:	e0bffd17 	ldw	r2,-12(fp)
 401212c:	1080c00c 	andi	r2,r2,768
 4012130:	10006d26 	beq	r2,zero,40122e8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4012134:	e0bffd17 	ldw	r2,-12(fp)
 4012138:	1080400c 	andi	r2,r2,256
 401213c:	10003526 	beq	r2,zero,4012214 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4012140:	00800074 	movhi	r2,1
 4012144:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4012148:	e0bffb17 	ldw	r2,-20(fp)
 401214c:	10800a17 	ldw	r2,40(r2)
 4012150:	10800044 	addi	r2,r2,1
 4012154:	1081ffcc 	andi	r2,r2,2047
 4012158:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 401215c:	e0bffb17 	ldw	r2,-20(fp)
 4012160:	10c00b17 	ldw	r3,44(r2)
 4012164:	e0bffe17 	ldw	r2,-8(fp)
 4012168:	18801526 	beq	r3,r2,40121c0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 401216c:	e0bffc17 	ldw	r2,-16(fp)
 4012170:	10800037 	ldwio	r2,0(r2)
 4012174:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4012178:	e0bff917 	ldw	r2,-28(fp)
 401217c:	10a0000c 	andi	r2,r2,32768
 4012180:	10001126 	beq	r2,zero,40121c8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4012184:	e0bffb17 	ldw	r2,-20(fp)
 4012188:	10800a17 	ldw	r2,40(r2)
 401218c:	e0fff917 	ldw	r3,-28(fp)
 4012190:	1809883a 	mov	r4,r3
 4012194:	e0fffb17 	ldw	r3,-20(fp)
 4012198:	1885883a 	add	r2,r3,r2
 401219c:	10800e04 	addi	r2,r2,56
 40121a0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40121a4:	e0bffb17 	ldw	r2,-20(fp)
 40121a8:	10800a17 	ldw	r2,40(r2)
 40121ac:	10800044 	addi	r2,r2,1
 40121b0:	10c1ffcc 	andi	r3,r2,2047
 40121b4:	e0bffb17 	ldw	r2,-20(fp)
 40121b8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 40121bc:	003fe206 	br	4012148 <__alt_data_end+0xfc012148>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 40121c0:	0001883a 	nop
 40121c4:	00000106 	br	40121cc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 40121c8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 40121cc:	e0bff917 	ldw	r2,-28(fp)
 40121d0:	10bfffec 	andhi	r2,r2,65535
 40121d4:	10000f26 	beq	r2,zero,4012214 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40121d8:	e0bffb17 	ldw	r2,-20(fp)
 40121dc:	10c00817 	ldw	r3,32(r2)
 40121e0:	00bfff84 	movi	r2,-2
 40121e4:	1886703a 	and	r3,r3,r2
 40121e8:	e0bffb17 	ldw	r2,-20(fp)
 40121ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 40121f0:	e0bffc17 	ldw	r2,-16(fp)
 40121f4:	10800104 	addi	r2,r2,4
 40121f8:	1007883a 	mov	r3,r2
 40121fc:	e0bffb17 	ldw	r2,-20(fp)
 4012200:	10800817 	ldw	r2,32(r2)
 4012204:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4012208:	e0bffc17 	ldw	r2,-16(fp)
 401220c:	10800104 	addi	r2,r2,4
 4012210:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4012214:	e0bffd17 	ldw	r2,-12(fp)
 4012218:	1080800c 	andi	r2,r2,512
 401221c:	103fbe26 	beq	r2,zero,4012118 <__alt_data_end+0xfc012118>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4012220:	e0bffd17 	ldw	r2,-12(fp)
 4012224:	1004d43a 	srli	r2,r2,16
 4012228:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 401222c:	00001406 	br	4012280 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4012230:	e0bffc17 	ldw	r2,-16(fp)
 4012234:	e0fffb17 	ldw	r3,-20(fp)
 4012238:	18c00d17 	ldw	r3,52(r3)
 401223c:	e13ffb17 	ldw	r4,-20(fp)
 4012240:	20c7883a 	add	r3,r4,r3
 4012244:	18c20e04 	addi	r3,r3,2104
 4012248:	18c00003 	ldbu	r3,0(r3)
 401224c:	18c03fcc 	andi	r3,r3,255
 4012250:	18c0201c 	xori	r3,r3,128
 4012254:	18ffe004 	addi	r3,r3,-128
 4012258:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401225c:	e0bffb17 	ldw	r2,-20(fp)
 4012260:	10800d17 	ldw	r2,52(r2)
 4012264:	10800044 	addi	r2,r2,1
 4012268:	10c1ffcc 	andi	r3,r2,2047
 401226c:	e0bffb17 	ldw	r2,-20(fp)
 4012270:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4012274:	e0bffa17 	ldw	r2,-24(fp)
 4012278:	10bfffc4 	addi	r2,r2,-1
 401227c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4012280:	e0bffa17 	ldw	r2,-24(fp)
 4012284:	10000526 	beq	r2,zero,401229c <altera_avalon_jtag_uart_irq+0x1a8>
 4012288:	e0bffb17 	ldw	r2,-20(fp)
 401228c:	10c00d17 	ldw	r3,52(r2)
 4012290:	e0bffb17 	ldw	r2,-20(fp)
 4012294:	10800c17 	ldw	r2,48(r2)
 4012298:	18bfe51e 	bne	r3,r2,4012230 <__alt_data_end+0xfc012230>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 401229c:	e0bffa17 	ldw	r2,-24(fp)
 40122a0:	103f9d26 	beq	r2,zero,4012118 <__alt_data_end+0xfc012118>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40122a4:	e0bffb17 	ldw	r2,-20(fp)
 40122a8:	10c00817 	ldw	r3,32(r2)
 40122ac:	00bfff44 	movi	r2,-3
 40122b0:	1886703a 	and	r3,r3,r2
 40122b4:	e0bffb17 	ldw	r2,-20(fp)
 40122b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40122bc:	e0bffb17 	ldw	r2,-20(fp)
 40122c0:	10800017 	ldw	r2,0(r2)
 40122c4:	10800104 	addi	r2,r2,4
 40122c8:	1007883a 	mov	r3,r2
 40122cc:	e0bffb17 	ldw	r2,-20(fp)
 40122d0:	10800817 	ldw	r2,32(r2)
 40122d4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40122d8:	e0bffc17 	ldw	r2,-16(fp)
 40122dc:	10800104 	addi	r2,r2,4
 40122e0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 40122e4:	003f8c06 	br	4012118 <__alt_data_end+0xfc012118>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 40122e8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 40122ec:	0001883a 	nop
 40122f0:	e037883a 	mov	sp,fp
 40122f4:	df000017 	ldw	fp,0(sp)
 40122f8:	dec00104 	addi	sp,sp,4
 40122fc:	f800283a 	ret

04012300 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4012300:	defff804 	addi	sp,sp,-32
 4012304:	df000715 	stw	fp,28(sp)
 4012308:	df000704 	addi	fp,sp,28
 401230c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4012310:	e0bffb17 	ldw	r2,-20(fp)
 4012314:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4012318:	e0bff917 	ldw	r2,-28(fp)
 401231c:	10800017 	ldw	r2,0(r2)
 4012320:	10800104 	addi	r2,r2,4
 4012324:	10800037 	ldwio	r2,0(r2)
 4012328:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 401232c:	e0bffa17 	ldw	r2,-24(fp)
 4012330:	1081000c 	andi	r2,r2,1024
 4012334:	10000b26 	beq	r2,zero,4012364 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4012338:	e0bff917 	ldw	r2,-28(fp)
 401233c:	10800017 	ldw	r2,0(r2)
 4012340:	10800104 	addi	r2,r2,4
 4012344:	1007883a 	mov	r3,r2
 4012348:	e0bff917 	ldw	r2,-28(fp)
 401234c:	10800817 	ldw	r2,32(r2)
 4012350:	10810014 	ori	r2,r2,1024
 4012354:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4012358:	e0bff917 	ldw	r2,-28(fp)
 401235c:	10000915 	stw	zero,36(r2)
 4012360:	00000a06 	br	401238c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4012364:	e0bff917 	ldw	r2,-28(fp)
 4012368:	10c00917 	ldw	r3,36(r2)
 401236c:	00a00034 	movhi	r2,32768
 4012370:	10bfff04 	addi	r2,r2,-4
 4012374:	10c00536 	bltu	r2,r3,401238c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4012378:	e0bff917 	ldw	r2,-28(fp)
 401237c:	10800917 	ldw	r2,36(r2)
 4012380:	10c00044 	addi	r3,r2,1
 4012384:	e0bff917 	ldw	r2,-28(fp)
 4012388:	10c00915 	stw	r3,36(r2)
 401238c:	d0a72517 	ldw	r2,-25452(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4012390:	e037883a 	mov	sp,fp
 4012394:	df000017 	ldw	fp,0(sp)
 4012398:	dec00104 	addi	sp,sp,4
 401239c:	f800283a 	ret

040123a0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 40123a0:	defffd04 	addi	sp,sp,-12
 40123a4:	df000215 	stw	fp,8(sp)
 40123a8:	df000204 	addi	fp,sp,8
 40123ac:	e13ffe15 	stw	r4,-8(fp)
 40123b0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40123b4:	00000506 	br	40123cc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 40123b8:	e0bfff17 	ldw	r2,-4(fp)
 40123bc:	1090000c 	andi	r2,r2,16384
 40123c0:	10000226 	beq	r2,zero,40123cc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 40123c4:	00bffd44 	movi	r2,-11
 40123c8:	00000b06 	br	40123f8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40123cc:	e0bffe17 	ldw	r2,-8(fp)
 40123d0:	10c00d17 	ldw	r3,52(r2)
 40123d4:	e0bffe17 	ldw	r2,-8(fp)
 40123d8:	10800c17 	ldw	r2,48(r2)
 40123dc:	18800526 	beq	r3,r2,40123f4 <altera_avalon_jtag_uart_close+0x54>
 40123e0:	e0bffe17 	ldw	r2,-8(fp)
 40123e4:	10c00917 	ldw	r3,36(r2)
 40123e8:	e0bffe17 	ldw	r2,-8(fp)
 40123ec:	10800117 	ldw	r2,4(r2)
 40123f0:	18bff136 	bltu	r3,r2,40123b8 <__alt_data_end+0xfc0123b8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 40123f4:	0005883a 	mov	r2,zero
}
 40123f8:	e037883a 	mov	sp,fp
 40123fc:	df000017 	ldw	fp,0(sp)
 4012400:	dec00104 	addi	sp,sp,4
 4012404:	f800283a 	ret

04012408 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4012408:	defffa04 	addi	sp,sp,-24
 401240c:	df000515 	stw	fp,20(sp)
 4012410:	df000504 	addi	fp,sp,20
 4012414:	e13ffd15 	stw	r4,-12(fp)
 4012418:	e17ffe15 	stw	r5,-8(fp)
 401241c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4012420:	00bff9c4 	movi	r2,-25
 4012424:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4012428:	e0bffe17 	ldw	r2,-8(fp)
 401242c:	10da8060 	cmpeqi	r3,r2,27137
 4012430:	1800031e 	bne	r3,zero,4012440 <altera_avalon_jtag_uart_ioctl+0x38>
 4012434:	109a80a0 	cmpeqi	r2,r2,27138
 4012438:	1000181e 	bne	r2,zero,401249c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 401243c:	00002906 	br	40124e4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4012440:	e0bffd17 	ldw	r2,-12(fp)
 4012444:	10c00117 	ldw	r3,4(r2)
 4012448:	00a00034 	movhi	r2,32768
 401244c:	10bfffc4 	addi	r2,r2,-1
 4012450:	18802126 	beq	r3,r2,40124d8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4012454:	e0bfff17 	ldw	r2,-4(fp)
 4012458:	10800017 	ldw	r2,0(r2)
 401245c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4012460:	e0bffc17 	ldw	r2,-16(fp)
 4012464:	10800090 	cmplti	r2,r2,2
 4012468:	1000061e 	bne	r2,zero,4012484 <altera_avalon_jtag_uart_ioctl+0x7c>
 401246c:	e0fffc17 	ldw	r3,-16(fp)
 4012470:	00a00034 	movhi	r2,32768
 4012474:	10bfffc4 	addi	r2,r2,-1
 4012478:	18800226 	beq	r3,r2,4012484 <altera_avalon_jtag_uart_ioctl+0x7c>
 401247c:	e0bffc17 	ldw	r2,-16(fp)
 4012480:	00000206 	br	401248c <altera_avalon_jtag_uart_ioctl+0x84>
 4012484:	00a00034 	movhi	r2,32768
 4012488:	10bfff84 	addi	r2,r2,-2
 401248c:	e0fffd17 	ldw	r3,-12(fp)
 4012490:	18800115 	stw	r2,4(r3)
      rc = 0;
 4012494:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4012498:	00000f06 	br	40124d8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 401249c:	e0bffd17 	ldw	r2,-12(fp)
 40124a0:	10c00117 	ldw	r3,4(r2)
 40124a4:	00a00034 	movhi	r2,32768
 40124a8:	10bfffc4 	addi	r2,r2,-1
 40124ac:	18800c26 	beq	r3,r2,40124e0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 40124b0:	e0bffd17 	ldw	r2,-12(fp)
 40124b4:	10c00917 	ldw	r3,36(r2)
 40124b8:	e0bffd17 	ldw	r2,-12(fp)
 40124bc:	10800117 	ldw	r2,4(r2)
 40124c0:	1885803a 	cmpltu	r2,r3,r2
 40124c4:	10c03fcc 	andi	r3,r2,255
 40124c8:	e0bfff17 	ldw	r2,-4(fp)
 40124cc:	10c00015 	stw	r3,0(r2)
      rc = 0;
 40124d0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40124d4:	00000206 	br	40124e0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 40124d8:	0001883a 	nop
 40124dc:	00000106 	br	40124e4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 40124e0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 40124e4:	e0bffb17 	ldw	r2,-20(fp)
}
 40124e8:	e037883a 	mov	sp,fp
 40124ec:	df000017 	ldw	fp,0(sp)
 40124f0:	dec00104 	addi	sp,sp,4
 40124f4:	f800283a 	ret

040124f8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 40124f8:	defff304 	addi	sp,sp,-52
 40124fc:	dfc00c15 	stw	ra,48(sp)
 4012500:	df000b15 	stw	fp,44(sp)
 4012504:	df000b04 	addi	fp,sp,44
 4012508:	e13ffc15 	stw	r4,-16(fp)
 401250c:	e17ffd15 	stw	r5,-12(fp)
 4012510:	e1bffe15 	stw	r6,-8(fp)
 4012514:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4012518:	e0bffd17 	ldw	r2,-12(fp)
 401251c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4012520:	00004706 	br	4012640 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4012524:	e0bffc17 	ldw	r2,-16(fp)
 4012528:	10800a17 	ldw	r2,40(r2)
 401252c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4012530:	e0bffc17 	ldw	r2,-16(fp)
 4012534:	10800b17 	ldw	r2,44(r2)
 4012538:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 401253c:	e0fff717 	ldw	r3,-36(fp)
 4012540:	e0bff817 	ldw	r2,-32(fp)
 4012544:	18800536 	bltu	r3,r2,401255c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4012548:	e0fff717 	ldw	r3,-36(fp)
 401254c:	e0bff817 	ldw	r2,-32(fp)
 4012550:	1885c83a 	sub	r2,r3,r2
 4012554:	e0bff615 	stw	r2,-40(fp)
 4012558:	00000406 	br	401256c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 401255c:	00c20004 	movi	r3,2048
 4012560:	e0bff817 	ldw	r2,-32(fp)
 4012564:	1885c83a 	sub	r2,r3,r2
 4012568:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401256c:	e0bff617 	ldw	r2,-40(fp)
 4012570:	10001e26 	beq	r2,zero,40125ec <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4012574:	e0fffe17 	ldw	r3,-8(fp)
 4012578:	e0bff617 	ldw	r2,-40(fp)
 401257c:	1880022e 	bgeu	r3,r2,4012588 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4012580:	e0bffe17 	ldw	r2,-8(fp)
 4012584:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4012588:	e0bffc17 	ldw	r2,-16(fp)
 401258c:	10c00e04 	addi	r3,r2,56
 4012590:	e0bff817 	ldw	r2,-32(fp)
 4012594:	1885883a 	add	r2,r3,r2
 4012598:	e1bff617 	ldw	r6,-40(fp)
 401259c:	100b883a 	mov	r5,r2
 40125a0:	e13ff517 	ldw	r4,-44(fp)
 40125a4:	4004e1c0 	call	4004e1c <memcpy>
      ptr   += n;
 40125a8:	e0fff517 	ldw	r3,-44(fp)
 40125ac:	e0bff617 	ldw	r2,-40(fp)
 40125b0:	1885883a 	add	r2,r3,r2
 40125b4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 40125b8:	e0fffe17 	ldw	r3,-8(fp)
 40125bc:	e0bff617 	ldw	r2,-40(fp)
 40125c0:	1885c83a 	sub	r2,r3,r2
 40125c4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40125c8:	e0fff817 	ldw	r3,-32(fp)
 40125cc:	e0bff617 	ldw	r2,-40(fp)
 40125d0:	1885883a 	add	r2,r3,r2
 40125d4:	10c1ffcc 	andi	r3,r2,2047
 40125d8:	e0bffc17 	ldw	r2,-16(fp)
 40125dc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 40125e0:	e0bffe17 	ldw	r2,-8(fp)
 40125e4:	00bfcf16 	blt	zero,r2,4012524 <__alt_data_end+0xfc012524>
 40125e8:	00000106 	br	40125f0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 40125ec:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 40125f0:	e0fff517 	ldw	r3,-44(fp)
 40125f4:	e0bffd17 	ldw	r2,-12(fp)
 40125f8:	1880141e 	bne	r3,r2,401264c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 40125fc:	e0bfff17 	ldw	r2,-4(fp)
 4012600:	1090000c 	andi	r2,r2,16384
 4012604:	1000131e 	bne	r2,zero,4012654 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4012608:	0001883a 	nop
 401260c:	e0bffc17 	ldw	r2,-16(fp)
 4012610:	10c00a17 	ldw	r3,40(r2)
 4012614:	e0bff717 	ldw	r2,-36(fp)
 4012618:	1880051e 	bne	r3,r2,4012630 <altera_avalon_jtag_uart_read+0x138>
 401261c:	e0bffc17 	ldw	r2,-16(fp)
 4012620:	10c00917 	ldw	r3,36(r2)
 4012624:	e0bffc17 	ldw	r2,-16(fp)
 4012628:	10800117 	ldw	r2,4(r2)
 401262c:	18bff736 	bltu	r3,r2,401260c <__alt_data_end+0xfc01260c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4012630:	e0bffc17 	ldw	r2,-16(fp)
 4012634:	10c00a17 	ldw	r3,40(r2)
 4012638:	e0bff717 	ldw	r2,-36(fp)
 401263c:	18800726 	beq	r3,r2,401265c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4012640:	e0bffe17 	ldw	r2,-8(fp)
 4012644:	00bfb716 	blt	zero,r2,4012524 <__alt_data_end+0xfc012524>
 4012648:	00000506 	br	4012660 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 401264c:	0001883a 	nop
 4012650:	00000306 	br	4012660 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4012654:	0001883a 	nop
 4012658:	00000106 	br	4012660 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 401265c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4012660:	e0fff517 	ldw	r3,-44(fp)
 4012664:	e0bffd17 	ldw	r2,-12(fp)
 4012668:	18801826 	beq	r3,r2,40126cc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401266c:	0005303a 	rdctl	r2,status
 4012670:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012674:	e0fffb17 	ldw	r3,-20(fp)
 4012678:	00bfff84 	movi	r2,-2
 401267c:	1884703a 	and	r2,r3,r2
 4012680:	1001703a 	wrctl	status,r2
  
  return context;
 4012684:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4012688:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401268c:	e0bffc17 	ldw	r2,-16(fp)
 4012690:	10800817 	ldw	r2,32(r2)
 4012694:	10c00054 	ori	r3,r2,1
 4012698:	e0bffc17 	ldw	r2,-16(fp)
 401269c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40126a0:	e0bffc17 	ldw	r2,-16(fp)
 40126a4:	10800017 	ldw	r2,0(r2)
 40126a8:	10800104 	addi	r2,r2,4
 40126ac:	1007883a 	mov	r3,r2
 40126b0:	e0bffc17 	ldw	r2,-16(fp)
 40126b4:	10800817 	ldw	r2,32(r2)
 40126b8:	18800035 	stwio	r2,0(r3)
 40126bc:	e0bffa17 	ldw	r2,-24(fp)
 40126c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40126c4:	e0bff917 	ldw	r2,-28(fp)
 40126c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 40126cc:	e0fff517 	ldw	r3,-44(fp)
 40126d0:	e0bffd17 	ldw	r2,-12(fp)
 40126d4:	18800426 	beq	r3,r2,40126e8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 40126d8:	e0fff517 	ldw	r3,-44(fp)
 40126dc:	e0bffd17 	ldw	r2,-12(fp)
 40126e0:	1885c83a 	sub	r2,r3,r2
 40126e4:	00000606 	br	4012700 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 40126e8:	e0bfff17 	ldw	r2,-4(fp)
 40126ec:	1090000c 	andi	r2,r2,16384
 40126f0:	10000226 	beq	r2,zero,40126fc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 40126f4:	00bffd44 	movi	r2,-11
 40126f8:	00000106 	br	4012700 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 40126fc:	00bffec4 	movi	r2,-5
}
 4012700:	e037883a 	mov	sp,fp
 4012704:	dfc00117 	ldw	ra,4(sp)
 4012708:	df000017 	ldw	fp,0(sp)
 401270c:	dec00204 	addi	sp,sp,8
 4012710:	f800283a 	ret

04012714 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4012714:	defff304 	addi	sp,sp,-52
 4012718:	dfc00c15 	stw	ra,48(sp)
 401271c:	df000b15 	stw	fp,44(sp)
 4012720:	df000b04 	addi	fp,sp,44
 4012724:	e13ffc15 	stw	r4,-16(fp)
 4012728:	e17ffd15 	stw	r5,-12(fp)
 401272c:	e1bffe15 	stw	r6,-8(fp)
 4012730:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4012734:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4012738:	e0bffd17 	ldw	r2,-12(fp)
 401273c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4012740:	00003706 	br	4012820 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4012744:	e0bffc17 	ldw	r2,-16(fp)
 4012748:	10800c17 	ldw	r2,48(r2)
 401274c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4012750:	e0bffc17 	ldw	r2,-16(fp)
 4012754:	10800d17 	ldw	r2,52(r2)
 4012758:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 401275c:	e0fff917 	ldw	r3,-28(fp)
 4012760:	e0bff517 	ldw	r2,-44(fp)
 4012764:	1880062e 	bgeu	r3,r2,4012780 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4012768:	e0fff517 	ldw	r3,-44(fp)
 401276c:	e0bff917 	ldw	r2,-28(fp)
 4012770:	1885c83a 	sub	r2,r3,r2
 4012774:	10bfffc4 	addi	r2,r2,-1
 4012778:	e0bff615 	stw	r2,-40(fp)
 401277c:	00000b06 	br	40127ac <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4012780:	e0bff517 	ldw	r2,-44(fp)
 4012784:	10000526 	beq	r2,zero,401279c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4012788:	00c20004 	movi	r3,2048
 401278c:	e0bff917 	ldw	r2,-28(fp)
 4012790:	1885c83a 	sub	r2,r3,r2
 4012794:	e0bff615 	stw	r2,-40(fp)
 4012798:	00000406 	br	40127ac <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 401279c:	00c1ffc4 	movi	r3,2047
 40127a0:	e0bff917 	ldw	r2,-28(fp)
 40127a4:	1885c83a 	sub	r2,r3,r2
 40127a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40127ac:	e0bff617 	ldw	r2,-40(fp)
 40127b0:	10001e26 	beq	r2,zero,401282c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 40127b4:	e0fffe17 	ldw	r3,-8(fp)
 40127b8:	e0bff617 	ldw	r2,-40(fp)
 40127bc:	1880022e 	bgeu	r3,r2,40127c8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 40127c0:	e0bffe17 	ldw	r2,-8(fp)
 40127c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 40127c8:	e0bffc17 	ldw	r2,-16(fp)
 40127cc:	10c20e04 	addi	r3,r2,2104
 40127d0:	e0bff917 	ldw	r2,-28(fp)
 40127d4:	1885883a 	add	r2,r3,r2
 40127d8:	e1bff617 	ldw	r6,-40(fp)
 40127dc:	e17ffd17 	ldw	r5,-12(fp)
 40127e0:	1009883a 	mov	r4,r2
 40127e4:	4004e1c0 	call	4004e1c <memcpy>
      ptr   += n;
 40127e8:	e0fffd17 	ldw	r3,-12(fp)
 40127ec:	e0bff617 	ldw	r2,-40(fp)
 40127f0:	1885883a 	add	r2,r3,r2
 40127f4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 40127f8:	e0fffe17 	ldw	r3,-8(fp)
 40127fc:	e0bff617 	ldw	r2,-40(fp)
 4012800:	1885c83a 	sub	r2,r3,r2
 4012804:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4012808:	e0fff917 	ldw	r3,-28(fp)
 401280c:	e0bff617 	ldw	r2,-40(fp)
 4012810:	1885883a 	add	r2,r3,r2
 4012814:	10c1ffcc 	andi	r3,r2,2047
 4012818:	e0bffc17 	ldw	r2,-16(fp)
 401281c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4012820:	e0bffe17 	ldw	r2,-8(fp)
 4012824:	00bfc716 	blt	zero,r2,4012744 <__alt_data_end+0xfc012744>
 4012828:	00000106 	br	4012830 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 401282c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012830:	0005303a 	rdctl	r2,status
 4012834:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012838:	e0fffb17 	ldw	r3,-20(fp)
 401283c:	00bfff84 	movi	r2,-2
 4012840:	1884703a 	and	r2,r3,r2
 4012844:	1001703a 	wrctl	status,r2
  
  return context;
 4012848:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 401284c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4012850:	e0bffc17 	ldw	r2,-16(fp)
 4012854:	10800817 	ldw	r2,32(r2)
 4012858:	10c00094 	ori	r3,r2,2
 401285c:	e0bffc17 	ldw	r2,-16(fp)
 4012860:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4012864:	e0bffc17 	ldw	r2,-16(fp)
 4012868:	10800017 	ldw	r2,0(r2)
 401286c:	10800104 	addi	r2,r2,4
 4012870:	1007883a 	mov	r3,r2
 4012874:	e0bffc17 	ldw	r2,-16(fp)
 4012878:	10800817 	ldw	r2,32(r2)
 401287c:	18800035 	stwio	r2,0(r3)
 4012880:	e0bffa17 	ldw	r2,-24(fp)
 4012884:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012888:	e0bff817 	ldw	r2,-32(fp)
 401288c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4012890:	e0bffe17 	ldw	r2,-8(fp)
 4012894:	0080100e 	bge	zero,r2,40128d8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4012898:	e0bfff17 	ldw	r2,-4(fp)
 401289c:	1090000c 	andi	r2,r2,16384
 40128a0:	1000101e 	bne	r2,zero,40128e4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 40128a4:	0001883a 	nop
 40128a8:	e0bffc17 	ldw	r2,-16(fp)
 40128ac:	10c00d17 	ldw	r3,52(r2)
 40128b0:	e0bff517 	ldw	r2,-44(fp)
 40128b4:	1880051e 	bne	r3,r2,40128cc <altera_avalon_jtag_uart_write+0x1b8>
 40128b8:	e0bffc17 	ldw	r2,-16(fp)
 40128bc:	10c00917 	ldw	r3,36(r2)
 40128c0:	e0bffc17 	ldw	r2,-16(fp)
 40128c4:	10800117 	ldw	r2,4(r2)
 40128c8:	18bff736 	bltu	r3,r2,40128a8 <__alt_data_end+0xfc0128a8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 40128cc:	e0bffc17 	ldw	r2,-16(fp)
 40128d0:	10800917 	ldw	r2,36(r2)
 40128d4:	1000051e 	bne	r2,zero,40128ec <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 40128d8:	e0bffe17 	ldw	r2,-8(fp)
 40128dc:	00bfd016 	blt	zero,r2,4012820 <__alt_data_end+0xfc012820>
 40128e0:	00000306 	br	40128f0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 40128e4:	0001883a 	nop
 40128e8:	00000106 	br	40128f0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 40128ec:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 40128f0:	e0fffd17 	ldw	r3,-12(fp)
 40128f4:	e0bff717 	ldw	r2,-36(fp)
 40128f8:	18800426 	beq	r3,r2,401290c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 40128fc:	e0fffd17 	ldw	r3,-12(fp)
 4012900:	e0bff717 	ldw	r2,-36(fp)
 4012904:	1885c83a 	sub	r2,r3,r2
 4012908:	00000606 	br	4012924 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 401290c:	e0bfff17 	ldw	r2,-4(fp)
 4012910:	1090000c 	andi	r2,r2,16384
 4012914:	10000226 	beq	r2,zero,4012920 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4012918:	00bffd44 	movi	r2,-11
 401291c:	00000106 	br	4012924 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4012920:	00bffec4 	movi	r2,-5
}
 4012924:	e037883a 	mov	sp,fp
 4012928:	dfc00117 	ldw	ra,4(sp)
 401292c:	df000017 	ldw	fp,0(sp)
 4012930:	dec00204 	addi	sp,sp,8
 4012934:	f800283a 	ret

04012938 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
 4012938:	defff404 	addi	sp,sp,-48
 401293c:	df000b15 	stw	fp,44(sp)
 4012940:	df000b04 	addi	fp,sp,44
 4012944:	e13ffc15 	stw	r4,-16(fp)
 4012948:	e17ffd15 	stw	r5,-12(fp)
 401294c:	e1bffe15 	stw	r6,-8(fp)
 4012950:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
 4012954:	e0bffc17 	ldw	r2,-16(fp)
 4012958:	10800017 	ldw	r2,0(r2)
 401295c:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
 4012960:	e0bff517 	ldw	r2,-44(fp)
 4012964:	10800217 	ldw	r2,8(r2)
 4012968:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
 401296c:	e0bff617 	ldw	r2,-40(fp)
 4012970:	10bfffc4 	addi	r2,r2,-1
 4012974:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
 4012978:	e0bffb17 	ldw	r2,-20(fp)
 401297c:	10800044 	addi	r2,r2,1
 4012980:	e0bffb15 	stw	r2,-20(fp)
 4012984:	e0bffb17 	ldw	r2,-20(fp)
 4012988:	10800003 	ldbu	r2,0(r2)
 401298c:	10803fcc 	andi	r2,r2,255
 4012990:	1080201c 	xori	r2,r2,128
 4012994:	10bfe004 	addi	r2,r2,-128
 4012998:	103ff71e 	bne	r2,zero,4012978 <__alt_data_end+0xfc012978>
    ;

  return ptr - string;
 401299c:	e0fffb17 	ldw	r3,-20(fp)
 40129a0:	e0bff617 	ldw	r2,-40(fp)
 40129a4:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
 40129a8:	10800044 	addi	r2,r2,1
 40129ac:	1007883a 	mov	r3,r2
 40129b0:	e0bffd17 	ldw	r2,-12(fp)
 40129b4:	10c5883a 	add	r2,r2,r3
 40129b8:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
 40129bc:	d0a00d04 	addi	r2,gp,-32716
 40129c0:	1007883a 	mov	r3,r2
  r4 = (int)name;
 40129c4:	e0bffd17 	ldw	r2,-12(fp)
 40129c8:	1009883a 	mov	r4,r2
  r5 = flags;
 40129cc:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
 40129d0:	e1bfff17 	ldw	r6,-4(fp)
 40129d4:	e0bffd17 	ldw	r2,-12(fp)
 40129d8:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
 40129dc:	e0bff917 	ldw	r2,-28(fp)
 40129e0:	10bfffc4 	addi	r2,r2,-1
 40129e4:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
 40129e8:	e0bffa17 	ldw	r2,-24(fp)
 40129ec:	10800044 	addi	r2,r2,1
 40129f0:	e0bffa15 	stw	r2,-24(fp)
 40129f4:	e0bffa17 	ldw	r2,-24(fp)
 40129f8:	10800003 	ldbu	r2,0(r2)
 40129fc:	10803fcc 	andi	r2,r2,255
 4012a00:	1080201c 	xori	r2,r2,128
 4012a04:	10bfe004 	addi	r2,r2,-128
 4012a08:	103ff71e 	bne	r2,zero,40129e8 <__alt_data_end+0xfc0129e8>
    ;

  return ptr - string;
 4012a0c:	e1fffa17 	ldw	r7,-24(fp)
 4012a10:	e0bff917 	ldw	r2,-28(fp)
 4012a14:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
 4012a18:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
 4012a1c:	003da07a 	break	1

  handle = (void *)r2;
 4012a20:	e0bff715 	stw	r2,-36(fp)
  error = r3;
 4012a24:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
 4012a28:	e0bff817 	ldw	r2,-32(fp)
 4012a2c:	1000031e 	bne	r2,zero,4012a3c <alt_hostfs_open+0x104>
    fd->priv = handle;
 4012a30:	e0bffc17 	ldw	r2,-16(fp)
 4012a34:	e0fff717 	ldw	r3,-36(fp)
 4012a38:	10c00115 	stw	r3,4(r2)

  return -error;
 4012a3c:	e0bff817 	ldw	r2,-32(fp)
 4012a40:	0085c83a 	sub	r2,zero,r2
}
 4012a44:	e037883a 	mov	sp,fp
 4012a48:	df000017 	ldw	fp,0(sp)
 4012a4c:	dec00104 	addi	sp,sp,4
 4012a50:	f800283a 	ret

04012a54 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
 4012a54:	defffd04 	addi	sp,sp,-12
 4012a58:	df000215 	stw	fp,8(sp)
 4012a5c:	df000204 	addi	fp,sp,8
 4012a60:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
 4012a64:	d0a01004 	addi	r2,gp,-32704
 4012a68:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 4012a6c:	e0bfff17 	ldw	r2,-4(fp)
 4012a70:	10800117 	ldw	r2,4(r2)
 4012a74:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
 4012a78:	003da07a 	break	1

  error = r3;
 4012a7c:	e0fffe15 	stw	r3,-8(fp)

  return -error;
 4012a80:	e0bffe17 	ldw	r2,-8(fp)
 4012a84:	0085c83a 	sub	r2,zero,r2
}
 4012a88:	e037883a 	mov	sp,fp
 4012a8c:	df000017 	ldw	fp,0(sp)
 4012a90:	dec00104 	addi	sp,sp,4
 4012a94:	f800283a 	ret

04012a98 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
 4012a98:	defffa04 	addi	sp,sp,-24
 4012a9c:	df000515 	stw	fp,20(sp)
 4012aa0:	df000504 	addi	fp,sp,20
 4012aa4:	e13ffd15 	stw	r4,-12(fp)
 4012aa8:	e17ffe15 	stw	r5,-8(fp)
 4012aac:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
 4012ab0:	d0a01304 	addi	r2,gp,-32692
 4012ab4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 4012ab8:	e0bffd17 	ldw	r2,-12(fp)
 4012abc:	10800117 	ldw	r2,4(r2)
 4012ac0:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
 4012ac4:	e0bffe17 	ldw	r2,-8(fp)
 4012ac8:	100b883a 	mov	r5,r2
  r6 = len;
 4012acc:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 4012ad0:	003da07a 	break	1

  rc = r2;
 4012ad4:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 4012ad8:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 4012adc:	e0bffc17 	ldw	r2,-16(fp)
 4012ae0:	10000326 	beq	r2,zero,4012af0 <alt_hostfs_read+0x58>
 4012ae4:	e0bffc17 	ldw	r2,-16(fp)
 4012ae8:	0085c83a 	sub	r2,zero,r2
 4012aec:	00000106 	br	4012af4 <alt_hostfs_read+0x5c>
 4012af0:	e0bffb17 	ldw	r2,-20(fp)
}
 4012af4:	e037883a 	mov	sp,fp
 4012af8:	df000017 	ldw	fp,0(sp)
 4012afc:	dec00104 	addi	sp,sp,4
 4012b00:	f800283a 	ret

04012b04 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
 4012b04:	defffa04 	addi	sp,sp,-24
 4012b08:	df000515 	stw	fp,20(sp)
 4012b0c:	df000504 	addi	fp,sp,20
 4012b10:	e13ffd15 	stw	r4,-12(fp)
 4012b14:	e17ffe15 	stw	r5,-8(fp)
 4012b18:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
 4012b1c:	d0a01604 	addi	r2,gp,-32680
 4012b20:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 4012b24:	e0bffd17 	ldw	r2,-12(fp)
 4012b28:	10800117 	ldw	r2,4(r2)
 4012b2c:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
 4012b30:	e0bffe17 	ldw	r2,-8(fp)
 4012b34:	100b883a 	mov	r5,r2
  r6 = len;
 4012b38:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 4012b3c:	003da07a 	break	1

  rc = r2;
 4012b40:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 4012b44:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 4012b48:	e0bffc17 	ldw	r2,-16(fp)
 4012b4c:	10000326 	beq	r2,zero,4012b5c <alt_hostfs_write+0x58>
 4012b50:	e0bffc17 	ldw	r2,-16(fp)
 4012b54:	0085c83a 	sub	r2,zero,r2
 4012b58:	00000106 	br	4012b60 <alt_hostfs_write+0x5c>
 4012b5c:	e0bffb17 	ldw	r2,-20(fp)
}
 4012b60:	e037883a 	mov	sp,fp
 4012b64:	df000017 	ldw	fp,0(sp)
 4012b68:	dec00104 	addi	sp,sp,4
 4012b6c:	f800283a 	ret

04012b70 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
 4012b70:	defffa04 	addi	sp,sp,-24
 4012b74:	df000515 	stw	fp,20(sp)
 4012b78:	df000504 	addi	fp,sp,20
 4012b7c:	e13ffd15 	stw	r4,-12(fp)
 4012b80:	e17ffe15 	stw	r5,-8(fp)
 4012b84:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
 4012b88:	d0a01904 	addi	r2,gp,-32668
 4012b8c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 4012b90:	e0bffd17 	ldw	r2,-12(fp)
 4012b94:	10800117 	ldw	r2,4(r2)
 4012b98:	1009883a 	mov	r4,r2
  r5 = ptr;
 4012b9c:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
 4012ba0:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 4012ba4:	003da07a 	break	1

  rc = r2;
 4012ba8:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 4012bac:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 4012bb0:	e0bffc17 	ldw	r2,-16(fp)
 4012bb4:	10000326 	beq	r2,zero,4012bc4 <alt_hostfs_seek+0x54>
 4012bb8:	e0bffc17 	ldw	r2,-16(fp)
 4012bbc:	0085c83a 	sub	r2,zero,r2
 4012bc0:	00000106 	br	4012bc8 <alt_hostfs_seek+0x58>
 4012bc4:	e0bffb17 	ldw	r2,-20(fp)
}
 4012bc8:	e037883a 	mov	sp,fp
 4012bcc:	df000017 	ldw	fp,0(sp)
 4012bd0:	dec00104 	addi	sp,sp,4
 4012bd4:	f800283a 	ret

04012bd8 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
 4012bd8:	deffe904 	addi	sp,sp,-92
 4012bdc:	df001615 	stw	fp,88(sp)
 4012be0:	df001604 	addi	fp,sp,88
 4012be4:	e13ffe15 	stw	r4,-8(fp)
 4012be8:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
 4012bec:	d0a01c04 	addi	r2,gp,-32656
 4012bf0:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 4012bf4:	e0bffe17 	ldw	r2,-8(fp)
 4012bf8:	10800117 	ldw	r2,4(r2)
 4012bfc:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
 4012c00:	e0bfee04 	addi	r2,fp,-72
 4012c04:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
 4012c08:	003da07a 	break	1

  rc = r2;
 4012c0c:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
 4012c10:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
 4012c14:	e0bfec17 	ldw	r2,-80(fp)
 4012c18:	1000621e 	bne	r2,zero,4012da4 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
 4012c1c:	e0bfee04 	addi	r2,fp,-72
 4012c20:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
 4012c24:	e0bfea17 	ldw	r2,-88(fp)
 4012c28:	10801004 	addi	r2,r2,64
 4012c2c:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
 4012c30:	00001606 	br	4012c8c <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 4012c34:	e0bfea17 	ldw	r2,-88(fp)
 4012c38:	10800017 	ldw	r2,0(r2)
 4012c3c:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
 4012c40:	e0bfea17 	ldw	r2,-88(fp)
 4012c44:	10800017 	ldw	r2,0(r2)
 4012c48:	10803fec 	andhi	r2,r2,255
 4012c4c:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 4012c50:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
 4012c54:	e0bfea17 	ldw	r2,-88(fp)
 4012c58:	10800017 	ldw	r2,0(r2)
 4012c5c:	10bfc00c 	andi	r2,r2,65280
 4012c60:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
 4012c64:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
 4012c68:	e0bfea17 	ldw	r2,-88(fp)
 4012c6c:	10800017 	ldw	r2,0(r2)
 4012c70:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
 4012c74:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 4012c78:	e0bfea17 	ldw	r2,-88(fp)
 4012c7c:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
 4012c80:	e0bfea17 	ldw	r2,-88(fp)
 4012c84:	10800104 	addi	r2,r2,4
 4012c88:	e0bfea15 	stw	r2,-88(fp)
 4012c8c:	e0ffea17 	ldw	r3,-88(fp)
 4012c90:	e0bfed17 	ldw	r2,-76(fp)
 4012c94:	18bfe736 	bltu	r3,r2,4012c34 <__alt_data_end+0xfc012c34>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
 4012c98:	e0bfff17 	ldw	r2,-4(fp)
 4012c9c:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
 4012ca0:	e0bfea17 	ldw	r2,-88(fp)
 4012ca4:	10800f04 	addi	r2,r2,60
 4012ca8:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
 4012cac:	00000506 	br	4012cc4 <alt_hostfs_fstat+0xec>
      *ptr = 0;
 4012cb0:	e0bfea17 	ldw	r2,-88(fp)
 4012cb4:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
 4012cb8:	e0bfea17 	ldw	r2,-88(fp)
 4012cbc:	10800104 	addi	r2,r2,4
 4012cc0:	e0bfea15 	stw	r2,-88(fp)
 4012cc4:	e0ffea17 	ldw	r3,-88(fp)
 4012cc8:	e0bfed17 	ldw	r2,-76(fp)
 4012ccc:	18bff836 	bltu	r3,r2,4012cb0 <__alt_data_end+0xfc012cb0>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
 4012cd0:	e0bfee17 	ldw	r2,-72(fp)
 4012cd4:	1007883a 	mov	r3,r2
 4012cd8:	e0bfff17 	ldw	r2,-4(fp)
 4012cdc:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
 4012ce0:	e0bfef17 	ldw	r2,-68(fp)
 4012ce4:	1007883a 	mov	r3,r2
 4012ce8:	e0bfff17 	ldw	r2,-4(fp)
 4012cec:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
 4012cf0:	e0fff017 	ldw	r3,-64(fp)
 4012cf4:	e0bfff17 	ldw	r2,-4(fp)
 4012cf8:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
 4012cfc:	e0bff117 	ldw	r2,-60(fp)
 4012d00:	1007883a 	mov	r3,r2
 4012d04:	e0bfff17 	ldw	r2,-4(fp)
 4012d08:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
 4012d0c:	e0bff217 	ldw	r2,-56(fp)
 4012d10:	1007883a 	mov	r3,r2
 4012d14:	e0bfff17 	ldw	r2,-4(fp)
 4012d18:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
 4012d1c:	e0bff317 	ldw	r2,-52(fp)
 4012d20:	1007883a 	mov	r3,r2
 4012d24:	e0bfff17 	ldw	r2,-4(fp)
 4012d28:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
 4012d2c:	e0bff417 	ldw	r2,-48(fp)
 4012d30:	1007883a 	mov	r3,r2
 4012d34:	e0bfff17 	ldw	r2,-4(fp)
 4012d38:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
 4012d3c:	e0bff617 	ldw	r2,-40(fp)
 4012d40:	1007883a 	mov	r3,r2
 4012d44:	e0bfff17 	ldw	r2,-4(fp)
 4012d48:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
 4012d4c:	e0bffb17 	ldw	r2,-20(fp)
 4012d50:	1007883a 	mov	r3,r2
 4012d54:	e0bfff17 	ldw	r2,-4(fp)
 4012d58:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
 4012d5c:	e0bffc17 	ldw	r2,-16(fp)
 4012d60:	1007883a 	mov	r3,r2
 4012d64:	e0bfff17 	ldw	r2,-4(fp)
 4012d68:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
 4012d6c:	e0bffd17 	ldw	r2,-12(fp)
 4012d70:	1007883a 	mov	r3,r2
 4012d74:	e0bfff17 	ldw	r2,-4(fp)
 4012d78:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
 4012d7c:	e0bff817 	ldw	r2,-32(fp)
 4012d80:	1007883a 	mov	r3,r2
 4012d84:	e0bfff17 	ldw	r2,-4(fp)
 4012d88:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
 4012d8c:	e0bffa17 	ldw	r2,-24(fp)
 4012d90:	1007883a 	mov	r3,r2
 4012d94:	e0bfff17 	ldw	r2,-4(fp)
 4012d98:	10c00c15 	stw	r3,48(r2)

    return rc;
 4012d9c:	e0bfeb17 	ldw	r2,-84(fp)
 4012da0:	00000206 	br	4012dac <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
 4012da4:	e0bfec17 	ldw	r2,-80(fp)
 4012da8:	0085c83a 	sub	r2,zero,r2
}
 4012dac:	e037883a 	mov	sp,fp
 4012db0:	df000017 	ldw	fp,0(sp)
 4012db4:	dec00104 	addi	sp,sp,4
 4012db8:	f800283a 	ret

04012dbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4012dbc:	defffe04 	addi	sp,sp,-8
 4012dc0:	dfc00115 	stw	ra,4(sp)
 4012dc4:	df000015 	stw	fp,0(sp)
 4012dc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4012dcc:	d0a00b17 	ldw	r2,-32724(gp)
 4012dd0:	10000326 	beq	r2,zero,4012de0 <alt_get_errno+0x24>
 4012dd4:	d0a00b17 	ldw	r2,-32724(gp)
 4012dd8:	103ee83a 	callr	r2
 4012ddc:	00000106 	br	4012de4 <alt_get_errno+0x28>
 4012de0:	d0a71d04 	addi	r2,gp,-25484
}
 4012de4:	e037883a 	mov	sp,fp
 4012de8:	dfc00117 	ldw	ra,4(sp)
 4012dec:	df000017 	ldw	fp,0(sp)
 4012df0:	dec00204 	addi	sp,sp,8
 4012df4:	f800283a 	ret

04012df8 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_standard_descriptor *descriptor)
{
 4012df8:	defffc04 	addi	sp,sp,-16
 4012dfc:	df000315 	stw	fp,12(sp)
 4012e00:	df000304 	addi	fp,sp,12
 4012e04:	e13ffd15 	stw	r4,-12(fp)
 4012e08:	e17ffe15 	stw	r5,-8(fp)
 4012e0c:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
 4012e10:	e0bffd17 	ldw	r2,-12(fp)
 4012e14:	10800037 	ldwio	r2,0(r2)
 4012e18:	1080010c 	andi	r2,r2,4
 4012e1c:	10000226 	beq	r2,zero,4012e28 <alt_msgdma_write_standard_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
        is non-blocking*/
        return -ENOSPC;
 4012e20:	00bff904 	movi	r2,-28
 4012e24:	00001506 	br	4012e7c <alt_msgdma_write_standard_descriptor+0x84>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
 4012e28:	e0bfff17 	ldw	r2,-4(fp)
 4012e2c:	10800017 	ldw	r2,0(r2)
 4012e30:	1007883a 	mov	r3,r2
 4012e34:	e0bffe17 	ldw	r2,-8(fp)
 4012e38:	10c00035 	stwio	r3,0(r2)
        (alt_u32)descriptor->read_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
 4012e3c:	e0bffe17 	ldw	r2,-8(fp)
 4012e40:	10800104 	addi	r2,r2,4
 4012e44:	e0ffff17 	ldw	r3,-4(fp)
 4012e48:	18c00117 	ldw	r3,4(r3)
 4012e4c:	10c00035 	stwio	r3,0(r2)
    (    alt_u32)descriptor->write_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
 4012e50:	e0bffe17 	ldw	r2,-8(fp)
 4012e54:	10800204 	addi	r2,r2,8
 4012e58:	e0ffff17 	ldw	r3,-4(fp)
 4012e5c:	18c00217 	ldw	r3,8(r3)
 4012e60:	10c00035 	stwio	r3,0(r2)
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
 4012e64:	e0bffe17 	ldw	r2,-8(fp)
 4012e68:	10800304 	addi	r2,r2,12
 4012e6c:	e0ffff17 	ldw	r3,-4(fp)
 4012e70:	18c00317 	ldw	r3,12(r3)
 4012e74:	10c00035 	stwio	r3,0(r2)
        descriptor->control);
        return 0;
 4012e78:	0005883a 	mov	r2,zero
}
 4012e7c:	e037883a 	mov	sp,fp
 4012e80:	df000017 	ldw	fp,0(sp)
 4012e84:	dec00104 	addi	sp,sp,4
 4012e88:	f800283a 	ret

04012e8c <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_extended_descriptor *descriptor)
{
 4012e8c:	defffc04 	addi	sp,sp,-16
 4012e90:	df000315 	stw	fp,12(sp)
 4012e94:	df000304 	addi	fp,sp,12
 4012e98:	e13ffd15 	stw	r4,-12(fp)
 4012e9c:	e17ffe15 	stw	r5,-8(fp)
 4012ea0:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
 4012ea4:	e0bffd17 	ldw	r2,-12(fp)
 4012ea8:	10800037 	ldwio	r2,0(r2)
 4012eac:	1080010c 	andi	r2,r2,4
 4012eb0:	10000226 	beq	r2,zero,4012ebc <alt_msgdma_write_extended_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
    is non-blocking*/
        return -ENOSPC;
 4012eb4:	00bff904 	movi	r2,-28
 4012eb8:	00003b06 	br	4012fa8 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
 4012ebc:	e0bfff17 	ldw	r2,-4(fp)
 4012ec0:	10800017 	ldw	r2,0(r2)
 4012ec4:	1007883a 	mov	r3,r2
 4012ec8:	e0bffe17 	ldw	r2,-8(fp)
 4012ecc:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
 4012ed0:	e0bffe17 	ldw	r2,-8(fp)
 4012ed4:	10800104 	addi	r2,r2,4
 4012ed8:	e0ffff17 	ldw	r3,-4(fp)
 4012edc:	18c00117 	ldw	r3,4(r3)
 4012ee0:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
 4012ee4:	e0bffe17 	ldw	r2,-8(fp)
 4012ee8:	10800204 	addi	r2,r2,8
 4012eec:	e0ffff17 	ldw	r3,-4(fp)
 4012ef0:	18c00217 	ldw	r3,8(r3)
 4012ef4:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
 4012ef8:	e0bffe17 	ldw	r2,-8(fp)
 4012efc:	10800304 	addi	r2,r2,12
 4012f00:	e0ffff17 	ldw	r3,-4(fp)
 4012f04:	18c0030b 	ldhu	r3,12(r3)
 4012f08:	18ffffcc 	andi	r3,r3,65535
 4012f0c:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
 4012f10:	e0bffe17 	ldw	r2,-8(fp)
 4012f14:	10800384 	addi	r2,r2,14
 4012f18:	e0ffff17 	ldw	r3,-4(fp)
 4012f1c:	18c00383 	ldbu	r3,14(r3)
 4012f20:	18c03fcc 	andi	r3,r3,255
 4012f24:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
 4012f28:	e0bffe17 	ldw	r2,-8(fp)
 4012f2c:	108003c4 	addi	r2,r2,15
 4012f30:	e0ffff17 	ldw	r3,-4(fp)
 4012f34:	18c003c3 	ldbu	r3,15(r3)
 4012f38:	18c03fcc 	andi	r3,r3,255
 4012f3c:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
 4012f40:	e0bffe17 	ldw	r2,-8(fp)
 4012f44:	10800404 	addi	r2,r2,16
 4012f48:	e0ffff17 	ldw	r3,-4(fp)
 4012f4c:	18c0040b 	ldhu	r3,16(r3)
 4012f50:	18ffffcc 	andi	r3,r3,65535
 4012f54:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
 4012f58:	e0bffe17 	ldw	r2,-8(fp)
 4012f5c:	10800484 	addi	r2,r2,18
 4012f60:	e0ffff17 	ldw	r3,-4(fp)
 4012f64:	18c0048b 	ldhu	r3,18(r3)
 4012f68:	18ffffcc 	andi	r3,r3,65535
 4012f6c:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
 4012f70:	e0bffe17 	ldw	r2,-8(fp)
 4012f74:	10800504 	addi	r2,r2,20
 4012f78:	0007883a 	mov	r3,zero
 4012f7c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
 4012f80:	e0bffe17 	ldw	r2,-8(fp)
 4012f84:	10800604 	addi	r2,r2,24
 4012f88:	0007883a 	mov	r3,zero
 4012f8c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
 4012f90:	e0bffe17 	ldw	r2,-8(fp)
 4012f94:	10800704 	addi	r2,r2,28
 4012f98:	e0ffff17 	ldw	r3,-4(fp)
 4012f9c:	18c00717 	ldw	r3,28(r3)
 4012fa0:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->control);
    return 0;
 4012fa4:	0005883a 	mov	r2,zero
}
 4012fa8:	e037883a 	mov	sp,fp
 4012fac:	df000017 	ldw	fp,0(sp)
 4012fb0:	dec00104 	addi	sp,sp,4
 4012fb4:	f800283a 	ret

04012fb8 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
 4012fb8:	defff804 	addi	sp,sp,-32
 4012fbc:	dfc00715 	stw	ra,28(sp)
 4012fc0:	df000615 	stw	fp,24(sp)
 4012fc4:	df000604 	addi	fp,sp,24
 4012fc8:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
 4012fcc:	e0bfff17 	ldw	r2,-4(fp)
 4012fd0:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
 4012fd4:	e0bffa17 	ldw	r2,-24(fp)
 4012fd8:	10801783 	ldbu	r2,94(r2)
 4012fdc:	10803fcc 	andi	r2,r2,255
 4012fe0:	10001126 	beq	r2,zero,4013028 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
 4012fe4:	e0bffa17 	ldw	r2,-24(fp)
 4012fe8:	10800617 	ldw	r2,24(r2)
 4012fec:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
 4012ff0:	1007883a 	mov	r3,r2
 4012ff4:	00bffdc4 	movi	r2,-9
 4012ff8:	1884703a 	and	r2,r3,r2
 4012ffc:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                & ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
 4013000:	e0bffa17 	ldw	r2,-24(fp)
 4013004:	10800617 	ldw	r2,24(r2)
 4013008:	e0fffb17 	ldw	r3,-20(fp)
 401300c:	10c00035 	stwio	r3,0(r2)
                temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
 4013010:	e0bffa17 	ldw	r2,-24(fp)
 4013014:	10800617 	ldw	r2,24(r2)
 4013018:	10800404 	addi	r2,r2,16
 401301c:	00c00044 	movi	r3,1
 4013020:	10c00035 	stwio	r3,0(r2)
 4013024:	00001106 	br	401306c <alt_msgdma_irq+0xb4>
                ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
 4013028:	e0bffa17 	ldw	r2,-24(fp)
 401302c:	10800317 	ldw	r2,12(r2)
 4013030:	10800104 	addi	r2,r2,4
 4013034:	10800037 	ldwio	r2,0(r2)
 4013038:	1007883a 	mov	r3,r2
 401303c:	00bffbc4 	movi	r2,-17
 4013040:	1884703a 	and	r2,r3,r2
 4013044:	e0bffb15 	stw	r2,-20(fp)
                & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
 4013048:	e0bffa17 	ldw	r2,-24(fp)
 401304c:	10800317 	ldw	r2,12(r2)
 4013050:	10800104 	addi	r2,r2,4
 4013054:	e0fffb17 	ldw	r3,-20(fp)
 4013058:	10c00035 	stwio	r3,0(r2)
        /* clear the IRQ status */
        IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
 401305c:	e0bffa17 	ldw	r2,-24(fp)
 4013060:	10800317 	ldw	r2,12(r2)
 4013064:	00c08004 	movi	r3,512
 4013068:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 401306c:	e0bffa17 	ldw	r2,-24(fp)
 4013070:	10800b17 	ldw	r2,44(r2)
 4013074:	10001226 	beq	r2,zero,40130c0 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013078:	0005303a 	rdctl	r2,status
 401307c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013080:	e0fffd17 	ldw	r3,-12(fp)
 4013084:	00bfff84 	movi	r2,-2
 4013088:	1884703a 	and	r2,r3,r2
 401308c:	1001703a 	wrctl	status,r2
  
  return context;
 4013090:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
 4013094:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
 4013098:	e0bffa17 	ldw	r2,-24(fp)
 401309c:	10800b17 	ldw	r2,44(r2)
 40130a0:	e0fffa17 	ldw	r3,-24(fp)
 40130a4:	18c00c17 	ldw	r3,48(r3)
 40130a8:	1809883a 	mov	r4,r3
 40130ac:	103ee83a 	callr	r2
 40130b0:	e0bffc17 	ldw	r2,-16(fp)
 40130b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40130b8:	e0bffe17 	ldw	r2,-8(fp)
 40130bc:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
 40130c0:	e0bffa17 	ldw	r2,-24(fp)
 40130c4:	10801783 	ldbu	r2,94(r2)
 40130c8:	10803fcc 	andi	r2,r2,255
 40130cc:	10000a26 	beq	r2,zero,40130f8 <alt_msgdma_irq+0x140>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
 40130d0:	e0bffa17 	ldw	r2,-24(fp)
 40130d4:	10800617 	ldw	r2,24(r2)
 40130d8:	10800037 	ldwio	r2,0(r2)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
 40130dc:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
        temporary_control = 
 40130e0:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
 40130e4:	e0bffa17 	ldw	r2,-24(fp)
 40130e8:	10800617 	ldw	r2,24(r2)
 40130ec:	e0fffb17 	ldw	r3,-20(fp)
 40130f0:	10c00035 	stwio	r3,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
 40130f4:	00000c06 	br	4013128 <alt_msgdma_irq+0x170>
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
 40130f8:	e0bffa17 	ldw	r2,-24(fp)
 40130fc:	10800317 	ldw	r2,12(r2)
 4013100:	10800104 	addi	r2,r2,4
 4013104:	10800037 	ldwio	r2,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
 4013108:	10800414 	ori	r2,r2,16
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
 401310c:	e0bffb15 	stw	r2,-20(fp)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
 4013110:	e0bffa17 	ldw	r2,-24(fp)
 4013114:	10800317 	ldw	r2,12(r2)
 4013118:	10800104 	addi	r2,r2,4
 401311c:	e0fffb17 	ldw	r3,-20(fp)
 4013120:	10c00035 	stwio	r3,0(r2)
    }

    return;
 4013124:	0001883a 	nop
}
 4013128:	e037883a 	mov	sp,fp
 401312c:	dfc00117 	ldw	ra,4(sp)
 4013130:	df000017 	ldw	fp,0(sp)
 4013134:	dec00204 	addi	sp,sp,8
 4013138:	f800283a 	ret

0401313c <alt_msgdma_construct_standard_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
 401313c:	defffb04 	addi	sp,sp,-20
 4013140:	df000415 	stw	fp,16(sp)
 4013144:	df000404 	addi	fp,sp,16
 4013148:	e13ffc15 	stw	r4,-16(fp)
 401314c:	e17ffd15 	stw	r5,-12(fp)
 4013150:	e1bffe15 	stw	r6,-8(fp)
 4013154:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
 4013158:	e0bffc17 	ldw	r2,-16(fp)
 401315c:	10c01217 	ldw	r3,72(r2)
 4013160:	e0800117 	ldw	r2,4(fp)
 4013164:	18800436 	bltu	r3,r2,4013178 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
 4013168:	e0bffc17 	ldw	r2,-16(fp)
 401316c:	10801703 	ldbu	r2,92(r2)
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
 4013170:	10803fcc 	andi	r2,r2,255
 4013174:	10000226 	beq	r2,zero,4013180 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
 4013178:	00bffa84 	movi	r2,-22
 401317c:	00000e06 	br	40131b8 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
 4013180:	e0bffd17 	ldw	r2,-12(fp)
 4013184:	e0fffe17 	ldw	r3,-8(fp)
 4013188:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
 401318c:	e0bffd17 	ldw	r2,-12(fp)
 4013190:	e0ffff17 	ldw	r3,-4(fp)
 4013194:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
 4013198:	e0bffd17 	ldw	r2,-12(fp)
 401319c:	e0c00117 	ldw	r3,4(fp)
 40131a0:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
 40131a4:	e0800217 	ldw	r2,8(fp)
 40131a8:	10e00034 	orhi	r3,r2,32768
 40131ac:	e0bffd17 	ldw	r2,-12(fp)
 40131b0:	10c00315 	stw	r3,12(r2)
    
    return 0;
 40131b4:	0005883a 	mov	r2,zero
}
 40131b8:	e037883a 	mov	sp,fp
 40131bc:	df000017 	ldw	fp,0(sp)
 40131c0:	dec00104 	addi	sp,sp,4
 40131c4:	f800283a 	ret

040131c8 <alt_msgdma_construct_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
 40131c8:	defff604 	addi	sp,sp,-40
 40131cc:	df000915 	stw	fp,36(sp)
 40131d0:	df000904 	addi	fp,sp,36
 40131d4:	e13ff715 	stw	r4,-36(fp)
 40131d8:	e17ff815 	stw	r5,-32(fp)
 40131dc:	e1bff915 	stw	r6,-28(fp)
 40131e0:	e1fffa15 	stw	r7,-24(fp)
 40131e4:	e1800317 	ldw	r6,12(fp)
 40131e8:	e1400417 	ldw	r5,16(fp)
 40131ec:	e1000517 	ldw	r4,20(fp)
 40131f0:	e0c00617 	ldw	r3,24(fp)
 40131f4:	e0800717 	ldw	r2,28(fp)
 40131f8:	e1bffb0d 	sth	r6,-20(fp)
 40131fc:	e17ffc05 	stb	r5,-16(fp)
 4013200:	e13ffd05 	stb	r4,-12(fp)
 4013204:	e0fffe0d 	sth	r3,-8(fp)
 4013208:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
 401320c:	e0bff717 	ldw	r2,-36(fp)
 4013210:	10c01217 	ldw	r3,72(r2)
 4013214:	e0800117 	ldw	r2,4(fp)
 4013218:	18801936 	bltu	r3,r2,4013280 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
 401321c:	e13ff717 	ldw	r4,-36(fp)
 4013220:	20801317 	ldw	r2,76(r4)
 4013224:	20c01417 	ldw	r3,80(r4)
 4013228:	e13ffe0b 	ldhu	r4,-8(fp)
 401322c:	213fffcc 	andi	r4,r4,65535
 4013230:	2015883a 	mov	r10,r4
 4013234:	0017883a 	mov	r11,zero
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
 4013238:	1ac01136 	bltu	r3,r11,4013280 <alt_msgdma_construct_extended_descriptor+0xb8>
 401323c:	58c0011e 	bne	r11,r3,4013244 <alt_msgdma_construct_extended_descriptor+0x7c>
 4013240:	12800f36 	bltu	r2,r10,4013280 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
 4013244:	e13ff717 	ldw	r4,-36(fp)
 4013248:	20801317 	ldw	r2,76(r4)
 401324c:	20c01417 	ldw	r3,80(r4)
 4013250:	e13fff0b 	ldhu	r4,-4(fp)
 4013254:	213fffcc 	andi	r4,r4,65535
 4013258:	2011883a 	mov	r8,r4
 401325c:	0013883a 	mov	r9,zero
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
 4013260:	1a400736 	bltu	r3,r9,4013280 <alt_msgdma_construct_extended_descriptor+0xb8>
 4013264:	48c0011e 	bne	r9,r3,401326c <alt_msgdma_construct_extended_descriptor+0xa4>
 4013268:	12000536 	bltu	r2,r8,4013280 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
 401326c:	e0bff717 	ldw	r2,-36(fp)
 4013270:	10801703 	ldbu	r2,92(r2)
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
 4013274:	10803fcc 	andi	r2,r2,255
 4013278:	10800060 	cmpeqi	r2,r2,1
 401327c:	1000021e 	bne	r2,zero,4013288 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
 4013280:	00bffa84 	movi	r2,-22
 4013284:	00002106 	br	401330c <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
 4013288:	e0bff817 	ldw	r2,-32(fp)
 401328c:	e0fff917 	ldw	r3,-28(fp)
 4013290:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
 4013294:	e0bff817 	ldw	r2,-32(fp)
 4013298:	e0fffa17 	ldw	r3,-24(fp)
 401329c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
 40132a0:	e0bff817 	ldw	r2,-32(fp)
 40132a4:	e0c00117 	ldw	r3,4(fp)
 40132a8:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
 40132ac:	e0bff817 	ldw	r2,-32(fp)
 40132b0:	e0fffb0b 	ldhu	r3,-20(fp)
 40132b4:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
 40132b8:	e0bff817 	ldw	r2,-32(fp)
 40132bc:	e0fffc03 	ldbu	r3,-16(fp)
 40132c0:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
 40132c4:	e0bff817 	ldw	r2,-32(fp)
 40132c8:	e0fffd03 	ldbu	r3,-12(fp)
 40132cc:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
 40132d0:	e0bff817 	ldw	r2,-32(fp)
 40132d4:	e0fffe0b 	ldhu	r3,-8(fp)
 40132d8:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
 40132dc:	e0bff817 	ldw	r2,-32(fp)
 40132e0:	e0ffff0b 	ldhu	r3,-4(fp)
 40132e4:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
 40132e8:	e0bff817 	ldw	r2,-32(fp)
 40132ec:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
 40132f0:	e0bff817 	ldw	r2,-32(fp)
 40132f4:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
 40132f8:	e0800217 	ldw	r2,8(fp)
 40132fc:	10e00034 	orhi	r3,r2,32768
 4013300:	e0bff817 	ldw	r2,-32(fp)
 4013304:	10c00715 	stw	r3,28(r2)

  return 0 ;
 4013308:	0005883a 	mov	r2,zero

}
 401330c:	e037883a 	mov	sp,fp
 4013310:	df000017 	ldw	fp,0(sp)
 4013314:	dec00104 	addi	sp,sp,4
 4013318:	f800283a 	ret

0401331c <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
 401331c:	defff004 	addi	sp,sp,-64
 4013320:	dfc00f15 	stw	ra,60(sp)
 4013324:	df000e15 	stw	fp,56(sp)
 4013328:	df000e04 	addi	fp,sp,56
 401332c:	e13ffd15 	stw	r4,-12(fp)
 4013330:	e17ffe15 	stw	r5,-8(fp)
 4013334:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
 4013338:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
 401333c:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
 4013340:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
 4013344:	e0bffd17 	ldw	r2,-12(fp)
 4013348:	10800317 	ldw	r2,12(r2)
 401334c:	10800204 	addi	r2,r2,8
 4013350:	10800037 	ldwio	r2,0(r2)
    alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
 4013354:	10bfffcc 	andi	r2,r2,65535
 4013358:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
 401335c:	e0bffd17 	ldw	r2,-12(fp)
 4013360:	10800317 	ldw	r2,12(r2)
 4013364:	10800204 	addi	r2,r2,8
 4013368:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
 401336c:	1004d43a 	srli	r2,r2,16
 4013370:	e0bff615 	stw	r2,-40(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
 4013374:	e0bffd17 	ldw	r2,-12(fp)
 4013378:	10800917 	ldw	r2,36(r2)
 401337c:	e0fff617 	ldw	r3,-40(fp)
 4013380:	1880042e 	bgeu	r3,r2,4013394 <alt_msgdma_descriptor_async_transfer+0x78>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
 4013384:	e0bffd17 	ldw	r2,-12(fp)
 4013388:	10800917 	ldw	r2,36(r2)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
 401338c:	e0fff517 	ldw	r3,-44(fp)
 4013390:	18800236 	bltu	r3,r2,401339c <alt_msgdma_descriptor_async_transfer+0x80>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    {
        /*at least one write or read FIFO descriptor buffer is full,
        returning so that this function is non-blocking*/
        return -ENOSPC;
 4013394:	00bff904 	movi	r2,-28
 4013398:	00008f06 	br	40135d8 <alt_msgdma_descriptor_async_transfer+0x2bc>
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
 401339c:	00800804 	movi	r2,32
 40133a0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40133a4:	0005303a 	rdctl	r2,status
 40133a8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40133ac:	e0fff717 	ldw	r3,-36(fp)
 40133b0:	00bfff84 	movi	r2,-2
 40133b4:	1884703a 	and	r2,r3,r2
 40133b8:	1001703a 	wrctl	status,r2
  
  return context;
 40133bc:	e0bff717 	ldw	r2,-36(fp)
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
 40133c0:	e0bff415 	stw	r2,-48(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
 40133c4:	e0bffd17 	ldw	r2,-12(fp)
 40133c8:	10800317 	ldw	r2,12(r2)
 40133cc:	10800104 	addi	r2,r2,4
 40133d0:	e0fff317 	ldw	r3,-52(fp)
 40133d4:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
 40133d8:	e0bffd17 	ldw	r2,-12(fp)
 40133dc:	10800317 	ldw	r2,12(r2)
 40133e0:	e0fffd17 	ldw	r3,-12(fp)
 40133e4:	18c00317 	ldw	r3,12(r3)
 40133e8:	18c00037 	ldwio	r3,0(r3)
 40133ec:	10c00035 	stwio	r3,0(r2)
 40133f0:	e0bff417 	ldw	r2,-48(fp)
 40133f4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40133f8:	e0bffc17 	ldw	r2,-16(fp)
 40133fc:	1001703a 	wrctl	status,r2
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
 4013400:	e0bffe17 	ldw	r2,-8(fp)
 4013404:	10001a26 	beq	r2,zero,4013470 <alt_msgdma_descriptor_async_transfer+0x154>
 4013408:	e0bfff17 	ldw	r2,-4(fp)
 401340c:	1000181e 	bne	r2,zero,4013470 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
 4013410:	00000d06 	br	4013448 <alt_msgdma_descriptor_async_transfer+0x12c>
        dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
 4013414:	01000044 	movi	r4,1
 4013418:	4014e880 	call	4014e88 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
 401341c:	e0bff20b 	ldhu	r2,-56(fp)
 4013420:	1084e230 	cmpltui	r2,r2,5000
 4013424:	1000051e 	bne	r2,zero,401343c <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
 4013428:	01010074 	movhi	r4,1025
 401342c:	211a1204 	addi	r4,r4,26696
 4013430:	401597c0 	call	401597c <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
 4013434:	00bff084 	movi	r2,-62
 4013438:	00006706 	br	40135d8 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
 401343c:	e0bff20b 	ldhu	r2,-56(fp)
 4013440:	10800044 	addi	r2,r2,1
 4013444:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
 4013448:	e0bffd17 	ldw	r2,-12(fp)
 401344c:	10c00317 	ldw	r3,12(r2)
 4013450:	e0bffd17 	ldw	r2,-12(fp)
 4013454:	10800417 	ldw	r2,16(r2)
 4013458:	e1bffe17 	ldw	r6,-8(fp)
 401345c:	100b883a 	mov	r5,r2
 4013460:	1809883a 	mov	r4,r3
 4013464:	4012df80 	call	4012df8 <alt_msgdma_write_standard_descriptor>
 4013468:	103fea1e 	bne	r2,zero,4013414 <__alt_data_end+0xfc013414>
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
 401346c:	00001f06 	br	40134ec <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
 4013470:	e0bffe17 	ldw	r2,-8(fp)
 4013474:	10001b1e 	bne	r2,zero,40134e4 <alt_msgdma_descriptor_async_transfer+0x1c8>
 4013478:	e0bfff17 	ldw	r2,-4(fp)
 401347c:	10001926 	beq	r2,zero,40134e4 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
 4013480:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
 4013484:	00000d06 	br	40134bc <alt_msgdma_descriptor_async_transfer+0x1a0>
        dev->csr_base, 
        dev->descriptor_base, 
        extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
 4013488:	01000044 	movi	r4,1
 401348c:	4014e880 	call	4014e88 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
 4013490:	e0bff20b 	ldhu	r2,-56(fp)
 4013494:	1084e230 	cmpltui	r2,r2,5000
 4013498:	1000051e 	bne	r2,zero,40134b0 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
 401349c:	01010074 	movhi	r4,1025
 40134a0:	211a2804 	addi	r4,r4,26784
 40134a4:	401597c0 	call	401597c <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
 40134a8:	00bff084 	movi	r2,-62
 40134ac:	00004a06 	br	40135d8 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
 40134b0:	e0bff20b 	ldhu	r2,-56(fp)
 40134b4:	10800044 	addi	r2,r2,1
 40134b8:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
 40134bc:	e0bffd17 	ldw	r2,-12(fp)
 40134c0:	10c00317 	ldw	r3,12(r2)
 40134c4:	e0bffd17 	ldw	r2,-12(fp)
 40134c8:	10800417 	ldw	r2,16(r2)
 40134cc:	e1bfff17 	ldw	r6,-4(fp)
 40134d0:	100b883a 	mov	r5,r2
 40134d4:	1809883a 	mov	r4,r3
 40134d8:	4012e8c0 	call	4012e8c <alt_msgdma_write_extended_descriptor>
 40134dc:	103fea1e 	bne	r2,zero,4013488 <__alt_data_end+0xfc013488>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
 40134e0:	00000206 	br	40134ec <alt_msgdma_descriptor_async_transfer+0x1d0>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
 40134e4:	00bfffc4 	movi	r2,-1
 40134e8:	00003b06 	br	40135d8 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
 40134ec:	e0bffd17 	ldw	r2,-12(fp)
 40134f0:	10800b17 	ldw	r2,44(r2)
 40134f4:	10001c26 	beq	r2,zero,4013568 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
 40134f8:	e0bffd17 	ldw	r2,-12(fp)
 40134fc:	10c00d17 	ldw	r3,52(r2)
 4013500:	e0bff317 	ldw	r2,-52(fp)
 4013504:	1884b03a 	or	r2,r3,r2
 4013508:	10800514 	ori	r2,r2,20
 401350c:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
 4013510:	e0fff317 	ldw	r3,-52(fp)
 4013514:	00bff7c4 	movi	r2,-33
 4013518:	1884703a 	and	r2,r3,r2
 401351c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013520:	0005303a 	rdctl	r2,status
 4013524:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013528:	e0fffa17 	ldw	r3,-24(fp)
 401352c:	00bfff84 	movi	r2,-2
 4013530:	1884703a 	and	r2,r3,r2
 4013534:	1001703a 	wrctl	status,r2
  
  return context;
 4013538:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
 401353c:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
 4013540:	e0bffd17 	ldw	r2,-12(fp)
 4013544:	10800317 	ldw	r2,12(r2)
 4013548:	10800104 	addi	r2,r2,4
 401354c:	e0fff317 	ldw	r3,-52(fp)
 4013550:	10c00035 	stwio	r3,0(r2)
 4013554:	e0bff417 	ldw	r2,-48(fp)
 4013558:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401355c:	e0bff817 	ldw	r2,-32(fp)
 4013560:	1001703a 	wrctl	status,r2
 4013564:	00001b06 	br	40135d4 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
 4013568:	e0bffd17 	ldw	r2,-12(fp)
 401356c:	10c00d17 	ldw	r3,52(r2)
 4013570:	e0bff317 	ldw	r2,-52(fp)
 4013574:	1884b03a 	or	r2,r3,r2
 4013578:	10800114 	ori	r2,r2,4
 401357c:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
 4013580:	e0fff317 	ldw	r3,-52(fp)
 4013584:	00bff3c4 	movi	r2,-49
 4013588:	1884703a 	and	r2,r3,r2
 401358c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013590:	0005303a 	rdctl	r2,status
 4013594:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013598:	e0fffb17 	ldw	r3,-20(fp)
 401359c:	00bfff84 	movi	r2,-2
 40135a0:	1884703a 	and	r2,r3,r2
 40135a4:	1001703a 	wrctl	status,r2
  
  return context;
 40135a8:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
 40135ac:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
 40135b0:	e0bffd17 	ldw	r2,-12(fp)
 40135b4:	10800317 	ldw	r2,12(r2)
 40135b8:	10800104 	addi	r2,r2,4
 40135bc:	e0fff317 	ldw	r3,-52(fp)
 40135c0:	10c00035 	stwio	r3,0(r2)
 40135c4:	e0bff417 	ldw	r2,-48(fp)
 40135c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40135cc:	e0bff917 	ldw	r2,-28(fp)
 40135d0:	1001703a 	wrctl	status,r2
     * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
 40135d4:	0005883a 	mov	r2,zero
}
 40135d8:	e037883a 	mov	sp,fp
 40135dc:	dfc00117 	ldw	ra,4(sp)
 40135e0:	df000017 	ldw	fp,0(sp)
 40135e4:	dec00204 	addi	sp,sp,8
 40135e8:	f800283a 	ret

040135ec <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
 40135ec:	defff004 	addi	sp,sp,-64
 40135f0:	dfc00f15 	stw	ra,60(sp)
 40135f4:	df000e15 	stw	fp,56(sp)
 40135f8:	df000e04 	addi	fp,sp,56
 40135fc:	e13ffd15 	stw	r4,-12(fp)
 4013600:	e17ffe15 	stw	r5,-8(fp)
 4013604:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
 4013608:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
 401360c:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
 4013610:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
 4013614:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
 4013618:	e0bffd17 	ldw	r2,-12(fp)
 401361c:	10800317 	ldw	r2,12(r2)
 4013620:	10800204 	addi	r2,r2,8
 4013624:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
 4013628:	10bfffcc 	andi	r2,r2,65535
 401362c:	e0bff415 	stw	r2,-48(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
 4013630:	e0bffd17 	ldw	r2,-12(fp)
 4013634:	10800317 	ldw	r2,12(r2)
 4013638:	10800204 	addi	r2,r2,8
 401363c:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
 4013640:	1004d43a 	srli	r2,r2,16
 4013644:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
 4013648:	00807804 	movi	r2,480
 401364c:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
 4013650:	00001906 	br	40136b8 <alt_msgdma_descriptor_sync_transfer+0xcc>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
 4013654:	01000044 	movi	r4,1
 4013658:	4014e880 	call	4014e88 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
 401365c:	e0bff30b 	ldhu	r2,-52(fp)
 4013660:	1084e230 	cmpltui	r2,r2,5000
 4013664:	1000051e 	bne	r2,zero,401367c <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
 4013668:	01010074 	movhi	r4,1025
 401366c:	211a3e04 	addi	r4,r4,26872
 4013670:	401597c0 	call	401597c <alt_printf>
                " for storing descriptor\n");
            return -ETIME;
 4013674:	00bff084 	movi	r2,-62
 4013678:	0000b506 	br	4013950 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
 401367c:	e0bff30b 	ldhu	r2,-52(fp)
 4013680:	10800044 	addi	r2,r2,1
 4013684:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
 4013688:	e0bffd17 	ldw	r2,-12(fp)
 401368c:	10800317 	ldw	r2,12(r2)
 4013690:	10800204 	addi	r2,r2,8
 4013694:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
                " for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
 4013698:	10bfffcc 	andi	r2,r2,65535
 401369c:	e0bff415 	stw	r2,-48(fp)
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
 40136a0:	e0bffd17 	ldw	r2,-12(fp)
 40136a4:	10800317 	ldw	r2,12(r2)
 40136a8:	10800204 	addi	r2,r2,8
 40136ac:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
 40136b0:	1004d43a 	srli	r2,r2,16
 40136b4:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
 40136b8:	e0bffd17 	ldw	r2,-12(fp)
 40136bc:	10800917 	ldw	r2,36(r2)
 40136c0:	e0fff517 	ldw	r3,-44(fp)
 40136c4:	18bfe32e 	bgeu	r3,r2,4013654 <__alt_data_end+0xfc013654>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
 40136c8:	e0bffd17 	ldw	r2,-12(fp)
 40136cc:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
 40136d0:	e0fff417 	ldw	r3,-48(fp)
 40136d4:	18bfdf2e 	bgeu	r3,r2,4013654 <__alt_data_end+0xfc013654>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40136d8:	0005303a 	rdctl	r2,status
 40136dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40136e0:	e0fffc17 	ldw	r3,-16(fp)
 40136e4:	00bfff84 	movi	r2,-2
 40136e8:	1884703a 	and	r2,r3,r2
 40136ec:	1001703a 	wrctl	status,r2
  
  return context;
 40136f0:	e0bffc17 	ldw	r2,-16(fp)
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
 40136f4:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
 40136f8:	e0bffd17 	ldw	r2,-12(fp)
 40136fc:	10800317 	ldw	r2,12(r2)
 4013700:	10800104 	addi	r2,r2,4
 4013704:	00c00804 	movi	r3,32
 4013708:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
 401370c:	e0bffd17 	ldw	r2,-12(fp)
 4013710:	10800317 	ldw	r2,12(r2)
 4013714:	e0fffd17 	ldw	r3,-12(fp)
 4013718:	18c00317 	ldw	r3,12(r3)
 401371c:	18c00037 	ldwio	r3,0(r3)
 4013720:	10c00035 	stwio	r3,0(r2)
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
 4013724:	e0bffe17 	ldw	r2,-8(fp)
 4013728:	10001b26 	beq	r2,zero,4013798 <alt_msgdma_descriptor_sync_transfer+0x1ac>
 401372c:	e0bfff17 	ldw	r2,-4(fp)
 4013730:	1000191e 	bne	r2,zero,4013798 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
 4013734:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
 4013738:	00000d06 	br	4013770 <alt_msgdma_descriptor_sync_transfer+0x184>
            dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
 401373c:	01000044 	movi	r4,1
 4013740:	4014e880 	call	4014e88 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
 4013744:	e0bff30b 	ldhu	r2,-52(fp)
 4013748:	1084e230 	cmpltui	r2,r2,5000
 401374c:	1000051e 	bne	r2,zero,4013764 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
 4013750:	01010074 	movhi	r4,1025
 4013754:	211a5204 	addi	r4,r4,26952
 4013758:	401597c0 	call	401597c <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
 401375c:	00bff084 	movi	r2,-62
 4013760:	00007b06 	br	4013950 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
 4013764:	e0bff30b 	ldhu	r2,-52(fp)
 4013768:	10800044 	addi	r2,r2,1
 401376c:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
 4013770:	e0bffd17 	ldw	r2,-12(fp)
 4013774:	10c00317 	ldw	r3,12(r2)
 4013778:	e0bffd17 	ldw	r2,-12(fp)
 401377c:	10800417 	ldw	r2,16(r2)
 4013780:	e1bffe17 	ldw	r6,-8(fp)
 4013784:	100b883a 	mov	r5,r2
 4013788:	1809883a 	mov	r4,r3
 401378c:	4012df80 	call	4012df8 <alt_msgdma_write_standard_descriptor>
 4013790:	103fea1e 	bne	r2,zero,401373c <__alt_data_end+0xfc01373c>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
 4013794:	00001f06 	br	4013814 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
 4013798:	e0bffe17 	ldw	r2,-8(fp)
 401379c:	10001b1e 	bne	r2,zero,401380c <alt_msgdma_descriptor_sync_transfer+0x220>
 40137a0:	e0bfff17 	ldw	r2,-4(fp)
 40137a4:	10001926 	beq	r2,zero,401380c <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
 40137a8:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
 40137ac:	00000d06 	br	40137e4 <alt_msgdma_descriptor_sync_transfer+0x1f8>
            dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
 40137b0:	01000044 	movi	r4,1
 40137b4:	4014e880 	call	4014e88 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
 40137b8:	e0bff30b 	ldhu	r2,-52(fp)
 40137bc:	1084e230 	cmpltui	r2,r2,5000
 40137c0:	1000051e 	bne	r2,zero,40137d8 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
 40137c4:	01010074 	movhi	r4,1025
 40137c8:	211a6304 	addi	r4,r4,27020
 40137cc:	401597c0 	call	401597c <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
 40137d0:	00bff084 	movi	r2,-62
 40137d4:	00005e06 	br	4013950 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
 40137d8:	e0bff30b 	ldhu	r2,-52(fp)
 40137dc:	10800044 	addi	r2,r2,1
 40137e0:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
 40137e4:	e0bffd17 	ldw	r2,-12(fp)
 40137e8:	10c00317 	ldw	r3,12(r2)
 40137ec:	e0bffd17 	ldw	r2,-12(fp)
 40137f0:	10800417 	ldw	r2,16(r2)
 40137f4:	e1bfff17 	ldw	r6,-4(fp)
 40137f8:	100b883a 	mov	r5,r2
 40137fc:	1809883a 	mov	r4,r3
 4013800:	4012e8c0 	call	4012e8c <alt_msgdma_write_extended_descriptor>
 4013804:	103fea1e 	bne	r2,zero,40137b0 <__alt_data_end+0xfc0137b0>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
 4013808:	00000206 	br	4013814 <alt_msgdma_descriptor_sync_transfer+0x228>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
 401380c:	00bfffc4 	movi	r2,-1
 4013810:	00004f06 	br	4013950 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
 4013814:	e0bffd17 	ldw	r2,-12(fp)
 4013818:	10800317 	ldw	r2,12(r2)
 401381c:	10800104 	addi	r2,r2,4
 4013820:	e0fffd17 	ldw	r3,-12(fp)
 4013824:	19000d17 	ldw	r4,52(r3)
 4013828:	00fff2c4 	movi	r3,-53
 401382c:	20c6703a 	and	r3,r4,r3
 4013830:	18c00114 	ori	r3,r3,4
 4013834:	10c00035 	stwio	r3,0(r2)
 4013838:	e0bff717 	ldw	r2,-36(fp)
 401383c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013840:	e0bff917 	ldw	r2,-28(fp)
 4013844:	1001703a 	wrctl	status,r2
        (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
        (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
     
    alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
 4013848:	e03ff30d 	sth	zero,-52(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
 401384c:	e0bffd17 	ldw	r2,-12(fp)
 4013850:	10800317 	ldw	r2,12(r2)
 4013854:	10800037 	ldwio	r2,0(r2)
 4013858:	e0bff215 	stw	r2,-56(fp)
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
 401385c:	00001106 	br	40138a4 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
 4013860:	01000044 	movi	r4,1
 4013864:	4014e880 	call	4014e88 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
 4013868:	e0bff30b 	ldhu	r2,-52(fp)
 401386c:	1084e230 	cmpltui	r2,r2,5000
 4013870:	1000051e 	bne	r2,zero,4013888 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
 4013874:	01010074 	movhi	r4,1025
 4013878:	211a7404 	addi	r4,r4,27088
 401387c:	401597c0 	call	401597c <alt_printf>
            * Now that access to the registers is complete, release the registers
            * semaphore so that other threads can access the registers.
            */
            ALT_SEM_POST (dev->regs_lock);
            
            return -ETIME;
 4013880:	00bff084 	movi	r2,-62
 4013884:	00003206 	br	4013950 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
 4013888:	e0bff30b 	ldhu	r2,-52(fp)
 401388c:	10800044 	addi	r2,r2,1
 4013890:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
 4013894:	e0bffd17 	ldw	r2,-12(fp)
 4013898:	10800317 	ldw	r2,12(r2)
 401389c:	10800037 	ldwio	r2,0(r2)
 40138a0:	e0bff215 	stw	r2,-56(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
 40138a4:	e0fff217 	ldw	r3,-56(fp)
 40138a8:	e0bff817 	ldw	r2,-32(fp)
 40138ac:	1884703a 	and	r2,r3,r2
 40138b0:	1000031e 	bne	r2,zero,40138c0 <alt_msgdma_descriptor_sync_transfer+0x2d4>
 40138b4:	e0bff217 	ldw	r2,-56(fp)
 40138b8:	1080004c 	andi	r2,r2,1
 40138bc:	103fe81e 	bne	r2,zero,4013860 <__alt_data_end+0xfc013860>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
 40138c0:	e0fff217 	ldw	r3,-56(fp)
 40138c4:	e0bff817 	ldw	r2,-32(fp)
 40138c8:	1884703a 	and	r2,r3,r2
 40138cc:	10000226 	beq	r2,zero,40138d8 <alt_msgdma_descriptor_sync_transfer+0x2ec>
        * Now that access to the registers is complete, release the registers
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        return error;
 40138d0:	e0bff817 	ldw	r2,-32(fp)
 40138d4:	00001e06 	br	4013950 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
 40138d8:	e0bffd17 	ldw	r2,-12(fp)
 40138dc:	10800317 	ldw	r2,12(r2)
 40138e0:	10800104 	addi	r2,r2,4
 40138e4:	10800037 	ldwio	r2,0(r2)
 40138e8:	10800814 	ori	r2,r2,32
 40138ec:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40138f0:	0005303a 	rdctl	r2,status
 40138f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40138f8:	e0fffa17 	ldw	r3,-24(fp)
 40138fc:	00bfff84 	movi	r2,-2
 4013900:	1884703a 	and	r2,r3,r2
 4013904:	1001703a 	wrctl	status,r2
  
  return context;
 4013908:	e0bffa17 	ldw	r2,-24(fp)
    ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
 401390c:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
 4013910:	e0bffd17 	ldw	r2,-12(fp)
 4013914:	10800317 	ldw	r2,12(r2)
 4013918:	10800104 	addi	r2,r2,4
 401391c:	e0fff617 	ldw	r3,-40(fp)
 4013920:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
 4013924:	e0bffd17 	ldw	r2,-12(fp)
 4013928:	10800317 	ldw	r2,12(r2)
 401392c:	e0fffd17 	ldw	r3,-12(fp)
 4013930:	18c00317 	ldw	r3,12(r3)
 4013934:	18c00037 	ldwio	r3,0(r3)
 4013938:	10c00035 	stwio	r3,0(r2)
 401393c:	e0bff717 	ldw	r2,-36(fp)
 4013940:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013944:	e0bffb17 	ldw	r2,-20(fp)
 4013948:	1001703a 	wrctl	status,r2
    * Now that access to the registers is complete, release the registers
    * semaphore so that other threads can access the registers.
    */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
 401394c:	0005883a 	mov	r2,zero

}
 4013950:	e037883a 	mov	sp,fp
 4013954:	dfc00117 	ldw	ra,4(sp)
 4013958:	df000017 	ldw	fp,0(sp)
 401395c:	dec00204 	addi	sp,sp,8
 4013960:	f800283a 	ret

04013964 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
 4013964:	defff804 	addi	sp,sp,-32
 4013968:	dfc00715 	stw	ra,28(sp)
 401396c:	df000615 	stw	fp,24(sp)
 4013970:	df000604 	addi	fp,sp,24
 4013974:	e13ffc15 	stw	r4,-16(fp)
 4013978:	e17ffd15 	stw	r5,-12(fp)
 401397c:	e1bffe15 	stw	r6,-8(fp)
 4013980:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
 4013984:	e0800217 	ldw	r2,8(fp)
 4013988:	d8800115 	stw	r2,4(sp)
 401398c:	e0bfff17 	ldw	r2,-4(fp)
 4013990:	d8800015 	stw	r2,0(sp)
 4013994:	e1fffe17 	ldw	r7,-8(fp)
 4013998:	000d883a 	mov	r6,zero
 401399c:	e17ffd17 	ldw	r5,-12(fp)
 40139a0:	e13ffc17 	ldw	r4,-16(fp)
 40139a4:	401313c0 	call	401313c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
 40139a8:	e037883a 	mov	sp,fp
 40139ac:	dfc00117 	ldw	ra,4(sp)
 40139b0:	df000017 	ldw	fp,0(sp)
 40139b4:	dec00204 	addi	sp,sp,8
 40139b8:	f800283a 	ret

040139bc <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address,
    alt_u32 length,
    alt_u32 control)
{
 40139bc:	defff804 	addi	sp,sp,-32
 40139c0:	dfc00715 	stw	ra,28(sp)
 40139c4:	df000615 	stw	fp,24(sp)
 40139c8:	df000604 	addi	fp,sp,24
 40139cc:	e13ffc15 	stw	r4,-16(fp)
 40139d0:	e17ffd15 	stw	r5,-12(fp)
 40139d4:	e1bffe15 	stw	r6,-8(fp)
 40139d8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
 40139dc:	e0800217 	ldw	r2,8(fp)
 40139e0:	d8800115 	stw	r2,4(sp)
 40139e4:	e0bfff17 	ldw	r2,-4(fp)
 40139e8:	d8800015 	stw	r2,0(sp)
 40139ec:	000f883a 	mov	r7,zero
 40139f0:	e1bffe17 	ldw	r6,-8(fp)
 40139f4:	e17ffd17 	ldw	r5,-12(fp)
 40139f8:	e13ffc17 	ldw	r4,-16(fp)
 40139fc:	401313c0 	call	401313c <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
 4013a00:	e037883a 	mov	sp,fp
 4013a04:	dfc00117 	ldw	ra,4(sp)
 4013a08:	df000017 	ldw	fp,0(sp)
 4013a0c:	dec00204 	addi	sp,sp,8
 4013a10:	f800283a 	ret

04013a14 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
 4013a14:	defff804 	addi	sp,sp,-32
 4013a18:	dfc00715 	stw	ra,28(sp)
 4013a1c:	df000615 	stw	fp,24(sp)
 4013a20:	df000604 	addi	fp,sp,24
 4013a24:	e13ffc15 	stw	r4,-16(fp)
 4013a28:	e17ffd15 	stw	r5,-12(fp)
 4013a2c:	e1bffe15 	stw	r6,-8(fp)
 4013a30:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
 4013a34:	e0800317 	ldw	r2,12(fp)
 4013a38:	d8800115 	stw	r2,4(sp)
 4013a3c:	e0800217 	ldw	r2,8(fp)
 4013a40:	d8800015 	stw	r2,0(sp)
 4013a44:	e1ffff17 	ldw	r7,-4(fp)
 4013a48:	e1bffe17 	ldw	r6,-8(fp)
 4013a4c:	e17ffd17 	ldw	r5,-12(fp)
 4013a50:	e13ffc17 	ldw	r4,-16(fp)
 4013a54:	401313c0 	call	401313c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
 4013a58:	e037883a 	mov	sp,fp
 4013a5c:	dfc00117 	ldw	ra,4(sp)
 4013a60:	df000017 	ldw	fp,0(sp)
 4013a64:	dec00204 	addi	sp,sp,8
 4013a68:	f800283a 	ret

04013a6c <alt_msgdma_construct_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 write_burst_count, 
    alt_u16 write_stride)
{
 4013a6c:	defff004 	addi	sp,sp,-64
 4013a70:	dfc00f15 	stw	ra,60(sp)
 4013a74:	df000e15 	stw	fp,56(sp)
 4013a78:	df000e04 	addi	fp,sp,56
 4013a7c:	e13ff915 	stw	r4,-28(fp)
 4013a80:	e17ffa15 	stw	r5,-24(fp)
 4013a84:	e1bffb15 	stw	r6,-20(fp)
 4013a88:	e1fffc15 	stw	r7,-16(fp)
 4013a8c:	e1000317 	ldw	r4,12(fp)
 4013a90:	e0c00417 	ldw	r3,16(fp)
 4013a94:	e0800517 	ldw	r2,20(fp)
 4013a98:	e13ffd0d 	sth	r4,-12(fp)
 4013a9c:	e0fffe05 	stb	r3,-8(fp)
 4013aa0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
 4013aa4:	e0bffd0b 	ldhu	r2,-12(fp)
 4013aa8:	e0fffe03 	ldbu	r3,-8(fp)
 4013aac:	e13fff0b 	ldhu	r4,-4(fp)
 4013ab0:	d9000615 	stw	r4,24(sp)
 4013ab4:	d8000515 	stw	zero,20(sp)
 4013ab8:	d8c00415 	stw	r3,16(sp)
 4013abc:	d8000315 	stw	zero,12(sp)
 4013ac0:	d8800215 	stw	r2,8(sp)
 4013ac4:	e0800217 	ldw	r2,8(fp)
 4013ac8:	d8800115 	stw	r2,4(sp)
 4013acc:	e0bffc17 	ldw	r2,-16(fp)
 4013ad0:	d8800015 	stw	r2,0(sp)
 4013ad4:	e1fffb17 	ldw	r7,-20(fp)
 4013ad8:	000d883a 	mov	r6,zero
 4013adc:	e17ffa17 	ldw	r5,-24(fp)
 4013ae0:	e13ff917 	ldw	r4,-28(fp)
 4013ae4:	40131c80 	call	40131c8 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
 4013ae8:	e037883a 	mov	sp,fp
 4013aec:	dfc00117 	ldw	ra,4(sp)
 4013af0:	df000017 	ldw	fp,0(sp)
 4013af4:	dec00204 	addi	sp,sp,8
 4013af8:	f800283a 	ret

04013afc <alt_msgdma_construct_extended_mm_to_st_descriptor>:
    alt_u32 length,
    alt_u32 control,
    alt_u16 sequence_number,
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
 4013afc:	defff004 	addi	sp,sp,-64
 4013b00:	dfc00f15 	stw	ra,60(sp)
 4013b04:	df000e15 	stw	fp,56(sp)
 4013b08:	df000e04 	addi	fp,sp,56
 4013b0c:	e13ff915 	stw	r4,-28(fp)
 4013b10:	e17ffa15 	stw	r5,-24(fp)
 4013b14:	e1bffb15 	stw	r6,-20(fp)
 4013b18:	e1fffc15 	stw	r7,-16(fp)
 4013b1c:	e1000317 	ldw	r4,12(fp)
 4013b20:	e0c00417 	ldw	r3,16(fp)
 4013b24:	e0800517 	ldw	r2,20(fp)
 4013b28:	e13ffd0d 	sth	r4,-12(fp)
 4013b2c:	e0fffe05 	stb	r3,-8(fp)
 4013b30:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
 4013b34:	e0bffd0b 	ldhu	r2,-12(fp)
 4013b38:	e0fffe03 	ldbu	r3,-8(fp)
 4013b3c:	e13fff0b 	ldhu	r4,-4(fp)
 4013b40:	d8000615 	stw	zero,24(sp)
 4013b44:	d9000515 	stw	r4,20(sp)
 4013b48:	d8000415 	stw	zero,16(sp)
 4013b4c:	d8c00315 	stw	r3,12(sp)
 4013b50:	d8800215 	stw	r2,8(sp)
 4013b54:	e0800217 	ldw	r2,8(fp)
 4013b58:	d8800115 	stw	r2,4(sp)
 4013b5c:	e0bffc17 	ldw	r2,-16(fp)
 4013b60:	d8800015 	stw	r2,0(sp)
 4013b64:	000f883a 	mov	r7,zero
 4013b68:	e1bffb17 	ldw	r6,-20(fp)
 4013b6c:	e17ffa17 	ldw	r5,-24(fp)
 4013b70:	e13ff917 	ldw	r4,-28(fp)
 4013b74:	40131c80 	call	40131c8 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
 4013b78:	e037883a 	mov	sp,fp
 4013b7c:	dfc00117 	ldw	ra,4(sp)
 4013b80:	df000017 	ldw	fp,0(sp)
 4013b84:	dec00204 	addi	sp,sp,8
 4013b88:	f800283a 	ret

04013b8c <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
 4013b8c:	deffee04 	addi	sp,sp,-72
 4013b90:	dfc01115 	stw	ra,68(sp)
 4013b94:	df001015 	stw	fp,64(sp)
 4013b98:	df001004 	addi	fp,sp,64
 4013b9c:	e13ff715 	stw	r4,-36(fp)
 4013ba0:	e17ff815 	stw	r5,-32(fp)
 4013ba4:	e1bff915 	stw	r6,-28(fp)
 4013ba8:	e1fffa15 	stw	r7,-24(fp)
 4013bac:	e1800417 	ldw	r6,16(fp)
 4013bb0:	e1400517 	ldw	r5,20(fp)
 4013bb4:	e1000617 	ldw	r4,24(fp)
 4013bb8:	e0c00717 	ldw	r3,28(fp)
 4013bbc:	e0800817 	ldw	r2,32(fp)
 4013bc0:	e1bffb0d 	sth	r6,-20(fp)
 4013bc4:	e17ffc05 	stb	r5,-16(fp)
 4013bc8:	e13ffd05 	stb	r4,-12(fp)
 4013bcc:	e0fffe0d 	sth	r3,-8(fp)
 4013bd0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
 4013bd4:	e0bffb0b 	ldhu	r2,-20(fp)
 4013bd8:	e0fffc03 	ldbu	r3,-16(fp)
 4013bdc:	e13ffd03 	ldbu	r4,-12(fp)
 4013be0:	e17ffe0b 	ldhu	r5,-8(fp)
 4013be4:	e1bfff0b 	ldhu	r6,-4(fp)
 4013be8:	d9800615 	stw	r6,24(sp)
 4013bec:	d9400515 	stw	r5,20(sp)
 4013bf0:	d9000415 	stw	r4,16(sp)
 4013bf4:	d8c00315 	stw	r3,12(sp)
 4013bf8:	d8800215 	stw	r2,8(sp)
 4013bfc:	e0800317 	ldw	r2,12(fp)
 4013c00:	d8800115 	stw	r2,4(sp)
 4013c04:	e0800217 	ldw	r2,8(fp)
 4013c08:	d8800015 	stw	r2,0(sp)
 4013c0c:	e1fffa17 	ldw	r7,-24(fp)
 4013c10:	e1bff917 	ldw	r6,-28(fp)
 4013c14:	e17ff817 	ldw	r5,-32(fp)
 4013c18:	e13ff717 	ldw	r4,-36(fp)
 4013c1c:	40131c80 	call	40131c8 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
 4013c20:	e037883a 	mov	sp,fp
 4013c24:	dfc00117 	ldw	ra,4(sp)
 4013c28:	df000017 	ldw	fp,0(sp)
 4013c2c:	dec00204 	addi	sp,sp,8
 4013c30:	f800283a 	ret

04013c34 <alt_msgdma_construct_prefetcher_standard_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
 4013c34:	defffb04 	addi	sp,sp,-20
 4013c38:	df000415 	stw	fp,16(sp)
 4013c3c:	df000404 	addi	fp,sp,16
 4013c40:	e13ffc15 	stw	r4,-16(fp)
 4013c44:	e17ffd15 	stw	r5,-12(fp)
 4013c48:	e1bffe15 	stw	r6,-8(fp)
 4013c4c:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
 4013c50:	e0bffc17 	ldw	r2,-16(fp)
 4013c54:	10c01217 	ldw	r3,72(r2)
 4013c58:	e0800117 	ldw	r2,4(fp)
 4013c5c:	18800436 	bltu	r3,r2,4013c70 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
 4013c60:	e0bffc17 	ldw	r2,-16(fp)
 4013c64:	10801703 	ldbu	r2,92(r2)
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
 4013c68:	10803fcc 	andi	r2,r2,255
 4013c6c:	10000226 	beq	r2,zero,4013c78 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
 4013c70:	00bffa84 	movi	r2,-22
 4013c74:	00001406 	br	4013cc8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
 4013c78:	e0bffd17 	ldw	r2,-12(fp)
 4013c7c:	e0fffe17 	ldw	r3,-8(fp)
 4013c80:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
 4013c84:	e0bffd17 	ldw	r2,-12(fp)
 4013c88:	e0ffff17 	ldw	r3,-4(fp)
 4013c8c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
 4013c90:	e0bffd17 	ldw	r2,-12(fp)
 4013c94:	e0c00117 	ldw	r3,4(fp)
 4013c98:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
 4013c9c:	e0fffd17 	ldw	r3,-12(fp)
 4013ca0:	e0bffd17 	ldw	r2,-12(fp)
 4013ca4:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
 4013ca8:	e0c00217 	ldw	r3,8(fp)
 4013cac:	00900034 	movhi	r2,16384
 4013cb0:	10bfffc4 	addi	r2,r2,-1
 4013cb4:	1884703a 	and	r2,r3,r2
 4013cb8:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
 4013cbc:	e0bffd17 	ldw	r2,-12(fp)
 4013cc0:	10c00715 	stw	r3,28(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
 4013cc4:	0005883a 	mov	r2,zero
}
 4013cc8:	e037883a 	mov	sp,fp
 4013ccc:	df000017 	ldw	fp,0(sp)
 4013cd0:	dec00104 	addi	sp,sp,4
 4013cd4:	f800283a 	ret

04013cd8 <alt_msgdma_construct_prefetcher_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
 4013cd8:	defff404 	addi	sp,sp,-48
 4013cdc:	df000b15 	stw	fp,44(sp)
 4013ce0:	df000b04 	addi	fp,sp,44
 4013ce4:	e13ff715 	stw	r4,-36(fp)
 4013ce8:	e17ff815 	stw	r5,-32(fp)
 4013cec:	e1bff915 	stw	r6,-28(fp)
 4013cf0:	e1fffa15 	stw	r7,-24(fp)
 4013cf4:	e1800517 	ldw	r6,20(fp)
 4013cf8:	e1400617 	ldw	r5,24(fp)
 4013cfc:	e1000717 	ldw	r4,28(fp)
 4013d00:	e0c00817 	ldw	r3,32(fp)
 4013d04:	e0800917 	ldw	r2,36(fp)
 4013d08:	e1bffb0d 	sth	r6,-20(fp)
 4013d0c:	e17ffc05 	stb	r5,-16(fp)
 4013d10:	e13ffd05 	stb	r4,-12(fp)
 4013d14:	e0fffe0d 	sth	r3,-8(fp)
 4013d18:	e0bfff0d 	sth	r2,-4(fp)
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
 4013d1c:	e0bff717 	ldw	r2,-36(fp)
 4013d20:	10c01217 	ldw	r3,72(r2)
 4013d24:	e0800317 	ldw	r2,12(fp)
 4013d28:	18801936 	bltu	r3,r2,4013d90 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
 4013d2c:	e13ff717 	ldw	r4,-36(fp)
 4013d30:	20801317 	ldw	r2,76(r4)
 4013d34:	20c01417 	ldw	r3,80(r4)
 4013d38:	e13ffe0b 	ldhu	r4,-8(fp)
 4013d3c:	213fffcc 	andi	r4,r4,65535
 4013d40:	2015883a 	mov	r10,r4
 4013d44:	0017883a 	mov	r11,zero
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
 4013d48:	1ac01136 	bltu	r3,r11,4013d90 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
 4013d4c:	58c0011e 	bne	r11,r3,4013d54 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
 4013d50:	12800f36 	bltu	r2,r10,4013d90 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
 4013d54:	e13ff717 	ldw	r4,-36(fp)
 4013d58:	20801317 	ldw	r2,76(r4)
 4013d5c:	20c01417 	ldw	r3,80(r4)
 4013d60:	e13fff0b 	ldhu	r4,-4(fp)
 4013d64:	213fffcc 	andi	r4,r4,65535
 4013d68:	2011883a 	mov	r8,r4
 4013d6c:	0013883a 	mov	r9,zero
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
 4013d70:	1a400736 	bltu	r3,r9,4013d90 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
 4013d74:	48c0011e 	bne	r9,r3,4013d7c <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
 4013d78:	12000536 	bltu	r2,r8,4013d90 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
 4013d7c:	e0bff717 	ldw	r2,-36(fp)
 4013d80:	10801703 	ldbu	r2,92(r2)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
 4013d84:	10803fcc 	andi	r2,r2,255
 4013d88:	10800060 	cmpeqi	r2,r2,1
 4013d8c:	1000021e 	bne	r2,zero,4013d98 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
 4013d90:	00bffa84 	movi	r2,-22
 4013d94:	00003106 	br	4013e5c <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
 4013d98:	e0bff817 	ldw	r2,-32(fp)
 4013d9c:	e0fff917 	ldw	r3,-28(fp)
 4013da0:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
 4013da4:	e0bff817 	ldw	r2,-32(fp)
 4013da8:	e0fffa17 	ldw	r3,-24(fp)
 4013dac:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
 4013db0:	e0bff817 	ldw	r2,-32(fp)
 4013db4:	e0c00117 	ldw	r3,4(fp)
 4013db8:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
 4013dbc:	e0bff817 	ldw	r2,-32(fp)
 4013dc0:	e0c00217 	ldw	r3,8(fp)
 4013dc4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
 4013dc8:	e0bff817 	ldw	r2,-32(fp)
 4013dcc:	e0c00317 	ldw	r3,12(fp)
 4013dd0:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
 4013dd4:	e0bff817 	ldw	r2,-32(fp)
 4013dd8:	e0fffb0b 	ldhu	r3,-20(fp)
 4013ddc:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
 4013de0:	e0bff817 	ldw	r2,-32(fp)
 4013de4:	e0fffc03 	ldbu	r3,-16(fp)
 4013de8:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
 4013dec:	e0bff817 	ldw	r2,-32(fp)
 4013df0:	e0fffd03 	ldbu	r3,-12(fp)
 4013df4:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
 4013df8:	e0bff817 	ldw	r2,-32(fp)
 4013dfc:	e0fffe0b 	ldhu	r3,-8(fp)
 4013e00:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
 4013e04:	e0bff817 	ldw	r2,-32(fp)
 4013e08:	e0ffff0b 	ldhu	r3,-4(fp)
 4013e0c:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
    node_addr.u64 = (uintptr_t)descriptor;
 4013e10:	e0bff817 	ldw	r2,-32(fp)
 4013e14:	1019883a 	mov	r12,r2
 4013e18:	001b883a 	mov	r13,zero
 4013e1c:	e33ff515 	stw	r12,-44(fp)
 4013e20:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
 4013e24:	e0fff517 	ldw	r3,-44(fp)
 4013e28:	e0bff817 	ldw	r2,-32(fp)
 4013e2c:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
 4013e30:	e0fff617 	ldw	r3,-40(fp)
 4013e34:	e0bff817 	ldw	r2,-32(fp)
 4013e38:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
 4013e3c:	e0c00417 	ldw	r3,16(fp)
 4013e40:	00900034 	movhi	r2,16384
 4013e44:	10bfffc4 	addi	r2,r2,-1
 4013e48:	1884703a 	and	r2,r3,r2
 4013e4c:	10e00034 	orhi	r3,r2,32768
    node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
 4013e50:	e0bff817 	ldw	r2,-32(fp)
 4013e54:	10c00f15 	stw	r3,60(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
 4013e58:	0005883a 	mov	r2,zero
}
 4013e5c:	e037883a 	mov	sp,fp
 4013e60:	df000017 	ldw	fp,0(sp)
 4013e64:	dec00104 	addi	sp,sp,4
 4013e68:	f800283a 	ret

04013e6c <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address,
    alt_u32 write_address,
    alt_u32 length,
    alt_u32 control)
{
 4013e6c:	defff804 	addi	sp,sp,-32
 4013e70:	dfc00715 	stw	ra,28(sp)
 4013e74:	df000615 	stw	fp,24(sp)
 4013e78:	df000604 	addi	fp,sp,24
 4013e7c:	e13ffc15 	stw	r4,-16(fp)
 4013e80:	e17ffd15 	stw	r5,-12(fp)
 4013e84:	e1bffe15 	stw	r6,-8(fp)
 4013e88:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
 4013e8c:	e0800317 	ldw	r2,12(fp)
 4013e90:	d8800115 	stw	r2,4(sp)
 4013e94:	e0800217 	ldw	r2,8(fp)
 4013e98:	d8800015 	stw	r2,0(sp)
 4013e9c:	e1ffff17 	ldw	r7,-4(fp)
 4013ea0:	e1bffe17 	ldw	r6,-8(fp)
 4013ea4:	e17ffd17 	ldw	r5,-12(fp)
 4013ea8:	e13ffc17 	ldw	r4,-16(fp)
 4013eac:	4013c340 	call	4013c34 <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, write_address, length, control);
}
 4013eb0:	e037883a 	mov	sp,fp
 4013eb4:	dfc00117 	ldw	ra,4(sp)
 4013eb8:	df000017 	ldw	fp,0(sp)
 4013ebc:	dec00204 	addi	sp,sp,8
 4013ec0:	f800283a 	ret

04013ec4 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
 4013ec4:	defff804 	addi	sp,sp,-32
 4013ec8:	dfc00715 	stw	ra,28(sp)
 4013ecc:	df000615 	stw	fp,24(sp)
 4013ed0:	df000604 	addi	fp,sp,24
 4013ed4:	e13ffc15 	stw	r4,-16(fp)
 4013ed8:	e17ffd15 	stw	r5,-12(fp)
 4013edc:	e1bffe15 	stw	r6,-8(fp)
 4013ee0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
 4013ee4:	e0800217 	ldw	r2,8(fp)
 4013ee8:	d8800115 	stw	r2,4(sp)
 4013eec:	e0bfff17 	ldw	r2,-4(fp)
 4013ef0:	d8800015 	stw	r2,0(sp)
 4013ef4:	e1fffe17 	ldw	r7,-8(fp)
 4013ef8:	000d883a 	mov	r6,zero
 4013efc:	e17ffd17 	ldw	r5,-12(fp)
 4013f00:	e13ffc17 	ldw	r4,-16(fp)
 4013f04:	4013c340 	call	4013c34 <alt_msgdma_construct_prefetcher_standard_descriptor>
            0, write_address, length, control);
}
 4013f08:	e037883a 	mov	sp,fp
 4013f0c:	dfc00117 	ldw	ra,4(sp)
 4013f10:	df000017 	ldw	fp,0(sp)
 4013f14:	dec00204 	addi	sp,sp,8
 4013f18:	f800283a 	ret

04013f1c <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 read_address, 
    alt_u32 length, 
    alt_u32 control)
{
 4013f1c:	defff804 	addi	sp,sp,-32
 4013f20:	dfc00715 	stw	ra,28(sp)
 4013f24:	df000615 	stw	fp,24(sp)
 4013f28:	df000604 	addi	fp,sp,24
 4013f2c:	e13ffc15 	stw	r4,-16(fp)
 4013f30:	e17ffd15 	stw	r5,-12(fp)
 4013f34:	e1bffe15 	stw	r6,-8(fp)
 4013f38:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
 4013f3c:	e0800217 	ldw	r2,8(fp)
 4013f40:	d8800115 	stw	r2,4(sp)
 4013f44:	e0bfff17 	ldw	r2,-4(fp)
 4013f48:	d8800015 	stw	r2,0(sp)
 4013f4c:	000f883a 	mov	r7,zero
 4013f50:	e1bffe17 	ldw	r6,-8(fp)
 4013f54:	e17ffd17 	ldw	r5,-12(fp)
 4013f58:	e13ffc17 	ldw	r4,-16(fp)
 4013f5c:	4013c340 	call	4013c34 <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, 0, length, control);
}
 4013f60:	e037883a 	mov	sp,fp
 4013f64:	dfc00117 	ldw	ra,4(sp)
 4013f68:	df000017 	ldw	fp,0(sp)
 4013f6c:	dec00204 	addi	sp,sp,8
 4013f70:	f800283a 	ret

04013f74 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number,
    alt_u8 write_burst_count,
    alt_u16 write_stride)
{
 4013f74:	deffee04 	addi	sp,sp,-72
 4013f78:	dfc01115 	stw	ra,68(sp)
 4013f7c:	df001015 	stw	fp,64(sp)
 4013f80:	df001004 	addi	fp,sp,64
 4013f84:	e13ff915 	stw	r4,-28(fp)
 4013f88:	e17ffa15 	stw	r5,-24(fp)
 4013f8c:	e1bffb15 	stw	r6,-20(fp)
 4013f90:	e1fffc15 	stw	r7,-16(fp)
 4013f94:	e1000417 	ldw	r4,16(fp)
 4013f98:	e0c00517 	ldw	r3,20(fp)
 4013f9c:	e0800617 	ldw	r2,24(fp)
 4013fa0:	e13ffd0d 	sth	r4,-12(fp)
 4013fa4:	e0fffe05 	stb	r3,-8(fp)
 4013fa8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
 4013fac:	e0bffd0b 	ldhu	r2,-12(fp)
 4013fb0:	e0fffe03 	ldbu	r3,-8(fp)
 4013fb4:	e13fff0b 	ldhu	r4,-4(fp)
 4013fb8:	d9000815 	stw	r4,32(sp)
 4013fbc:	d8000715 	stw	zero,28(sp)
 4013fc0:	d8c00615 	stw	r3,24(sp)
 4013fc4:	d8000515 	stw	zero,20(sp)
 4013fc8:	d8800415 	stw	r2,16(sp)
 4013fcc:	e0800317 	ldw	r2,12(fp)
 4013fd0:	d8800315 	stw	r2,12(sp)
 4013fd4:	e0800217 	ldw	r2,8(fp)
 4013fd8:	d8800215 	stw	r2,8(sp)
 4013fdc:	e0bffc17 	ldw	r2,-16(fp)
 4013fe0:	d8800115 	stw	r2,4(sp)
 4013fe4:	e0bffb17 	ldw	r2,-20(fp)
 4013fe8:	d8800015 	stw	r2,0(sp)
 4013fec:	000f883a 	mov	r7,zero
 4013ff0:	000d883a 	mov	r6,zero
 4013ff4:	e17ffa17 	ldw	r5,-24(fp)
 4013ff8:	e13ff917 	ldw	r4,-28(fp)
 4013ffc:	4013cd80 	call	4013cd8 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
            sequence_number, 0, write_burst_count, 0, write_stride);
}
 4014000:	e037883a 	mov	sp,fp
 4014004:	dfc00117 	ldw	ra,4(sp)
 4014008:	df000017 	ldw	fp,0(sp)
 401400c:	dec00204 	addi	sp,sp,8
 4014010:	f800283a 	ret

04014014 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
 4014014:	deffee04 	addi	sp,sp,-72
 4014018:	dfc01115 	stw	ra,68(sp)
 401401c:	df001015 	stw	fp,64(sp)
 4014020:	df001004 	addi	fp,sp,64
 4014024:	e13ff915 	stw	r4,-28(fp)
 4014028:	e17ffa15 	stw	r5,-24(fp)
 401402c:	e1bffb15 	stw	r6,-20(fp)
 4014030:	e1fffc15 	stw	r7,-16(fp)
 4014034:	e1000417 	ldw	r4,16(fp)
 4014038:	e0c00517 	ldw	r3,20(fp)
 401403c:	e0800617 	ldw	r2,24(fp)
 4014040:	e13ffd0d 	sth	r4,-12(fp)
 4014044:	e0fffe05 	stb	r3,-8(fp)
 4014048:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
 401404c:	e0bffd0b 	ldhu	r2,-12(fp)
 4014050:	e0fffe03 	ldbu	r3,-8(fp)
 4014054:	e13fff0b 	ldhu	r4,-4(fp)
 4014058:	d8000815 	stw	zero,32(sp)
 401405c:	d9000715 	stw	r4,28(sp)
 4014060:	d8000615 	stw	zero,24(sp)
 4014064:	d8c00515 	stw	r3,20(sp)
 4014068:	d8800415 	stw	r2,16(sp)
 401406c:	e0800317 	ldw	r2,12(fp)
 4014070:	d8800315 	stw	r2,12(sp)
 4014074:	e0800217 	ldw	r2,8(fp)
 4014078:	d8800215 	stw	r2,8(sp)
 401407c:	d8000115 	stw	zero,4(sp)
 4014080:	d8000015 	stw	zero,0(sp)
 4014084:	e1fffc17 	ldw	r7,-16(fp)
 4014088:	e1bffb17 	ldw	r6,-20(fp)
 401408c:	e17ffa17 	ldw	r5,-24(fp)
 4014090:	e13ff917 	ldw	r4,-28(fp)
 4014094:	4013cd80 	call	4013cd8 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, 0, 0, length, control, 
            sequence_number, read_burst_count, 0, read_stride, 0);
}
 4014098:	e037883a 	mov	sp,fp
 401409c:	dfc00117 	ldw	ra,4(sp)
 40140a0:	df000017 	ldw	fp,0(sp)
 40140a4:	dec00204 	addi	sp,sp,8
 40140a8:	f800283a 	ret

040140ac <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number,
    alt_u8 read_burst_count,
    alt_u8 write_burst_count, 
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
 40140ac:	deffec04 	addi	sp,sp,-80
 40140b0:	dfc01315 	stw	ra,76(sp)
 40140b4:	df001215 	stw	fp,72(sp)
 40140b8:	df001204 	addi	fp,sp,72
 40140bc:	e13ff715 	stw	r4,-36(fp)
 40140c0:	e17ff815 	stw	r5,-32(fp)
 40140c4:	e1bff915 	stw	r6,-28(fp)
 40140c8:	e1fffa15 	stw	r7,-24(fp)
 40140cc:	e1800617 	ldw	r6,24(fp)
 40140d0:	e1400717 	ldw	r5,28(fp)
 40140d4:	e1000817 	ldw	r4,32(fp)
 40140d8:	e0c00917 	ldw	r3,36(fp)
 40140dc:	e0800a17 	ldw	r2,40(fp)
 40140e0:	e1bffb0d 	sth	r6,-20(fp)
 40140e4:	e17ffc05 	stb	r5,-16(fp)
 40140e8:	e13ffd05 	stb	r4,-12(fp)
 40140ec:	e0fffe0d 	sth	r3,-8(fp)
 40140f0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
 40140f4:	e0bffb0b 	ldhu	r2,-20(fp)
 40140f8:	e0fffc03 	ldbu	r3,-16(fp)
 40140fc:	e13ffd03 	ldbu	r4,-12(fp)
 4014100:	e17ffe0b 	ldhu	r5,-8(fp)
 4014104:	e1bfff0b 	ldhu	r6,-4(fp)
 4014108:	d9800815 	stw	r6,32(sp)
 401410c:	d9400715 	stw	r5,28(sp)
 4014110:	d9000615 	stw	r4,24(sp)
 4014114:	d8c00515 	stw	r3,20(sp)
 4014118:	d8800415 	stw	r2,16(sp)
 401411c:	e0800517 	ldw	r2,20(fp)
 4014120:	d8800315 	stw	r2,12(sp)
 4014124:	e0800417 	ldw	r2,16(fp)
 4014128:	d8800215 	stw	r2,8(sp)
 401412c:	e0800317 	ldw	r2,12(fp)
 4014130:	d8800115 	stw	r2,4(sp)
 4014134:	e0800217 	ldw	r2,8(fp)
 4014138:	d8800015 	stw	r2,0(sp)
 401413c:	e1fffa17 	ldw	r7,-24(fp)
 4014140:	e1bff917 	ldw	r6,-28(fp)
 4014144:	e17ff817 	ldw	r5,-32(fp)
 4014148:	e13ff717 	ldw	r4,-36(fp)
 401414c:	4013cd80 	call	4013cd8 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
            write_address_low, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
 4014150:	e037883a 	mov	sp,fp
 4014154:	dfc00117 	ldw	ra,4(sp)
 4014158:	df000017 	ldw	fp,0(sp)
 401415c:	dec00204 	addi	sp,sp,8
 4014160:	f800283a 	ret

04014164 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
    alt_msgdma_prefetcher_standard_descriptor** list,
    alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
 4014164:	defffc04 	addi	sp,sp,-16
 4014168:	df000315 	stw	fp,12(sp)
 401416c:	df000304 	addi	fp,sp,12
 4014170:	e13ffe15 	stw	r4,-8(fp)
 4014174:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    
    if (descriptor == NULL)
 4014178:	e0bfff17 	ldw	r2,-4(fp)
 401417c:	1000021e 	bne	r2,zero,4014188 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
 4014180:	00bffa84 	movi	r2,-22
 4014184:	00002f06 	br	4014244 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (descriptor->next_desc_ptr != (alt_u32)descriptor)
 4014188:	e0bfff17 	ldw	r2,-4(fp)
 401418c:	10c00317 	ldw	r3,12(r2)
 4014190:	e0bfff17 	ldw	r2,-4(fp)
 4014194:	18800226 	beq	r3,r2,40141a0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
 4014198:	00bffa84 	movi	r2,-22
 401419c:	00002906 	br	4014244 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == NULL)
 40141a0:	e0bffe17 	ldw	r2,-8(fp)
 40141a4:	10800017 	ldw	r2,0(r2)
 40141a8:	1000051e 	bne	r2,zero,40141c0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
    {
        *list = descriptor;  /* make this root-node if list is empty */
 40141ac:	e0bffe17 	ldw	r2,-8(fp)
 40141b0:	e0ffff17 	ldw	r3,-4(fp)
 40141b4:	10c00015 	stw	r3,0(r2)
        return 0;  /* successfully added */
 40141b8:	0005883a 	mov	r2,zero
 40141bc:	00002106 	br	4014244 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == descriptor)
 40141c0:	e0bffe17 	ldw	r2,-8(fp)
 40141c4:	10c00017 	ldw	r3,0(r2)
 40141c8:	e0bfff17 	ldw	r2,-4(fp)
 40141cc:	1880021e 	bne	r3,r2,40141d8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
 40141d0:	00bffa84 	movi	r2,-22
 40141d4:	00001b06 	br	4014244 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
 40141d8:	e0bffe17 	ldw	r2,-8(fp)
 40141dc:	10800017 	ldw	r2,0(r2)
 40141e0:	e0bffd15 	stw	r2,-12(fp)
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
 40141e4:	00000906 	br	401420c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
 40141e8:	e0bffd17 	ldw	r2,-12(fp)
 40141ec:	10c00317 	ldw	r3,12(r2)
 40141f0:	e0bfff17 	ldw	r2,-4(fp)
 40141f4:	1880021e 	bne	r3,r2,4014200 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
 40141f8:	00bffa84 	movi	r2,-22
 40141fc:	00001106 	br	4014244 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
 4014200:	e0bffd17 	ldw	r2,-12(fp)
 4014204:	10800317 	ldw	r2,12(r2)
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        last_descr_ptr = 
 4014208:	e0bffd15 	stw	r2,-12(fp)
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
 401420c:	e0bffd17 	ldw	r2,-12(fp)
 4014210:	10800317 	ldw	r2,12(r2)
 4014214:	e0fffe17 	ldw	r3,-8(fp)
 4014218:	18c00017 	ldw	r3,0(r3)
 401421c:	10fff21e 	bne	r2,r3,40141e8 <__alt_data_end+0xfc0141e8>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
    }
    /* add this descriptor to end of list */
    last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
 4014220:	e0ffff17 	ldw	r3,-4(fp)
 4014224:	e0bffd17 	ldw	r2,-12(fp)
 4014228:	10c00315 	stw	r3,12(r2)
    /* ensure new last pointer points the start of the list */
    descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
 401422c:	e0bffe17 	ldw	r2,-8(fp)
 4014230:	10800017 	ldw	r2,0(r2)
 4014234:	1007883a 	mov	r3,r2
 4014238:	e0bfff17 	ldw	r2,-4(fp)
 401423c:	10c00315 	stw	r3,12(r2)
    return 0; /* successfully added */
 4014240:	0005883a 	mov	r2,zero
}
 4014244:	e037883a 	mov	sp,fp
 4014248:	df000017 	ldw	fp,0(sp)
 401424c:	dec00104 	addi	sp,sp,4
 4014250:	f800283a 	ret

04014254 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
    alt_msgdma_prefetcher_extended_descriptor** list,
    alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
 4014254:	defff804 	addi	sp,sp,-32
 4014258:	df000715 	stw	fp,28(sp)
 401425c:	df000704 	addi	fp,sp,28
 4014260:	e13ffe15 	stw	r4,-8(fp)
 4014264:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    msgdma_addr64 root_node_addr, next_node_addr;
    
    if (descriptor == NULL)
 4014268:	e13fff17 	ldw	r4,-4(fp)
 401426c:	2000021e 	bne	r4,zero,4014278 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
 4014270:	00bffa84 	movi	r2,-22
 4014274:	00005906 	br	40143dc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
 4014278:	e13fff17 	ldw	r4,-4(fp)
 401427c:	2015883a 	mov	r10,r4
 4014280:	0017883a 	mov	r11,zero
 4014284:	e2bffc15 	stw	r10,-16(fp)
 4014288:	e2fffd15 	stw	r11,-12(fp)
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
 401428c:	e13fff17 	ldw	r4,-4(fp)
 4014290:	21400317 	ldw	r5,12(r4)
 4014294:	e13ffc17 	ldw	r4,-16(fp)
 4014298:	2900041e 	bne	r5,r4,40142ac <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
 401429c:	e13fff17 	ldw	r4,-4(fp)
 40142a0:	21400b17 	ldw	r5,44(r4)
 40142a4:	e13ffd17 	ldw	r4,-12(fp)
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
 40142a8:	29000226 	beq	r5,r4,40142b4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
 40142ac:	00bffa84 	movi	r2,-22
 40142b0:	00004a06 	br	40143dc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    if (*list == NULL)
 40142b4:	e13ffe17 	ldw	r4,-8(fp)
 40142b8:	21000017 	ldw	r4,0(r4)
 40142bc:	2000051e 	bne	r4,zero,40142d4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
    {
        *list = descriptor;  /* make this the root-node if list is empty */
 40142c0:	e0bffe17 	ldw	r2,-8(fp)
 40142c4:	e0ffff17 	ldw	r3,-4(fp)
 40142c8:	10c00015 	stw	r3,0(r2)
        return 0;
 40142cc:	0005883a 	mov	r2,zero
 40142d0:	00004206 	br	40143dc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    if (*list == descriptor)
 40142d4:	e13ffe17 	ldw	r4,-8(fp)
 40142d8:	21400017 	ldw	r5,0(r4)
 40142dc:	e13fff17 	ldw	r4,-4(fp)
 40142e0:	2900021e 	bne	r5,r4,40142ec <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
 40142e4:	00bffa84 	movi	r2,-22
 40142e8:	00003c06 	br	40143dc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
 40142ec:	e13ffe17 	ldw	r4,-8(fp)
 40142f0:	21000017 	ldw	r4,0(r4)
 40142f4:	e13ff915 	stw	r4,-28(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
 40142f8:	e13ffe17 	ldw	r4,-8(fp)
 40142fc:	21000017 	ldw	r4,0(r4)
 4014300:	2011883a 	mov	r8,r4
 4014304:	0013883a 	mov	r9,zero
 4014308:	e23ffa15 	stw	r8,-24(fp)
 401430c:	e27ffb15 	stw	r9,-20(fp)
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
 4014310:	00001806 	br	4014374 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* first check if descriptor already in the list */
        next_node_addr.u64 = (uintptr_t)descriptor;
 4014314:	e13fff17 	ldw	r4,-4(fp)
 4014318:	200d883a 	mov	r6,r4
 401431c:	000f883a 	mov	r7,zero
 4014320:	e1bffc15 	stw	r6,-16(fp)
 4014324:	e1fffd15 	stw	r7,-12(fp)
        if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
 4014328:	e13ff917 	ldw	r4,-28(fp)
 401432c:	21400317 	ldw	r5,12(r4)
 4014330:	e13ffc17 	ldw	r4,-16(fp)
 4014334:	2900061e 	bne	r5,r4,4014350 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
            && (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
 4014338:	e13ff917 	ldw	r4,-28(fp)
 401433c:	21400b17 	ldw	r5,44(r4)
 4014340:	e13ffd17 	ldw	r4,-12(fp)
 4014344:	2900021e 	bne	r5,r4,4014350 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
 4014348:	00bffa84 	movi	r2,-22
 401434c:	00002306 	br	40143dc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
 4014350:	e13ff917 	ldw	r4,-28(fp)
 4014354:	21000317 	ldw	r4,12(r4)
 4014358:	e13ffc15 	stw	r4,-16(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
 401435c:	e13ff917 	ldw	r4,-28(fp)
 4014360:	21000b17 	ldw	r4,44(r4)
 4014364:	e13ffd15 	stw	r4,-12(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
 4014368:	e13ffc17 	ldw	r4,-16(fp)
 401436c:	e17ffd17 	ldw	r5,-12(fp)
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
 4014370:	e13ff915 	stw	r4,-28(fp)
    last_descr_ptr = *list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
 4014374:	e13ff917 	ldw	r4,-28(fp)
 4014378:	21400317 	ldw	r5,12(r4)
 401437c:	e13ffa17 	ldw	r4,-24(fp)
 4014380:	293fe41e 	bne	r5,r4,4014314 <__alt_data_end+0xfc014314>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
 4014384:	e13ff917 	ldw	r4,-28(fp)
 4014388:	21400b17 	ldw	r5,44(r4)
 401438c:	e13ffb17 	ldw	r4,-20(fp)
 4014390:	293fe01e 	bne	r5,r4,4014314 <__alt_data_end+0xfc014314>
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
    }
    /* add this descriptor to end of list */
    next_node_addr.u64 = (uintptr_t)descriptor;
 4014394:	e13fff17 	ldw	r4,-4(fp)
 4014398:	2005883a 	mov	r2,r4
 401439c:	0007883a 	mov	r3,zero
 40143a0:	e0bffc15 	stw	r2,-16(fp)
 40143a4:	e0fffd15 	stw	r3,-12(fp)
    last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
 40143a8:	e0fffc17 	ldw	r3,-16(fp)
 40143ac:	e0bff917 	ldw	r2,-28(fp)
 40143b0:	10c00315 	stw	r3,12(r2)
    last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
 40143b4:	e0fffd17 	ldw	r3,-12(fp)
 40143b8:	e0bff917 	ldw	r2,-28(fp)
 40143bc:	10c00b15 	stw	r3,44(r2)
    /* ensure new last pointer points the beginning of the list */
    descriptor->next_desc_ptr_low = root_node_addr.u32[0];
 40143c0:	e0fffa17 	ldw	r3,-24(fp)
 40143c4:	e0bfff17 	ldw	r2,-4(fp)
 40143c8:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = root_node_addr.u32[1];
 40143cc:	e0fffb17 	ldw	r3,-20(fp)
 40143d0:	e0bfff17 	ldw	r2,-4(fp)
 40143d4:	10c00b15 	stw	r3,44(r2)
    return 0;
 40143d8:	0005883a 	mov	r2,zero
}
 40143dc:	e037883a 	mov	sp,fp
 40143e0:	df000017 	ldw	fp,0(sp)
 40143e4:	dec00104 	addi	sp,sp,4
 40143e8:	f800283a 	ret

040143ec <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 */ 
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)    
{
 40143ec:	defff804 	addi	sp,sp,-32
 40143f0:	dfc00715 	stw	ra,28(sp)
 40143f4:	df000615 	stw	fp,24(sp)
 40143f8:	df000604 	addi	fp,sp,24
 40143fc:	e13ffd15 	stw	r4,-12(fp)
 4014400:	2807883a 	mov	r3,r5
 4014404:	3005883a 	mov	r2,r6
 4014408:	e0fffe05 	stb	r3,-8(fp)
 401440c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 descriptor_control_field = 0;
 4014410:	e03ffc15 	stw	zero,-16(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
 4014414:	e03ffb15 	stw	zero,-20(fp)
    
    if (list == NULL)
 4014418:	e0bffd17 	ldw	r2,-12(fp)
 401441c:	1000021e 	bne	r2,zero,4014428 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x3c>
    {
        return -EINVAL;  /* this list cannot be empty */
 4014420:	00bffa84 	movi	r2,-22
 4014424:	00002f06 	br	40144e4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf8>
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
 4014428:	e0bffd17 	ldw	r2,-12(fp)
 401442c:	e0bffa15 	stw	r2,-24(fp)
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
 4014430:	00000d06 	br	4014468 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x7c>
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
 4014434:	e0bffa17 	ldw	r2,-24(fp)
 4014438:	10800717 	ldw	r2,28(r2)
 401443c:	e0bffc15 	stw	r2,-16(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
 4014440:	e0bffc17 	ldw	r2,-16(fp)
 4014444:	10d00034 	orhi	r3,r2,16384
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
 4014448:	e0bffa17 	ldw	r2,-24(fp)
 401444c:	10c00715 	stw	r3,28(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
 4014450:	e0bffa17 	ldw	r2,-24(fp)
 4014454:	10800317 	ldw	r2,12(r2)
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
 4014458:	e0bffa15 	stw	r2,-24(fp)
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
 401445c:	e0bffb17 	ldw	r2,-20(fp)
 4014460:	10800044 	addi	r2,r2,1
 4014464:	e0bffb15 	stw	r2,-20(fp)
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
 4014468:	e0bffa17 	ldw	r2,-24(fp)
 401446c:	10c00317 	ldw	r3,12(r2)
 4014470:	e0bffd17 	ldw	r2,-12(fp)
 4014474:	18bfef1e 	bne	r3,r2,4014434 <__alt_data_end+0xfc014434>
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
 4014478:	e0bffa17 	ldw	r2,-24(fp)
 401447c:	10800717 	ldw	r2,28(r2)
 4014480:	e0bffc15 	stw	r2,-16(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
 4014484:	e0bffe03 	ldbu	r2,-8(fp)
 4014488:	10000726 	beq	r2,zero,40144a8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xbc>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
 401448c:	e0fffc17 	ldw	r3,-16(fp)
 4014490:	00b00034 	movhi	r2,49152
 4014494:	10bfffc4 	addi	r2,r2,-1
 4014498:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
 401449c:	e0bffa17 	ldw	r2,-24(fp)
 40144a0:	10c00715 	stw	r3,28(r2)
 40144a4:	00000406 	br	40144b8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xcc>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
 40144a8:	e0bffc17 	ldw	r2,-16(fp)
 40144ac:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
 40144b0:	e0bffa17 	ldw	r2,-24(fp)
 40144b4:	10c00715 	stw	r3,28(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
 40144b8:	e0bffb17 	ldw	r2,-20(fp)
 40144bc:	10800044 	addi	r2,r2,1
 40144c0:	e0bffb15 	stw	r2,-20(fp)
    
    if (dcache_flush_desc_list)
 40144c4:	e0bfff03 	ldbu	r2,-4(fp)
 40144c8:	10000526 	beq	r2,zero,40144e0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf4>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_standard_descriptor) * descriptor_count);
 40144cc:	e0bffb17 	ldw	r2,-20(fp)
 40144d0:	1004917a 	slli	r2,r2,5
 40144d4:	100b883a 	mov	r5,r2
 40144d8:	e13ffd17 	ldw	r4,-12(fp)
 40144dc:	4014fe00 	call	4014fe0 <alt_dcache_flush>
    }
    
    return 0;
 40144e0:	0005883a 	mov	r2,zero
}
 40144e4:	e037883a 	mov	sp,fp
 40144e8:	dfc00117 	ldw	ra,4(sp)
 40144ec:	df000017 	ldw	fp,0(sp)
 40144f0:	dec00204 	addi	sp,sp,8
 40144f4:	f800283a 	ret

040144f8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 */    
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list) 
{    
 40144f8:	defff404 	addi	sp,sp,-48
 40144fc:	dfc00b15 	stw	ra,44(sp)
 4014500:	df000a15 	stw	fp,40(sp)
 4014504:	df000a04 	addi	fp,sp,40
 4014508:	e13ffd15 	stw	r4,-12(fp)
 401450c:	3009883a 	mov	r4,r6
 4014510:	e17ffe05 	stb	r5,-8(fp)
 4014514:	e13fff05 	stb	r4,-4(fp)
    alt_u32 descriptor_control_field = 0;
 4014518:	e03ff815 	stw	zero,-32(fp)
    msgdma_addr64 root_node_addr, next_node_addr;
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
 401451c:	e03ff715 	stw	zero,-36(fp)
    
    if (list == NULL)
 4014520:	e13ffd17 	ldw	r4,-12(fp)
 4014524:	2000021e 	bne	r4,zero,4014530 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x38>
    {
        return -EINVAL;  /* this list cannot be empty */
 4014528:	00bffa84 	movi	r2,-22
 401452c:	00003e06 	br	4014628 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x130>
    }
    
    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
 4014530:	e13ffd17 	ldw	r4,-12(fp)
 4014534:	e13ff615 	stw	r4,-40(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;
 4014538:	e13ffd17 	ldw	r4,-12(fp)
 401453c:	2005883a 	mov	r2,r4
 4014540:	0007883a 	mov	r3,zero
 4014544:	e0bff915 	stw	r2,-28(fp)
 4014548:	e0fffa15 	stw	r3,-24(fp)

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
 401454c:	00001306 	br	401459c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
 4014550:	e0bff617 	ldw	r2,-40(fp)
 4014554:	10800f17 	ldw	r2,60(r2)
 4014558:	e0bff815 	stw	r2,-32(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
 401455c:	e0bff817 	ldw	r2,-32(fp)
 4014560:	10d00034 	orhi	r3,r2,16384
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
 4014564:	e0bff617 	ldw	r2,-40(fp)
 4014568:	10c00f15 	stw	r3,60(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
 401456c:	e0bff617 	ldw	r2,-40(fp)
 4014570:	10800317 	ldw	r2,12(r2)
 4014574:	e0bffb15 	stw	r2,-20(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
 4014578:	e0bff617 	ldw	r2,-40(fp)
 401457c:	10800b17 	ldw	r2,44(r2)
 4014580:	e0bffc15 	stw	r2,-16(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
 4014584:	e0bffb17 	ldw	r2,-20(fp)
 4014588:	e0fffc17 	ldw	r3,-16(fp)
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
 401458c:	e0bff615 	stw	r2,-40(fp)
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
 4014590:	e0bff717 	ldw	r2,-36(fp)
 4014594:	10800044 	addi	r2,r2,1
 4014598:	e0bff715 	stw	r2,-36(fp)
    last_descr_ptr = list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
 401459c:	e0bff617 	ldw	r2,-40(fp)
 40145a0:	10c00317 	ldw	r3,12(r2)
 40145a4:	e0bff917 	ldw	r2,-28(fp)
 40145a8:	18bfe91e 	bne	r3,r2,4014550 <__alt_data_end+0xfc014550>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
 40145ac:	e0bff617 	ldw	r2,-40(fp)
 40145b0:	10c00b17 	ldw	r3,44(r2)
 40145b4:	e0bffa17 	ldw	r2,-24(fp)
 40145b8:	18bfe51e 	bne	r3,r2,4014550 <__alt_data_end+0xfc014550>
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
 40145bc:	e0bff617 	ldw	r2,-40(fp)
 40145c0:	10800f17 	ldw	r2,60(r2)
 40145c4:	e0bff815 	stw	r2,-32(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
 40145c8:	e0bffe03 	ldbu	r2,-8(fp)
 40145cc:	10000726 	beq	r2,zero,40145ec <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xf4>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
 40145d0:	e0fff817 	ldw	r3,-32(fp)
 40145d4:	00b00034 	movhi	r2,49152
 40145d8:	10bfffc4 	addi	r2,r2,-1
 40145dc:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
 40145e0:	e0bff617 	ldw	r2,-40(fp)
 40145e4:	10c00f15 	stw	r3,60(r2)
 40145e8:	00000406 	br	40145fc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x104>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
 40145ec:	e0bff817 	ldw	r2,-32(fp)
 40145f0:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
 40145f4:	e0bff617 	ldw	r2,-40(fp)
 40145f8:	10c00f15 	stw	r3,60(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
 40145fc:	e0bff717 	ldw	r2,-36(fp)
 4014600:	10800044 	addi	r2,r2,1
 4014604:	e0bff715 	stw	r2,-36(fp)
    
    if (dcache_flush_desc_list)
 4014608:	e0bfff03 	ldbu	r2,-4(fp)
 401460c:	10000526 	beq	r2,zero,4014624 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x12c>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_extended_descriptor) * descriptor_count);        
 4014610:	e0bff717 	ldw	r2,-36(fp)
 4014614:	100491ba 	slli	r2,r2,6
 4014618:	100b883a 	mov	r5,r2
 401461c:	e13ffd17 	ldw	r4,-12(fp)
 4014620:	4014fe00 	call	4014fe0 <alt_dcache_flush>
    }
    
    return 0;
 4014624:	0005883a 	mov	r2,zero
}
 4014628:	e037883a 	mov	sp,fp
 401462c:	dfc00117 	ldw	ra,4(sp)
 4014630:	df000017 	ldw	fp,0(sp)
 4014634:	dec00204 	addi	sp,sp,8
 4014638:	f800283a 	ret

0401463c <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
    alt_msgdma_dev *dev,
    alt_u64  list_addr,
    alt_u8 park_mode_en,
    alt_u8 poll_en)
{
 401463c:	deffef04 	addi	sp,sp,-68
 4014640:	df001015 	stw	fp,64(sp)
 4014644:	df001004 	addi	fp,sp,64
 4014648:	e13ffb15 	stw	r4,-20(fp)
 401464c:	e17ffc15 	stw	r5,-16(fp)
 4014650:	e1bffd15 	stw	r6,-12(fp)
 4014654:	3807883a 	mov	r3,r7
 4014658:	e0800117 	ldw	r2,4(fp)
 401465c:	e0fffe05 	stb	r3,-8(fp)
 4014660:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 prefetcher_ctl = 0;
 4014664:	e03ff015 	stw	zero,-64(fp)
    alt_u32 dispatcher_ctl = 0;
 4014668:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
 401466c:	e03ff215 	stw	zero,-56(fp)
    
    /* use helper struct to get easy access to hi/low address */
    msgdma_addr64 root_node_addr;
    root_node_addr.u64 = list_addr;  
 4014670:	e0bffc17 	ldw	r2,-16(fp)
 4014674:	e0bff915 	stw	r2,-28(fp)
 4014678:	e0bffd17 	ldw	r2,-12(fp)
 401467c:	e0bffa15 	stw	r2,-24(fp)
     * semaphore. This ensures that accessing registers is thread-safe.
     */
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* case where prefetcher already started, return busy error */ 
    prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
 4014680:	e0bffb17 	ldw	r2,-20(fp)
 4014684:	10800617 	ldw	r2,24(r2)
 4014688:	10800037 	ldwio	r2,0(r2)
 401468c:	e0bff015 	stw	r2,-64(fp)
    if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
 4014690:	e0bff017 	ldw	r2,-64(fp)
 4014694:	1080004c 	andi	r2,r2,1
 4014698:	10000226 	beq	r2,zero,40146a4 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
        /* release the registers semaphore */
        ALT_SEM_POST (dev->regs_lock);
        return -EBUSY;
 401469c:	00bffc04 	movi	r2,-16
 40146a0:	00009206 	br	40148ec <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
    }
        
    /* Stop the msgdma dispatcher from issuing more descriptors to the
       read or write masters  */
    /* stop issuing more descriptors */
    dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
 40146a4:	00800804 	movi	r2,32
 40146a8:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40146ac:	0005303a 	rdctl	r2,status
 40146b0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40146b4:	e0fff517 	ldw	r3,-44(fp)
 40146b8:	00bfff84 	movi	r2,-2
 40146bc:	1884703a 	and	r2,r3,r2
 40146c0:	1001703a 	wrctl	status,r2
  
  return context;
 40146c4:	e0bff517 	ldw	r2,-44(fp)
    
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
 40146c8:	e0bff215 	stw	r2,-56(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
 40146cc:	e0bffb17 	ldw	r2,-20(fp)
 40146d0:	10800317 	ldw	r2,12(r2)
 40146d4:	10800104 	addi	r2,r2,4
 40146d8:	e0fff117 	ldw	r3,-60(fp)
 40146dc:	10c00035 	stwio	r3,0(r2)
    /*
     * Clear any (previous) status register information
     * that might occlude our error checking later.
     */
    IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
 40146e0:	e0bffb17 	ldw	r2,-20(fp)
 40146e4:	10800317 	ldw	r2,12(r2)
 40146e8:	e0fffb17 	ldw	r3,-20(fp)
 40146ec:	18c00317 	ldw	r3,12(r3)
 40146f0:	18c00037 	ldwio	r3,0(r3)
 40146f4:	10c00035 	stwio	r3,0(r2)
 40146f8:	e0bff217 	ldw	r2,-56(fp)
 40146fc:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014700:	e0bff317 	ldw	r2,-52(fp)
 4014704:	1001703a 	wrctl	status,r2
     * If a callback routine has been previously registered which will be
     * called from the msgdma ISR. Set up dispatcher to:
     *  - Run
     *  - Stop on an error with any particular descriptor
     */
    if(dev->callback)
 4014708:	e0bffb17 	ldw	r2,-20(fp)
 401470c:	10800b17 	ldw	r2,44(r2)
 4014710:	10002326 	beq	r2,zero,40147a0 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
    {
        dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
 4014714:	e0bffb17 	ldw	r2,-20(fp)
 4014718:	10c00d17 	ldw	r3,52(r2)
 401471c:	e0bff117 	ldw	r2,-60(fp)
 4014720:	1884b03a 	or	r2,r3,r2
 4014724:	10800514 	ori	r2,r2,20
 4014728:	e0bff115 	stw	r2,-60(fp)
                | ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
 401472c:	e0fff117 	ldw	r3,-60(fp)
 4014730:	00bff7c4 	movi	r2,-33
 4014734:	1884703a 	and	r2,r3,r2
 4014738:	e0bff115 	stw	r2,-60(fp)
        
        prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
 401473c:	e0bff017 	ldw	r2,-64(fp)
 4014740:	10800214 	ori	r2,r2,8
 4014744:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014748:	0005303a 	rdctl	r2,status
 401474c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014750:	e0fff717 	ldw	r3,-36(fp)
 4014754:	00bfff84 	movi	r2,-2
 4014758:	1884703a 	and	r2,r3,r2
 401475c:	1001703a 	wrctl	status,r2
  
  return context;
 4014760:	e0bff717 	ldw	r2,-36(fp)
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
 4014764:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
 4014768:	e0bffb17 	ldw	r2,-20(fp)
 401476c:	10800317 	ldw	r2,12(r2)
 4014770:	10800104 	addi	r2,r2,4
 4014774:	e0fff117 	ldw	r3,-60(fp)
 4014778:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
 401477c:	e0bffb17 	ldw	r2,-20(fp)
 4014780:	10800617 	ldw	r2,24(r2)
 4014784:	e0fff017 	ldw	r3,-64(fp)
 4014788:	10c00035 	stwio	r3,0(r2)
 401478c:	e0bff217 	ldw	r2,-56(fp)
 4014790:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014794:	e0bff417 	ldw	r2,-48(fp)
 4014798:	1001703a 	wrctl	status,r2
 401479c:	00002306 	br	401482c <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
      *   - Stop on an error with any particular descriptor
      *   - Disable interrupt generation
      */
     else
     {
         dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
 40147a0:	e0bffb17 	ldw	r2,-20(fp)
 40147a4:	10c00d17 	ldw	r3,52(r2)
 40147a8:	e0bff117 	ldw	r2,-60(fp)
 40147ac:	1884b03a 	or	r2,r3,r2
 40147b0:	10800114 	ori	r2,r2,4
 40147b4:	e0bff115 	stw	r2,-60(fp)
         dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
 40147b8:	e0fff117 	ldw	r3,-60(fp)
 40147bc:	00bff3c4 	movi	r2,-49
 40147c0:	1884703a 	and	r2,r3,r2
 40147c4:	e0bff115 	stw	r2,-60(fp)
                 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
 40147c8:	e0fff017 	ldw	r3,-64(fp)
 40147cc:	00bffdc4 	movi	r2,-9
 40147d0:	1884703a 	and	r2,r3,r2
 40147d4:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40147d8:	0005303a 	rdctl	r2,status
 40147dc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40147e0:	e0fff817 	ldw	r3,-32(fp)
 40147e4:	00bfff84 	movi	r2,-2
 40147e8:	1884703a 	and	r2,r3,r2
 40147ec:	1001703a 	wrctl	status,r2
  
  return context;
 40147f0:	e0bff817 	ldw	r2,-32(fp)
         /* making sure the read-modify-write below can't be pre-empted */
         context = alt_irq_disable_all();
 40147f4:	e0bff215 	stw	r2,-56(fp)
         IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
 40147f8:	e0bffb17 	ldw	r2,-20(fp)
 40147fc:	10800317 	ldw	r2,12(r2)
 4014800:	10800104 	addi	r2,r2,4
 4014804:	e0fff117 	ldw	r3,-60(fp)
 4014808:	10c00035 	stwio	r3,0(r2)
         IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
 401480c:	e0bffb17 	ldw	r2,-20(fp)
 4014810:	10800617 	ldw	r2,24(r2)
 4014814:	e0fff017 	ldw	r3,-64(fp)
 4014818:	10c00035 	stwio	r3,0(r2)
 401481c:	e0bff217 	ldw	r2,-56(fp)
 4014820:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014824:	e0bff617 	ldw	r2,-40(fp)
 4014828:	1001703a 	wrctl	status,r2
         alt_irq_enable_all(context);
     }   
    
     /* set next descriptor registers to point to the list root-node */
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
 401482c:	e0bffb17 	ldw	r2,-20(fp)
 4014830:	10800617 	ldw	r2,24(r2)
 4014834:	10800104 	addi	r2,r2,4
 4014838:	e0fff917 	ldw	r3,-28(fp)
 401483c:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[0]);
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
 4014840:	e0bffb17 	ldw	r2,-20(fp)
 4014844:	10800617 	ldw	r2,24(r2)
 4014848:	10800204 	addi	r2,r2,8
 401484c:	e0fffa17 	ldw	r3,-24(fp)
 4014850:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[1]);
        
     /* set park-mode */
     if (park_mode_en){
 4014854:	e0bffe03 	ldbu	r2,-8(fp)
 4014858:	10000426 	beq	r2,zero,401486c <alt_msgdma_start_prefetcher_with_list_addr+0x230>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
 401485c:	e0bff017 	ldw	r2,-64(fp)
 4014860:	10800414 	ori	r2,r2,16
 4014864:	e0bff015 	stw	r2,-64(fp)
 4014868:	00000406 	br	401487c <alt_msgdma_start_prefetcher_with_list_addr+0x240>
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
 401486c:	e0fff017 	ldw	r3,-64(fp)
 4014870:	00bffbc4 	movi	r2,-17
 4014874:	1884703a 	and	r2,r3,r2
 4014878:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set poll-en */
     if (poll_en){
 401487c:	e0bfff03 	ldbu	r2,-4(fp)
 4014880:	10000e26 	beq	r2,zero,40148bc <alt_msgdma_start_prefetcher_with_list_addr+0x280>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
 4014884:	e0bff017 	ldw	r2,-64(fp)
 4014888:	10800094 	ori	r2,r2,2
 401488c:	e0bff015 	stw	r2,-64(fp)
         if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
 4014890:	e0bffb17 	ldw	r2,-20(fp)
 4014894:	10800617 	ldw	r2,24(r2)
 4014898:	10800304 	addi	r2,r2,12
 401489c:	10800037 	ldwio	r2,0(r2)
 40148a0:	10000a1e 	bne	r2,zero,40148cc <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                 dev->prefetcher_base) == 0){
             /* set poll frequency to some non-zero default value */
             IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
 40148a4:	e0bffb17 	ldw	r2,-20(fp)
 40148a8:	10800617 	ldw	r2,24(r2)
 40148ac:	10800304 	addi	r2,r2,12
 40148b0:	00c03fc4 	movi	r3,255
 40148b4:	10c00035 	stwio	r3,0(r2)
 40148b8:	00000406 	br	40148cc <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                     dev->prefetcher_base, 0xFF);
         }
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
 40148bc:	e0fff017 	ldw	r3,-64(fp)
 40148c0:	00bfff44 	movi	r2,-3
 40148c4:	1884703a 	and	r2,r3,r2
 40148c8:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set the prefetcher run bit */
     prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
 40148cc:	e0bff017 	ldw	r2,-64(fp)
 40148d0:	10800054 	ori	r2,r2,1
 40148d4:	e0bff015 	stw	r2,-64(fp)
     /* start the dma since run bit is set */
     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
 40148d8:	e0bffb17 	ldw	r2,-20(fp)
 40148dc:	10800617 	ldw	r2,24(r2)
 40148e0:	e0fff017 	ldw	r3,-64(fp)
 40148e4:	10c00035 	stwio	r3,0(r2)
      * Now that access to the registers is complete, release the registers
      * semaphore so that other threads can access the registers.
      */
     ALT_SEM_POST (dev->regs_lock);
     
     return 0;
 40148e8:	0005883a 	mov	r2,zero
}
 40148ec:	e037883a 	mov	sp,fp
 40148f0:	df000017 	ldw	fp,0(sp)
 40148f4:	dec00104 	addi	sp,sp,4
 40148f8:	f800283a 	ret

040148fc <alt_msgdma_start_prefetcher_with_std_desc_list>:
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{    
 40148fc:	defff504 	addi	sp,sp,-44
 4014900:	dfc00a15 	stw	ra,40(sp)
 4014904:	df000915 	stw	fp,36(sp)
 4014908:	dc400815 	stw	r17,32(sp)
 401490c:	dc000715 	stw	r16,28(sp)
 4014910:	df000904 	addi	fp,sp,36
 4014914:	e13ff815 	stw	r4,-32(fp)
 4014918:	e17ff915 	stw	r5,-28(fp)
 401491c:	300b883a 	mov	r5,r6
 4014920:	3809883a 	mov	r4,r7
 4014924:	e0c00217 	ldw	r3,8(fp)
 4014928:	e0800317 	ldw	r2,12(fp)
 401492c:	e17ffa05 	stb	r5,-24(fp)
 4014930:	e13ffb05 	stb	r4,-20(fp)
 4014934:	e0fffc05 	stb	r3,-16(fp)
 4014938:	e0bffd05 	stb	r2,-12(fp)
    if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
 401493c:	e0bffc03 	ldbu	r2,-16(fp)
 4014940:	e0fffd03 	ldbu	r3,-12(fp)
 4014944:	180d883a 	mov	r6,r3
 4014948:	100b883a 	mov	r5,r2
 401494c:	e13ff917 	ldw	r4,-28(fp)
 4014950:	40143ec0 	call	40143ec <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
 4014954:	10000226 	beq	r2,zero,4014960 <alt_msgdma_start_prefetcher_with_std_desc_list+0x64>
    {
        return -EINVAL;
 4014958:	00bffa84 	movi	r2,-22
 401495c:	00000b06 	br	401498c <alt_msgdma_start_prefetcher_with_std_desc_list+0x90>
    }

    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
 4014960:	e0bff917 	ldw	r2,-28(fp)
 4014964:	1021883a 	mov	r16,r2
 4014968:	0023883a 	mov	r17,zero
 401496c:	e0fffa03 	ldbu	r3,-24(fp)
 4014970:	e0bffb03 	ldbu	r2,-20(fp)
 4014974:	d8800015 	stw	r2,0(sp)
 4014978:	180f883a 	mov	r7,r3
 401497c:	800b883a 	mov	r5,r16
 4014980:	880d883a 	mov	r6,r17
 4014984:	e13ff817 	ldw	r4,-32(fp)
 4014988:	401463c0 	call	401463c <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
 401498c:	e6fffe04 	addi	sp,fp,-8
 4014990:	dfc00317 	ldw	ra,12(sp)
 4014994:	df000217 	ldw	fp,8(sp)
 4014998:	dc400117 	ldw	r17,4(sp)
 401499c:	dc000017 	ldw	r16,0(sp)
 40149a0:	dec00404 	addi	sp,sp,16
 40149a4:	f800283a 	ret

040149a8 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{
 40149a8:	defff504 	addi	sp,sp,-44
 40149ac:	dfc00a15 	stw	ra,40(sp)
 40149b0:	df000915 	stw	fp,36(sp)
 40149b4:	dc400815 	stw	r17,32(sp)
 40149b8:	dc000715 	stw	r16,28(sp)
 40149bc:	df000904 	addi	fp,sp,36
 40149c0:	e13ff815 	stw	r4,-32(fp)
 40149c4:	e17ff915 	stw	r5,-28(fp)
 40149c8:	300b883a 	mov	r5,r6
 40149cc:	3809883a 	mov	r4,r7
 40149d0:	e0c00217 	ldw	r3,8(fp)
 40149d4:	e0800317 	ldw	r2,12(fp)
 40149d8:	e17ffa05 	stb	r5,-24(fp)
 40149dc:	e13ffb05 	stb	r4,-20(fp)
 40149e0:	e0fffc05 	stb	r3,-16(fp)
 40149e4:	e0bffd05 	stb	r2,-12(fp)
    
     if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
 40149e8:	e0bffc03 	ldbu	r2,-16(fp)
 40149ec:	e0fffd03 	ldbu	r3,-12(fp)
 40149f0:	180d883a 	mov	r6,r3
 40149f4:	100b883a 	mov	r5,r2
 40149f8:	e13ff917 	ldw	r4,-28(fp)
 40149fc:	40144f80 	call	40144f8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
 4014a00:	10000226 	beq	r2,zero,4014a0c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x64>
    {
        return -EINVAL;
 4014a04:	00bffa84 	movi	r2,-22
 4014a08:	00000b06 	br	4014a38 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x90>
    }
        
    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
 4014a0c:	e0bff917 	ldw	r2,-28(fp)
 4014a10:	1021883a 	mov	r16,r2
 4014a14:	0023883a 	mov	r17,zero
 4014a18:	e0fffa03 	ldbu	r3,-24(fp)
 4014a1c:	e0bffb03 	ldbu	r2,-20(fp)
 4014a20:	d8800015 	stw	r2,0(sp)
 4014a24:	180f883a 	mov	r7,r3
 4014a28:	800b883a 	mov	r5,r16
 4014a2c:	880d883a 	mov	r6,r17
 4014a30:	e13ff817 	ldw	r4,-32(fp)
 4014a34:	401463c0 	call	401463c <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
 4014a38:	e6fffe04 	addi	sp,fp,-8
 4014a3c:	dfc00317 	ldw	ra,12(sp)
 4014a40:	df000217 	ldw	fp,8(sp)
 4014a44:	dc400117 	ldw	r17,4(sp)
 4014a48:	dc000017 	ldw	r16,0(sp)
 4014a4c:	dec00404 	addi	sp,sp,16
 4014a50:	f800283a 	ret

04014a54 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
 4014a54:	defffc04 	addi	sp,sp,-16
 4014a58:	dfc00315 	stw	ra,12(sp)
 4014a5c:	df000215 	stw	fp,8(sp)
 4014a60:	df000204 	addi	fp,sp,8
 4014a64:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
 4014a68:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
 4014a6c:	d1601f04 	addi	r5,gp,-32644
 4014a70:	e13fff17 	ldw	r4,-4(fp)
 4014a74:	40151c80 	call	40151c8 <alt_find_dev>
 4014a78:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
 4014a7c:	e0bffe17 	ldw	r2,-8(fp)
 4014a80:	1000041e 	bne	r2,zero,4014a94 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
 4014a84:	4012dbc0 	call	4012dbc <alt_get_errno>
 4014a88:	1007883a 	mov	r3,r2
 4014a8c:	008004c4 	movi	r2,19
 4014a90:	18800015 	stw	r2,0(r3)
    }

    return dev;
 4014a94:	e0bffe17 	ldw	r2,-8(fp)
}
 4014a98:	e037883a 	mov	sp,fp
 4014a9c:	dfc00117 	ldw	ra,4(sp)
 4014aa0:	df000017 	ldw	fp,0(sp)
 4014aa4:	dec00204 	addi	sp,sp,8
 4014aa8:	f800283a 	ret

04014aac <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
 4014aac:	defff804 	addi	sp,sp,-32
 4014ab0:	dfc00715 	stw	ra,28(sp)
 4014ab4:	df000615 	stw	fp,24(sp)
 4014ab8:	df000604 	addi	fp,sp,24
 4014abc:	e13ffd15 	stw	r4,-12(fp)
 4014ac0:	e17ffe15 	stw	r5,-8(fp)
 4014ac4:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
 4014ac8:	e0bffd17 	ldw	r2,-12(fp)
 4014acc:	10801783 	ldbu	r2,94(r2)
 4014ad0:	10803fcc 	andi	r2,r2,255
 4014ad4:	10000b26 	beq	r2,zero,4014b04 <alt_msgdma_init+0x58>
    {
        /* start prefetcher reset sequence */
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
 4014ad8:	e0bffd17 	ldw	r2,-12(fp)
 4014adc:	10800617 	ldw	r2,24(r2)
 4014ae0:	00c00104 	movi	r3,4
 4014ae4:	10c00035 	stwio	r3,0(r2)
                ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
        /* wait until hw clears the bit */
        while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
 4014ae8:	0001883a 	nop
 4014aec:	e0bffd17 	ldw	r2,-12(fp)
 4014af0:	10800617 	ldw	r2,24(r2)
 4014af4:	10800037 	ldwio	r2,0(r2)
 4014af8:	1080010c 	andi	r2,r2,4
 4014afc:	1005d0ba 	srai	r2,r2,2
 4014b00:	103ffa1e 	bne	r2,zero,4014aec <__alt_data_end+0xfc014aec>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
 4014b04:	e0bffd17 	ldw	r2,-12(fp)
 4014b08:	10800317 	ldw	r2,12(r2)
 4014b0c:	10800104 	addi	r2,r2,4
 4014b10:	00c00084 	movi	r3,2
 4014b14:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
 4014b18:	0001883a 	nop
 4014b1c:	e0bffd17 	ldw	r2,-12(fp)
 4014b20:	10800317 	ldw	r2,12(r2)
 4014b24:	10800037 	ldwio	r2,0(r2)
            & ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
 4014b28:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
 4014b2c:	103ffb1e 	bne	r2,zero,4014b1c <__alt_data_end+0xfc014b1c>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
 4014b30:	e0bffd17 	ldw	r2,-12(fp)
 4014b34:	10800317 	ldw	r2,12(r2)
 4014b38:	10800104 	addi	r2,r2,4
 4014b3c:	10800037 	ldwio	r2,0(r2)
 4014b40:	1007883a 	mov	r3,r2
 4014b44:	00bffbc4 	movi	r2,-17
 4014b48:	1884703a 	and	r2,r3,r2
 4014b4c:	e0bffb15 	stw	r2,-20(fp)
            & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
 4014b50:	e0bffb17 	ldw	r2,-20(fp)
 4014b54:	10800814 	ori	r2,r2,32
 4014b58:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
 4014b5c:	e0bffd17 	ldw	r2,-12(fp)
 4014b60:	10800317 	ldw	r2,12(r2)
 4014b64:	10800104 	addi	r2,r2,4
 4014b68:	e0fffb17 	ldw	r3,-20(fp)
 4014b6c:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
 4014b70:	e0bffd17 	ldw	r2,-12(fp)
 4014b74:	10800317 	ldw	r2,12(r2)
 4014b78:	e0fffd17 	ldw	r3,-12(fp)
 4014b7c:	18c00317 	ldw	r3,12(r3)
 4014b80:	18c00037 	ldwio	r3,0(r3)
 4014b84:	10c00035 	stwio	r3,0(r2)
            IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
 4014b88:	e0bffd17 	ldw	r2,-12(fp)
 4014b8c:	10801783 	ldbu	r2,94(r2)
 4014b90:	10803fcc 	andi	r2,r2,255
 4014b94:	10000826 	beq	r2,zero,4014bb8 <alt_msgdma_init+0x10c>
    {
        /* clear all status bits that are set, since theyre W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
 4014b98:	e0bffd17 	ldw	r2,-12(fp)
 4014b9c:	10800617 	ldw	r2,24(r2)
 4014ba0:	10800404 	addi	r2,r2,16
 4014ba4:	e0fffd17 	ldw	r3,-12(fp)
 4014ba8:	18c00617 	ldw	r3,24(r3)
 4014bac:	18c00404 	addi	r3,r3,16
 4014bb0:	18c00037 	ldwio	r3,0(r3)
 4014bb4:	10c00035 	stwio	r3,0(r2)
                IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
 4014bb8:	d1601f04 	addi	r5,gp,-32644
 4014bbc:	e13ffd17 	ldw	r4,-12(fp)
 4014bc0:	40150640 	call	4015064 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 4014bc4:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 4014bc8:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
 4014bcc:	e0bffc17 	ldw	r2,-16(fp)
 4014bd0:	1000081e 	bne	r2,zero,4014bf4 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
 4014bd4:	d8000015 	stw	zero,0(sp)
 4014bd8:	e1fffd17 	ldw	r7,-12(fp)
 4014bdc:	01810074 	movhi	r6,1025
 4014be0:	318bee04 	addi	r6,r6,12216
 4014be4:	e17fff17 	ldw	r5,-4(fp)
 4014be8:	e13ffe17 	ldw	r4,-8(fp)
 4014bec:	40152f80 	call	40152f8 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
 4014bf0:	00000406 	br	4014c04 <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
 4014bf4:	01010074 	movhi	r4,1025
 4014bf8:	211a8604 	addi	r4,r4,27160
 4014bfc:	401597c0 	call	401597c <alt_printf>
    }
    
    return;
 4014c00:	0001883a 	nop

}
 4014c04:	e037883a 	mov	sp,fp
 4014c08:	dfc00117 	ldw	ra,4(sp)
 4014c0c:	df000017 	ldw	fp,0(sp)
 4014c10:	dec00204 	addi	sp,sp,8
 4014c14:	f800283a 	ret

04014c18 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
    alt_msgdma_dev *dev,
    alt_msgdma_callback callback,
    alt_u32 control,
    void *context)
{
 4014c18:	defffb04 	addi	sp,sp,-20
 4014c1c:	df000415 	stw	fp,16(sp)
 4014c20:	df000404 	addi	fp,sp,16
 4014c24:	e13ffc15 	stw	r4,-16(fp)
 4014c28:	e17ffd15 	stw	r5,-12(fp)
 4014c2c:	e1bffe15 	stw	r6,-8(fp)
 4014c30:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 4014c34:	e0bffc17 	ldw	r2,-16(fp)
 4014c38:	e0fffd17 	ldw	r3,-12(fp)
 4014c3c:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
 4014c40:	e0bffc17 	ldw	r2,-16(fp)
 4014c44:	e0ffff17 	ldw	r3,-4(fp)
 4014c48:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
 4014c4c:	e0bffc17 	ldw	r2,-16(fp)
 4014c50:	e0fffe17 	ldw	r3,-8(fp)
 4014c54:	10c00d15 	stw	r3,52(r2)

    return ;
 4014c58:	0001883a 	nop
}
 4014c5c:	e037883a 	mov	sp,fp
 4014c60:	df000017 	ldw	fp,0(sp)
 4014c64:	dec00104 	addi	sp,sp,4
 4014c68:	f800283a 	ret

04014c6c <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
 4014c6c:	defffc04 	addi	sp,sp,-16
 4014c70:	dfc00315 	stw	ra,12(sp)
 4014c74:	df000215 	stw	fp,8(sp)
 4014c78:	df000204 	addi	fp,sp,8
 4014c7c:	e13ffe15 	stw	r4,-8(fp)
 4014c80:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
 4014c84:	000d883a 	mov	r6,zero
 4014c88:	e17fff17 	ldw	r5,-4(fp)
 4014c8c:	e13ffe17 	ldw	r4,-8(fp)
 4014c90:	401331c0 	call	401331c <alt_msgdma_descriptor_async_transfer>

}
 4014c94:	e037883a 	mov	sp,fp
 4014c98:	dfc00117 	ldw	ra,4(sp)
 4014c9c:	df000017 	ldw	fp,0(sp)
 4014ca0:	dec00204 	addi	sp,sp,8
 4014ca4:	f800283a 	ret

04014ca8 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
 4014ca8:	defffc04 	addi	sp,sp,-16
 4014cac:	dfc00315 	stw	ra,12(sp)
 4014cb0:	df000215 	stw	fp,8(sp)
 4014cb4:	df000204 	addi	fp,sp,8
 4014cb8:	e13ffe15 	stw	r4,-8(fp)
 4014cbc:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
 4014cc0:	e1bfff17 	ldw	r6,-4(fp)
 4014cc4:	000b883a 	mov	r5,zero
 4014cc8:	e13ffe17 	ldw	r4,-8(fp)
 4014ccc:	401331c0 	call	401331c <alt_msgdma_descriptor_async_transfer>
}
 4014cd0:	e037883a 	mov	sp,fp
 4014cd4:	dfc00117 	ldw	ra,4(sp)
 4014cd8:	df000017 	ldw	fp,0(sp)
 4014cdc:	dec00204 	addi	sp,sp,8
 4014ce0:	f800283a 	ret

04014ce4 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
 4014ce4:	defffc04 	addi	sp,sp,-16
 4014ce8:	dfc00315 	stw	ra,12(sp)
 4014cec:	df000215 	stw	fp,8(sp)
 4014cf0:	df000204 	addi	fp,sp,8
 4014cf4:	e13ffe15 	stw	r4,-8(fp)
 4014cf8:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
 4014cfc:	000d883a 	mov	r6,zero
 4014d00:	e17fff17 	ldw	r5,-4(fp)
 4014d04:	e13ffe17 	ldw	r4,-8(fp)
 4014d08:	40135ec0 	call	40135ec <alt_msgdma_descriptor_sync_transfer>
}
 4014d0c:	e037883a 	mov	sp,fp
 4014d10:	dfc00117 	ldw	ra,4(sp)
 4014d14:	df000017 	ldw	fp,0(sp)
 4014d18:	dec00204 	addi	sp,sp,8
 4014d1c:	f800283a 	ret

04014d20 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
 4014d20:	defffc04 	addi	sp,sp,-16
 4014d24:	dfc00315 	stw	ra,12(sp)
 4014d28:	df000215 	stw	fp,8(sp)
 4014d2c:	df000204 	addi	fp,sp,8
 4014d30:	e13ffe15 	stw	r4,-8(fp)
 4014d34:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
 4014d38:	e1bfff17 	ldw	r6,-4(fp)
 4014d3c:	000b883a 	mov	r5,zero
 4014d40:	e13ffe17 	ldw	r4,-8(fp)
 4014d44:	40135ec0 	call	40135ec <alt_msgdma_descriptor_sync_transfer>
}
 4014d48:	e037883a 	mov	sp,fp
 4014d4c:	dfc00117 	ldw	ra,4(sp)
 4014d50:	df000017 	ldw	fp,0(sp)
 4014d54:	dec00204 	addi	sp,sp,8
 4014d58:	f800283a 	ret

04014d5c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4014d5c:	defff504 	addi	sp,sp,-44
 4014d60:	df000a15 	stw	fp,40(sp)
 4014d64:	df000a04 	addi	fp,sp,40
 4014d68:	e13ffc15 	stw	r4,-16(fp)
 4014d6c:	e17ffd15 	stw	r5,-12(fp)
 4014d70:	e1bffe15 	stw	r6,-8(fp)
 4014d74:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4014d78:	e03ff615 	stw	zero,-40(fp)
 4014d7c:	d0a72517 	ldw	r2,-25452(gp)
  
  if (alt_ticks_per_second ())
 4014d80:	10003c26 	beq	r2,zero,4014e74 <alt_alarm_start+0x118>
  {
    if (alarm)
 4014d84:	e0bffc17 	ldw	r2,-16(fp)
 4014d88:	10003826 	beq	r2,zero,4014e6c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4014d8c:	e0bffc17 	ldw	r2,-16(fp)
 4014d90:	e0fffe17 	ldw	r3,-8(fp)
 4014d94:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4014d98:	e0bffc17 	ldw	r2,-16(fp)
 4014d9c:	e0ffff17 	ldw	r3,-4(fp)
 4014da0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014da4:	0005303a 	rdctl	r2,status
 4014da8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014dac:	e0fff917 	ldw	r3,-28(fp)
 4014db0:	00bfff84 	movi	r2,-2
 4014db4:	1884703a 	and	r2,r3,r2
 4014db8:	1001703a 	wrctl	status,r2
  
  return context;
 4014dbc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4014dc0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4014dc4:	d0a72617 	ldw	r2,-25448(gp)
      
      current_nticks = alt_nticks();
 4014dc8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4014dcc:	e0fffd17 	ldw	r3,-12(fp)
 4014dd0:	e0bff617 	ldw	r2,-40(fp)
 4014dd4:	1885883a 	add	r2,r3,r2
 4014dd8:	10c00044 	addi	r3,r2,1
 4014ddc:	e0bffc17 	ldw	r2,-16(fp)
 4014de0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4014de4:	e0bffc17 	ldw	r2,-16(fp)
 4014de8:	10c00217 	ldw	r3,8(r2)
 4014dec:	e0bff617 	ldw	r2,-40(fp)
 4014df0:	1880042e 	bgeu	r3,r2,4014e04 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4014df4:	e0bffc17 	ldw	r2,-16(fp)
 4014df8:	00c00044 	movi	r3,1
 4014dfc:	10c00405 	stb	r3,16(r2)
 4014e00:	00000206 	br	4014e0c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4014e04:	e0bffc17 	ldw	r2,-16(fp)
 4014e08:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4014e0c:	e0bffc17 	ldw	r2,-16(fp)
 4014e10:	d0e02204 	addi	r3,gp,-32632
 4014e14:	e0fffa15 	stw	r3,-24(fp)
 4014e18:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4014e1c:	e0bffb17 	ldw	r2,-20(fp)
 4014e20:	e0fffa17 	ldw	r3,-24(fp)
 4014e24:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4014e28:	e0bffa17 	ldw	r2,-24(fp)
 4014e2c:	10c00017 	ldw	r3,0(r2)
 4014e30:	e0bffb17 	ldw	r2,-20(fp)
 4014e34:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4014e38:	e0bffa17 	ldw	r2,-24(fp)
 4014e3c:	10800017 	ldw	r2,0(r2)
 4014e40:	e0fffb17 	ldw	r3,-20(fp)
 4014e44:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4014e48:	e0bffa17 	ldw	r2,-24(fp)
 4014e4c:	e0fffb17 	ldw	r3,-20(fp)
 4014e50:	10c00015 	stw	r3,0(r2)
 4014e54:	e0bff817 	ldw	r2,-32(fp)
 4014e58:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014e5c:	e0bff717 	ldw	r2,-36(fp)
 4014e60:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4014e64:	0005883a 	mov	r2,zero
 4014e68:	00000306 	br	4014e78 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4014e6c:	00bffa84 	movi	r2,-22
 4014e70:	00000106 	br	4014e78 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4014e74:	00bfde84 	movi	r2,-134
  }
}
 4014e78:	e037883a 	mov	sp,fp
 4014e7c:	df000017 	ldw	fp,0(sp)
 4014e80:	dec00104 	addi	sp,sp,4
 4014e84:	f800283a 	ret

04014e88 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4014e88:	defffa04 	addi	sp,sp,-24
 4014e8c:	dfc00515 	stw	ra,20(sp)
 4014e90:	df000415 	stw	fp,16(sp)
 4014e94:	df000404 	addi	fp,sp,16
 4014e98:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4014e9c:	00800244 	movi	r2,9
 4014ea0:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4014ea4:	014003f4 	movhi	r5,15
 4014ea8:	29509004 	addi	r5,r5,16960
 4014eac:	e13ffd17 	ldw	r4,-12(fp)
 4014eb0:	40044f40 	call	40044f4 <__mulsi3>
 4014eb4:	100b883a 	mov	r5,r2
 4014eb8:	0100bef4 	movhi	r4,763
 4014ebc:	213c2004 	addi	r4,r4,-3968
 4014ec0:	40044380 	call	4004438 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4014ec4:	100b883a 	mov	r5,r2
 4014ec8:	01200034 	movhi	r4,32768
 4014ecc:	213fffc4 	addi	r4,r4,-1
 4014ed0:	40044380 	call	4004438 <__udivsi3>
 4014ed4:	100b883a 	mov	r5,r2
 4014ed8:	e13fff17 	ldw	r4,-4(fp)
 4014edc:	40044380 	call	4004438 <__udivsi3>
 4014ee0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4014ee4:	e0bffe17 	ldw	r2,-8(fp)
 4014ee8:	10002a26 	beq	r2,zero,4014f94 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4014eec:	e03ffc15 	stw	zero,-16(fp)
 4014ef0:	00001706 	br	4014f50 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4014ef4:	00a00034 	movhi	r2,32768
 4014ef8:	10bfffc4 	addi	r2,r2,-1
 4014efc:	10bfffc4 	addi	r2,r2,-1
 4014f00:	103ffe1e 	bne	r2,zero,4014efc <__alt_data_end+0xfc014efc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4014f04:	014003f4 	movhi	r5,15
 4014f08:	29509004 	addi	r5,r5,16960
 4014f0c:	e13ffd17 	ldw	r4,-12(fp)
 4014f10:	40044f40 	call	40044f4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4014f14:	100b883a 	mov	r5,r2
 4014f18:	0100bef4 	movhi	r4,763
 4014f1c:	213c2004 	addi	r4,r4,-3968
 4014f20:	40044380 	call	4004438 <__udivsi3>
 4014f24:	100b883a 	mov	r5,r2
 4014f28:	01200034 	movhi	r4,32768
 4014f2c:	213fffc4 	addi	r4,r4,-1
 4014f30:	40044380 	call	4004438 <__udivsi3>
 4014f34:	1007883a 	mov	r3,r2
 4014f38:	e0bfff17 	ldw	r2,-4(fp)
 4014f3c:	10c5c83a 	sub	r2,r2,r3
 4014f40:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4014f44:	e0bffc17 	ldw	r2,-16(fp)
 4014f48:	10800044 	addi	r2,r2,1
 4014f4c:	e0bffc15 	stw	r2,-16(fp)
 4014f50:	e0fffc17 	ldw	r3,-16(fp)
 4014f54:	e0bffe17 	ldw	r2,-8(fp)
 4014f58:	18bfe616 	blt	r3,r2,4014ef4 <__alt_data_end+0xfc014ef4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4014f5c:	014003f4 	movhi	r5,15
 4014f60:	29509004 	addi	r5,r5,16960
 4014f64:	e13ffd17 	ldw	r4,-12(fp)
 4014f68:	40044f40 	call	40044f4 <__mulsi3>
 4014f6c:	100b883a 	mov	r5,r2
 4014f70:	0100bef4 	movhi	r4,763
 4014f74:	213c2004 	addi	r4,r4,-3968
 4014f78:	40044380 	call	4004438 <__udivsi3>
 4014f7c:	e17fff17 	ldw	r5,-4(fp)
 4014f80:	1009883a 	mov	r4,r2
 4014f84:	40044f40 	call	40044f4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4014f88:	10bfffc4 	addi	r2,r2,-1
 4014f8c:	103ffe1e 	bne	r2,zero,4014f88 <__alt_data_end+0xfc014f88>
 4014f90:	00000d06 	br	4014fc8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4014f94:	014003f4 	movhi	r5,15
 4014f98:	29509004 	addi	r5,r5,16960
 4014f9c:	e13ffd17 	ldw	r4,-12(fp)
 4014fa0:	40044f40 	call	40044f4 <__mulsi3>
 4014fa4:	100b883a 	mov	r5,r2
 4014fa8:	0100bef4 	movhi	r4,763
 4014fac:	213c2004 	addi	r4,r4,-3968
 4014fb0:	40044380 	call	4004438 <__udivsi3>
 4014fb4:	e17fff17 	ldw	r5,-4(fp)
 4014fb8:	1009883a 	mov	r4,r2
 4014fbc:	40044f40 	call	40044f4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4014fc0:	10bfffc4 	addi	r2,r2,-1
 4014fc4:	00bffe16 	blt	zero,r2,4014fc0 <__alt_data_end+0xfc014fc0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4014fc8:	0005883a 	mov	r2,zero
}
 4014fcc:	e037883a 	mov	sp,fp
 4014fd0:	dfc00117 	ldw	ra,4(sp)
 4014fd4:	df000017 	ldw	fp,0(sp)
 4014fd8:	dec00204 	addi	sp,sp,8
 4014fdc:	f800283a 	ret

04014fe0 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 4014fe0:	defffd04 	addi	sp,sp,-12
 4014fe4:	df000215 	stw	fp,8(sp)
 4014fe8:	df000204 	addi	fp,sp,8
 4014fec:	e13ffe15 	stw	r4,-8(fp)
 4014ff0:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4014ff4:	0001883a 	nop
 4014ff8:	e037883a 	mov	sp,fp
 4014ffc:	df000017 	ldw	fp,0(sp)
 4015000:	dec00104 	addi	sp,sp,4
 4015004:	f800283a 	ret

04015008 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4015008:	deffff04 	addi	sp,sp,-4
 401500c:	df000015 	stw	fp,0(sp)
 4015010:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4015014:	0001883a 	nop
 4015018:	e037883a 	mov	sp,fp
 401501c:	df000017 	ldw	fp,0(sp)
 4015020:	dec00104 	addi	sp,sp,4
 4015024:	f800283a 	ret

04015028 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4015028:	defffe04 	addi	sp,sp,-8
 401502c:	dfc00115 	stw	ra,4(sp)
 4015030:	df000015 	stw	fp,0(sp)
 4015034:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4015038:	d0a00b17 	ldw	r2,-32724(gp)
 401503c:	10000326 	beq	r2,zero,401504c <alt_get_errno+0x24>
 4015040:	d0a00b17 	ldw	r2,-32724(gp)
 4015044:	103ee83a 	callr	r2
 4015048:	00000106 	br	4015050 <alt_get_errno+0x28>
 401504c:	d0a71d04 	addi	r2,gp,-25484
}
 4015050:	e037883a 	mov	sp,fp
 4015054:	dfc00117 	ldw	ra,4(sp)
 4015058:	df000017 	ldw	fp,0(sp)
 401505c:	dec00204 	addi	sp,sp,8
 4015060:	f800283a 	ret

04015064 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4015064:	defffa04 	addi	sp,sp,-24
 4015068:	dfc00515 	stw	ra,20(sp)
 401506c:	df000415 	stw	fp,16(sp)
 4015070:	df000404 	addi	fp,sp,16
 4015074:	e13ffe15 	stw	r4,-8(fp)
 4015078:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 401507c:	e0bffe17 	ldw	r2,-8(fp)
 4015080:	10000326 	beq	r2,zero,4015090 <alt_dev_llist_insert+0x2c>
 4015084:	e0bffe17 	ldw	r2,-8(fp)
 4015088:	10800217 	ldw	r2,8(r2)
 401508c:	1000061e 	bne	r2,zero,40150a8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4015090:	40150280 	call	4015028 <alt_get_errno>
 4015094:	1007883a 	mov	r3,r2
 4015098:	00800584 	movi	r2,22
 401509c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 40150a0:	00bffa84 	movi	r2,-22
 40150a4:	00001306 	br	40150f4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 40150a8:	e0bffe17 	ldw	r2,-8(fp)
 40150ac:	e0ffff17 	ldw	r3,-4(fp)
 40150b0:	e0fffc15 	stw	r3,-16(fp)
 40150b4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40150b8:	e0bffd17 	ldw	r2,-12(fp)
 40150bc:	e0fffc17 	ldw	r3,-16(fp)
 40150c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40150c4:	e0bffc17 	ldw	r2,-16(fp)
 40150c8:	10c00017 	ldw	r3,0(r2)
 40150cc:	e0bffd17 	ldw	r2,-12(fp)
 40150d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40150d4:	e0bffc17 	ldw	r2,-16(fp)
 40150d8:	10800017 	ldw	r2,0(r2)
 40150dc:	e0fffd17 	ldw	r3,-12(fp)
 40150e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40150e4:	e0bffc17 	ldw	r2,-16(fp)
 40150e8:	e0fffd17 	ldw	r3,-12(fp)
 40150ec:	10c00015 	stw	r3,0(r2)

  return 0;  
 40150f0:	0005883a 	mov	r2,zero
}
 40150f4:	e037883a 	mov	sp,fp
 40150f8:	dfc00117 	ldw	ra,4(sp)
 40150fc:	df000017 	ldw	fp,0(sp)
 4015100:	dec00204 	addi	sp,sp,8
 4015104:	f800283a 	ret

04015108 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4015108:	defffd04 	addi	sp,sp,-12
 401510c:	dfc00215 	stw	ra,8(sp)
 4015110:	df000115 	stw	fp,4(sp)
 4015114:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4015118:	00810074 	movhi	r2,1025
 401511c:	1098e904 	addi	r2,r2,25508
 4015120:	e0bfff15 	stw	r2,-4(fp)
 4015124:	00000606 	br	4015140 <_do_ctors+0x38>
        (*ctor) (); 
 4015128:	e0bfff17 	ldw	r2,-4(fp)
 401512c:	10800017 	ldw	r2,0(r2)
 4015130:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4015134:	e0bfff17 	ldw	r2,-4(fp)
 4015138:	10bfff04 	addi	r2,r2,-4
 401513c:	e0bfff15 	stw	r2,-4(fp)
 4015140:	e0ffff17 	ldw	r3,-4(fp)
 4015144:	00810074 	movhi	r2,1025
 4015148:	1098ea04 	addi	r2,r2,25512
 401514c:	18bff62e 	bgeu	r3,r2,4015128 <__alt_data_end+0xfc015128>
        (*ctor) (); 
}
 4015150:	0001883a 	nop
 4015154:	e037883a 	mov	sp,fp
 4015158:	dfc00117 	ldw	ra,4(sp)
 401515c:	df000017 	ldw	fp,0(sp)
 4015160:	dec00204 	addi	sp,sp,8
 4015164:	f800283a 	ret

04015168 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4015168:	defffd04 	addi	sp,sp,-12
 401516c:	dfc00215 	stw	ra,8(sp)
 4015170:	df000115 	stw	fp,4(sp)
 4015174:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4015178:	00810074 	movhi	r2,1025
 401517c:	1098e904 	addi	r2,r2,25508
 4015180:	e0bfff15 	stw	r2,-4(fp)
 4015184:	00000606 	br	40151a0 <_do_dtors+0x38>
        (*dtor) (); 
 4015188:	e0bfff17 	ldw	r2,-4(fp)
 401518c:	10800017 	ldw	r2,0(r2)
 4015190:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4015194:	e0bfff17 	ldw	r2,-4(fp)
 4015198:	10bfff04 	addi	r2,r2,-4
 401519c:	e0bfff15 	stw	r2,-4(fp)
 40151a0:	e0ffff17 	ldw	r3,-4(fp)
 40151a4:	00810074 	movhi	r2,1025
 40151a8:	1098ea04 	addi	r2,r2,25512
 40151ac:	18bff62e 	bgeu	r3,r2,4015188 <__alt_data_end+0xfc015188>
        (*dtor) (); 
}
 40151b0:	0001883a 	nop
 40151b4:	e037883a 	mov	sp,fp
 40151b8:	dfc00117 	ldw	ra,4(sp)
 40151bc:	df000017 	ldw	fp,0(sp)
 40151c0:	dec00204 	addi	sp,sp,8
 40151c4:	f800283a 	ret

040151c8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 40151c8:	defffa04 	addi	sp,sp,-24
 40151cc:	dfc00515 	stw	ra,20(sp)
 40151d0:	df000415 	stw	fp,16(sp)
 40151d4:	df000404 	addi	fp,sp,16
 40151d8:	e13ffe15 	stw	r4,-8(fp)
 40151dc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 40151e0:	e0bfff17 	ldw	r2,-4(fp)
 40151e4:	10800017 	ldw	r2,0(r2)
 40151e8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 40151ec:	e13ffe17 	ldw	r4,-8(fp)
 40151f0:	40052400 	call	4005240 <strlen>
 40151f4:	10800044 	addi	r2,r2,1
 40151f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40151fc:	00000d06 	br	4015234 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4015200:	e0bffc17 	ldw	r2,-16(fp)
 4015204:	10800217 	ldw	r2,8(r2)
 4015208:	e0fffd17 	ldw	r3,-12(fp)
 401520c:	180d883a 	mov	r6,r3
 4015210:	e17ffe17 	ldw	r5,-8(fp)
 4015214:	1009883a 	mov	r4,r2
 4015218:	40160600 	call	4016060 <memcmp>
 401521c:	1000021e 	bne	r2,zero,4015228 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4015220:	e0bffc17 	ldw	r2,-16(fp)
 4015224:	00000706 	br	4015244 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4015228:	e0bffc17 	ldw	r2,-16(fp)
 401522c:	10800017 	ldw	r2,0(r2)
 4015230:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4015234:	e0fffc17 	ldw	r3,-16(fp)
 4015238:	e0bfff17 	ldw	r2,-4(fp)
 401523c:	18bff01e 	bne	r3,r2,4015200 <__alt_data_end+0xfc015200>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4015240:	0005883a 	mov	r2,zero
}
 4015244:	e037883a 	mov	sp,fp
 4015248:	dfc00117 	ldw	ra,4(sp)
 401524c:	df000017 	ldw	fp,0(sp)
 4015250:	dec00204 	addi	sp,sp,8
 4015254:	f800283a 	ret

04015258 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
 4015258:	defffc04 	addi	sp,sp,-16
 401525c:	df000315 	stw	fp,12(sp)
 4015260:	df000304 	addi	fp,sp,12
 4015264:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
 4015268:	e0bfff17 	ldw	r2,-4(fp)
 401526c:	10800217 	ldw	r2,8(r2)
 4015270:	1000021e 	bne	r2,zero,401527c <alt_fs_reg+0x24>
  {
    return -ENODEV;
 4015274:	00bffb44 	movi	r2,-19
 4015278:	00001306 	br	40152c8 <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
 401527c:	e0bfff17 	ldw	r2,-4(fp)
 4015280:	d0e00604 	addi	r3,gp,-32744
 4015284:	e0fffd15 	stw	r3,-12(fp)
 4015288:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401528c:	e0bffe17 	ldw	r2,-8(fp)
 4015290:	e0fffd17 	ldw	r3,-12(fp)
 4015294:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4015298:	e0bffd17 	ldw	r2,-12(fp)
 401529c:	10c00017 	ldw	r3,0(r2)
 40152a0:	e0bffe17 	ldw	r2,-8(fp)
 40152a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40152a8:	e0bffd17 	ldw	r2,-12(fp)
 40152ac:	10800017 	ldw	r2,0(r2)
 40152b0:	e0fffe17 	ldw	r3,-8(fp)
 40152b4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40152b8:	e0bffd17 	ldw	r2,-12(fp)
 40152bc:	e0fffe17 	ldw	r3,-8(fp)
 40152c0:	10c00015 	stw	r3,0(r2)

  return 0;
 40152c4:	0005883a 	mov	r2,zero
} 
 40152c8:	e037883a 	mov	sp,fp
 40152cc:	df000017 	ldw	fp,0(sp)
 40152d0:	dec00104 	addi	sp,sp,4
 40152d4:	f800283a 	ret

040152d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 40152d8:	deffff04 	addi	sp,sp,-4
 40152dc:	df000015 	stw	fp,0(sp)
 40152e0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 40152e4:	0001883a 	nop
 40152e8:	e037883a 	mov	sp,fp
 40152ec:	df000017 	ldw	fp,0(sp)
 40152f0:	dec00104 	addi	sp,sp,4
 40152f4:	f800283a 	ret

040152f8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40152f8:	defff904 	addi	sp,sp,-28
 40152fc:	dfc00615 	stw	ra,24(sp)
 4015300:	df000515 	stw	fp,20(sp)
 4015304:	df000504 	addi	fp,sp,20
 4015308:	e13ffc15 	stw	r4,-16(fp)
 401530c:	e17ffd15 	stw	r5,-12(fp)
 4015310:	e1bffe15 	stw	r6,-8(fp)
 4015314:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4015318:	e0800217 	ldw	r2,8(fp)
 401531c:	d8800015 	stw	r2,0(sp)
 4015320:	e1ffff17 	ldw	r7,-4(fp)
 4015324:	e1bffe17 	ldw	r6,-8(fp)
 4015328:	e17ffd17 	ldw	r5,-12(fp)
 401532c:	e13ffc17 	ldw	r4,-16(fp)
 4015330:	40154a80 	call	40154a8 <alt_iic_isr_register>
}  
 4015334:	e037883a 	mov	sp,fp
 4015338:	dfc00117 	ldw	ra,4(sp)
 401533c:	df000017 	ldw	fp,0(sp)
 4015340:	dec00204 	addi	sp,sp,8
 4015344:	f800283a 	ret

04015348 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4015348:	defff904 	addi	sp,sp,-28
 401534c:	df000615 	stw	fp,24(sp)
 4015350:	df000604 	addi	fp,sp,24
 4015354:	e13ffe15 	stw	r4,-8(fp)
 4015358:	e17fff15 	stw	r5,-4(fp)
 401535c:	e0bfff17 	ldw	r2,-4(fp)
 4015360:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015364:	0005303a 	rdctl	r2,status
 4015368:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401536c:	e0fffb17 	ldw	r3,-20(fp)
 4015370:	00bfff84 	movi	r2,-2
 4015374:	1884703a 	and	r2,r3,r2
 4015378:	1001703a 	wrctl	status,r2
  
  return context;
 401537c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4015380:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4015384:	00c00044 	movi	r3,1
 4015388:	e0bffa17 	ldw	r2,-24(fp)
 401538c:	1884983a 	sll	r2,r3,r2
 4015390:	1007883a 	mov	r3,r2
 4015394:	d0a72417 	ldw	r2,-25456(gp)
 4015398:	1884b03a 	or	r2,r3,r2
 401539c:	d0a72415 	stw	r2,-25456(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40153a0:	d0a72417 	ldw	r2,-25456(gp)
 40153a4:	100170fa 	wrctl	ienable,r2
 40153a8:	e0bffc17 	ldw	r2,-16(fp)
 40153ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40153b0:	e0bffd17 	ldw	r2,-12(fp)
 40153b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40153b8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 40153bc:	0001883a 	nop
}
 40153c0:	e037883a 	mov	sp,fp
 40153c4:	df000017 	ldw	fp,0(sp)
 40153c8:	dec00104 	addi	sp,sp,4
 40153cc:	f800283a 	ret

040153d0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 40153d0:	defff904 	addi	sp,sp,-28
 40153d4:	df000615 	stw	fp,24(sp)
 40153d8:	df000604 	addi	fp,sp,24
 40153dc:	e13ffe15 	stw	r4,-8(fp)
 40153e0:	e17fff15 	stw	r5,-4(fp)
 40153e4:	e0bfff17 	ldw	r2,-4(fp)
 40153e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40153ec:	0005303a 	rdctl	r2,status
 40153f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40153f4:	e0fffb17 	ldw	r3,-20(fp)
 40153f8:	00bfff84 	movi	r2,-2
 40153fc:	1884703a 	and	r2,r3,r2
 4015400:	1001703a 	wrctl	status,r2
  
  return context;
 4015404:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4015408:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 401540c:	00c00044 	movi	r3,1
 4015410:	e0bffa17 	ldw	r2,-24(fp)
 4015414:	1884983a 	sll	r2,r3,r2
 4015418:	0084303a 	nor	r2,zero,r2
 401541c:	1007883a 	mov	r3,r2
 4015420:	d0a72417 	ldw	r2,-25456(gp)
 4015424:	1884703a 	and	r2,r3,r2
 4015428:	d0a72415 	stw	r2,-25456(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401542c:	d0a72417 	ldw	r2,-25456(gp)
 4015430:	100170fa 	wrctl	ienable,r2
 4015434:	e0bffc17 	ldw	r2,-16(fp)
 4015438:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401543c:	e0bffd17 	ldw	r2,-12(fp)
 4015440:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4015444:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4015448:	0001883a 	nop
}
 401544c:	e037883a 	mov	sp,fp
 4015450:	df000017 	ldw	fp,0(sp)
 4015454:	dec00104 	addi	sp,sp,4
 4015458:	f800283a 	ret

0401545c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401545c:	defffc04 	addi	sp,sp,-16
 4015460:	df000315 	stw	fp,12(sp)
 4015464:	df000304 	addi	fp,sp,12
 4015468:	e13ffe15 	stw	r4,-8(fp)
 401546c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4015470:	000530fa 	rdctl	r2,ienable
 4015474:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4015478:	00c00044 	movi	r3,1
 401547c:	e0bfff17 	ldw	r2,-4(fp)
 4015480:	1884983a 	sll	r2,r3,r2
 4015484:	1007883a 	mov	r3,r2
 4015488:	e0bffd17 	ldw	r2,-12(fp)
 401548c:	1884703a 	and	r2,r3,r2
 4015490:	1004c03a 	cmpne	r2,r2,zero
 4015494:	10803fcc 	andi	r2,r2,255
}
 4015498:	e037883a 	mov	sp,fp
 401549c:	df000017 	ldw	fp,0(sp)
 40154a0:	dec00104 	addi	sp,sp,4
 40154a4:	f800283a 	ret

040154a8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40154a8:	defff504 	addi	sp,sp,-44
 40154ac:	dfc00a15 	stw	ra,40(sp)
 40154b0:	df000915 	stw	fp,36(sp)
 40154b4:	df000904 	addi	fp,sp,36
 40154b8:	e13ffc15 	stw	r4,-16(fp)
 40154bc:	e17ffd15 	stw	r5,-12(fp)
 40154c0:	e1bffe15 	stw	r6,-8(fp)
 40154c4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 40154c8:	00bffa84 	movi	r2,-22
 40154cc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 40154d0:	e0bffd17 	ldw	r2,-12(fp)
 40154d4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40154d8:	e0bff817 	ldw	r2,-32(fp)
 40154dc:	10800808 	cmpgei	r2,r2,32
 40154e0:	1000271e 	bne	r2,zero,4015580 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40154e4:	0005303a 	rdctl	r2,status
 40154e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40154ec:	e0fffb17 	ldw	r3,-20(fp)
 40154f0:	00bfff84 	movi	r2,-2
 40154f4:	1884703a 	and	r2,r3,r2
 40154f8:	1001703a 	wrctl	status,r2
  
  return context;
 40154fc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4015500:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4015504:	008100b4 	movhi	r2,1026
 4015508:	10a89204 	addi	r2,r2,-23992
 401550c:	e0fff817 	ldw	r3,-32(fp)
 4015510:	180690fa 	slli	r3,r3,3
 4015514:	10c5883a 	add	r2,r2,r3
 4015518:	e0fffe17 	ldw	r3,-8(fp)
 401551c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4015520:	008100b4 	movhi	r2,1026
 4015524:	10a89204 	addi	r2,r2,-23992
 4015528:	e0fff817 	ldw	r3,-32(fp)
 401552c:	180690fa 	slli	r3,r3,3
 4015530:	10c5883a 	add	r2,r2,r3
 4015534:	10800104 	addi	r2,r2,4
 4015538:	e0ffff17 	ldw	r3,-4(fp)
 401553c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4015540:	e0bffe17 	ldw	r2,-8(fp)
 4015544:	10000526 	beq	r2,zero,401555c <alt_iic_isr_register+0xb4>
 4015548:	e0bff817 	ldw	r2,-32(fp)
 401554c:	100b883a 	mov	r5,r2
 4015550:	e13ffc17 	ldw	r4,-16(fp)
 4015554:	40153480 	call	4015348 <alt_ic_irq_enable>
 4015558:	00000406 	br	401556c <alt_iic_isr_register+0xc4>
 401555c:	e0bff817 	ldw	r2,-32(fp)
 4015560:	100b883a 	mov	r5,r2
 4015564:	e13ffc17 	ldw	r4,-16(fp)
 4015568:	40153d00 	call	40153d0 <alt_ic_irq_disable>
 401556c:	e0bff715 	stw	r2,-36(fp)
 4015570:	e0bffa17 	ldw	r2,-24(fp)
 4015574:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015578:	e0bff917 	ldw	r2,-28(fp)
 401557c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4015580:	e0bff717 	ldw	r2,-36(fp)
}
 4015584:	e037883a 	mov	sp,fp
 4015588:	dfc00117 	ldw	ra,4(sp)
 401558c:	df000017 	ldw	fp,0(sp)
 4015590:	dec00204 	addi	sp,sp,8
 4015594:	f800283a 	ret

04015598 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4015598:	defff804 	addi	sp,sp,-32
 401559c:	dfc00715 	stw	ra,28(sp)
 40155a0:	df000615 	stw	fp,24(sp)
 40155a4:	dc000515 	stw	r16,20(sp)
 40155a8:	df000604 	addi	fp,sp,24
 40155ac:	e13ffb15 	stw	r4,-20(fp)
 40155b0:	e17ffc15 	stw	r5,-16(fp)
 40155b4:	e1bffd15 	stw	r6,-12(fp)
 40155b8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 40155bc:	e1bffe17 	ldw	r6,-8(fp)
 40155c0:	e17ffd17 	ldw	r5,-12(fp)
 40155c4:	e13ffc17 	ldw	r4,-16(fp)
 40155c8:	40158200 	call	4015820 <open>
 40155cc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 40155d0:	e0bffa17 	ldw	r2,-24(fp)
 40155d4:	10002216 	blt	r2,zero,4015660 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 40155d8:	04010074 	movhi	r16,1025
 40155dc:	841cc104 	addi	r16,r16,29444
 40155e0:	e0bffa17 	ldw	r2,-24(fp)
 40155e4:	01400304 	movi	r5,12
 40155e8:	1009883a 	mov	r4,r2
 40155ec:	40044f40 	call	40044f4 <__mulsi3>
 40155f0:	8085883a 	add	r2,r16,r2
 40155f4:	10c00017 	ldw	r3,0(r2)
 40155f8:	e0bffb17 	ldw	r2,-20(fp)
 40155fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4015600:	04010074 	movhi	r16,1025
 4015604:	841cc104 	addi	r16,r16,29444
 4015608:	e0bffa17 	ldw	r2,-24(fp)
 401560c:	01400304 	movi	r5,12
 4015610:	1009883a 	mov	r4,r2
 4015614:	40044f40 	call	40044f4 <__mulsi3>
 4015618:	8085883a 	add	r2,r16,r2
 401561c:	10800104 	addi	r2,r2,4
 4015620:	10c00017 	ldw	r3,0(r2)
 4015624:	e0bffb17 	ldw	r2,-20(fp)
 4015628:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 401562c:	04010074 	movhi	r16,1025
 4015630:	841cc104 	addi	r16,r16,29444
 4015634:	e0bffa17 	ldw	r2,-24(fp)
 4015638:	01400304 	movi	r5,12
 401563c:	1009883a 	mov	r4,r2
 4015640:	40044f40 	call	40044f4 <__mulsi3>
 4015644:	8085883a 	add	r2,r16,r2
 4015648:	10800204 	addi	r2,r2,8
 401564c:	10c00017 	ldw	r3,0(r2)
 4015650:	e0bffb17 	ldw	r2,-20(fp)
 4015654:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4015658:	e13ffa17 	ldw	r4,-24(fp)
 401565c:	4011b440 	call	4011b44 <alt_release_fd>
  }
} 
 4015660:	0001883a 	nop
 4015664:	e6ffff04 	addi	sp,fp,-4
 4015668:	dfc00217 	ldw	ra,8(sp)
 401566c:	df000117 	ldw	fp,4(sp)
 4015670:	dc000017 	ldw	r16,0(sp)
 4015674:	dec00304 	addi	sp,sp,12
 4015678:	f800283a 	ret

0401567c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 401567c:	defffb04 	addi	sp,sp,-20
 4015680:	dfc00415 	stw	ra,16(sp)
 4015684:	df000315 	stw	fp,12(sp)
 4015688:	df000304 	addi	fp,sp,12
 401568c:	e13ffd15 	stw	r4,-12(fp)
 4015690:	e17ffe15 	stw	r5,-8(fp)
 4015694:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4015698:	01c07fc4 	movi	r7,511
 401569c:	01800044 	movi	r6,1
 40156a0:	e17ffd17 	ldw	r5,-12(fp)
 40156a4:	01010074 	movhi	r4,1025
 40156a8:	211cc404 	addi	r4,r4,29456
 40156ac:	40155980 	call	4015598 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40156b0:	01c07fc4 	movi	r7,511
 40156b4:	000d883a 	mov	r6,zero
 40156b8:	e17ffe17 	ldw	r5,-8(fp)
 40156bc:	01010074 	movhi	r4,1025
 40156c0:	211cc104 	addi	r4,r4,29444
 40156c4:	40155980 	call	4015598 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40156c8:	01c07fc4 	movi	r7,511
 40156cc:	01800044 	movi	r6,1
 40156d0:	e17fff17 	ldw	r5,-4(fp)
 40156d4:	01010074 	movhi	r4,1025
 40156d8:	211cc704 	addi	r4,r4,29468
 40156dc:	40155980 	call	4015598 <alt_open_fd>
}  
 40156e0:	0001883a 	nop
 40156e4:	e037883a 	mov	sp,fp
 40156e8:	dfc00117 	ldw	ra,4(sp)
 40156ec:	df000017 	ldw	fp,0(sp)
 40156f0:	dec00204 	addi	sp,sp,8
 40156f4:	f800283a 	ret

040156f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40156f8:	defffe04 	addi	sp,sp,-8
 40156fc:	dfc00115 	stw	ra,4(sp)
 4015700:	df000015 	stw	fp,0(sp)
 4015704:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4015708:	d0a00b17 	ldw	r2,-32724(gp)
 401570c:	10000326 	beq	r2,zero,401571c <alt_get_errno+0x24>
 4015710:	d0a00b17 	ldw	r2,-32724(gp)
 4015714:	103ee83a 	callr	r2
 4015718:	00000106 	br	4015720 <alt_get_errno+0x28>
 401571c:	d0a71d04 	addi	r2,gp,-25484
}
 4015720:	e037883a 	mov	sp,fp
 4015724:	dfc00117 	ldw	ra,4(sp)
 4015728:	df000017 	ldw	fp,0(sp)
 401572c:	dec00204 	addi	sp,sp,8
 4015730:	f800283a 	ret

04015734 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4015734:	defffb04 	addi	sp,sp,-20
 4015738:	dfc00415 	stw	ra,16(sp)
 401573c:	df000315 	stw	fp,12(sp)
 4015740:	dc000215 	stw	r16,8(sp)
 4015744:	df000304 	addi	fp,sp,12
 4015748:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401574c:	e0bffe17 	ldw	r2,-8(fp)
 4015750:	10800217 	ldw	r2,8(r2)
 4015754:	10d00034 	orhi	r3,r2,16384
 4015758:	e0bffe17 	ldw	r2,-8(fp)
 401575c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4015760:	e03ffd15 	stw	zero,-12(fp)
 4015764:	00002306 	br	40157f4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4015768:	04010074 	movhi	r16,1025
 401576c:	841cc104 	addi	r16,r16,29444
 4015770:	e0bffd17 	ldw	r2,-12(fp)
 4015774:	01400304 	movi	r5,12
 4015778:	1009883a 	mov	r4,r2
 401577c:	40044f40 	call	40044f4 <__mulsi3>
 4015780:	8085883a 	add	r2,r16,r2
 4015784:	10c00017 	ldw	r3,0(r2)
 4015788:	e0bffe17 	ldw	r2,-8(fp)
 401578c:	10800017 	ldw	r2,0(r2)
 4015790:	1880151e 	bne	r3,r2,40157e8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4015794:	04010074 	movhi	r16,1025
 4015798:	841cc104 	addi	r16,r16,29444
 401579c:	e0bffd17 	ldw	r2,-12(fp)
 40157a0:	01400304 	movi	r5,12
 40157a4:	1009883a 	mov	r4,r2
 40157a8:	40044f40 	call	40044f4 <__mulsi3>
 40157ac:	8085883a 	add	r2,r16,r2
 40157b0:	10800204 	addi	r2,r2,8
 40157b4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40157b8:	10000b0e 	bge	r2,zero,40157e8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 40157bc:	01400304 	movi	r5,12
 40157c0:	e13ffd17 	ldw	r4,-12(fp)
 40157c4:	40044f40 	call	40044f4 <__mulsi3>
 40157c8:	1007883a 	mov	r3,r2
 40157cc:	00810074 	movhi	r2,1025
 40157d0:	109cc104 	addi	r2,r2,29444
 40157d4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40157d8:	e0bffe17 	ldw	r2,-8(fp)
 40157dc:	18800226 	beq	r3,r2,40157e8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 40157e0:	00bffcc4 	movi	r2,-13
 40157e4:	00000806 	br	4015808 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40157e8:	e0bffd17 	ldw	r2,-12(fp)
 40157ec:	10800044 	addi	r2,r2,1
 40157f0:	e0bffd15 	stw	r2,-12(fp)
 40157f4:	d0a00a17 	ldw	r2,-32728(gp)
 40157f8:	1007883a 	mov	r3,r2
 40157fc:	e0bffd17 	ldw	r2,-12(fp)
 4015800:	18bfd92e 	bgeu	r3,r2,4015768 <__alt_data_end+0xfc015768>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4015804:	0005883a 	mov	r2,zero
}
 4015808:	e6ffff04 	addi	sp,fp,-4
 401580c:	dfc00217 	ldw	ra,8(sp)
 4015810:	df000117 	ldw	fp,4(sp)
 4015814:	dc000017 	ldw	r16,0(sp)
 4015818:	dec00304 	addi	sp,sp,12
 401581c:	f800283a 	ret

04015820 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4015820:	defff604 	addi	sp,sp,-40
 4015824:	dfc00915 	stw	ra,36(sp)
 4015828:	df000815 	stw	fp,32(sp)
 401582c:	df000804 	addi	fp,sp,32
 4015830:	e13ffd15 	stw	r4,-12(fp)
 4015834:	e17ffe15 	stw	r5,-8(fp)
 4015838:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 401583c:	00bfffc4 	movi	r2,-1
 4015840:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4015844:	00bffb44 	movi	r2,-19
 4015848:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 401584c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4015850:	d1600804 	addi	r5,gp,-32736
 4015854:	e13ffd17 	ldw	r4,-12(fp)
 4015858:	40151c80 	call	40151c8 <alt_find_dev>
 401585c:	e0bff815 	stw	r2,-32(fp)
 4015860:	e0bff817 	ldw	r2,-32(fp)
 4015864:	1000051e 	bne	r2,zero,401587c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4015868:	e13ffd17 	ldw	r4,-12(fp)
 401586c:	4015dac0 	call	4015dac <alt_find_file>
 4015870:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4015874:	00800044 	movi	r2,1
 4015878:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 401587c:	e0bff817 	ldw	r2,-32(fp)
 4015880:	10002b26 	beq	r2,zero,4015930 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4015884:	e13ff817 	ldw	r4,-32(fp)
 4015888:	4015eb40 	call	4015eb4 <alt_get_fd>
 401588c:	e0bff915 	stw	r2,-28(fp)
 4015890:	e0bff917 	ldw	r2,-28(fp)
 4015894:	1000030e 	bge	r2,zero,40158a4 <open+0x84>
    {
      status = index;
 4015898:	e0bff917 	ldw	r2,-28(fp)
 401589c:	e0bffa15 	stw	r2,-24(fp)
 40158a0:	00002506 	br	4015938 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 40158a4:	01400304 	movi	r5,12
 40158a8:	e13ff917 	ldw	r4,-28(fp)
 40158ac:	40044f40 	call	40044f4 <__mulsi3>
 40158b0:	1007883a 	mov	r3,r2
 40158b4:	00810074 	movhi	r2,1025
 40158b8:	109cc104 	addi	r2,r2,29444
 40158bc:	1885883a 	add	r2,r3,r2
 40158c0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 40158c4:	e0fffe17 	ldw	r3,-8(fp)
 40158c8:	00900034 	movhi	r2,16384
 40158cc:	10bfffc4 	addi	r2,r2,-1
 40158d0:	1886703a 	and	r3,r3,r2
 40158d4:	e0bffc17 	ldw	r2,-16(fp)
 40158d8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40158dc:	e0bffb17 	ldw	r2,-20(fp)
 40158e0:	1000051e 	bne	r2,zero,40158f8 <open+0xd8>
 40158e4:	e13ffc17 	ldw	r4,-16(fp)
 40158e8:	40157340 	call	4015734 <alt_file_locked>
 40158ec:	e0bffa15 	stw	r2,-24(fp)
 40158f0:	e0bffa17 	ldw	r2,-24(fp)
 40158f4:	10001016 	blt	r2,zero,4015938 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40158f8:	e0bff817 	ldw	r2,-32(fp)
 40158fc:	10800317 	ldw	r2,12(r2)
 4015900:	10000826 	beq	r2,zero,4015924 <open+0x104>
 4015904:	e0bff817 	ldw	r2,-32(fp)
 4015908:	10800317 	ldw	r2,12(r2)
 401590c:	e1ffff17 	ldw	r7,-4(fp)
 4015910:	e1bffe17 	ldw	r6,-8(fp)
 4015914:	e17ffd17 	ldw	r5,-12(fp)
 4015918:	e13ffc17 	ldw	r4,-16(fp)
 401591c:	103ee83a 	callr	r2
 4015920:	00000106 	br	4015928 <open+0x108>
 4015924:	0005883a 	mov	r2,zero
 4015928:	e0bffa15 	stw	r2,-24(fp)
 401592c:	00000206 	br	4015938 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4015930:	00bffb44 	movi	r2,-19
 4015934:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4015938:	e0bffa17 	ldw	r2,-24(fp)
 401593c:	1000090e 	bge	r2,zero,4015964 <open+0x144>
  {
    alt_release_fd (index);  
 4015940:	e13ff917 	ldw	r4,-28(fp)
 4015944:	4011b440 	call	4011b44 <alt_release_fd>
    ALT_ERRNO = -status;
 4015948:	40156f80 	call	40156f8 <alt_get_errno>
 401594c:	1007883a 	mov	r3,r2
 4015950:	e0bffa17 	ldw	r2,-24(fp)
 4015954:	0085c83a 	sub	r2,zero,r2
 4015958:	18800015 	stw	r2,0(r3)
    return -1;
 401595c:	00bfffc4 	movi	r2,-1
 4015960:	00000106 	br	4015968 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 4015964:	e0bff917 	ldw	r2,-28(fp)
}
 4015968:	e037883a 	mov	sp,fp
 401596c:	dfc00117 	ldw	ra,4(sp)
 4015970:	df000017 	ldw	fp,0(sp)
 4015974:	dec00204 	addi	sp,sp,8
 4015978:	f800283a 	ret

0401597c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 401597c:	defff204 	addi	sp,sp,-56
 4015980:	dfc00a15 	stw	ra,40(sp)
 4015984:	df000915 	stw	fp,36(sp)
 4015988:	df000904 	addi	fp,sp,36
 401598c:	e13fff15 	stw	r4,-4(fp)
 4015990:	e1400215 	stw	r5,8(fp)
 4015994:	e1800315 	stw	r6,12(fp)
 4015998:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 401599c:	e0800204 	addi	r2,fp,8
 40159a0:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 40159a4:	e0bfff17 	ldw	r2,-4(fp)
 40159a8:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 40159ac:	00006f06 	br	4015b6c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 40159b0:	e0bff807 	ldb	r2,-32(fp)
 40159b4:	10800960 	cmpeqi	r2,r2,37
 40159b8:	1000041e 	bne	r2,zero,40159cc <alt_printf+0x50>
        {
            alt_putchar(c);
 40159bc:	e0bff807 	ldb	r2,-32(fp)
 40159c0:	1009883a 	mov	r4,r2
 40159c4:	4015ba80 	call	4015ba8 <alt_putchar>
 40159c8:	00006806 	br	4015b6c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 40159cc:	e0bff717 	ldw	r2,-36(fp)
 40159d0:	10c00044 	addi	r3,r2,1
 40159d4:	e0fff715 	stw	r3,-36(fp)
 40159d8:	10800003 	ldbu	r2,0(r2)
 40159dc:	e0bff805 	stb	r2,-32(fp)
 40159e0:	e0bff807 	ldb	r2,-32(fp)
 40159e4:	10006926 	beq	r2,zero,4015b8c <alt_printf+0x210>
            {
                if (c == '%')
 40159e8:	e0bff807 	ldb	r2,-32(fp)
 40159ec:	10800958 	cmpnei	r2,r2,37
 40159f0:	1000041e 	bne	r2,zero,4015a04 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 40159f4:	e0bff807 	ldb	r2,-32(fp)
 40159f8:	1009883a 	mov	r4,r2
 40159fc:	4015ba80 	call	4015ba8 <alt_putchar>
 4015a00:	00005a06 	br	4015b6c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 4015a04:	e0bff807 	ldb	r2,-32(fp)
 4015a08:	108018d8 	cmpnei	r2,r2,99
 4015a0c:	1000081e 	bne	r2,zero,4015a30 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 4015a10:	e0bffe17 	ldw	r2,-8(fp)
 4015a14:	10c00104 	addi	r3,r2,4
 4015a18:	e0fffe15 	stw	r3,-8(fp)
 4015a1c:	10800017 	ldw	r2,0(r2)
 4015a20:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 4015a24:	e13ffd17 	ldw	r4,-12(fp)
 4015a28:	4015ba80 	call	4015ba8 <alt_putchar>
 4015a2c:	00004f06 	br	4015b6c <alt_printf+0x1f0>
                }
                else if (c == 'x')
 4015a30:	e0bff807 	ldb	r2,-32(fp)
 4015a34:	10801e18 	cmpnei	r2,r2,120
 4015a38:	1000341e 	bne	r2,zero,4015b0c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 4015a3c:	e0bffe17 	ldw	r2,-8(fp)
 4015a40:	10c00104 	addi	r3,r2,4
 4015a44:	e0fffe15 	stw	r3,-8(fp)
 4015a48:	10800017 	ldw	r2,0(r2)
 4015a4c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 4015a50:	e0bffb17 	ldw	r2,-20(fp)
 4015a54:	1000031e 	bne	r2,zero,4015a64 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 4015a58:	01000c04 	movi	r4,48
 4015a5c:	4015ba80 	call	4015ba8 <alt_putchar>
                        continue;
 4015a60:	00004206 	br	4015b6c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 4015a64:	00800704 	movi	r2,28
 4015a68:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 4015a6c:	00000306 	br	4015a7c <alt_printf+0x100>
                        digit_shift -= 4;
 4015a70:	e0bff917 	ldw	r2,-28(fp)
 4015a74:	10bfff04 	addi	r2,r2,-4
 4015a78:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 4015a7c:	00c003c4 	movi	r3,15
 4015a80:	e0bff917 	ldw	r2,-28(fp)
 4015a84:	1884983a 	sll	r2,r3,r2
 4015a88:	1007883a 	mov	r3,r2
 4015a8c:	e0bffb17 	ldw	r2,-20(fp)
 4015a90:	1884703a 	and	r2,r3,r2
 4015a94:	103ff626 	beq	r2,zero,4015a70 <__alt_data_end+0xfc015a70>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 4015a98:	00001906 	br	4015b00 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 4015a9c:	00c003c4 	movi	r3,15
 4015aa0:	e0bff917 	ldw	r2,-28(fp)
 4015aa4:	1884983a 	sll	r2,r3,r2
 4015aa8:	1007883a 	mov	r3,r2
 4015aac:	e0bffb17 	ldw	r2,-20(fp)
 4015ab0:	1886703a 	and	r3,r3,r2
 4015ab4:	e0bff917 	ldw	r2,-28(fp)
 4015ab8:	1884d83a 	srl	r2,r3,r2
 4015abc:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 4015ac0:	e0bffc17 	ldw	r2,-16(fp)
 4015ac4:	108002a8 	cmpgeui	r2,r2,10
 4015ac8:	1000041e 	bne	r2,zero,4015adc <alt_printf+0x160>
                            c = '0' + digit;
 4015acc:	e0bffc17 	ldw	r2,-16(fp)
 4015ad0:	10800c04 	addi	r2,r2,48
 4015ad4:	e0bff805 	stb	r2,-32(fp)
 4015ad8:	00000306 	br	4015ae8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 4015adc:	e0bffc17 	ldw	r2,-16(fp)
 4015ae0:	108015c4 	addi	r2,r2,87
 4015ae4:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 4015ae8:	e0bff807 	ldb	r2,-32(fp)
 4015aec:	1009883a 	mov	r4,r2
 4015af0:	4015ba80 	call	4015ba8 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 4015af4:	e0bff917 	ldw	r2,-28(fp)
 4015af8:	10bfff04 	addi	r2,r2,-4
 4015afc:	e0bff915 	stw	r2,-28(fp)
 4015b00:	e0bff917 	ldw	r2,-28(fp)
 4015b04:	103fe50e 	bge	r2,zero,4015a9c <__alt_data_end+0xfc015a9c>
 4015b08:	00001806 	br	4015b6c <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 4015b0c:	e0bff807 	ldb	r2,-32(fp)
 4015b10:	10801cd8 	cmpnei	r2,r2,115
 4015b14:	1000151e 	bne	r2,zero,4015b6c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 4015b18:	e0bffe17 	ldw	r2,-8(fp)
 4015b1c:	10c00104 	addi	r3,r2,4
 4015b20:	e0fffe15 	stw	r3,-8(fp)
 4015b24:	10800017 	ldw	r2,0(r2)
 4015b28:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 4015b2c:	00000906 	br	4015b54 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 4015b30:	e0bffa17 	ldw	r2,-24(fp)
 4015b34:	10c00044 	addi	r3,r2,1
 4015b38:	e0fffa15 	stw	r3,-24(fp)
 4015b3c:	10800003 	ldbu	r2,0(r2)
 4015b40:	10803fcc 	andi	r2,r2,255
 4015b44:	1080201c 	xori	r2,r2,128
 4015b48:	10bfe004 	addi	r2,r2,-128
 4015b4c:	1009883a 	mov	r4,r2
 4015b50:	4015ba80 	call	4015ba8 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 4015b54:	e0bffa17 	ldw	r2,-24(fp)
 4015b58:	10800003 	ldbu	r2,0(r2)
 4015b5c:	10803fcc 	andi	r2,r2,255
 4015b60:	1080201c 	xori	r2,r2,128
 4015b64:	10bfe004 	addi	r2,r2,-128
 4015b68:	103ff11e 	bne	r2,zero,4015b30 <__alt_data_end+0xfc015b30>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 4015b6c:	e0bff717 	ldw	r2,-36(fp)
 4015b70:	10c00044 	addi	r3,r2,1
 4015b74:	e0fff715 	stw	r3,-36(fp)
 4015b78:	10800003 	ldbu	r2,0(r2)
 4015b7c:	e0bff805 	stb	r2,-32(fp)
 4015b80:	e0bff807 	ldb	r2,-32(fp)
 4015b84:	103f8a1e 	bne	r2,zero,40159b0 <__alt_data_end+0xfc0159b0>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 4015b88:	00000106 	br	4015b90 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 4015b8c:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 4015b90:	0001883a 	nop
 4015b94:	e037883a 	mov	sp,fp
 4015b98:	dfc00117 	ldw	ra,4(sp)
 4015b9c:	df000017 	ldw	fp,0(sp)
 4015ba0:	dec00504 	addi	sp,sp,20
 4015ba4:	f800283a 	ret

04015ba8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 4015ba8:	defffd04 	addi	sp,sp,-12
 4015bac:	dfc00215 	stw	ra,8(sp)
 4015bb0:	df000115 	stw	fp,4(sp)
 4015bb4:	df000104 	addi	fp,sp,4
 4015bb8:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 4015bbc:	d0a00117 	ldw	r2,-32764(gp)
 4015bc0:	10800217 	ldw	r2,8(r2)
 4015bc4:	100b883a 	mov	r5,r2
 4015bc8:	e13fff17 	ldw	r4,-4(fp)
 4015bcc:	400b79c0 	call	400b79c <putc>
#endif
#endif
}
 4015bd0:	e037883a 	mov	sp,fp
 4015bd4:	dfc00117 	ldw	ra,4(sp)
 4015bd8:	df000017 	ldw	fp,0(sp)
 4015bdc:	dec00204 	addi	sp,sp,8
 4015be0:	f800283a 	ret

04015be4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4015be4:	defffa04 	addi	sp,sp,-24
 4015be8:	df000515 	stw	fp,20(sp)
 4015bec:	df000504 	addi	fp,sp,20
 4015bf0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015bf4:	0005303a 	rdctl	r2,status
 4015bf8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015bfc:	e0fffc17 	ldw	r3,-16(fp)
 4015c00:	00bfff84 	movi	r2,-2
 4015c04:	1884703a 	and	r2,r3,r2
 4015c08:	1001703a 	wrctl	status,r2
  
  return context;
 4015c0c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4015c10:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4015c14:	e0bfff17 	ldw	r2,-4(fp)
 4015c18:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4015c1c:	e0bffd17 	ldw	r2,-12(fp)
 4015c20:	10800017 	ldw	r2,0(r2)
 4015c24:	e0fffd17 	ldw	r3,-12(fp)
 4015c28:	18c00117 	ldw	r3,4(r3)
 4015c2c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4015c30:	e0bffd17 	ldw	r2,-12(fp)
 4015c34:	10800117 	ldw	r2,4(r2)
 4015c38:	e0fffd17 	ldw	r3,-12(fp)
 4015c3c:	18c00017 	ldw	r3,0(r3)
 4015c40:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4015c44:	e0bffd17 	ldw	r2,-12(fp)
 4015c48:	e0fffd17 	ldw	r3,-12(fp)
 4015c4c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4015c50:	e0bffd17 	ldw	r2,-12(fp)
 4015c54:	e0fffd17 	ldw	r3,-12(fp)
 4015c58:	10c00015 	stw	r3,0(r2)
 4015c5c:	e0bffb17 	ldw	r2,-20(fp)
 4015c60:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015c64:	e0bffe17 	ldw	r2,-8(fp)
 4015c68:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4015c6c:	0001883a 	nop
 4015c70:	e037883a 	mov	sp,fp
 4015c74:	df000017 	ldw	fp,0(sp)
 4015c78:	dec00104 	addi	sp,sp,4
 4015c7c:	f800283a 	ret

04015c80 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4015c80:	defffb04 	addi	sp,sp,-20
 4015c84:	dfc00415 	stw	ra,16(sp)
 4015c88:	df000315 	stw	fp,12(sp)
 4015c8c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4015c90:	d0a02217 	ldw	r2,-32632(gp)
 4015c94:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4015c98:	d0a72617 	ldw	r2,-25448(gp)
 4015c9c:	10800044 	addi	r2,r2,1
 4015ca0:	d0a72615 	stw	r2,-25448(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4015ca4:	00002e06 	br	4015d60 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4015ca8:	e0bffd17 	ldw	r2,-12(fp)
 4015cac:	10800017 	ldw	r2,0(r2)
 4015cb0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4015cb4:	e0bffd17 	ldw	r2,-12(fp)
 4015cb8:	10800403 	ldbu	r2,16(r2)
 4015cbc:	10803fcc 	andi	r2,r2,255
 4015cc0:	10000426 	beq	r2,zero,4015cd4 <alt_tick+0x54>
 4015cc4:	d0a72617 	ldw	r2,-25448(gp)
 4015cc8:	1000021e 	bne	r2,zero,4015cd4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4015ccc:	e0bffd17 	ldw	r2,-12(fp)
 4015cd0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4015cd4:	e0bffd17 	ldw	r2,-12(fp)
 4015cd8:	10800217 	ldw	r2,8(r2)
 4015cdc:	d0e72617 	ldw	r3,-25448(gp)
 4015ce0:	18801d36 	bltu	r3,r2,4015d58 <alt_tick+0xd8>
 4015ce4:	e0bffd17 	ldw	r2,-12(fp)
 4015ce8:	10800403 	ldbu	r2,16(r2)
 4015cec:	10803fcc 	andi	r2,r2,255
 4015cf0:	1000191e 	bne	r2,zero,4015d58 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4015cf4:	e0bffd17 	ldw	r2,-12(fp)
 4015cf8:	10800317 	ldw	r2,12(r2)
 4015cfc:	e0fffd17 	ldw	r3,-12(fp)
 4015d00:	18c00517 	ldw	r3,20(r3)
 4015d04:	1809883a 	mov	r4,r3
 4015d08:	103ee83a 	callr	r2
 4015d0c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4015d10:	e0bfff17 	ldw	r2,-4(fp)
 4015d14:	1000031e 	bne	r2,zero,4015d24 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4015d18:	e13ffd17 	ldw	r4,-12(fp)
 4015d1c:	4015be40 	call	4015be4 <alt_alarm_stop>
 4015d20:	00000d06 	br	4015d58 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4015d24:	e0bffd17 	ldw	r2,-12(fp)
 4015d28:	10c00217 	ldw	r3,8(r2)
 4015d2c:	e0bfff17 	ldw	r2,-4(fp)
 4015d30:	1887883a 	add	r3,r3,r2
 4015d34:	e0bffd17 	ldw	r2,-12(fp)
 4015d38:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4015d3c:	e0bffd17 	ldw	r2,-12(fp)
 4015d40:	10c00217 	ldw	r3,8(r2)
 4015d44:	d0a72617 	ldw	r2,-25448(gp)
 4015d48:	1880032e 	bgeu	r3,r2,4015d58 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4015d4c:	e0bffd17 	ldw	r2,-12(fp)
 4015d50:	00c00044 	movi	r3,1
 4015d54:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4015d58:	e0bffe17 	ldw	r2,-8(fp)
 4015d5c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4015d60:	e0fffd17 	ldw	r3,-12(fp)
 4015d64:	d0a02204 	addi	r2,gp,-32632
 4015d68:	18bfcf1e 	bne	r3,r2,4015ca8 <__alt_data_end+0xfc015ca8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4015d6c:	0001883a 	nop
}
 4015d70:	0001883a 	nop
 4015d74:	e037883a 	mov	sp,fp
 4015d78:	dfc00117 	ldw	ra,4(sp)
 4015d7c:	df000017 	ldw	fp,0(sp)
 4015d80:	dec00204 	addi	sp,sp,8
 4015d84:	f800283a 	ret

04015d88 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4015d88:	deffff04 	addi	sp,sp,-4
 4015d8c:	df000015 	stw	fp,0(sp)
 4015d90:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4015d94:	000170fa 	wrctl	ienable,zero
}
 4015d98:	0001883a 	nop
 4015d9c:	e037883a 	mov	sp,fp
 4015da0:	df000017 	ldw	fp,0(sp)
 4015da4:	dec00104 	addi	sp,sp,4
 4015da8:	f800283a 	ret

04015dac <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4015dac:	defffb04 	addi	sp,sp,-20
 4015db0:	dfc00415 	stw	ra,16(sp)
 4015db4:	df000315 	stw	fp,12(sp)
 4015db8:	df000304 	addi	fp,sp,12
 4015dbc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4015dc0:	d0a00617 	ldw	r2,-32744(gp)
 4015dc4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4015dc8:	00003106 	br	4015e90 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4015dcc:	e0bffd17 	ldw	r2,-12(fp)
 4015dd0:	10800217 	ldw	r2,8(r2)
 4015dd4:	1009883a 	mov	r4,r2
 4015dd8:	40052400 	call	4005240 <strlen>
 4015ddc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4015de0:	e0bffd17 	ldw	r2,-12(fp)
 4015de4:	10c00217 	ldw	r3,8(r2)
 4015de8:	e0bffe17 	ldw	r2,-8(fp)
 4015dec:	10bfffc4 	addi	r2,r2,-1
 4015df0:	1885883a 	add	r2,r3,r2
 4015df4:	10800003 	ldbu	r2,0(r2)
 4015df8:	10803fcc 	andi	r2,r2,255
 4015dfc:	1080201c 	xori	r2,r2,128
 4015e00:	10bfe004 	addi	r2,r2,-128
 4015e04:	10800bd8 	cmpnei	r2,r2,47
 4015e08:	1000031e 	bne	r2,zero,4015e18 <alt_find_file+0x6c>
    {
      len -= 1;
 4015e0c:	e0bffe17 	ldw	r2,-8(fp)
 4015e10:	10bfffc4 	addi	r2,r2,-1
 4015e14:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4015e18:	e0bffe17 	ldw	r2,-8(fp)
 4015e1c:	e0ffff17 	ldw	r3,-4(fp)
 4015e20:	1885883a 	add	r2,r3,r2
 4015e24:	10800003 	ldbu	r2,0(r2)
 4015e28:	10803fcc 	andi	r2,r2,255
 4015e2c:	1080201c 	xori	r2,r2,128
 4015e30:	10bfe004 	addi	r2,r2,-128
 4015e34:	10800be0 	cmpeqi	r2,r2,47
 4015e38:	1000081e 	bne	r2,zero,4015e5c <alt_find_file+0xb0>
 4015e3c:	e0bffe17 	ldw	r2,-8(fp)
 4015e40:	e0ffff17 	ldw	r3,-4(fp)
 4015e44:	1885883a 	add	r2,r3,r2
 4015e48:	10800003 	ldbu	r2,0(r2)
 4015e4c:	10803fcc 	andi	r2,r2,255
 4015e50:	1080201c 	xori	r2,r2,128
 4015e54:	10bfe004 	addi	r2,r2,-128
 4015e58:	10000a1e 	bne	r2,zero,4015e84 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4015e5c:	e0bffd17 	ldw	r2,-12(fp)
 4015e60:	10800217 	ldw	r2,8(r2)
 4015e64:	e0fffe17 	ldw	r3,-8(fp)
 4015e68:	180d883a 	mov	r6,r3
 4015e6c:	e17fff17 	ldw	r5,-4(fp)
 4015e70:	1009883a 	mov	r4,r2
 4015e74:	40160600 	call	4016060 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4015e78:	1000021e 	bne	r2,zero,4015e84 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4015e7c:	e0bffd17 	ldw	r2,-12(fp)
 4015e80:	00000706 	br	4015ea0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4015e84:	e0bffd17 	ldw	r2,-12(fp)
 4015e88:	10800017 	ldw	r2,0(r2)
 4015e8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4015e90:	e0fffd17 	ldw	r3,-12(fp)
 4015e94:	d0a00604 	addi	r2,gp,-32744
 4015e98:	18bfcc1e 	bne	r3,r2,4015dcc <__alt_data_end+0xfc015dcc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4015e9c:	0005883a 	mov	r2,zero
}
 4015ea0:	e037883a 	mov	sp,fp
 4015ea4:	dfc00117 	ldw	ra,4(sp)
 4015ea8:	df000017 	ldw	fp,0(sp)
 4015eac:	dec00204 	addi	sp,sp,8
 4015eb0:	f800283a 	ret

04015eb4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4015eb4:	defffa04 	addi	sp,sp,-24
 4015eb8:	dfc00515 	stw	ra,20(sp)
 4015ebc:	df000415 	stw	fp,16(sp)
 4015ec0:	dc000315 	stw	r16,12(sp)
 4015ec4:	df000404 	addi	fp,sp,16
 4015ec8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 4015ecc:	00bffa04 	movi	r2,-24
 4015ed0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4015ed4:	e03ffc15 	stw	zero,-16(fp)
 4015ed8:	00001d06 	br	4015f50 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 4015edc:	04010074 	movhi	r16,1025
 4015ee0:	841cc104 	addi	r16,r16,29444
 4015ee4:	e0bffc17 	ldw	r2,-16(fp)
 4015ee8:	01400304 	movi	r5,12
 4015eec:	1009883a 	mov	r4,r2
 4015ef0:	40044f40 	call	40044f4 <__mulsi3>
 4015ef4:	8085883a 	add	r2,r16,r2
 4015ef8:	10800017 	ldw	r2,0(r2)
 4015efc:	1000111e 	bne	r2,zero,4015f44 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 4015f00:	04010074 	movhi	r16,1025
 4015f04:	841cc104 	addi	r16,r16,29444
 4015f08:	e0bffc17 	ldw	r2,-16(fp)
 4015f0c:	01400304 	movi	r5,12
 4015f10:	1009883a 	mov	r4,r2
 4015f14:	40044f40 	call	40044f4 <__mulsi3>
 4015f18:	8085883a 	add	r2,r16,r2
 4015f1c:	e0fffe17 	ldw	r3,-8(fp)
 4015f20:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4015f24:	d0e00a17 	ldw	r3,-32728(gp)
 4015f28:	e0bffc17 	ldw	r2,-16(fp)
 4015f2c:	1880020e 	bge	r3,r2,4015f38 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 4015f30:	e0bffc17 	ldw	r2,-16(fp)
 4015f34:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 4015f38:	e0bffc17 	ldw	r2,-16(fp)
 4015f3c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4015f40:	00000606 	br	4015f5c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4015f44:	e0bffc17 	ldw	r2,-16(fp)
 4015f48:	10800044 	addi	r2,r2,1
 4015f4c:	e0bffc15 	stw	r2,-16(fp)
 4015f50:	e0bffc17 	ldw	r2,-16(fp)
 4015f54:	10800810 	cmplti	r2,r2,32
 4015f58:	103fe01e 	bne	r2,zero,4015edc <__alt_data_end+0xfc015edc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4015f5c:	e0bffd17 	ldw	r2,-12(fp)
}
 4015f60:	e6ffff04 	addi	sp,fp,-4
 4015f64:	dfc00217 	ldw	ra,8(sp)
 4015f68:	df000117 	ldw	fp,4(sp)
 4015f6c:	dc000017 	ldw	r16,0(sp)
 4015f70:	dec00304 	addi	sp,sp,12
 4015f74:	f800283a 	ret

04015f78 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4015f78:	defffe04 	addi	sp,sp,-8
 4015f7c:	df000115 	stw	fp,4(sp)
 4015f80:	df000104 	addi	fp,sp,4
 4015f84:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4015f88:	e0bfff17 	ldw	r2,-4(fp)
 4015f8c:	10bffe84 	addi	r2,r2,-6
 4015f90:	10c00428 	cmpgeui	r3,r2,16
 4015f94:	18001a1e 	bne	r3,zero,4016000 <alt_exception_cause_generated_bad_addr+0x88>
 4015f98:	100690ba 	slli	r3,r2,2
 4015f9c:	00810074 	movhi	r2,1025
 4015fa0:	1097ec04 	addi	r2,r2,24496
 4015fa4:	1885883a 	add	r2,r3,r2
 4015fa8:	10800017 	ldw	r2,0(r2)
 4015fac:	1000683a 	jmp	r2
 4015fb0:	04015ff0 	cmpltui	r16,zero,1407
 4015fb4:	04015ff0 	cmpltui	r16,zero,1407
 4015fb8:	04016000 	call	401600 <__alt_mem_sdram_controller_0-0x3bfea00>
 4015fbc:	04016000 	call	401600 <__alt_mem_sdram_controller_0-0x3bfea00>
 4015fc0:	04016000 	call	401600 <__alt_mem_sdram_controller_0-0x3bfea00>
 4015fc4:	04015ff0 	cmpltui	r16,zero,1407
 4015fc8:	04015ff8 	rdprs	r16,zero,1407
 4015fcc:	04016000 	call	401600 <__alt_mem_sdram_controller_0-0x3bfea00>
 4015fd0:	04015ff0 	cmpltui	r16,zero,1407
 4015fd4:	04015ff0 	cmpltui	r16,zero,1407
 4015fd8:	04016000 	call	401600 <__alt_mem_sdram_controller_0-0x3bfea00>
 4015fdc:	04015ff0 	cmpltui	r16,zero,1407
 4015fe0:	04015ff8 	rdprs	r16,zero,1407
 4015fe4:	04016000 	call	401600 <__alt_mem_sdram_controller_0-0x3bfea00>
 4015fe8:	04016000 	call	401600 <__alt_mem_sdram_controller_0-0x3bfea00>
 4015fec:	04015ff0 	cmpltui	r16,zero,1407
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4015ff0:	00800044 	movi	r2,1
 4015ff4:	00000306 	br	4016004 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4015ff8:	0005883a 	mov	r2,zero
 4015ffc:	00000106 	br	4016004 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4016000:	0005883a 	mov	r2,zero
  }
}
 4016004:	e037883a 	mov	sp,fp
 4016008:	df000017 	ldw	fp,0(sp)
 401600c:	dec00104 	addi	sp,sp,4
 4016010:	f800283a 	ret

04016014 <atexit>:
 4016014:	200b883a 	mov	r5,r4
 4016018:	000f883a 	mov	r7,zero
 401601c:	000d883a 	mov	r6,zero
 4016020:	0009883a 	mov	r4,zero
 4016024:	40160dc1 	jmpi	40160dc <__register_exitproc>

04016028 <exit>:
 4016028:	defffe04 	addi	sp,sp,-8
 401602c:	000b883a 	mov	r5,zero
 4016030:	dc000015 	stw	r16,0(sp)
 4016034:	dfc00115 	stw	ra,4(sp)
 4016038:	2021883a 	mov	r16,r4
 401603c:	40161f40 	call	40161f4 <__call_exitprocs>
 4016040:	008100b4 	movhi	r2,1026
 4016044:	10a16004 	addi	r2,r2,-31360
 4016048:	11000017 	ldw	r4,0(r2)
 401604c:	20800f17 	ldw	r2,60(r4)
 4016050:	10000126 	beq	r2,zero,4016058 <exit+0x30>
 4016054:	103ee83a 	callr	r2
 4016058:	8009883a 	mov	r4,r16
 401605c:	40163740 	call	4016374 <_exit>

04016060 <memcmp>:
 4016060:	01c000c4 	movi	r7,3
 4016064:	3980192e 	bgeu	r7,r6,40160cc <memcmp+0x6c>
 4016068:	2144b03a 	or	r2,r4,r5
 401606c:	11c4703a 	and	r2,r2,r7
 4016070:	10000f26 	beq	r2,zero,40160b0 <memcmp+0x50>
 4016074:	20800003 	ldbu	r2,0(r4)
 4016078:	28c00003 	ldbu	r3,0(r5)
 401607c:	10c0151e 	bne	r2,r3,40160d4 <memcmp+0x74>
 4016080:	31bfff84 	addi	r6,r6,-2
 4016084:	01ffffc4 	movi	r7,-1
 4016088:	00000406 	br	401609c <memcmp+0x3c>
 401608c:	20800003 	ldbu	r2,0(r4)
 4016090:	28c00003 	ldbu	r3,0(r5)
 4016094:	31bfffc4 	addi	r6,r6,-1
 4016098:	10c00e1e 	bne	r2,r3,40160d4 <memcmp+0x74>
 401609c:	21000044 	addi	r4,r4,1
 40160a0:	29400044 	addi	r5,r5,1
 40160a4:	31fff91e 	bne	r6,r7,401608c <__alt_data_end+0xfc01608c>
 40160a8:	0005883a 	mov	r2,zero
 40160ac:	f800283a 	ret
 40160b0:	20c00017 	ldw	r3,0(r4)
 40160b4:	28800017 	ldw	r2,0(r5)
 40160b8:	18bfee1e 	bne	r3,r2,4016074 <__alt_data_end+0xfc016074>
 40160bc:	31bfff04 	addi	r6,r6,-4
 40160c0:	21000104 	addi	r4,r4,4
 40160c4:	29400104 	addi	r5,r5,4
 40160c8:	39bff936 	bltu	r7,r6,40160b0 <__alt_data_end+0xfc0160b0>
 40160cc:	303fe91e 	bne	r6,zero,4016074 <__alt_data_end+0xfc016074>
 40160d0:	003ff506 	br	40160a8 <__alt_data_end+0xfc0160a8>
 40160d4:	10c5c83a 	sub	r2,r2,r3
 40160d8:	f800283a 	ret

040160dc <__register_exitproc>:
 40160dc:	defffa04 	addi	sp,sp,-24
 40160e0:	dc000315 	stw	r16,12(sp)
 40160e4:	040100b4 	movhi	r16,1026
 40160e8:	84216004 	addi	r16,r16,-31360
 40160ec:	80c00017 	ldw	r3,0(r16)
 40160f0:	dc400415 	stw	r17,16(sp)
 40160f4:	dfc00515 	stw	ra,20(sp)
 40160f8:	18805217 	ldw	r2,328(r3)
 40160fc:	2023883a 	mov	r17,r4
 4016100:	10003726 	beq	r2,zero,40161e0 <__register_exitproc+0x104>
 4016104:	10c00117 	ldw	r3,4(r2)
 4016108:	010007c4 	movi	r4,31
 401610c:	20c00e16 	blt	r4,r3,4016148 <__register_exitproc+0x6c>
 4016110:	1a000044 	addi	r8,r3,1
 4016114:	8800221e 	bne	r17,zero,40161a0 <__register_exitproc+0xc4>
 4016118:	18c00084 	addi	r3,r3,2
 401611c:	18c7883a 	add	r3,r3,r3
 4016120:	18c7883a 	add	r3,r3,r3
 4016124:	12000115 	stw	r8,4(r2)
 4016128:	10c7883a 	add	r3,r2,r3
 401612c:	19400015 	stw	r5,0(r3)
 4016130:	0005883a 	mov	r2,zero
 4016134:	dfc00517 	ldw	ra,20(sp)
 4016138:	dc400417 	ldw	r17,16(sp)
 401613c:	dc000317 	ldw	r16,12(sp)
 4016140:	dec00604 	addi	sp,sp,24
 4016144:	f800283a 	ret
 4016148:	00800034 	movhi	r2,0
 401614c:	10800004 	addi	r2,r2,0
 4016150:	10002626 	beq	r2,zero,40161ec <__register_exitproc+0x110>
 4016154:	01006404 	movi	r4,400
 4016158:	d9400015 	stw	r5,0(sp)
 401615c:	d9800115 	stw	r6,4(sp)
 4016160:	d9c00215 	stw	r7,8(sp)
 4016164:	00000000 	call	0 <__alt_mem_sdram_controller_0-0x4000000>
 4016168:	d9400017 	ldw	r5,0(sp)
 401616c:	d9800117 	ldw	r6,4(sp)
 4016170:	d9c00217 	ldw	r7,8(sp)
 4016174:	10001d26 	beq	r2,zero,40161ec <__register_exitproc+0x110>
 4016178:	81000017 	ldw	r4,0(r16)
 401617c:	10000115 	stw	zero,4(r2)
 4016180:	02000044 	movi	r8,1
 4016184:	22405217 	ldw	r9,328(r4)
 4016188:	0007883a 	mov	r3,zero
 401618c:	12400015 	stw	r9,0(r2)
 4016190:	20805215 	stw	r2,328(r4)
 4016194:	10006215 	stw	zero,392(r2)
 4016198:	10006315 	stw	zero,396(r2)
 401619c:	883fde26 	beq	r17,zero,4016118 <__alt_data_end+0xfc016118>
 40161a0:	18c9883a 	add	r4,r3,r3
 40161a4:	2109883a 	add	r4,r4,r4
 40161a8:	1109883a 	add	r4,r2,r4
 40161ac:	21802215 	stw	r6,136(r4)
 40161b0:	01800044 	movi	r6,1
 40161b4:	12406217 	ldw	r9,392(r2)
 40161b8:	30cc983a 	sll	r6,r6,r3
 40161bc:	4992b03a 	or	r9,r9,r6
 40161c0:	12406215 	stw	r9,392(r2)
 40161c4:	21c04215 	stw	r7,264(r4)
 40161c8:	01000084 	movi	r4,2
 40161cc:	893fd21e 	bne	r17,r4,4016118 <__alt_data_end+0xfc016118>
 40161d0:	11006317 	ldw	r4,396(r2)
 40161d4:	218cb03a 	or	r6,r4,r6
 40161d8:	11806315 	stw	r6,396(r2)
 40161dc:	003fce06 	br	4016118 <__alt_data_end+0xfc016118>
 40161e0:	18805304 	addi	r2,r3,332
 40161e4:	18805215 	stw	r2,328(r3)
 40161e8:	003fc606 	br	4016104 <__alt_data_end+0xfc016104>
 40161ec:	00bfffc4 	movi	r2,-1
 40161f0:	003fd006 	br	4016134 <__alt_data_end+0xfc016134>

040161f4 <__call_exitprocs>:
 40161f4:	defff504 	addi	sp,sp,-44
 40161f8:	df000915 	stw	fp,36(sp)
 40161fc:	dd400615 	stw	r21,24(sp)
 4016200:	dc800315 	stw	r18,12(sp)
 4016204:	dfc00a15 	stw	ra,40(sp)
 4016208:	ddc00815 	stw	r23,32(sp)
 401620c:	dd800715 	stw	r22,28(sp)
 4016210:	dd000515 	stw	r20,20(sp)
 4016214:	dcc00415 	stw	r19,16(sp)
 4016218:	dc400215 	stw	r17,8(sp)
 401621c:	dc000115 	stw	r16,4(sp)
 4016220:	d9000015 	stw	r4,0(sp)
 4016224:	2839883a 	mov	fp,r5
 4016228:	04800044 	movi	r18,1
 401622c:	057fffc4 	movi	r21,-1
 4016230:	008100b4 	movhi	r2,1026
 4016234:	10a16004 	addi	r2,r2,-31360
 4016238:	12000017 	ldw	r8,0(r2)
 401623c:	45005217 	ldw	r20,328(r8)
 4016240:	44c05204 	addi	r19,r8,328
 4016244:	a0001c26 	beq	r20,zero,40162b8 <__call_exitprocs+0xc4>
 4016248:	a0800117 	ldw	r2,4(r20)
 401624c:	15ffffc4 	addi	r23,r2,-1
 4016250:	b8000d16 	blt	r23,zero,4016288 <__call_exitprocs+0x94>
 4016254:	14000044 	addi	r16,r2,1
 4016258:	8421883a 	add	r16,r16,r16
 401625c:	8421883a 	add	r16,r16,r16
 4016260:	84402004 	addi	r17,r16,128
 4016264:	a463883a 	add	r17,r20,r17
 4016268:	a421883a 	add	r16,r20,r16
 401626c:	e0001e26 	beq	fp,zero,40162e8 <__call_exitprocs+0xf4>
 4016270:	80804017 	ldw	r2,256(r16)
 4016274:	e0801c26 	beq	fp,r2,40162e8 <__call_exitprocs+0xf4>
 4016278:	bdffffc4 	addi	r23,r23,-1
 401627c:	843fff04 	addi	r16,r16,-4
 4016280:	8c7fff04 	addi	r17,r17,-4
 4016284:	bd7ff91e 	bne	r23,r21,401626c <__alt_data_end+0xfc01626c>
 4016288:	00800034 	movhi	r2,0
 401628c:	10800004 	addi	r2,r2,0
 4016290:	10000926 	beq	r2,zero,40162b8 <__call_exitprocs+0xc4>
 4016294:	a0800117 	ldw	r2,4(r20)
 4016298:	1000301e 	bne	r2,zero,401635c <__call_exitprocs+0x168>
 401629c:	a0800017 	ldw	r2,0(r20)
 40162a0:	10003226 	beq	r2,zero,401636c <__call_exitprocs+0x178>
 40162a4:	a009883a 	mov	r4,r20
 40162a8:	98800015 	stw	r2,0(r19)
 40162ac:	00000000 	call	0 <__alt_mem_sdram_controller_0-0x4000000>
 40162b0:	9d000017 	ldw	r20,0(r19)
 40162b4:	a03fe41e 	bne	r20,zero,4016248 <__alt_data_end+0xfc016248>
 40162b8:	dfc00a17 	ldw	ra,40(sp)
 40162bc:	df000917 	ldw	fp,36(sp)
 40162c0:	ddc00817 	ldw	r23,32(sp)
 40162c4:	dd800717 	ldw	r22,28(sp)
 40162c8:	dd400617 	ldw	r21,24(sp)
 40162cc:	dd000517 	ldw	r20,20(sp)
 40162d0:	dcc00417 	ldw	r19,16(sp)
 40162d4:	dc800317 	ldw	r18,12(sp)
 40162d8:	dc400217 	ldw	r17,8(sp)
 40162dc:	dc000117 	ldw	r16,4(sp)
 40162e0:	dec00b04 	addi	sp,sp,44
 40162e4:	f800283a 	ret
 40162e8:	a0800117 	ldw	r2,4(r20)
 40162ec:	80c00017 	ldw	r3,0(r16)
 40162f0:	10bfffc4 	addi	r2,r2,-1
 40162f4:	15c01426 	beq	r2,r23,4016348 <__call_exitprocs+0x154>
 40162f8:	80000015 	stw	zero,0(r16)
 40162fc:	183fde26 	beq	r3,zero,4016278 <__alt_data_end+0xfc016278>
 4016300:	95c8983a 	sll	r4,r18,r23
 4016304:	a0806217 	ldw	r2,392(r20)
 4016308:	a5800117 	ldw	r22,4(r20)
 401630c:	2084703a 	and	r2,r4,r2
 4016310:	10000b26 	beq	r2,zero,4016340 <__call_exitprocs+0x14c>
 4016314:	a0806317 	ldw	r2,396(r20)
 4016318:	2088703a 	and	r4,r4,r2
 401631c:	20000c1e 	bne	r4,zero,4016350 <__call_exitprocs+0x15c>
 4016320:	89400017 	ldw	r5,0(r17)
 4016324:	d9000017 	ldw	r4,0(sp)
 4016328:	183ee83a 	callr	r3
 401632c:	a0800117 	ldw	r2,4(r20)
 4016330:	15bfbf1e 	bne	r2,r22,4016230 <__alt_data_end+0xfc016230>
 4016334:	98800017 	ldw	r2,0(r19)
 4016338:	153fcf26 	beq	r2,r20,4016278 <__alt_data_end+0xfc016278>
 401633c:	003fbc06 	br	4016230 <__alt_data_end+0xfc016230>
 4016340:	183ee83a 	callr	r3
 4016344:	003ff906 	br	401632c <__alt_data_end+0xfc01632c>
 4016348:	a5c00115 	stw	r23,4(r20)
 401634c:	003feb06 	br	40162fc <__alt_data_end+0xfc0162fc>
 4016350:	89000017 	ldw	r4,0(r17)
 4016354:	183ee83a 	callr	r3
 4016358:	003ff406 	br	401632c <__alt_data_end+0xfc01632c>
 401635c:	a0800017 	ldw	r2,0(r20)
 4016360:	a027883a 	mov	r19,r20
 4016364:	1029883a 	mov	r20,r2
 4016368:	003fb606 	br	4016244 <__alt_data_end+0xfc016244>
 401636c:	0005883a 	mov	r2,zero
 4016370:	003ffb06 	br	4016360 <__alt_data_end+0xfc016360>

04016374 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4016374:	defffd04 	addi	sp,sp,-12
 4016378:	df000215 	stw	fp,8(sp)
 401637c:	df000204 	addi	fp,sp,8
 4016380:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4016384:	0001883a 	nop
 4016388:	e0bfff17 	ldw	r2,-4(fp)
 401638c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4016390:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4016394:	10000226 	beq	r2,zero,40163a0 <_exit+0x2c>
    ALT_SIM_FAIL();
 4016398:	002af070 	cmpltui	zero,zero,43969
 401639c:	00000106 	br	40163a4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 40163a0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 40163a4:	003fff06 	br	40163a4 <__alt_data_end+0xfc0163a4>
