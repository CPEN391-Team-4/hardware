// trdb_d5m_cmos_sensor_acquisition_0_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module trdb_d5m_cmos_sensor_acquisition_0_mm_interconnect_0 (
		input  wire         clk_in_clk_clk,                                        //                                      clk_in_clk.clk
		input  wire         clk_out_clk_clk,                                       //                                     clk_out_clk.clk
		input  wire         cmos_sensor_input_0_reset_reset_bridge_in_reset_reset, // cmos_sensor_input_0_reset_reset_bridge_in_reset.reset
		input  wire         mm_bridge_0_reset_reset_bridge_in_reset_reset,         //         mm_bridge_0_reset_reset_bridge_in_reset.reset
		input  wire [5:0]   mm_bridge_0_m0_address,                                //                                  mm_bridge_0_m0.address
		output wire         mm_bridge_0_m0_waitrequest,                            //                                                .waitrequest
		input  wire [0:0]   mm_bridge_0_m0_burstcount,                             //                                                .burstcount
		input  wire [3:0]   mm_bridge_0_m0_byteenable,                             //                                                .byteenable
		input  wire         mm_bridge_0_m0_read,                                   //                                                .read
		output wire [31:0]  mm_bridge_0_m0_readdata,                               //                                                .readdata
		output wire         mm_bridge_0_m0_readdatavalid,                          //                                                .readdatavalid
		input  wire         mm_bridge_0_m0_write,                                  //                                                .write
		input  wire [31:0]  mm_bridge_0_m0_writedata,                              //                                                .writedata
		input  wire         mm_bridge_0_m0_debugaccess,                            //                                                .debugaccess
		output wire [1:0]   cmos_sensor_input_0_avalon_slave_address,              //                cmos_sensor_input_0_avalon_slave.address
		output wire         cmos_sensor_input_0_avalon_slave_write,                //                                                .write
		output wire         cmos_sensor_input_0_avalon_slave_read,                 //                                                .read
		input  wire [31:0]  cmos_sensor_input_0_avalon_slave_readdata,             //                                                .readdata
		output wire [31:0]  cmos_sensor_input_0_avalon_slave_writedata,            //                                                .writedata
		output wire [2:0]   msgdma_0_csr_address,                                  //                                    msgdma_0_csr.address
		output wire         msgdma_0_csr_write,                                    //                                                .write
		output wire         msgdma_0_csr_read,                                     //                                                .read
		input  wire [31:0]  msgdma_0_csr_readdata,                                 //                                                .readdata
		output wire [31:0]  msgdma_0_csr_writedata,                                //                                                .writedata
		output wire [3:0]   msgdma_0_csr_byteenable,                               //                                                .byteenable
		output wire         msgdma_0_descriptor_slave_write,                       //                       msgdma_0_descriptor_slave.write
		output wire [127:0] msgdma_0_descriptor_slave_writedata,                   //                                                .writedata
		output wire [15:0]  msgdma_0_descriptor_slave_byteenable,                  //                                                .byteenable
		input  wire         msgdma_0_descriptor_slave_waitrequest                  //                                                .waitrequest
	);

	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;   // mm_bridge_0_m0_agent:av_waitrequest -> mm_bridge_0_m0_translator:uav_waitrequest
	wire   [31:0] mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;      // mm_bridge_0_m0_agent:av_readdata -> mm_bridge_0_m0_translator:uav_readdata
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;   // mm_bridge_0_m0_translator:uav_debugaccess -> mm_bridge_0_m0_agent:av_debugaccess
	wire    [5:0] mm_bridge_0_m0_translator_avalon_universal_master_0_address;       // mm_bridge_0_m0_translator:uav_address -> mm_bridge_0_m0_agent:av_address
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_read;          // mm_bridge_0_m0_translator:uav_read -> mm_bridge_0_m0_agent:av_read
	wire    [3:0] mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;    // mm_bridge_0_m0_translator:uav_byteenable -> mm_bridge_0_m0_agent:av_byteenable
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid; // mm_bridge_0_m0_agent:av_readdatavalid -> mm_bridge_0_m0_translator:uav_readdatavalid
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_lock;          // mm_bridge_0_m0_translator:uav_lock -> mm_bridge_0_m0_agent:av_lock
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_write;         // mm_bridge_0_m0_translator:uav_write -> mm_bridge_0_m0_agent:av_write
	wire   [31:0] mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;     // mm_bridge_0_m0_translator:uav_writedata -> mm_bridge_0_m0_agent:av_writedata
	wire    [2:0] mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;    // mm_bridge_0_m0_translator:uav_burstcount -> mm_bridge_0_m0_agent:av_burstcount
	wire   [31:0] cmos_sensor_input_0_avalon_slave_agent_m0_readdata;                // cmos_sensor_input_0_avalon_slave_translator:uav_readdata -> cmos_sensor_input_0_avalon_slave_agent:m0_readdata
	wire          cmos_sensor_input_0_avalon_slave_agent_m0_waitrequest;             // cmos_sensor_input_0_avalon_slave_translator:uav_waitrequest -> cmos_sensor_input_0_avalon_slave_agent:m0_waitrequest
	wire          cmos_sensor_input_0_avalon_slave_agent_m0_debugaccess;             // cmos_sensor_input_0_avalon_slave_agent:m0_debugaccess -> cmos_sensor_input_0_avalon_slave_translator:uav_debugaccess
	wire    [5:0] cmos_sensor_input_0_avalon_slave_agent_m0_address;                 // cmos_sensor_input_0_avalon_slave_agent:m0_address -> cmos_sensor_input_0_avalon_slave_translator:uav_address
	wire    [3:0] cmos_sensor_input_0_avalon_slave_agent_m0_byteenable;              // cmos_sensor_input_0_avalon_slave_agent:m0_byteenable -> cmos_sensor_input_0_avalon_slave_translator:uav_byteenable
	wire          cmos_sensor_input_0_avalon_slave_agent_m0_read;                    // cmos_sensor_input_0_avalon_slave_agent:m0_read -> cmos_sensor_input_0_avalon_slave_translator:uav_read
	wire          cmos_sensor_input_0_avalon_slave_agent_m0_readdatavalid;           // cmos_sensor_input_0_avalon_slave_translator:uav_readdatavalid -> cmos_sensor_input_0_avalon_slave_agent:m0_readdatavalid
	wire          cmos_sensor_input_0_avalon_slave_agent_m0_lock;                    // cmos_sensor_input_0_avalon_slave_agent:m0_lock -> cmos_sensor_input_0_avalon_slave_translator:uav_lock
	wire   [31:0] cmos_sensor_input_0_avalon_slave_agent_m0_writedata;               // cmos_sensor_input_0_avalon_slave_agent:m0_writedata -> cmos_sensor_input_0_avalon_slave_translator:uav_writedata
	wire          cmos_sensor_input_0_avalon_slave_agent_m0_write;                   // cmos_sensor_input_0_avalon_slave_agent:m0_write -> cmos_sensor_input_0_avalon_slave_translator:uav_write
	wire    [2:0] cmos_sensor_input_0_avalon_slave_agent_m0_burstcount;              // cmos_sensor_input_0_avalon_slave_agent:m0_burstcount -> cmos_sensor_input_0_avalon_slave_translator:uav_burstcount
	wire          cmos_sensor_input_0_avalon_slave_agent_rf_source_valid;            // cmos_sensor_input_0_avalon_slave_agent:rf_source_valid -> cmos_sensor_input_0_avalon_slave_agent_rsp_fifo:in_valid
	wire   [80:0] cmos_sensor_input_0_avalon_slave_agent_rf_source_data;             // cmos_sensor_input_0_avalon_slave_agent:rf_source_data -> cmos_sensor_input_0_avalon_slave_agent_rsp_fifo:in_data
	wire          cmos_sensor_input_0_avalon_slave_agent_rf_source_ready;            // cmos_sensor_input_0_avalon_slave_agent_rsp_fifo:in_ready -> cmos_sensor_input_0_avalon_slave_agent:rf_source_ready
	wire          cmos_sensor_input_0_avalon_slave_agent_rf_source_startofpacket;    // cmos_sensor_input_0_avalon_slave_agent:rf_source_startofpacket -> cmos_sensor_input_0_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          cmos_sensor_input_0_avalon_slave_agent_rf_source_endofpacket;      // cmos_sensor_input_0_avalon_slave_agent:rf_source_endofpacket -> cmos_sensor_input_0_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          cmos_sensor_input_0_avalon_slave_agent_rsp_fifo_out_valid;         // cmos_sensor_input_0_avalon_slave_agent_rsp_fifo:out_valid -> cmos_sensor_input_0_avalon_slave_agent:rf_sink_valid
	wire   [80:0] cmos_sensor_input_0_avalon_slave_agent_rsp_fifo_out_data;          // cmos_sensor_input_0_avalon_slave_agent_rsp_fifo:out_data -> cmos_sensor_input_0_avalon_slave_agent:rf_sink_data
	wire          cmos_sensor_input_0_avalon_slave_agent_rsp_fifo_out_ready;         // cmos_sensor_input_0_avalon_slave_agent:rf_sink_ready -> cmos_sensor_input_0_avalon_slave_agent_rsp_fifo:out_ready
	wire          cmos_sensor_input_0_avalon_slave_agent_rsp_fifo_out_startofpacket; // cmos_sensor_input_0_avalon_slave_agent_rsp_fifo:out_startofpacket -> cmos_sensor_input_0_avalon_slave_agent:rf_sink_startofpacket
	wire          cmos_sensor_input_0_avalon_slave_agent_rsp_fifo_out_endofpacket;   // cmos_sensor_input_0_avalon_slave_agent_rsp_fifo:out_endofpacket -> cmos_sensor_input_0_avalon_slave_agent:rf_sink_endofpacket
	wire          cmos_sensor_input_0_avalon_slave_agent_rdata_fifo_src_valid;       // cmos_sensor_input_0_avalon_slave_agent:rdata_fifo_src_valid -> cmos_sensor_input_0_avalon_slave_agent_rdata_fifo:in_valid
	wire   [33:0] cmos_sensor_input_0_avalon_slave_agent_rdata_fifo_src_data;        // cmos_sensor_input_0_avalon_slave_agent:rdata_fifo_src_data -> cmos_sensor_input_0_avalon_slave_agent_rdata_fifo:in_data
	wire          cmos_sensor_input_0_avalon_slave_agent_rdata_fifo_src_ready;       // cmos_sensor_input_0_avalon_slave_agent_rdata_fifo:in_ready -> cmos_sensor_input_0_avalon_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                 // cmd_mux:src_valid -> cmos_sensor_input_0_avalon_slave_agent:cp_valid
	wire   [79:0] cmd_mux_src_data;                                                  // cmd_mux:src_data -> cmos_sensor_input_0_avalon_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                 // cmos_sensor_input_0_avalon_slave_agent:cp_ready -> cmd_mux:src_ready
	wire    [2:0] cmd_mux_src_channel;                                               // cmd_mux:src_channel -> cmos_sensor_input_0_avalon_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                         // cmd_mux:src_startofpacket -> cmos_sensor_input_0_avalon_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                           // cmd_mux:src_endofpacket -> cmos_sensor_input_0_avalon_slave_agent:cp_endofpacket
	wire   [31:0] msgdma_0_csr_agent_m0_readdata;                                    // msgdma_0_csr_translator:uav_readdata -> msgdma_0_csr_agent:m0_readdata
	wire          msgdma_0_csr_agent_m0_waitrequest;                                 // msgdma_0_csr_translator:uav_waitrequest -> msgdma_0_csr_agent:m0_waitrequest
	wire          msgdma_0_csr_agent_m0_debugaccess;                                 // msgdma_0_csr_agent:m0_debugaccess -> msgdma_0_csr_translator:uav_debugaccess
	wire    [5:0] msgdma_0_csr_agent_m0_address;                                     // msgdma_0_csr_agent:m0_address -> msgdma_0_csr_translator:uav_address
	wire    [3:0] msgdma_0_csr_agent_m0_byteenable;                                  // msgdma_0_csr_agent:m0_byteenable -> msgdma_0_csr_translator:uav_byteenable
	wire          msgdma_0_csr_agent_m0_read;                                        // msgdma_0_csr_agent:m0_read -> msgdma_0_csr_translator:uav_read
	wire          msgdma_0_csr_agent_m0_readdatavalid;                               // msgdma_0_csr_translator:uav_readdatavalid -> msgdma_0_csr_agent:m0_readdatavalid
	wire          msgdma_0_csr_agent_m0_lock;                                        // msgdma_0_csr_agent:m0_lock -> msgdma_0_csr_translator:uav_lock
	wire   [31:0] msgdma_0_csr_agent_m0_writedata;                                   // msgdma_0_csr_agent:m0_writedata -> msgdma_0_csr_translator:uav_writedata
	wire          msgdma_0_csr_agent_m0_write;                                       // msgdma_0_csr_agent:m0_write -> msgdma_0_csr_translator:uav_write
	wire    [2:0] msgdma_0_csr_agent_m0_burstcount;                                  // msgdma_0_csr_agent:m0_burstcount -> msgdma_0_csr_translator:uav_burstcount
	wire          msgdma_0_csr_agent_rf_source_valid;                                // msgdma_0_csr_agent:rf_source_valid -> msgdma_0_csr_agent_rsp_fifo:in_valid
	wire   [80:0] msgdma_0_csr_agent_rf_source_data;                                 // msgdma_0_csr_agent:rf_source_data -> msgdma_0_csr_agent_rsp_fifo:in_data
	wire          msgdma_0_csr_agent_rf_source_ready;                                // msgdma_0_csr_agent_rsp_fifo:in_ready -> msgdma_0_csr_agent:rf_source_ready
	wire          msgdma_0_csr_agent_rf_source_startofpacket;                        // msgdma_0_csr_agent:rf_source_startofpacket -> msgdma_0_csr_agent_rsp_fifo:in_startofpacket
	wire          msgdma_0_csr_agent_rf_source_endofpacket;                          // msgdma_0_csr_agent:rf_source_endofpacket -> msgdma_0_csr_agent_rsp_fifo:in_endofpacket
	wire          msgdma_0_csr_agent_rsp_fifo_out_valid;                             // msgdma_0_csr_agent_rsp_fifo:out_valid -> msgdma_0_csr_agent:rf_sink_valid
	wire   [80:0] msgdma_0_csr_agent_rsp_fifo_out_data;                              // msgdma_0_csr_agent_rsp_fifo:out_data -> msgdma_0_csr_agent:rf_sink_data
	wire          msgdma_0_csr_agent_rsp_fifo_out_ready;                             // msgdma_0_csr_agent:rf_sink_ready -> msgdma_0_csr_agent_rsp_fifo:out_ready
	wire          msgdma_0_csr_agent_rsp_fifo_out_startofpacket;                     // msgdma_0_csr_agent_rsp_fifo:out_startofpacket -> msgdma_0_csr_agent:rf_sink_startofpacket
	wire          msgdma_0_csr_agent_rsp_fifo_out_endofpacket;                       // msgdma_0_csr_agent_rsp_fifo:out_endofpacket -> msgdma_0_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                             // cmd_mux_001:src_valid -> msgdma_0_csr_agent:cp_valid
	wire   [79:0] cmd_mux_001_src_data;                                              // cmd_mux_001:src_data -> msgdma_0_csr_agent:cp_data
	wire          cmd_mux_001_src_ready;                                             // msgdma_0_csr_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [2:0] cmd_mux_001_src_channel;                                           // cmd_mux_001:src_channel -> msgdma_0_csr_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                     // cmd_mux_001:src_startofpacket -> msgdma_0_csr_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                       // cmd_mux_001:src_endofpacket -> msgdma_0_csr_agent:cp_endofpacket
	wire  [127:0] msgdma_0_descriptor_slave_agent_m0_readdata;                       // msgdma_0_descriptor_slave_translator:uav_readdata -> msgdma_0_descriptor_slave_agent:m0_readdata
	wire          msgdma_0_descriptor_slave_agent_m0_waitrequest;                    // msgdma_0_descriptor_slave_translator:uav_waitrequest -> msgdma_0_descriptor_slave_agent:m0_waitrequest
	wire          msgdma_0_descriptor_slave_agent_m0_debugaccess;                    // msgdma_0_descriptor_slave_agent:m0_debugaccess -> msgdma_0_descriptor_slave_translator:uav_debugaccess
	wire    [5:0] msgdma_0_descriptor_slave_agent_m0_address;                        // msgdma_0_descriptor_slave_agent:m0_address -> msgdma_0_descriptor_slave_translator:uav_address
	wire   [15:0] msgdma_0_descriptor_slave_agent_m0_byteenable;                     // msgdma_0_descriptor_slave_agent:m0_byteenable -> msgdma_0_descriptor_slave_translator:uav_byteenable
	wire          msgdma_0_descriptor_slave_agent_m0_read;                           // msgdma_0_descriptor_slave_agent:m0_read -> msgdma_0_descriptor_slave_translator:uav_read
	wire          msgdma_0_descriptor_slave_agent_m0_readdatavalid;                  // msgdma_0_descriptor_slave_translator:uav_readdatavalid -> msgdma_0_descriptor_slave_agent:m0_readdatavalid
	wire          msgdma_0_descriptor_slave_agent_m0_lock;                           // msgdma_0_descriptor_slave_agent:m0_lock -> msgdma_0_descriptor_slave_translator:uav_lock
	wire  [127:0] msgdma_0_descriptor_slave_agent_m0_writedata;                      // msgdma_0_descriptor_slave_agent:m0_writedata -> msgdma_0_descriptor_slave_translator:uav_writedata
	wire          msgdma_0_descriptor_slave_agent_m0_write;                          // msgdma_0_descriptor_slave_agent:m0_write -> msgdma_0_descriptor_slave_translator:uav_write
	wire    [4:0] msgdma_0_descriptor_slave_agent_m0_burstcount;                     // msgdma_0_descriptor_slave_agent:m0_burstcount -> msgdma_0_descriptor_slave_translator:uav_burstcount
	wire          msgdma_0_descriptor_slave_agent_rf_source_valid;                   // msgdma_0_descriptor_slave_agent:rf_source_valid -> msgdma_0_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [188:0] msgdma_0_descriptor_slave_agent_rf_source_data;                    // msgdma_0_descriptor_slave_agent:rf_source_data -> msgdma_0_descriptor_slave_agent_rsp_fifo:in_data
	wire          msgdma_0_descriptor_slave_agent_rf_source_ready;                   // msgdma_0_descriptor_slave_agent_rsp_fifo:in_ready -> msgdma_0_descriptor_slave_agent:rf_source_ready
	wire          msgdma_0_descriptor_slave_agent_rf_source_startofpacket;           // msgdma_0_descriptor_slave_agent:rf_source_startofpacket -> msgdma_0_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          msgdma_0_descriptor_slave_agent_rf_source_endofpacket;             // msgdma_0_descriptor_slave_agent:rf_source_endofpacket -> msgdma_0_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          msgdma_0_descriptor_slave_agent_rsp_fifo_out_valid;                // msgdma_0_descriptor_slave_agent_rsp_fifo:out_valid -> msgdma_0_descriptor_slave_agent:rf_sink_valid
	wire  [188:0] msgdma_0_descriptor_slave_agent_rsp_fifo_out_data;                 // msgdma_0_descriptor_slave_agent_rsp_fifo:out_data -> msgdma_0_descriptor_slave_agent:rf_sink_data
	wire          msgdma_0_descriptor_slave_agent_rsp_fifo_out_ready;                // msgdma_0_descriptor_slave_agent:rf_sink_ready -> msgdma_0_descriptor_slave_agent_rsp_fifo:out_ready
	wire          msgdma_0_descriptor_slave_agent_rsp_fifo_out_startofpacket;        // msgdma_0_descriptor_slave_agent_rsp_fifo:out_startofpacket -> msgdma_0_descriptor_slave_agent:rf_sink_startofpacket
	wire          msgdma_0_descriptor_slave_agent_rsp_fifo_out_endofpacket;          // msgdma_0_descriptor_slave_agent_rsp_fifo:out_endofpacket -> msgdma_0_descriptor_slave_agent:rf_sink_endofpacket
	wire          mm_bridge_0_m0_agent_cp_valid;                                     // mm_bridge_0_m0_agent:cp_valid -> router:sink_valid
	wire   [79:0] mm_bridge_0_m0_agent_cp_data;                                      // mm_bridge_0_m0_agent:cp_data -> router:sink_data
	wire          mm_bridge_0_m0_agent_cp_ready;                                     // router:sink_ready -> mm_bridge_0_m0_agent:cp_ready
	wire          mm_bridge_0_m0_agent_cp_startofpacket;                             // mm_bridge_0_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          mm_bridge_0_m0_agent_cp_endofpacket;                               // mm_bridge_0_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          cmos_sensor_input_0_avalon_slave_agent_rp_valid;                   // cmos_sensor_input_0_avalon_slave_agent:rp_valid -> router_001:sink_valid
	wire   [79:0] cmos_sensor_input_0_avalon_slave_agent_rp_data;                    // cmos_sensor_input_0_avalon_slave_agent:rp_data -> router_001:sink_data
	wire          cmos_sensor_input_0_avalon_slave_agent_rp_ready;                   // router_001:sink_ready -> cmos_sensor_input_0_avalon_slave_agent:rp_ready
	wire          cmos_sensor_input_0_avalon_slave_agent_rp_startofpacket;           // cmos_sensor_input_0_avalon_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          cmos_sensor_input_0_avalon_slave_agent_rp_endofpacket;             // cmos_sensor_input_0_avalon_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                              // router_001:src_valid -> rsp_demux:sink_valid
	wire   [79:0] router_001_src_data;                                               // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                              // rsp_demux:sink_ready -> router_001:src_ready
	wire    [2:0] router_001_src_channel;                                            // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                      // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                        // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          msgdma_0_csr_agent_rp_valid;                                       // msgdma_0_csr_agent:rp_valid -> router_002:sink_valid
	wire   [79:0] msgdma_0_csr_agent_rp_data;                                        // msgdma_0_csr_agent:rp_data -> router_002:sink_data
	wire          msgdma_0_csr_agent_rp_ready;                                       // router_002:sink_ready -> msgdma_0_csr_agent:rp_ready
	wire          msgdma_0_csr_agent_rp_startofpacket;                               // msgdma_0_csr_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          msgdma_0_csr_agent_rp_endofpacket;                                 // msgdma_0_csr_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                              // router_002:src_valid -> rsp_demux_001:sink_valid
	wire   [79:0] router_002_src_data;                                               // router_002:src_data -> rsp_demux_001:sink_data
	wire          router_002_src_ready;                                              // rsp_demux_001:sink_ready -> router_002:src_ready
	wire    [2:0] router_002_src_channel;                                            // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_startofpacket;                                      // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_002_src_endofpacket;                                        // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          msgdma_0_descriptor_slave_agent_rp_valid;                          // msgdma_0_descriptor_slave_agent:rp_valid -> router_003:sink_valid
	wire  [187:0] msgdma_0_descriptor_slave_agent_rp_data;                           // msgdma_0_descriptor_slave_agent:rp_data -> router_003:sink_data
	wire          msgdma_0_descriptor_slave_agent_rp_ready;                          // router_003:sink_ready -> msgdma_0_descriptor_slave_agent:rp_ready
	wire          msgdma_0_descriptor_slave_agent_rp_startofpacket;                  // msgdma_0_descriptor_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          msgdma_0_descriptor_slave_agent_rp_endofpacket;                    // msgdma_0_descriptor_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_src_valid;                                                  // router:src_valid -> mm_bridge_0_m0_limiter:cmd_sink_valid
	wire   [79:0] router_src_data;                                                   // router:src_data -> mm_bridge_0_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                  // mm_bridge_0_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [2:0] router_src_channel;                                                // router:src_channel -> mm_bridge_0_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                          // router:src_startofpacket -> mm_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                            // router:src_endofpacket -> mm_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire   [79:0] mm_bridge_0_m0_limiter_cmd_src_data;                               // mm_bridge_0_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          mm_bridge_0_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> mm_bridge_0_m0_limiter:cmd_src_ready
	wire    [2:0] mm_bridge_0_m0_limiter_cmd_src_channel;                            // mm_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          mm_bridge_0_m0_limiter_cmd_src_startofpacket;                      // mm_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          mm_bridge_0_m0_limiter_cmd_src_endofpacket;                        // mm_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                 // rsp_mux:src_valid -> mm_bridge_0_m0_limiter:rsp_sink_valid
	wire   [79:0] rsp_mux_src_data;                                                  // rsp_mux:src_data -> mm_bridge_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                 // mm_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [2:0] rsp_mux_src_channel;                                               // rsp_mux:src_channel -> mm_bridge_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                         // rsp_mux:src_startofpacket -> mm_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                           // rsp_mux:src_endofpacket -> mm_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire          mm_bridge_0_m0_limiter_rsp_src_valid;                              // mm_bridge_0_m0_limiter:rsp_src_valid -> mm_bridge_0_m0_agent:rp_valid
	wire   [79:0] mm_bridge_0_m0_limiter_rsp_src_data;                               // mm_bridge_0_m0_limiter:rsp_src_data -> mm_bridge_0_m0_agent:rp_data
	wire          mm_bridge_0_m0_limiter_rsp_src_ready;                              // mm_bridge_0_m0_agent:rp_ready -> mm_bridge_0_m0_limiter:rsp_src_ready
	wire    [2:0] mm_bridge_0_m0_limiter_rsp_src_channel;                            // mm_bridge_0_m0_limiter:rsp_src_channel -> mm_bridge_0_m0_agent:rp_channel
	wire          mm_bridge_0_m0_limiter_rsp_src_startofpacket;                      // mm_bridge_0_m0_limiter:rsp_src_startofpacket -> mm_bridge_0_m0_agent:rp_startofpacket
	wire          mm_bridge_0_m0_limiter_rsp_src_endofpacket;                        // mm_bridge_0_m0_limiter:rsp_src_endofpacket -> mm_bridge_0_m0_agent:rp_endofpacket
	wire          cmd_demux_src1_valid;                                              // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire   [79:0] cmd_demux_src1_data;                                               // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                              // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [2:0] cmd_demux_src1_channel;                                            // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                      // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                        // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                              // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire   [79:0] cmd_demux_src2_data;                                               // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                              // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [2:0] cmd_demux_src2_channel;                                            // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                      // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                        // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                          // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire   [79:0] rsp_demux_001_src0_data;                                           // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                          // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [2:0] rsp_demux_001_src0_channel;                                        // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                  // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                    // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                          // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire   [79:0] rsp_demux_002_src0_data;                                           // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                          // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [2:0] rsp_demux_002_src0_channel;                                        // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                  // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                    // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          cmd_mux_002_src_valid;                                             // cmd_mux_002:src_valid -> msgdma_0_descriptor_slave_cmd_width_adapter:in_valid
	wire   [79:0] cmd_mux_002_src_data;                                              // cmd_mux_002:src_data -> msgdma_0_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_002_src_ready;                                             // msgdma_0_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_002:src_ready
	wire    [2:0] cmd_mux_002_src_channel;                                           // cmd_mux_002:src_channel -> msgdma_0_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_002_src_startofpacket;                                     // cmd_mux_002:src_startofpacket -> msgdma_0_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                       // cmd_mux_002:src_endofpacket -> msgdma_0_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          msgdma_0_descriptor_slave_cmd_width_adapter_src_valid;             // msgdma_0_descriptor_slave_cmd_width_adapter:out_valid -> msgdma_0_descriptor_slave_agent:cp_valid
	wire  [187:0] msgdma_0_descriptor_slave_cmd_width_adapter_src_data;              // msgdma_0_descriptor_slave_cmd_width_adapter:out_data -> msgdma_0_descriptor_slave_agent:cp_data
	wire          msgdma_0_descriptor_slave_cmd_width_adapter_src_ready;             // msgdma_0_descriptor_slave_agent:cp_ready -> msgdma_0_descriptor_slave_cmd_width_adapter:out_ready
	wire    [2:0] msgdma_0_descriptor_slave_cmd_width_adapter_src_channel;           // msgdma_0_descriptor_slave_cmd_width_adapter:out_channel -> msgdma_0_descriptor_slave_agent:cp_channel
	wire          msgdma_0_descriptor_slave_cmd_width_adapter_src_startofpacket;     // msgdma_0_descriptor_slave_cmd_width_adapter:out_startofpacket -> msgdma_0_descriptor_slave_agent:cp_startofpacket
	wire          msgdma_0_descriptor_slave_cmd_width_adapter_src_endofpacket;       // msgdma_0_descriptor_slave_cmd_width_adapter:out_endofpacket -> msgdma_0_descriptor_slave_agent:cp_endofpacket
	wire          router_003_src_valid;                                              // router_003:src_valid -> msgdma_0_descriptor_slave_rsp_width_adapter:in_valid
	wire  [187:0] router_003_src_data;                                               // router_003:src_data -> msgdma_0_descriptor_slave_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                              // msgdma_0_descriptor_slave_rsp_width_adapter:in_ready -> router_003:src_ready
	wire    [2:0] router_003_src_channel;                                            // router_003:src_channel -> msgdma_0_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                      // router_003:src_startofpacket -> msgdma_0_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                        // router_003:src_endofpacket -> msgdma_0_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          msgdma_0_descriptor_slave_rsp_width_adapter_src_valid;             // msgdma_0_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_002:sink_valid
	wire   [79:0] msgdma_0_descriptor_slave_rsp_width_adapter_src_data;              // msgdma_0_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_002:sink_data
	wire          msgdma_0_descriptor_slave_rsp_width_adapter_src_ready;             // rsp_demux_002:sink_ready -> msgdma_0_descriptor_slave_rsp_width_adapter:out_ready
	wire    [2:0] msgdma_0_descriptor_slave_rsp_width_adapter_src_channel;           // msgdma_0_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_002:sink_channel
	wire          msgdma_0_descriptor_slave_rsp_width_adapter_src_startofpacket;     // msgdma_0_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          msgdma_0_descriptor_slave_rsp_width_adapter_src_endofpacket;       // msgdma_0_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          cmd_demux_src0_valid;                                              // cmd_demux:src0_valid -> crosser:in_valid
	wire   [79:0] cmd_demux_src0_data;                                               // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                              // crosser:in_ready -> cmd_demux:src0_ready
	wire    [2:0] cmd_demux_src0_channel;                                            // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                      // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                        // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                 // crosser:out_valid -> cmd_mux:sink0_valid
	wire   [79:0] crosser_out_data;                                                  // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                 // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [2:0] crosser_out_channel;                                               // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                         // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                           // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                              // rsp_demux:src0_valid -> crosser_001:in_valid
	wire   [79:0] rsp_demux_src0_data;                                               // rsp_demux:src0_data -> crosser_001:in_data
	wire          rsp_demux_src0_ready;                                              // crosser_001:in_ready -> rsp_demux:src0_ready
	wire    [2:0] rsp_demux_src0_channel;                                            // rsp_demux:src0_channel -> crosser_001:in_channel
	wire          rsp_demux_src0_startofpacket;                                      // rsp_demux:src0_startofpacket -> crosser_001:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                        // rsp_demux:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                             // crosser_001:out_valid -> rsp_mux:sink0_valid
	wire   [79:0] crosser_001_out_data;                                              // crosser_001:out_data -> rsp_mux:sink0_data
	wire          crosser_001_out_ready;                                             // rsp_mux:sink0_ready -> crosser_001:out_ready
	wire    [2:0] crosser_001_out_channel;                                           // crosser_001:out_channel -> rsp_mux:sink0_channel
	wire          crosser_001_out_startofpacket;                                     // crosser_001:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                       // crosser_001:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire    [2:0] mm_bridge_0_m0_limiter_cmd_valid_data;                             // mm_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire          cmos_sensor_input_0_avalon_slave_agent_rdata_fifo_out_valid;       // cmos_sensor_input_0_avalon_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] cmos_sensor_input_0_avalon_slave_agent_rdata_fifo_out_data;        // cmos_sensor_input_0_avalon_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          cmos_sensor_input_0_avalon_slave_agent_rdata_fifo_out_ready;       // avalon_st_adapter:in_0_ready -> cmos_sensor_input_0_avalon_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                     // avalon_st_adapter:out_0_valid -> cmos_sensor_input_0_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                      // avalon_st_adapter:out_0_data -> cmos_sensor_input_0_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                     // cmos_sensor_input_0_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                     // avalon_st_adapter:out_0_error -> cmos_sensor_input_0_avalon_slave_agent:rdata_fifo_sink_error
	wire          msgdma_0_csr_agent_rdata_fifo_src_valid;                           // msgdma_0_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] msgdma_0_csr_agent_rdata_fifo_src_data;                            // msgdma_0_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          msgdma_0_csr_agent_rdata_fifo_src_ready;                           // avalon_st_adapter_001:in_0_ready -> msgdma_0_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                 // avalon_st_adapter_001:out_0_valid -> msgdma_0_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                  // avalon_st_adapter_001:out_0_data -> msgdma_0_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                 // msgdma_0_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                 // avalon_st_adapter_001:out_0_error -> msgdma_0_csr_agent:rdata_fifo_sink_error
	wire          msgdma_0_descriptor_slave_agent_rdata_fifo_src_valid;              // msgdma_0_descriptor_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [129:0] msgdma_0_descriptor_slave_agent_rdata_fifo_src_data;               // msgdma_0_descriptor_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          msgdma_0_descriptor_slave_agent_rdata_fifo_src_ready;              // avalon_st_adapter_002:in_0_ready -> msgdma_0_descriptor_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                 // avalon_st_adapter_002:out_0_valid -> msgdma_0_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_002_out_0_data;                                  // avalon_st_adapter_002:out_0_data -> msgdma_0_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                 // msgdma_0_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                 // avalon_st_adapter_002:out_0_error -> msgdma_0_descriptor_slave_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (6),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (6),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_0_m0_translator (
		.clk                    (clk_out_clk_clk),                                                   //                       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (mm_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (mm_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (mm_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (mm_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (mm_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (mm_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (mm_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (mm_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (mm_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (mm_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                              //               (terminated)
		.av_lock                (1'b0),                                                              //               (terminated)
		.uav_clken              (),                                                                  //               (terminated)
		.av_clken               (1'b1),                                                              //               (terminated)
		.uav_response           (2'b00),                                                             //               (terminated)
		.av_response            (),                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                   //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (6),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cmos_sensor_input_0_avalon_slave_translator (
		.clk                    (clk_in_clk_clk),                                          //                      clk.clk
		.reset                  (cmos_sensor_input_0_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (cmos_sensor_input_0_avalon_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cmos_sensor_input_0_avalon_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cmos_sensor_input_0_avalon_slave_agent_m0_read),          //                         .read
		.uav_write              (cmos_sensor_input_0_avalon_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (cmos_sensor_input_0_avalon_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cmos_sensor_input_0_avalon_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cmos_sensor_input_0_avalon_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cmos_sensor_input_0_avalon_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cmos_sensor_input_0_avalon_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cmos_sensor_input_0_avalon_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cmos_sensor_input_0_avalon_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (cmos_sensor_input_0_avalon_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (cmos_sensor_input_0_avalon_slave_write),                  //                         .write
		.av_read                (cmos_sensor_input_0_avalon_slave_read),                   //                         .read
		.av_readdata            (cmos_sensor_input_0_avalon_slave_readdata),               //                         .readdata
		.av_writedata           (cmos_sensor_input_0_avalon_slave_writedata),              //                         .writedata
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (6),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) msgdma_0_csr_translator (
		.clk                    (clk_out_clk_clk),                               //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (msgdma_0_csr_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (msgdma_0_csr_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (msgdma_0_csr_agent_m0_read),                    //                         .read
		.uav_write              (msgdma_0_csr_agent_m0_write),                   //                         .write
		.uav_waitrequest        (msgdma_0_csr_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (msgdma_0_csr_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (msgdma_0_csr_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (msgdma_0_csr_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (msgdma_0_csr_agent_m0_writedata),               //                         .writedata
		.uav_lock               (msgdma_0_csr_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (msgdma_0_csr_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (msgdma_0_csr_address),                          //      avalon_anti_slave_0.address
		.av_write               (msgdma_0_csr_write),                            //                         .write
		.av_read                (msgdma_0_csr_read),                             //                         .read
		.av_readdata            (msgdma_0_csr_readdata),                         //                         .readdata
		.av_writedata           (msgdma_0_csr_writedata),                        //                         .writedata
		.av_byteenable          (msgdma_0_csr_byteenable),                       //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (6),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) msgdma_0_descriptor_slave_translator (
		.clk                    (clk_out_clk_clk),                                                                                                                       //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                                                                         //                    reset.reset
		.uav_address            (msgdma_0_descriptor_slave_agent_m0_address),                                                                                            // avalon_universal_slave_0.address
		.uav_burstcount         (msgdma_0_descriptor_slave_agent_m0_burstcount),                                                                                         //                         .burstcount
		.uav_read               (msgdma_0_descriptor_slave_agent_m0_read),                                                                                               //                         .read
		.uav_write              (msgdma_0_descriptor_slave_agent_m0_write),                                                                                              //                         .write
		.uav_waitrequest        (msgdma_0_descriptor_slave_agent_m0_waitrequest),                                                                                        //                         .waitrequest
		.uav_readdatavalid      (msgdma_0_descriptor_slave_agent_m0_readdatavalid),                                                                                      //                         .readdatavalid
		.uav_byteenable         (msgdma_0_descriptor_slave_agent_m0_byteenable),                                                                                         //                         .byteenable
		.uav_readdata           (msgdma_0_descriptor_slave_agent_m0_readdata),                                                                                           //                         .readdata
		.uav_writedata          (msgdma_0_descriptor_slave_agent_m0_writedata),                                                                                          //                         .writedata
		.uav_lock               (msgdma_0_descriptor_slave_agent_m0_lock),                                                                                               //                         .lock
		.uav_debugaccess        (msgdma_0_descriptor_slave_agent_m0_debugaccess),                                                                                        //                         .debugaccess
		.av_write               (msgdma_0_descriptor_slave_write),                                                                                                       //      avalon_anti_slave_0.write
		.av_writedata           (msgdma_0_descriptor_slave_writedata),                                                                                                   //                         .writedata
		.av_byteenable          (msgdma_0_descriptor_slave_byteenable),                                                                                                  //                         .byteenable
		.av_waitrequest         (msgdma_0_descriptor_slave_waitrequest),                                                                                                 //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (79),
		.PKT_ORI_BURST_SIZE_L      (77),
		.PKT_RESPONSE_STATUS_H     (76),
		.PKT_RESPONSE_STATUS_L     (75),
		.PKT_QOS_H                 (62),
		.PKT_QOS_L                 (62),
		.PKT_DATA_SIDEBAND_H       (60),
		.PKT_DATA_SIDEBAND_L       (60),
		.PKT_ADDR_SIDEBAND_H       (59),
		.PKT_ADDR_SIDEBAND_L       (59),
		.PKT_BURST_TYPE_H          (58),
		.PKT_BURST_TYPE_L          (57),
		.PKT_CACHE_H               (74),
		.PKT_CACHE_L               (71),
		.PKT_THREAD_ID_H           (67),
		.PKT_THREAD_ID_L           (67),
		.PKT_BURST_SIZE_H          (56),
		.PKT_BURST_SIZE_L          (54),
		.PKT_TRANS_EXCLUSIVE       (47),
		.PKT_TRANS_LOCK            (46),
		.PKT_BEGIN_BURST           (61),
		.PKT_PROTECTION_H          (70),
		.PKT_PROTECTION_L          (68),
		.PKT_BURSTWRAP_H           (53),
		.PKT_BURSTWRAP_L           (53),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (48),
		.PKT_ADDR_H                (41),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (42),
		.PKT_TRANS_POSTED          (43),
		.PKT_TRANS_WRITE           (44),
		.PKT_TRANS_READ            (45),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (63),
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (65),
		.ST_DATA_W                 (80),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_0_m0_agent (
		.clk                   (clk_out_clk_clk),                                                   //       clk.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (mm_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (mm_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (mm_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (mm_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (mm_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (mm_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (mm_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (mm_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (mm_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (mm_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (mm_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (79),
		.PKT_ORI_BURST_SIZE_L      (77),
		.PKT_RESPONSE_STATUS_H     (76),
		.PKT_RESPONSE_STATUS_L     (75),
		.PKT_BURST_SIZE_H          (56),
		.PKT_BURST_SIZE_L          (54),
		.PKT_TRANS_LOCK            (46),
		.PKT_BEGIN_BURST           (61),
		.PKT_PROTECTION_H          (70),
		.PKT_PROTECTION_L          (68),
		.PKT_BURSTWRAP_H           (53),
		.PKT_BURSTWRAP_L           (53),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (48),
		.PKT_ADDR_H                (41),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (42),
		.PKT_TRANS_POSTED          (43),
		.PKT_TRANS_WRITE           (44),
		.PKT_TRANS_READ            (45),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (63),
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (65),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (80),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cmos_sensor_input_0_avalon_slave_agent (
		.clk                     (clk_in_clk_clk),                                                    //             clk.clk
		.reset                   (cmos_sensor_input_0_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (cmos_sensor_input_0_avalon_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cmos_sensor_input_0_avalon_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cmos_sensor_input_0_avalon_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cmos_sensor_input_0_avalon_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cmos_sensor_input_0_avalon_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (cmos_sensor_input_0_avalon_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cmos_sensor_input_0_avalon_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cmos_sensor_input_0_avalon_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (cmos_sensor_input_0_avalon_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cmos_sensor_input_0_avalon_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (cmos_sensor_input_0_avalon_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (cmos_sensor_input_0_avalon_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cmos_sensor_input_0_avalon_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (cmos_sensor_input_0_avalon_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (cmos_sensor_input_0_avalon_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (cmos_sensor_input_0_avalon_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                               //                .channel
		.rf_sink_ready           (cmos_sensor_input_0_avalon_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cmos_sensor_input_0_avalon_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cmos_sensor_input_0_avalon_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cmos_sensor_input_0_avalon_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cmos_sensor_input_0_avalon_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cmos_sensor_input_0_avalon_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cmos_sensor_input_0_avalon_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cmos_sensor_input_0_avalon_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cmos_sensor_input_0_avalon_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cmos_sensor_input_0_avalon_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (cmos_sensor_input_0_avalon_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cmos_sensor_input_0_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cmos_sensor_input_0_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (81),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cmos_sensor_input_0_avalon_slave_agent_rsp_fifo (
		.clk               (clk_in_clk_clk),                                                    //       clk.clk
		.reset             (cmos_sensor_input_0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (cmos_sensor_input_0_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (cmos_sensor_input_0_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (cmos_sensor_input_0_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cmos_sensor_input_0_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cmos_sensor_input_0_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cmos_sensor_input_0_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cmos_sensor_input_0_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cmos_sensor_input_0_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cmos_sensor_input_0_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cmos_sensor_input_0_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cmos_sensor_input_0_avalon_slave_agent_rdata_fifo (
		.clk               (clk_in_clk_clk),                                              //       clk.clk
		.reset             (cmos_sensor_input_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (cmos_sensor_input_0_avalon_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (cmos_sensor_input_0_avalon_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (cmos_sensor_input_0_avalon_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (cmos_sensor_input_0_avalon_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (cmos_sensor_input_0_avalon_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (cmos_sensor_input_0_avalon_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (79),
		.PKT_ORI_BURST_SIZE_L      (77),
		.PKT_RESPONSE_STATUS_H     (76),
		.PKT_RESPONSE_STATUS_L     (75),
		.PKT_BURST_SIZE_H          (56),
		.PKT_BURST_SIZE_L          (54),
		.PKT_TRANS_LOCK            (46),
		.PKT_BEGIN_BURST           (61),
		.PKT_PROTECTION_H          (70),
		.PKT_PROTECTION_L          (68),
		.PKT_BURSTWRAP_H           (53),
		.PKT_BURSTWRAP_L           (53),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (48),
		.PKT_ADDR_H                (41),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (42),
		.PKT_TRANS_POSTED          (43),
		.PKT_TRANS_WRITE           (44),
		.PKT_TRANS_READ            (45),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (63),
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (65),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (80),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) msgdma_0_csr_agent (
		.clk                     (clk_out_clk_clk),                               //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (msgdma_0_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (msgdma_0_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (msgdma_0_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (msgdma_0_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (msgdma_0_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (msgdma_0_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (msgdma_0_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (msgdma_0_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (msgdma_0_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (msgdma_0_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (msgdma_0_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (msgdma_0_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (msgdma_0_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (msgdma_0_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (msgdma_0_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (msgdma_0_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_001_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                       //                .channel
		.rf_sink_ready           (msgdma_0_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (msgdma_0_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (msgdma_0_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (msgdma_0_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (msgdma_0_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (msgdma_0_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (msgdma_0_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (msgdma_0_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (msgdma_0_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (msgdma_0_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),             //                .error
		.rdata_fifo_src_ready    (msgdma_0_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (msgdma_0_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (msgdma_0_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (81),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) msgdma_0_csr_agent_rsp_fifo (
		.clk               (clk_out_clk_clk),                               //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (msgdma_0_csr_agent_rf_source_data),             //        in.data
		.in_valid          (msgdma_0_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (msgdma_0_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (msgdma_0_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (msgdma_0_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (msgdma_0_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (msgdma_0_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (msgdma_0_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (msgdma_0_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (msgdma_0_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (187),
		.PKT_ORI_BURST_SIZE_L      (185),
		.PKT_RESPONSE_STATUS_H     (184),
		.PKT_RESPONSE_STATUS_L     (183),
		.PKT_BURST_SIZE_H          (164),
		.PKT_BURST_SIZE_L          (162),
		.PKT_TRANS_LOCK            (154),
		.PKT_BEGIN_BURST           (169),
		.PKT_PROTECTION_H          (178),
		.PKT_PROTECTION_L          (176),
		.PKT_BURSTWRAP_H           (161),
		.PKT_BURSTWRAP_L           (161),
		.PKT_BYTE_CNT_H            (160),
		.PKT_BYTE_CNT_L            (156),
		.PKT_ADDR_H                (149),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (150),
		.PKT_TRANS_POSTED          (151),
		.PKT_TRANS_WRITE           (152),
		.PKT_TRANS_READ            (153),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (172),
		.PKT_SRC_ID_L              (171),
		.PKT_DEST_ID_H             (174),
		.PKT_DEST_ID_L             (173),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (188),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) msgdma_0_descriptor_slave_agent (
		.clk                     (clk_out_clk_clk),                                               //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (msgdma_0_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (msgdma_0_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (msgdma_0_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (msgdma_0_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (msgdma_0_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (msgdma_0_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (msgdma_0_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (msgdma_0_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (msgdma_0_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (msgdma_0_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (msgdma_0_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (msgdma_0_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (msgdma_0_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (msgdma_0_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (msgdma_0_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (msgdma_0_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (msgdma_0_descriptor_slave_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (msgdma_0_descriptor_slave_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (msgdma_0_descriptor_slave_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (msgdma_0_descriptor_slave_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (msgdma_0_descriptor_slave_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (msgdma_0_descriptor_slave_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (msgdma_0_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (msgdma_0_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (msgdma_0_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (msgdma_0_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (msgdma_0_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (msgdma_0_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (msgdma_0_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (msgdma_0_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (msgdma_0_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (msgdma_0_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (msgdma_0_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (msgdma_0_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (msgdma_0_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (189),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) msgdma_0_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_out_clk_clk),                                            //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (msgdma_0_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (msgdma_0_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (msgdma_0_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (msgdma_0_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (msgdma_0_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (msgdma_0_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (msgdma_0_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (msgdma_0_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (msgdma_0_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (msgdma_0_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	trdb_d5m_cmos_sensor_acquisition_0_mm_interconnect_0_router router (
		.sink_ready         (mm_bridge_0_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (mm_bridge_0_m0_agent_cp_valid),                 //          .valid
		.sink_data          (mm_bridge_0_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (mm_bridge_0_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (mm_bridge_0_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (clk_out_clk_clk),                               //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                              //       src.ready
		.src_valid          (router_src_valid),                              //          .valid
		.src_data           (router_src_data),                               //          .data
		.src_channel        (router_src_channel),                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //          .endofpacket
	);

	trdb_d5m_cmos_sensor_acquisition_0_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (cmos_sensor_input_0_avalon_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (cmos_sensor_input_0_avalon_slave_agent_rp_valid),         //          .valid
		.sink_data          (cmos_sensor_input_0_avalon_slave_agent_rp_data),          //          .data
		.sink_startofpacket (cmos_sensor_input_0_avalon_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cmos_sensor_input_0_avalon_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_in_clk_clk),                                          //       clk.clk
		.reset              (cmos_sensor_input_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_001_src_ready),                                    //       src.ready
		.src_valid          (router_001_src_valid),                                    //          .valid
		.src_data           (router_001_src_data),                                     //          .data
		.src_channel        (router_001_src_channel),                                  //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                               //          .endofpacket
	);

	trdb_d5m_cmos_sensor_acquisition_0_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (msgdma_0_csr_agent_rp_ready),                   //      sink.ready
		.sink_valid         (msgdma_0_csr_agent_rp_valid),                   //          .valid
		.sink_data          (msgdma_0_csr_agent_rp_data),                    //          .data
		.sink_startofpacket (msgdma_0_csr_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (msgdma_0_csr_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_out_clk_clk),                               //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                          //       src.ready
		.src_valid          (router_002_src_valid),                          //          .valid
		.src_data           (router_002_src_data),                           //          .data
		.src_channel        (router_002_src_channel),                        //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                     //          .endofpacket
	);

	trdb_d5m_cmos_sensor_acquisition_0_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (msgdma_0_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (msgdma_0_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (msgdma_0_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (msgdma_0_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (msgdma_0_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_out_clk_clk),                                  //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_003_src_ready),                             //       src.ready
		.src_valid          (router_003_src_valid),                             //          .valid
		.src_data           (router_003_src_data),                              //          .data
		.src_channel        (router_003_src_channel),                           //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                        //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (65),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (63),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (48),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (43),
		.PKT_TRANS_WRITE           (44),
		.MAX_OUTSTANDING_RESPONSES (5),
		.PIPELINED                 (0),
		.ST_DATA_W                 (80),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (3),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mm_bridge_0_m0_limiter (
		.clk                    (clk_out_clk_clk),                               //       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                              //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                              //          .valid
		.cmd_sink_data          (router_src_data),                               //          .data
		.cmd_sink_channel       (router_src_channel),                            //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                      //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                        //          .endofpacket
		.cmd_src_ready          (mm_bridge_0_m0_limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (mm_bridge_0_m0_limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (mm_bridge_0_m0_limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (mm_bridge_0_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (mm_bridge_0_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                             //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                             //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                           //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                              //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                     //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                       //          .endofpacket
		.rsp_src_ready          (mm_bridge_0_m0_limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (mm_bridge_0_m0_limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (mm_bridge_0_m0_limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (mm_bridge_0_m0_limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (mm_bridge_0_m0_limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (mm_bridge_0_m0_limiter_rsp_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (mm_bridge_0_m0_limiter_cmd_valid_data)          // cmd_valid.data
	);

	trdb_d5m_cmos_sensor_acquisition_0_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_out_clk_clk),                               //        clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (mm_bridge_0_m0_limiter_cmd_src_ready),          //       sink.ready
		.sink_channel       (mm_bridge_0_m0_limiter_cmd_src_channel),        //           .channel
		.sink_data          (mm_bridge_0_m0_limiter_cmd_src_data),           //           .data
		.sink_startofpacket (mm_bridge_0_m0_limiter_cmd_src_startofpacket),  //           .startofpacket
		.sink_endofpacket   (mm_bridge_0_m0_limiter_cmd_src_endofpacket),    //           .endofpacket
		.sink_valid         (mm_bridge_0_m0_limiter_cmd_valid_data),         // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                          //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                          //           .valid
		.src0_data          (cmd_demux_src0_data),                           //           .data
		.src0_channel       (cmd_demux_src0_channel),                        //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                  //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                    //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                          //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                          //           .valid
		.src1_data          (cmd_demux_src1_data),                           //           .data
		.src1_channel       (cmd_demux_src1_channel),                        //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                  //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                    //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                          //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                          //           .valid
		.src2_data          (cmd_demux_src2_data),                           //           .data
		.src2_channel       (cmd_demux_src2_channel),                        //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                  //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket)                     //           .endofpacket
	);

	trdb_d5m_cmos_sensor_acquisition_0_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_in_clk_clk),                                        //       clk.clk
		.reset               (cmos_sensor_input_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_src_valid),                                     //          .valid
		.src_data            (cmd_mux_src_data),                                      //          .data
		.src_channel         (cmd_mux_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                     //          .valid
		.sink0_channel       (crosser_out_channel),                                   //          .channel
		.sink0_data          (crosser_out_data),                                      //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                //          .endofpacket
	);

	trdb_d5m_cmos_sensor_acquisition_0_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_out_clk_clk),                               //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                         //          .valid
		.src_data            (cmd_mux_001_src_data),                          //          .data
		.src_channel         (cmd_mux_001_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                        //          .channel
		.sink0_data          (cmd_demux_src1_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                     //          .endofpacket
	);

	trdb_d5m_cmos_sensor_acquisition_0_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_out_clk_clk),                               //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                         //          .valid
		.src_data            (cmd_mux_002_src_data),                          //          .data
		.src_channel         (cmd_mux_002_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                        //          .channel
		.sink0_data          (cmd_demux_src2_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                     //          .endofpacket
	);

	trdb_d5m_cmos_sensor_acquisition_0_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_in_clk_clk),                                        //       clk.clk
		.reset              (cmos_sensor_input_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                  //      sink.ready
		.sink_channel       (router_001_src_channel),                                //          .channel
		.sink_data          (router_001_src_data),                                   //          .data
		.sink_startofpacket (router_001_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_001_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                             //          .endofpacket
	);

	trdb_d5m_cmos_sensor_acquisition_0_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (clk_out_clk_clk),                               //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                          //      sink.ready
		.sink_channel       (router_002_src_channel),                        //          .channel
		.sink_data          (router_002_src_data),                           //          .data
		.sink_startofpacket (router_002_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_002_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_001_src0_data),                       //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                 //          .endofpacket
	);

	trdb_d5m_cmos_sensor_acquisition_0_mm_interconnect_0_rsp_demux_001 rsp_demux_002 (
		.clk                (clk_out_clk_clk),                                               //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.sink_ready         (msgdma_0_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (msgdma_0_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (msgdma_0_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (msgdma_0_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (msgdma_0_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (msgdma_0_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                                 //          .endofpacket
	);

	trdb_d5m_cmos_sensor_acquisition_0_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_out_clk_clk),                               //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                             //       src.ready
		.src_valid           (rsp_mux_src_valid),                             //          .valid
		.src_data            (rsp_mux_src_data),                              //          .data
		.src_channel         (rsp_mux_src_channel),                           //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                         //          .valid
		.sink0_channel       (crosser_001_out_channel),                       //          .channel
		.sink0_data          (crosser_001_out_data),                          //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket),                   //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                      //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                      //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                    //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                       //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                      //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                      //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                    //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                       //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket)                 //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (41),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (52),
		.IN_PKT_BYTE_CNT_L             (48),
		.IN_PKT_TRANS_COMPRESSED_READ  (42),
		.IN_PKT_TRANS_WRITE            (44),
		.IN_PKT_BURSTWRAP_H            (53),
		.IN_PKT_BURSTWRAP_L            (53),
		.IN_PKT_BURST_SIZE_H           (56),
		.IN_PKT_BURST_SIZE_L           (54),
		.IN_PKT_RESPONSE_STATUS_H      (76),
		.IN_PKT_RESPONSE_STATUS_L      (75),
		.IN_PKT_TRANS_EXCLUSIVE        (47),
		.IN_PKT_BURST_TYPE_H           (58),
		.IN_PKT_BURST_TYPE_L           (57),
		.IN_PKT_ORI_BURST_SIZE_L       (77),
		.IN_PKT_ORI_BURST_SIZE_H       (79),
		.IN_ST_DATA_W                  (80),
		.OUT_PKT_ADDR_H                (149),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (160),
		.OUT_PKT_BYTE_CNT_L            (156),
		.OUT_PKT_TRANS_COMPRESSED_READ (150),
		.OUT_PKT_BURST_SIZE_H          (164),
		.OUT_PKT_BURST_SIZE_L          (162),
		.OUT_PKT_RESPONSE_STATUS_H     (184),
		.OUT_PKT_RESPONSE_STATUS_L     (183),
		.OUT_PKT_TRANS_EXCLUSIVE       (155),
		.OUT_PKT_BURST_TYPE_H          (166),
		.OUT_PKT_BURST_TYPE_L          (165),
		.OUT_PKT_ORI_BURST_SIZE_L      (185),
		.OUT_PKT_ORI_BURST_SIZE_H      (187),
		.OUT_ST_DATA_W                 (188),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) msgdma_0_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_out_clk_clk),                                               //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_valid             (cmd_mux_002_src_valid),                                         //      sink.valid
		.in_channel           (cmd_mux_002_src_channel),                                       //          .channel
		.in_startofpacket     (cmd_mux_002_src_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (cmd_mux_002_src_endofpacket),                                   //          .endofpacket
		.in_ready             (cmd_mux_002_src_ready),                                         //          .ready
		.in_data              (cmd_mux_002_src_data),                                          //          .data
		.out_endofpacket      (msgdma_0_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (msgdma_0_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (msgdma_0_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (msgdma_0_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (msgdma_0_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (msgdma_0_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (149),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (160),
		.IN_PKT_BYTE_CNT_L             (156),
		.IN_PKT_TRANS_COMPRESSED_READ  (150),
		.IN_PKT_TRANS_WRITE            (152),
		.IN_PKT_BURSTWRAP_H            (161),
		.IN_PKT_BURSTWRAP_L            (161),
		.IN_PKT_BURST_SIZE_H           (164),
		.IN_PKT_BURST_SIZE_L           (162),
		.IN_PKT_RESPONSE_STATUS_H      (184),
		.IN_PKT_RESPONSE_STATUS_L      (183),
		.IN_PKT_TRANS_EXCLUSIVE        (155),
		.IN_PKT_BURST_TYPE_H           (166),
		.IN_PKT_BURST_TYPE_L           (165),
		.IN_PKT_ORI_BURST_SIZE_L       (185),
		.IN_PKT_ORI_BURST_SIZE_H       (187),
		.IN_ST_DATA_W                  (188),
		.OUT_PKT_ADDR_H                (41),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (52),
		.OUT_PKT_BYTE_CNT_L            (48),
		.OUT_PKT_TRANS_COMPRESSED_READ (42),
		.OUT_PKT_BURST_SIZE_H          (56),
		.OUT_PKT_BURST_SIZE_L          (54),
		.OUT_PKT_RESPONSE_STATUS_H     (76),
		.OUT_PKT_RESPONSE_STATUS_L     (75),
		.OUT_PKT_TRANS_EXCLUSIVE       (47),
		.OUT_PKT_BURST_TYPE_H          (58),
		.OUT_PKT_BURST_TYPE_L          (57),
		.OUT_PKT_ORI_BURST_SIZE_L      (77),
		.OUT_PKT_ORI_BURST_SIZE_H      (79),
		.OUT_ST_DATA_W                 (80),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) msgdma_0_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_out_clk_clk),                                               //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_valid             (router_003_src_valid),                                          //      sink.valid
		.in_channel           (router_003_src_channel),                                        //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                  //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                    //          .endofpacket
		.in_ready             (router_003_src_ready),                                          //          .ready
		.in_data              (router_003_src_data),                                           //          .data
		.out_endofpacket      (msgdma_0_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (msgdma_0_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (msgdma_0_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (msgdma_0_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (msgdma_0_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (msgdma_0_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (80),
		.BITS_PER_SYMBOL     (80),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (3),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_out_clk_clk),                                       //        in_clk.clk
		.in_reset          (mm_bridge_0_reset_reset_bridge_in_reset_reset),         //  in_clk_reset.reset
		.out_clk           (clk_in_clk_clk),                                        //       out_clk.clk
		.out_reset         (cmos_sensor_input_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                  //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                //              .channel
		.in_data           (cmd_demux_src0_data),                                   //              .data
		.out_ready         (crosser_out_ready),                                     //           out.ready
		.out_valid         (crosser_out_valid),                                     //              .valid
		.out_startofpacket (crosser_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_out_channel),                                   //              .channel
		.out_data          (crosser_out_data),                                      //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (80),
		.BITS_PER_SYMBOL     (80),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (3),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_in_clk_clk),                                        //        in_clk.clk
		.in_reset          (cmos_sensor_input_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_out_clk_clk),                                       //       out_clk.clk
		.out_reset         (mm_bridge_0_reset_reset_bridge_in_reset_reset),         // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                  //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                //              .channel
		.in_data           (rsp_demux_src0_data),                                   //              .data
		.out_ready         (crosser_001_out_ready),                                 //           out.ready
		.out_valid         (crosser_001_out_valid),                                 //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_001_out_channel),                               //              .channel
		.out_data          (crosser_001_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	trdb_d5m_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_in_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (cmos_sensor_input_0_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (cmos_sensor_input_0_avalon_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (cmos_sensor_input_0_avalon_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (cmos_sensor_input_0_avalon_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                //         .error
	);

	trdb_d5m_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_out_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (msgdma_0_csr_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (msgdma_0_csr_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (msgdma_0_csr_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)              //         .error
	);

	trdb_d5m_cmos_sensor_acquisition_0_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_out_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (msgdma_0_descriptor_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (msgdma_0_descriptor_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (msgdma_0_descriptor_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                     //         .error
	);

endmodule
