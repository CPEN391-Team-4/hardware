// system_trdb_d5m_0_cmos_sensor_acquisition_0.v

// This file was auto-generated from cmos_sensor_acquisition_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module system_trdb_d5m_0_cmos_sensor_acquisition_0 #(
		parameter CMOS_SENSOR_INPUT_PIX_DEPTH      = 12,
		parameter CMOS_SENSOR_INPUT_SAMPLE_EDGE    = "FALLING",
		parameter CMOS_SENSOR_INPUT_MAX_WIDTH      = 2592,
		parameter CMOS_SENSOR_INPUT_MAX_HEIGHT     = 1944,
		parameter CMOS_SENSOR_INPUT_OUTPUT_WIDTH   = 16,
		parameter CMOS_SENSOR_INPUT_FIFO_DEPTH     = 32,
		parameter CMOS_SENSOR_INPUT_DEVICE_FAMILY  = "Cyclone V",
		parameter CMOS_SENSOR_INPUT_DEBAYER_ENABLE = 1,
		parameter CMOS_SENSOR_INPUT_PACKER_ENABLE  = 0,
		parameter DC_FIFO_DEPTH                    = 16,
		parameter DC_FIFO_WIDTH                    = 32
	) (
		output wire [31:0] avalon_master_address,      //         avalon_master.address
		output wire        avalon_master_write,        //                      .write
		output wire [3:0]  avalon_master_byteenable,   //                      .byteenable
		output wire [31:0] avalon_master_writedata,    //                      .writedata
		input  wire        avalon_master_waitrequest,  //                      .waitrequest
		output wire [4:0]  avalon_master_burstcount,   //                      .burstcount
		output wire        avalon_slave_waitrequest,   //          avalon_slave.waitrequest
		output wire [31:0] avalon_slave_readdata,      //                      .readdata
		output wire        avalon_slave_readdatavalid, //                      .readdatavalid
		input  wire [0:0]  avalon_slave_burstcount,    //                      .burstcount
		input  wire [31:0] avalon_slave_writedata,     //                      .writedata
		input  wire [5:0]  avalon_slave_address,       //                      .address
		input  wire        avalon_slave_write,         //                      .write
		input  wire        avalon_slave_read,          //                      .read
		input  wire [3:0]  avalon_slave_byteenable,    //                      .byteenable
		input  wire        avalon_slave_debugaccess,   //                      .debugaccess
		input  wire        clk_in_clk_clk,             //            clk_in_clk.clk
		input  wire        clk_in_reset_reset_n,       //          clk_in_reset.reset_n
		input  wire        clk_out_clk_clk,            //           clk_out_clk.clk
		input  wire        clk_out_reset_reset_n,      //         clk_out_reset.reset_n
		input  wire        cmos_sensor_frame_valid,    //           cmos_sensor.frame_valid
		input  wire        cmos_sensor_line_valid,     //                      .line_valid
		input  wire [11:0] cmos_sensor_data,           //                      .data
		output wire        cmos_sensor_input_irq_irq,  // cmos_sensor_input_irq.irq
		output wire        msgdma_csr_irq_irq          //        msgdma_csr_irq.irq
	);

	wire          dc_fifo_0_out_valid;                                          // dc_fifo_0:out_valid -> msgdma_0:st_sink_valid
	wire   [31:0] dc_fifo_0_out_data;                                           // dc_fifo_0:out_data -> msgdma_0:st_sink_data
	wire          dc_fifo_0_out_ready;                                          // msgdma_0:st_sink_ready -> dc_fifo_0:out_ready
	wire          mm_bridge_0_m0_waitrequest;                                   // mm_interconnect_0:mm_bridge_0_m0_waitrequest -> mm_bridge_0:m0_waitrequest
	wire   [31:0] mm_bridge_0_m0_readdata;                                      // mm_interconnect_0:mm_bridge_0_m0_readdata -> mm_bridge_0:m0_readdata
	wire          mm_bridge_0_m0_debugaccess;                                   // mm_bridge_0:m0_debugaccess -> mm_interconnect_0:mm_bridge_0_m0_debugaccess
	wire    [5:0] mm_bridge_0_m0_address;                                       // mm_bridge_0:m0_address -> mm_interconnect_0:mm_bridge_0_m0_address
	wire          mm_bridge_0_m0_read;                                          // mm_bridge_0:m0_read -> mm_interconnect_0:mm_bridge_0_m0_read
	wire    [3:0] mm_bridge_0_m0_byteenable;                                    // mm_bridge_0:m0_byteenable -> mm_interconnect_0:mm_bridge_0_m0_byteenable
	wire          mm_bridge_0_m0_readdatavalid;                                 // mm_interconnect_0:mm_bridge_0_m0_readdatavalid -> mm_bridge_0:m0_readdatavalid
	wire   [31:0] mm_bridge_0_m0_writedata;                                     // mm_bridge_0:m0_writedata -> mm_interconnect_0:mm_bridge_0_m0_writedata
	wire          mm_bridge_0_m0_write;                                         // mm_bridge_0:m0_write -> mm_interconnect_0:mm_bridge_0_m0_write
	wire    [0:0] mm_bridge_0_m0_burstcount;                                    // mm_bridge_0:m0_burstcount -> mm_interconnect_0:mm_bridge_0_m0_burstcount
	wire   [31:0] mm_interconnect_0_cmos_sensor_input_0_avalon_slave_readdata;  // cmos_sensor_input_0:rddata -> mm_interconnect_0:cmos_sensor_input_0_avalon_slave_readdata
	wire    [1:0] mm_interconnect_0_cmos_sensor_input_0_avalon_slave_address;   // mm_interconnect_0:cmos_sensor_input_0_avalon_slave_address -> cmos_sensor_input_0:addr
	wire          mm_interconnect_0_cmos_sensor_input_0_avalon_slave_read;      // mm_interconnect_0:cmos_sensor_input_0_avalon_slave_read -> cmos_sensor_input_0:read
	wire          mm_interconnect_0_cmos_sensor_input_0_avalon_slave_write;     // mm_interconnect_0:cmos_sensor_input_0_avalon_slave_write -> cmos_sensor_input_0:write
	wire   [31:0] mm_interconnect_0_cmos_sensor_input_0_avalon_slave_writedata; // mm_interconnect_0:cmos_sensor_input_0_avalon_slave_writedata -> cmos_sensor_input_0:wrdata
	wire   [31:0] mm_interconnect_0_msgdma_0_csr_readdata;                      // msgdma_0:csr_readdata -> mm_interconnect_0:msgdma_0_csr_readdata
	wire    [2:0] mm_interconnect_0_msgdma_0_csr_address;                       // mm_interconnect_0:msgdma_0_csr_address -> msgdma_0:csr_address
	wire          mm_interconnect_0_msgdma_0_csr_read;                          // mm_interconnect_0:msgdma_0_csr_read -> msgdma_0:csr_read
	wire    [3:0] mm_interconnect_0_msgdma_0_csr_byteenable;                    // mm_interconnect_0:msgdma_0_csr_byteenable -> msgdma_0:csr_byteenable
	wire          mm_interconnect_0_msgdma_0_csr_write;                         // mm_interconnect_0:msgdma_0_csr_write -> msgdma_0:csr_write
	wire   [31:0] mm_interconnect_0_msgdma_0_csr_writedata;                     // mm_interconnect_0:msgdma_0_csr_writedata -> msgdma_0:csr_writedata
	wire          mm_interconnect_0_msgdma_0_descriptor_slave_waitrequest;      // msgdma_0:descriptor_slave_waitrequest -> mm_interconnect_0:msgdma_0_descriptor_slave_waitrequest
	wire   [15:0] mm_interconnect_0_msgdma_0_descriptor_slave_byteenable;       // mm_interconnect_0:msgdma_0_descriptor_slave_byteenable -> msgdma_0:descriptor_slave_byteenable
	wire          mm_interconnect_0_msgdma_0_descriptor_slave_write;            // mm_interconnect_0:msgdma_0_descriptor_slave_write -> msgdma_0:descriptor_slave_write
	wire  [127:0] mm_interconnect_0_msgdma_0_descriptor_slave_writedata;        // mm_interconnect_0:msgdma_0_descriptor_slave_writedata -> msgdma_0:descriptor_slave_writedata
	wire          cmos_sensor_input_0_avalon_streaming_source_valid;            // cmos_sensor_input_0:valid -> avalon_st_adapter:in_0_valid
	wire   [15:0] cmos_sensor_input_0_avalon_streaming_source_data;             // cmos_sensor_input_0:data_out -> avalon_st_adapter:in_0_data
	wire          cmos_sensor_input_0_avalon_streaming_source_ready;            // avalon_st_adapter:in_0_ready -> cmos_sensor_input_0:ready
	wire          avalon_st_adapter_out_0_valid;                                // avalon_st_adapter:out_0_valid -> dc_fifo_0:in_valid
	wire   [31:0] avalon_st_adapter_out_0_data;                                 // avalon_st_adapter:out_0_data -> dc_fifo_0:in_data
	wire          avalon_st_adapter_out_0_ready;                                // dc_fifo_0:in_ready -> avalon_st_adapter:out_0_ready
	wire          rst_controller_reset_out_reset;                               // rst_controller:reset_out -> [avalon_st_adapter:in_rst_0_reset, cmos_sensor_input_0:reset, dc_fifo_0:in_reset_n, mm_interconnect_0:cmos_sensor_input_0_reset_reset_bridge_in_reset_reset]
	wire          rst_controller_001_reset_out_reset;                           // rst_controller_001:reset_out -> [dc_fifo_0:out_reset_n, mm_bridge_0:reset, mm_interconnect_0:mm_bridge_0_reset_reset_bridge_in_reset_reset, msgdma_0:reset_n_reset_n]

	generate
		// If any of the display statements (or deliberately broken
		// instantiations) within this generate block triggers then this module
		// has been instantiated this module with a set of parameters different
		// from those it was generated for.  This will usually result in a
		// non-functioning system.
		if (CMOS_SENSOR_INPUT_PIX_DEPTH != 12)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					cmos_sensor_input_pix_depth_check ( .error(1'b1) );
		end
		if (CMOS_SENSOR_INPUT_SAMPLE_EDGE != "FALLING")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					cmos_sensor_input_sample_edge_check ( .error(1'b1) );
		end
		if (CMOS_SENSOR_INPUT_MAX_WIDTH != 2592)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					cmos_sensor_input_max_width_check ( .error(1'b1) );
		end
		if (CMOS_SENSOR_INPUT_MAX_HEIGHT != 1944)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					cmos_sensor_input_max_height_check ( .error(1'b1) );
		end
		if (CMOS_SENSOR_INPUT_OUTPUT_WIDTH != 16)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					cmos_sensor_input_output_width_check ( .error(1'b1) );
		end
		if (CMOS_SENSOR_INPUT_FIFO_DEPTH != 32)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					cmos_sensor_input_fifo_depth_check ( .error(1'b1) );
		end
		if (CMOS_SENSOR_INPUT_DEVICE_FAMILY != "Cyclone V")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					cmos_sensor_input_device_family_check ( .error(1'b1) );
		end
		if (CMOS_SENSOR_INPUT_DEBAYER_ENABLE != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					cmos_sensor_input_debayer_enable_check ( .error(1'b1) );
		end
		if (CMOS_SENSOR_INPUT_PACKER_ENABLE != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					cmos_sensor_input_packer_enable_check ( .error(1'b1) );
		end
		if (DC_FIFO_DEPTH != 16)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					dc_fifo_depth_check ( .error(1'b1) );
		end
		if (DC_FIFO_WIDTH != 32)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					dc_fifo_width_check ( .error(1'b1) );
		end
	endgenerate

	cmos_sensor_input #(
		.PIX_DEPTH      (12),
		.SAMPLE_EDGE    ("FALLING"),
		.MAX_WIDTH      (2592),
		.MAX_HEIGHT     (1944),
		.OUTPUT_WIDTH   (16),
		.FIFO_DEPTH     (32),
		.DEVICE_FAMILY  ("Cyclone V"),
		.DEBAYER_ENABLE (1),
		.PACKER_ENABLE  (0)
	) cmos_sensor_input_0 (
		.clk         (clk_in_clk_clk),                                               //                   clock.clk
		.reset       (rst_controller_reset_out_reset),                               //                   reset.reset
		.read        (mm_interconnect_0_cmos_sensor_input_0_avalon_slave_read),      //            avalon_slave.read
		.write       (mm_interconnect_0_cmos_sensor_input_0_avalon_slave_write),     //                        .write
		.rddata      (mm_interconnect_0_cmos_sensor_input_0_avalon_slave_readdata),  //                        .readdata
		.wrdata      (mm_interconnect_0_cmos_sensor_input_0_avalon_slave_writedata), //                        .writedata
		.addr        (mm_interconnect_0_cmos_sensor_input_0_avalon_slave_address),   //                        .address
		.ready       (cmos_sensor_input_0_avalon_streaming_source_ready),            // avalon_streaming_source.ready
		.valid       (cmos_sensor_input_0_avalon_streaming_source_valid),            //                        .valid
		.data_out    (cmos_sensor_input_0_avalon_streaming_source_data),             //                        .data
		.frame_valid (cmos_sensor_frame_valid),                                      //             cmos_sensor.frame_valid
		.line_valid  (cmos_sensor_line_valid),                                       //                        .line_valid
		.data_in     (cmos_sensor_data),                                             //                        .data
		.irq         (cmos_sensor_input_irq_irq)                                     //        interrupt_sender.irq
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (4),
		.BITS_PER_SYMBOL    (8),
		.FIFO_DEPTH         (16),
		.CHANNEL_WIDTH      (0),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (0),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) dc_fifo_0 (
		.in_clk            (clk_in_clk_clk),                       //        in_clk.clk
		.in_reset_n        (~rst_controller_reset_out_reset),      //  in_clk_reset.reset_n
		.out_clk           (clk_out_clk_clk),                      //       out_clk.clk
		.out_reset_n       (~rst_controller_001_reset_out_reset),  // out_clk_reset.reset_n
		.in_data           (avalon_st_adapter_out_0_data),         //            in.data
		.in_valid          (avalon_st_adapter_out_0_valid),        //              .valid
		.in_ready          (avalon_st_adapter_out_0_ready),        //              .ready
		.out_data          (dc_fifo_0_out_data),                   //           out.data
		.out_valid         (dc_fifo_0_out_valid),                  //              .valid
		.out_ready         (dc_fifo_0_out_ready),                  //              .ready
		.in_csr_address    (1'b0),                                 //   (terminated)
		.in_csr_read       (1'b0),                                 //   (terminated)
		.in_csr_write      (1'b0),                                 //   (terminated)
		.in_csr_readdata   (),                                     //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000), //   (terminated)
		.out_csr_address   (1'b0),                                 //   (terminated)
		.out_csr_read      (1'b0),                                 //   (terminated)
		.out_csr_write     (1'b0),                                 //   (terminated)
		.out_csr_readdata  (),                                     //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000), //   (terminated)
		.in_startofpacket  (1'b0),                                 //   (terminated)
		.in_endofpacket    (1'b0),                                 //   (terminated)
		.out_startofpacket (),                                     //   (terminated)
		.out_endofpacket   (),                                     //   (terminated)
		.in_empty          (2'b00),                                //   (terminated)
		.out_empty         (),                                     //   (terminated)
		.in_error          (1'b0),                                 //   (terminated)
		.out_error         (),                                     //   (terminated)
		.in_channel        (1'b0),                                 //   (terminated)
		.out_channel       (),                                     //   (terminated)
		.space_avail_data  ()                                      //   (terminated)
	);

	altera_avalon_mm_bridge #(
		.DATA_WIDTH        (32),
		.SYMBOL_WIDTH      (8),
		.HDL_ADDR_WIDTH    (6),
		.BURSTCOUNT_WIDTH  (1),
		.PIPELINE_COMMAND  (0),
		.PIPELINE_RESPONSE (0)
	) mm_bridge_0 (
		.clk              (clk_out_clk_clk),                    //   clk.clk
		.reset            (rst_controller_001_reset_out_reset), // reset.reset
		.s0_waitrequest   (avalon_slave_waitrequest),           //    s0.waitrequest
		.s0_readdata      (avalon_slave_readdata),              //      .readdata
		.s0_readdatavalid (avalon_slave_readdatavalid),         //      .readdatavalid
		.s0_burstcount    (avalon_slave_burstcount),            //      .burstcount
		.s0_writedata     (avalon_slave_writedata),             //      .writedata
		.s0_address       (avalon_slave_address),               //      .address
		.s0_write         (avalon_slave_write),                 //      .write
		.s0_read          (avalon_slave_read),                  //      .read
		.s0_byteenable    (avalon_slave_byteenable),            //      .byteenable
		.s0_debugaccess   (avalon_slave_debugaccess),           //      .debugaccess
		.m0_waitrequest   (mm_bridge_0_m0_waitrequest),         //    m0.waitrequest
		.m0_readdata      (mm_bridge_0_m0_readdata),            //      .readdata
		.m0_readdatavalid (mm_bridge_0_m0_readdatavalid),       //      .readdatavalid
		.m0_burstcount    (mm_bridge_0_m0_burstcount),          //      .burstcount
		.m0_writedata     (mm_bridge_0_m0_writedata),           //      .writedata
		.m0_address       (mm_bridge_0_m0_address),             //      .address
		.m0_write         (mm_bridge_0_m0_write),               //      .write
		.m0_read          (mm_bridge_0_m0_read),                //      .read
		.m0_byteenable    (mm_bridge_0_m0_byteenable),          //      .byteenable
		.m0_debugaccess   (mm_bridge_0_m0_debugaccess),         //      .debugaccess
		.s0_response      (),                                   // (terminated)
		.m0_response      (2'b00)                               // (terminated)
	);

	system_trdb_d5m_0_cmos_sensor_acquisition_0_msgdma_0 msgdma_0 (
		.mm_write_address             (avalon_master_address),                                   //         mm_write.address
		.mm_write_write               (avalon_master_write),                                     //                 .write
		.mm_write_byteenable          (avalon_master_byteenable),                                //                 .byteenable
		.mm_write_writedata           (avalon_master_writedata),                                 //                 .writedata
		.mm_write_waitrequest         (avalon_master_waitrequest),                               //                 .waitrequest
		.mm_write_burstcount          (avalon_master_burstcount),                                //                 .burstcount
		.clock_clk                    (clk_out_clk_clk),                                         //            clock.clk
		.reset_n_reset_n              (~rst_controller_001_reset_out_reset),                     //          reset_n.reset_n
		.csr_writedata                (mm_interconnect_0_msgdma_0_csr_writedata),                //              csr.writedata
		.csr_write                    (mm_interconnect_0_msgdma_0_csr_write),                    //                 .write
		.csr_byteenable               (mm_interconnect_0_msgdma_0_csr_byteenable),               //                 .byteenable
		.csr_readdata                 (mm_interconnect_0_msgdma_0_csr_readdata),                 //                 .readdata
		.csr_read                     (mm_interconnect_0_msgdma_0_csr_read),                     //                 .read
		.csr_address                  (mm_interconnect_0_msgdma_0_csr_address),                  //                 .address
		.descriptor_slave_write       (mm_interconnect_0_msgdma_0_descriptor_slave_write),       // descriptor_slave.write
		.descriptor_slave_waitrequest (mm_interconnect_0_msgdma_0_descriptor_slave_waitrequest), //                 .waitrequest
		.descriptor_slave_writedata   (mm_interconnect_0_msgdma_0_descriptor_slave_writedata),   //                 .writedata
		.descriptor_slave_byteenable  (mm_interconnect_0_msgdma_0_descriptor_slave_byteenable),  //                 .byteenable
		.csr_irq_irq                  (msgdma_csr_irq_irq),                                      //          csr_irq.irq
		.st_sink_data                 (dc_fifo_0_out_data),                                      //          st_sink.data
		.st_sink_valid                (dc_fifo_0_out_valid),                                     //                 .valid
		.st_sink_ready                (dc_fifo_0_out_ready)                                      //                 .ready
	);

	system_trdb_d5m_0_cmos_sensor_acquisition_0_mm_interconnect_0 mm_interconnect_0 (
		.clk_in_clk_clk                                        (clk_in_clk_clk),                                               //                                      clk_in_clk.clk
		.clk_out_clk_clk                                       (clk_out_clk_clk),                                              //                                     clk_out_clk.clk
		.cmos_sensor_input_0_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                               // cmos_sensor_input_0_reset_reset_bridge_in_reset.reset
		.mm_bridge_0_reset_reset_bridge_in_reset_reset         (rst_controller_001_reset_out_reset),                           //         mm_bridge_0_reset_reset_bridge_in_reset.reset
		.mm_bridge_0_m0_address                                (mm_bridge_0_m0_address),                                       //                                  mm_bridge_0_m0.address
		.mm_bridge_0_m0_waitrequest                            (mm_bridge_0_m0_waitrequest),                                   //                                                .waitrequest
		.mm_bridge_0_m0_burstcount                             (mm_bridge_0_m0_burstcount),                                    //                                                .burstcount
		.mm_bridge_0_m0_byteenable                             (mm_bridge_0_m0_byteenable),                                    //                                                .byteenable
		.mm_bridge_0_m0_read                                   (mm_bridge_0_m0_read),                                          //                                                .read
		.mm_bridge_0_m0_readdata                               (mm_bridge_0_m0_readdata),                                      //                                                .readdata
		.mm_bridge_0_m0_readdatavalid                          (mm_bridge_0_m0_readdatavalid),                                 //                                                .readdatavalid
		.mm_bridge_0_m0_write                                  (mm_bridge_0_m0_write),                                         //                                                .write
		.mm_bridge_0_m0_writedata                              (mm_bridge_0_m0_writedata),                                     //                                                .writedata
		.mm_bridge_0_m0_debugaccess                            (mm_bridge_0_m0_debugaccess),                                   //                                                .debugaccess
		.cmos_sensor_input_0_avalon_slave_address              (mm_interconnect_0_cmos_sensor_input_0_avalon_slave_address),   //                cmos_sensor_input_0_avalon_slave.address
		.cmos_sensor_input_0_avalon_slave_write                (mm_interconnect_0_cmos_sensor_input_0_avalon_slave_write),     //                                                .write
		.cmos_sensor_input_0_avalon_slave_read                 (mm_interconnect_0_cmos_sensor_input_0_avalon_slave_read),      //                                                .read
		.cmos_sensor_input_0_avalon_slave_readdata             (mm_interconnect_0_cmos_sensor_input_0_avalon_slave_readdata),  //                                                .readdata
		.cmos_sensor_input_0_avalon_slave_writedata            (mm_interconnect_0_cmos_sensor_input_0_avalon_slave_writedata), //                                                .writedata
		.msgdma_0_csr_address                                  (mm_interconnect_0_msgdma_0_csr_address),                       //                                    msgdma_0_csr.address
		.msgdma_0_csr_write                                    (mm_interconnect_0_msgdma_0_csr_write),                         //                                                .write
		.msgdma_0_csr_read                                     (mm_interconnect_0_msgdma_0_csr_read),                          //                                                .read
		.msgdma_0_csr_readdata                                 (mm_interconnect_0_msgdma_0_csr_readdata),                      //                                                .readdata
		.msgdma_0_csr_writedata                                (mm_interconnect_0_msgdma_0_csr_writedata),                     //                                                .writedata
		.msgdma_0_csr_byteenable                               (mm_interconnect_0_msgdma_0_csr_byteenable),                    //                                                .byteenable
		.msgdma_0_descriptor_slave_write                       (mm_interconnect_0_msgdma_0_descriptor_slave_write),            //                       msgdma_0_descriptor_slave.write
		.msgdma_0_descriptor_slave_writedata                   (mm_interconnect_0_msgdma_0_descriptor_slave_writedata),        //                                                .writedata
		.msgdma_0_descriptor_slave_byteenable                  (mm_interconnect_0_msgdma_0_descriptor_slave_byteenable),       //                                                .byteenable
		.msgdma_0_descriptor_slave_waitrequest                 (mm_interconnect_0_msgdma_0_descriptor_slave_waitrequest)       //                                                .waitrequest
	);

	system_trdb_d5m_0_cmos_sensor_acquisition_0_avalon_st_adapter #(
		.inBitsPerSymbol (8),
		.inUsePackets    (0),
		.inDataWidth     (16),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (1),
		.outDataWidth    (32),
		.outChannelWidth (0),
		.outErrorWidth   (0),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_in_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (rst_controller_reset_out_reset),                    // in_rst_0.reset
		.in_0_data      (cmos_sensor_input_0_avalon_streaming_source_data),  //     in_0.data
		.in_0_valid     (cmos_sensor_input_0_avalon_streaming_source_valid), //         .valid
		.in_0_ready     (cmos_sensor_input_0_avalon_streaming_source_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready)                      //         .ready
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~clk_in_reset_reset_n),          // reset_in0.reset
		.clk            (clk_in_clk_clk),                 //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~clk_out_reset_reset_n),             // reset_in0.reset
		.clk            (clk_out_clk_clk),                    //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
